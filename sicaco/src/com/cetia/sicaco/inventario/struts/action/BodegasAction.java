/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.inventario.struts.action;

import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.hibernate.Transaction;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeFactory;
import org.jmesa.facade.TableFacadeImpl;
import org.jmesa.limit.ExportType;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.BasicCellEditor;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.html.HtmlBuilder;

import com.cetia.sicaco.hibernate.CtrPaiPaisDAO;
import com.cetia.sicaco.hibernate.CtrParParametros;
import com.cetia.sicaco.hibernate.CtrParParametrosDAO;
import com.cetia.sicaco.hibernate.InvArtArticulo;
import com.cetia.sicaco.hibernate.InvArtArticuloDAO;
import com.cetia.sicaco.hibernate.InvBodBodegas;
import com.cetia.sicaco.hibernate.InvBodBodegasDAO;
import com.cetia.sicaco.hibernate.InvCprCapacidadProducto;
import com.cetia.sicaco.hibernate.InvCprCapacidadProductoDAO;
import com.cetia.sicaco.hibernate.InvCprCapacidadProductoId;
import com.cetia.sicaco.hibernate.InvEboExistenciaBodega;
import com.cetia.sicaco.hibernate.InvEboExistenciaBodegaDAO;
import com.cetia.sicaco.hibernate.InvEboExistenciaBodegaId;
import com.cetia.sicaco.hibernate.InvPexProductosExistencia;
import com.cetia.sicaco.hibernate.InvPexProductosExistenciaDAO;
import com.cetia.sicaco.hibernate.SecSucSucursalDAO;
import com.cetia.sicaco.inventario.struts.form.BodegasForm;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;

/** 
 * MyEclipse Struts
 * Creation date: 04-01-2008
 * 
 * XDoclet definition:
 * @struts.action path="/bodegas" name="bodegasForm" input="redirectInvalidData" parameter="accion" scope="request" validate="true"
 * @struts.action-forward name="lista" path="pagina-lista.inventario.bodegas"
 */
public class BodegasAction extends DMLAction {
	/*
	 * Generated Methods
	 */

	public static final String TABLA_ID = "invProProveedor";
	private final static String METHOD_NAME = "methodName";
	private final static String BDG_ID = "bdgId";
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		BodegasForm bodegasForm = (BodegasForm)form;
		InvBodBodegasDAO bodegasDAO = new InvBodBodegasDAO(getSessionHibernate(request));
		//java.util.List lst = null;
		//lst  = bodegasDAO.findAll();
		CtrPaiPaisDAO paisDAO = new CtrPaiPaisDAO(getSessionHibernate(request));
		java.util.List lstP = paisDAO.findAll();
		request.setAttribute("pais", lstP);
		
		SecSucSucursalDAO sucursalDAO = new SecSucSucursalDAO(getSessionHibernate(request));
		List lsuc = sucursalDAO.findAllActive();
		request.setAttribute("lsuc", lsuc);
		
		/*TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);//, ExportType.PDF);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();*/
		
		/* MODIFICACIONES PARA PAGINACION */
		TableFacade tableFacade = TableFacadeFactory.createTableFacade(TABLA_ID, request);
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		int totalRows = bodegasDAO.getTotalRowCount();
		tableFacade.setTotalRows(totalRows);
		int rowStart = limit.getRowSelect().getRowStart();
		int rowEnd = limit.getRowSelect().getRowEnd();
		List lst = bodegasDAO.findAll(rowStart, rowEnd);
		tableFacade.setItems(lst);
		/*FIN DE MODIFICACIONES PARA PAGINACION*/
		
		if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
		request.getSession().removeAttribute(BDG_ID);
		request.getSession().setAttribute(METHOD_NAME, "invalidSave");
		request.setAttribute("form", bodegasForm);
		request.setAttribute(Constantes.ACCION_KEY, "/bodegas");
        request.setAttribute("filtro", "0");
		return mapping.findForward("lista");
		 
	}
	
	//---- Funcion que genera el html de la tabla del jmesa
	private String html(final TableFacade tableFacade, final HttpServletRequest request) {
		tableFacade.setColumnProperties("bodNombre","secSucSucursal.sucNombre","ctrPaiPais.paiNombre",
				"bodEstado","bodId");
		Table table = tableFacade.getTable();
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.bodegas.caption");
		
		Row row = table.getRow();
		
		Column nombreColumna = row.getColumn("bodNombre");
		nombreColumna.setTitleKey("tbl.bodegas.bodNombre");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				InvBodBodegas bodegas = (InvBodBodegas)item;
				HtmlBuilder html = new HtmlBuilder();
				String link = tableFacade.getWebContext().getContextPath();
				link += "/inventario/bodegas.do?bodId="+bodegas.getBodId().toString()+"&accion=edit";
				html.a().href().quote().append(link).quote().close();
				html.append(value);
				html.aEnd();
				return html.toString();
			}
		});
				
		nombreColumna = row.getColumn("bodEstado");
		nombreColumna.setTitleKey("tbl.bodegas.bodEstado");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){
			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				InvBodBodegas bodegas = (InvBodBodegas) item;
				HtmlBuilder html = new HtmlBuilder();
				if(bodegas.getBodEstado().equals("A")){
					value = "Activa";
				}else{
					if(bodegas.getBodEstado().equals("I")){
						value = "Inactiva";
					}else{
						value = "Llena";
					}
				}
				html.append(value);
				return html.toString();
			}
		});
		
		nombreColumna = row.getColumn("secSucSucursal.sucNombre");
		nombreColumna.setTitleKey("tbl.bodegas.sucNombre");
		
		nombreColumna = row.getColumn("ctrPaiPais.paiNombre");
		nombreColumna.setTitleKey("tbl.bodegas.ctrPaiPais.paiNombre");
		
		nombreColumna = row.getColumn("bodId");
		nombreColumna.setTitleKey("tbl.bodegas.bodId");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				InvBodBodegas bodegas = (InvBodBodegas)item;
				value = "Existencias";
				HtmlBuilder html = new HtmlBuilder();
				String link = tableFacade.getWebContext().getContextPath();
				link += "/inventario/artBodega.do?bodega="+ bodegas.getBodId().toString()+"&accion=exist";
				html.a().href().quote().append(link).quote().append("class=\"linkExistencia\"").title(value.toString()).close();
			//	html.append(value);
				html.aEnd();
				return html.toString();
			}
		});
		
		return tableFacade.render();
	}
	
	//---- Funcion que genera los exports, el formato que tendran
	 private void export(final TableFacade tableFacade) {
		 tableFacade.setColumnProperties("bodNombre","ctrPaiPais.paiNombre",
					"bodEstado");
			Table table = tableFacade.getTable();
			//---- Titulo de la tabla
			table.setCaptionKey("tbl.bodegas.caption");
			
			Row row = table.getRow();
			
			Column nombreColumna = row.getColumn("bodNombre");
			nombreColumna.setTitleKey("tbl.bodegas.bodNombre");
					
			nombreColumna = row.getColumn("bodEstado");
			nombreColumna.setTitleKey("tbl.bodegas.bodEstado");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){
				public Object getValue(Object item, String property, int rowcount) {
					Object value = new BasicCellEditor().getValue(item, property, rowcount);
					InvBodBodegas bodegas = (InvBodBodegas) item;
					HtmlBuilder html = new HtmlBuilder();
					if(bodegas.getBodEstado().equals("A")){
						value = "Activa";
					}else{
						if(bodegas.getBodEstado().equals("I")){
							value = "Inactiva";
						}else{
							value = "Llena";
						}
					}
					html.append(value);
					return html.toString();
				}
			});
			
			nombreColumna = row.getColumn("ctrPaiPais.paiNombre");
			nombreColumna.setTitleKey("tbl.bodegas.ctrPaiPais.paiNombre.x");
			
		tableFacade.render();
	}
	 
	public ActionForward guardar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		BodegasForm bodegasForm = (BodegasForm)form;
		InvBodBodegasDAO bodegasDAO = new InvBodBodegasDAO(getSessionHibernate(request));
		Transaction tx = bodegasDAO.getSession().beginTransaction();
		if(bodegasDAO.findByNombreSucursal(bodegasForm.getBodNombre(), bodegasForm.getSecSucSucursal().getSucId()).isEmpty()){
		try {
			bodegasDAO.save(bodegasForm.getBodegasH());
			tx.commit();
			InvCprCapacidadProductoDAO capacidadProductoDAO = new InvCprCapacidadProductoDAO(getSessionHibernate(request));
			InvArtArticuloDAO articuloDAO = new InvArtArticuloDAO(getSessionHibernate(request));
			InvBodBodegas bodegas = bodegasDAO.findById(bodegasForm.getBodegasH().getBodId());
			CtrParParametrosDAO parametrosDAO = new CtrParParametrosDAO(getSessionHibernate(request));
			CtrParParametros parCantMin = parametrosDAO.findById("MIN_CAPACIDAD_PRODUCTO");
			CtrParParametros parCantMax = parametrosDAO.findById("MAX_CAPACIDAD_PRODUCTO");
			List lart = articuloDAO.findAll();
			for (Iterator iterator = lart.iterator(); iterator.hasNext();) {
				InvArtArticulo articulo = (InvArtArticulo) iterator.next();
				InvCprCapacidadProductoId capacidadProductoId = new InvCprCapacidadProductoId();
				capacidadProductoId.setInvArtArticulo(articulo);
				capacidadProductoId.setInvBodBodegas(bodegas);
				InvCprCapacidadProducto capacidadProducto = new InvCprCapacidadProducto();
				capacidadProducto.setId(capacidadProductoId);
				capacidadProducto.setCprCantidadMinima(parCantMin.getParValorNumber().intValue());
				capacidadProducto.setCprCantidadMaxima(parCantMax.getParValorNumber().intValue());
				capacidadProducto.setAudFechaCreacion(new Date());
				capacidadProducto.setAudFechaModificacion(new Date());
				capacidadProducto.setAudUsuarioCreacion(bodegasForm.getUsuarioConectado().getNombreUsuario());
				capacidadProducto.setAudUsuarioModificacion(bodegasForm.getUsuarioConectado().getNombreUsuario());
				capacidadProductoDAO.save(capacidadProducto);
				tx.commit();
				
				InvEboExistenciaBodegaDAO existenciaBodegaDAO = new InvEboExistenciaBodegaDAO(getSessionHibernate(request));
				InvEboExistenciaBodega existenciaBodega = new InvEboExistenciaBodega();
				InvEboExistenciaBodegaId eboId = new InvEboExistenciaBodegaId();
				eboId.setInvBodBodegas(bodegas);
				InvPexProductosExistenciaDAO productosExistenciaDAO = new InvPexProductosExistenciaDAO(getSessionHibernate(request));
				InvPexProductosExistencia productosExistencia = (InvPexProductosExistencia) productosExistenciaDAO.findByArticulo(articulo.getArtCodigo()).get(0);
				eboId.setInvPexProductosExistencia(productosExistencia);
				existenciaBodega.setId(eboId);
				existenciaBodega.setAudFechaCreacion(new Date());
				existenciaBodega.setAudFechaModificacion(new Date());
				existenciaBodega.setAudUsuarioCreacion(bodegasForm.getUsuarioConectado().getNombreUsuario());
				existenciaBodega.setAudUsuarioModificacion(bodegasForm.getUsuarioConectado().getNombreUsuario());
				existenciaBodega.setEboCantidadProducto(0);
				existenciaBodega.setEboSaldo(0.0);
				existenciaBodegaDAO.save(existenciaBodega);
				tx.commit();
				mensajes("msg.bodegas.guardarExitoso", request);
			}
		} catch (Exception e) {
			// TODO: handle exception
			tx.rollback();
			e.printStackTrace();
		}finally{
			bodegasDAO.getSession().flush();
			bodegasDAO.getSession().clear();
			
		}
		}else{
			mensajes("msg.bodegas.errorRepetido", request);
		}
		
		return lista(mapping,form,request,response);
	}

	public ActionForward salvar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ActionForward target = null;
		BodegasForm bodegasForm = (BodegasForm)form;
		InvBodBodegasDAO bodegasDAO = new InvBodBodegasDAO(getSessionHibernate(request));
		Transaction tx = bodegasDAO.getSession().beginTransaction();
		if(bodegasDAO.findByNombreSucursalId(bodegasForm.getBodId(),bodegasForm.getBodNombre(), bodegasForm.getSecSucSucursal().getSucId()).isEmpty()){
		try {
			bodegasDAO.merge(bodegasForm.getBodegasH());
			tx.commit();
			mensajes("msg.bodegas.salvarExitoso", request);
		} catch (Exception e) {
			// TODO: handle exception
			tx.rollback();
			e.printStackTrace();
		}finally{
			bodegasDAO.getSession().flush();
			bodegasDAO.getSession().clear();
			
			}
		target = lista(mapping,form,request,response);
		}
		else{
			mensajes("msg.bodegas.errorRepetido", request);
			target = editar(mapping, form, request, response);
		}
		return target;
	}
	
	public ActionForward eliminar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		BodegasForm bodegasForm = (BodegasForm)form;
		InvBodBodegasDAO bodegasDAO = new InvBodBodegasDAO(getSessionHibernate(request));
		try {
			InvBodBodegas bodegas = bodegasDAO.findById(bodegasForm.getBodId());
			InvEboExistenciaBodegaDAO eboDao = new InvEboExistenciaBodegaDAO(getSessionHibernate(request));
			List existencias = eboDao.findByBodega(bodegas.getBodId());
			for (Iterator iterator = existencias.iterator(); iterator.hasNext();) {
				InvEboExistenciaBodega ebo = (InvEboExistenciaBodega) iterator.next();
				if(ebo.getEboCantidadProducto() > 0){
					mensajes("error.bodegas.tieneExistencias", request);
					return lista(mapping, form, request, response);
				}
			}
			for (Iterator iterator = existencias.iterator(); iterator.hasNext();) {
				InvEboExistenciaBodega ebo = (InvEboExistenciaBodega) iterator.next();
				eboDao.delete(ebo);
			}
			Transaction tx = eboDao.getSession().beginTransaction();
			tx.commit();
			
			InvCprCapacidadProductoDAO cprDao = new InvCprCapacidadProductoDAO(getSessionHibernate(request));
			List cprList = cprDao.findByProperty("id.invBodBodegas.bodId", bodegas.getBodId());
			for (Iterator iterator = cprList.iterator(); iterator.hasNext();) {
				InvCprCapacidadProducto cpr = (InvCprCapacidadProducto) iterator.next();
				cprDao.delete(cpr);
			}
			Transaction tx2 = cprDao.getSession().beginTransaction();
			tx2.commit();
			
			bodegasDAO.delete(bodegas);
			Transaction tx3 = bodegasDAO.getSession().beginTransaction();
			tx3.commit();
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}finally{
			bodegasDAO.getSession().flush();
			bodegasDAO.getSession().clear();
			
			mensajes("msg.bodegas.eliminacionExitosa", request);
		}
		return lista(mapping,form,request,response);
	}
	
	public ActionForward editar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		BodegasForm bodegasForm = (BodegasForm)form;
		InvBodBodegasDAO bodegasDAO =  new InvBodBodegasDAO(getSessionHibernate(request));
		CtrPaiPaisDAO paisDAO = new CtrPaiPaisDAO(getSessionHibernate(request));
		bodegasForm.setBodegasH(bodegasDAO.findById(bodegasForm.getBodId()));
		java.util.List lstP = paisDAO.findAll();
		
		SecSucSucursalDAO sucursalDAO = new SecSucSucursalDAO(getSessionHibernate(request));
		List lsuc = sucursalDAO.findAllActive();
		request.setAttribute("lsuc", lsuc);
		
		request.getSession().setAttribute(METHOD_NAME, "invalidUpdate");
		request.getSession().setAttribute(BDG_ID, bodegasForm.getBodId());
		request.setAttribute("form", bodegasForm);
		request.setAttribute("pais", lstP);
		request.setAttribute(Constantes.ACCION_KEY, "/bodegas");
        request.setAttribute("filtro", "1");
		return mapping.findForward("dml");
	}
	
		
	public ActionForward cancelar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		return lista(mapping, form, request, response);
	}
	
	public ActionForward contactos(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		request.setAttribute(Constantes.ACCION_KEY,"/contactoProveedor");
		return mapping.findForward("contactos");
	}
	
	public ActionForward account(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		request.setAttribute(Constantes.ACCION_KEY,"/contactoProveedor");
		return mapping.findForward("account");
	}
	
	public ActionForward redirectInvalidData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		ActionErrors errors = (ActionErrors)request.getSession().getAttribute(Constantes.ERRORS);
		BodegasForm bodegasForm = (BodegasForm)form;
		InvBodBodegasDAO bodegasDAO = new InvBodBodegasDAO(getSessionHibernate(request));
		
		//request.getSession().removeAttribute("id");
		String methodName = (String)request.getSession().getAttribute(METHOD_NAME);
		if(methodName!= null){
			if(methodName.equals("invalidSave")){
				SecSucSucursalDAO sucursalDAO = new SecSucSucursalDAO(getSessionHibernate(request));
				List lsuc = sucursalDAO.findAllActive();
				request.setAttribute("lsuc", lsuc);
				List lst = null;
				lst  = bodegasDAO.findAll();
				CtrPaiPaisDAO paisDAO = new CtrPaiPaisDAO(getSessionHibernate(request));
				List lstP = paisDAO.findAll();
				request.setAttribute("pais", lstP);
				TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
				tableFacade.setItems(lst);
				//---- Genera los tipos de formas con que se podran exportar los datos
				tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);//, ExportType.PDF);
				tableFacade.setStateAttr("restore");
				Limit limit = tableFacade.getLimit();
				if (limit.isExported()) {
		        	//---- exporta la tabla
		            export(tableFacade);
		            return null; 
		        } else {
		        	//---- genera el html de la tabla para ser mostrada
		            String html = html(tableFacade, request);
		            request.setAttribute(Constantes.LISTA_KEY, html);
		        }
		        //----- Variables de configuracion
				request.getSession().removeAttribute(BDG_ID);
				request.setAttribute("form", bodegasForm);
				request.setAttribute(Constantes.ACCION_KEY, "/bodegas");
		        request.setAttribute("filtro", "0");
		        saveMessages(request, errors);
				return mapping.findForward("lista");
			}
			if(methodName.equals("invalidUpdate")){
				bodegasForm.setBodegasH(bodegasDAO.findById((Integer) request.getSession().getAttribute(BDG_ID)));
				CtrPaiPaisDAO paisDAO = new CtrPaiPaisDAO(getSessionHibernate(request));
				//bodegasForm.setBodegasH(bodegasDAO.findById(bodegasForm.getBodId()));
				java.util.List lstP = paisDAO.findAll();
				request.setAttribute("form", bodegasForm);
				request.setAttribute("pais", lstP);
				request.setAttribute(Constantes.ACCION_KEY, "/bodegas");
		        request.setAttribute("filtro", "1");
				saveMessages(request, errors);
				return mapping.findForward("dml");
			}
		}
		return lista(mapping, form, request, response);
	}
	
	public void mensajes(String msg, HttpServletRequest request){
		ActionErrors errors = new ActionErrors();
		errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(msg));
		saveMessages(request, errors);
	}
	
	
	protected Map getKeyMethodMap() {
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.bodegas.lista", "lista");
		map.put("cmd.bodegas.guardar", "guardar");
		map.put("cmd.bodegas.eliminar", "eliminar");
		map.put("cmd.bodegas.salvar", "salvar");
		map.put("cmd.bodegas.editar", "editar");
		map.put("cmd.bodegas.cancelar", "cancelar");
		map.put("cmd.bodegas.redirectInvalidData","redirectInvalidData");
		map.put("cmd.contactoProveedor.lista", "contactos");
		map.put("cmd.pCuentaBancaria.lista", "account");
		return map;
	}
}