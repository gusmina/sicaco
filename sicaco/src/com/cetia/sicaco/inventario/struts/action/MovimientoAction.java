/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.inventario.struts.action;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.hibernate.Transaction;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeFactory;
import org.jmesa.facade.TableFacadeImpl;
import org.jmesa.limit.ExportType;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.BasicCellEditor;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.editor.DateCellEditor;

import com.cetia.sicaco.hibernate.InvLinLineaDAO;
import com.cetia.sicaco.hibernate.InvMovMovimientos;
import com.cetia.sicaco.hibernate.InvMovMovimientosDAO;
import com.cetia.sicaco.inventario.struts.form.MovimientoForm;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;
import com.mad.utilidades.Format;

/** 
 * MyEclipse Struts
 * Creation date: 05-29-2008
 * 
 * XDoclet definition:
 * @struts.action path="/movimiento" name="movimientoForm" input="redirectInvalidData" parameter="accion" scope="request" validate="true"
 * @struts.action-forward name="lista" path="pagina-lista.inventario.movimiento"
 */
public class MovimientoAction extends DMLAction {
	/*
	 * Generated Methods
	 */

	public static final String TABLA_ID = "invMovMovimientos";
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		MovimientoForm movimientoForm = (MovimientoForm)form;
		InvMovMovimientosDAO movimientosDAO = new InvMovMovimientosDAO(getSessionHibernate(request));
		
		/* MODIFICACIONES PARA PAGINACION */
		TableFacade tableFacade = TableFacadeFactory.createTableFacade(TABLA_ID, request);
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		int totalRows = movimientosDAO.getTotalRowCountByArtBod(movimientoForm.getArtCod(), movimientoForm.getBodega());
		tableFacade.setTotalRows(totalRows);
		int rowStart = limit.getRowSelect().getRowStart();
		int rowEnd = limit.getRowSelect().getRowEnd();
		List lst = movimientosDAO.findByArtBod(movimientoForm.getArtCod(), movimientoForm.getBodega(),rowStart, rowEnd);
		tableFacade.setItems(lst);
		/* FIN DE MODIFICACIONES PARA PAGINACION */
		
		/*List lst  = movimientosDAO.findByArtBod(movimientoForm.getArtCod(), movimientoForm.getBodega());
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);//, ExportType.PDF);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();*/
		if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
		request.setAttribute("form", movimientoForm);
		request.setAttribute(Constantes.ACCION_KEY, "/movimiento");
        request.setAttribute("filtro", "0");
		return mapping.findForward("lista");
		 
	}
	
	//---- Funcion que genera el html de la tabla del jmesa
	private String html(final TableFacade tableFacade, final HttpServletRequest request) {
		tableFacade.setColumnProperties("audFechaCreacion", "movUnidades", "movValor",
				"invTmoTipoMovimiento.nombre");
		Table table = tableFacade.getTable();
		
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.abo.caption");
		
		Row row = table.getRow();
		Column nombreColumna = row.getColumn("audFechaCreacion");
		nombreColumna.setTitleKey("tbl.mov.audFechaCreacion");
		nombreColumna.getCellRenderer().setCellEditor(new DateCellEditor("dd-MMM-yyyy HH:mm"));

		nombreColumna = row.getColumn("movUnidades");
		nombreColumna.setTitleKey("tbl.mov.movUnidades");
		
		nombreColumna = row.getColumn("movValor");
		nombreColumna.setTitleKey("tbl.mov.movValor");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {
			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property,
						rowcount);
				InvMovMovimientos movimientos = (InvMovMovimientos) item;
				
				value = "<div align=\"right\">"+Format.formatDinero(movimientos.getMovValor())+"</div>";
				return value;
			}
		});
		
		nombreColumna = row.getColumn("invTmoTipoMovimiento.nombre");
		nombreColumna.setTitleKey("tbl.mov.invTmoTipoMovimiento.nombre");

		return tableFacade.render();
	}
	
	//---- Funcion que genera los exports, el formato que tendran
	 private void export(final TableFacade tableFacade) {
		 tableFacade.setColumnProperties("audFechaCreacion", "movUnidades", "movValor",
			"invTmoTipoMovimiento.nombre");
		Table table = tableFacade.getTable();
		
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.abo.caption");
		
		Row row = table.getRow();
		Column nombreColumna = row.getColumn("audFechaCreacion");
		nombreColumna.setTitleKey("tbl.mov.audFechaCreacion");
		nombreColumna.getCellRenderer().setCellEditor(new DateCellEditor("dd-MMM-yyyy HH:mm"));
	
		nombreColumna = row.getColumn("movUnidades");
		nombreColumna.setTitleKey("tbl.mov.movUnidades");
		
		nombreColumna = row.getColumn("movValor");
		nombreColumna.setTitleKey("tbl.mov.movValor");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {
			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property,
						rowcount);
				InvMovMovimientos movimientos = (InvMovMovimientos) item;
				
				value = Format.formatDinero(movimientos.getMovValor());
				return value;
			}
		});
		
		nombreColumna = row.getColumn("invTmoTipoMovimiento.nombre");
		nombreColumna.setTitleKey("tbl.mov.invTmoTipoMovimiento.nombre");

		tableFacade.render();
	}
	 
	 public ActionForward buscar(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {
			MovimientoForm movimientoForm = (MovimientoForm)form;
			InvMovMovimientosDAO movimientosDAO = new InvMovMovimientosDAO(getSessionHibernate(request));
			List lst  = movimientosDAO.findByArtBodDate(movimientoForm.getArtCod(), movimientoForm.getBodega(),
					movimientoForm.getFechaIni(), movimientoForm.getFechaFin());
			TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
			tableFacade.setItems(lst);
			//---- Genera los tipos de formas con que se podran exportar los datos
			tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);//, ExportType.PDF);
			tableFacade.setStateAttr("restore");
			Limit limit = tableFacade.getLimit();
			if (limit.isExported()) {
	        	//---- exporta la tabla
	            export(tableFacade);
	            return null; 
	        } else {
	        	//---- genera el html de la tabla para ser mostrada
	            String html = html(tableFacade, request);
	            request.setAttribute(Constantes.LISTA_KEY, html);
	        }
	        //----- Variables de configuracion
			request.setAttribute("form", movimientoForm);
			request.setAttribute(Constantes.ACCION_KEY, "/movimiento");
	        request.setAttribute("filtro", "0");
			return mapping.findForward("lista");
			 
		}

	public ActionForward redirectInvalidData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		ActionErrors errors = (ActionErrors)request.getSession().getAttribute(Constantes.ERRORS);
		InvLinLineaDAO lineaDAO = new InvLinLineaDAO(getSessionHibernate(request));
		List lst = null;
		Transaction tx = lineaDAO.getSession().beginTransaction();
		lst  = lineaDAO.findAll();
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);//, ExportType.PDF);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
		request.setAttribute(Constantes.ACCION_KEY, "/movimiento");
        request.setAttribute("filtro", "1");
		saveMessages(request, errors);
		return mapping.findForward("lista");
	}
	
	public ActionForward regresar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		return mapping.findForward("redirectBodega");
	}
	
	
	protected Map getKeyMethodMap() {
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.mov.lista", "lista");
		map.put("cmd.mov.buscar", "buscar");
		map.put("cmd.asc.anular", "anular");
		map.put("cmd.asc.redirectInvalidData", "redirectInvalidData");
		map.put("cmd.mov.return","regresar");
		return map;
	}
}