/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.inventario.struts.action;

import java.io.IOException;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.hibernate.Transaction;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeFactory;
import org.jmesa.facade.TableFacadeImpl;
import org.jmesa.limit.ExportType;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.BasicCellEditor;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.html.HtmlBuilder;

import com.cetia.sicaco.hibernate.CtrParParametros;
import com.cetia.sicaco.hibernate.CtrParParametrosDAO;
import com.cetia.sicaco.hibernate.InvArtArticulo;
import com.cetia.sicaco.hibernate.InvArtArticuloDAO;
import com.cetia.sicaco.hibernate.InvBodBodegas;
import com.cetia.sicaco.hibernate.InvBodBodegasDAO;
import com.cetia.sicaco.hibernate.InvCprCapacidadProducto;
import com.cetia.sicaco.hibernate.InvCprCapacidadProductoDAO;
import com.cetia.sicaco.hibernate.InvCprCapacidadProductoId;
import com.cetia.sicaco.hibernate.InvEboExistenciaBodega;
import com.cetia.sicaco.hibernate.InvEboExistenciaBodegaDAO;
import com.cetia.sicaco.hibernate.InvEboExistenciaBodegaId;
import com.cetia.sicaco.hibernate.InvLinLinea;
import com.cetia.sicaco.hibernate.InvLinLineaDAO;
import com.cetia.sicaco.hibernate.InvMedMedidaDAO;
import com.cetia.sicaco.hibernate.InvPexProductosExistencia;
import com.cetia.sicaco.hibernate.InvPexProductosExistenciaDAO;
import com.cetia.sicaco.hibernate.InvSmeSaldoMensual;
import com.cetia.sicaco.hibernate.InvSmeSaldoMensualDAO;
import com.cetia.sicaco.hibernate.InvTarTipoArticuloDAO;
import com.cetia.sicaco.hibernate.SecIseInicioSesion;
import com.cetia.sicaco.hibernate.SecIseInicioSesionDAO;
import com.cetia.sicaco.inventario.struts.form.ArticuloForm;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;
import com.mad.utilidades.Format;
import com.mad.utilidades.Redondeo;

/** 
 * MyEclipse Struts
 * Creation date: 04-18-2008
 * 
 * XDoclet definition:
 * @struts.action path="/articulo" name="articuloForm" input="redirectInvalidData" parameter="accion" scope="request" validate="true"
 * @struts.action-forward name="lista" path="pagina-lista.inventario.articulo"
 * @struts.action-forward name="redirectInvalidData" path="articulo.do?accion=redirectInvalidData"
 * @struts.action-forward name="dml" path="pagina-dml.inventario.articulo"
 */
public class ArticuloAction extends DMLAction {
	/*
	 * Generated Methods
	 */

	public static final String TABLA_ID = "invArtArticulo";
	private final static String METHOD_NAME = "methodName";
	private final static String BDG_ID = "bdgId";
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ArticuloForm articuloForm = (ArticuloForm)form;
		InvArtArticuloDAO articuloDAO = new InvArtArticuloDAO(getSessionHibernate(request));

/*		List lst = null;
		lst  = articuloDAO.findAll();
*/		
		InvTarTipoArticuloDAO tipoArticuloDAO = new InvTarTipoArticuloDAO(getSessionHibernate(request));
		InvLinLineaDAO lineaDAO = new InvLinLineaDAO(getSessionHibernate(request));
		InvMedMedidaDAO medidaDAO = new InvMedMedidaDAO(getSessionHibernate(request));
		
		List lstTA = tipoArticuloDAO.findAll();
		List lstL = lineaDAO.findAll();
		List lstM = medidaDAO.findAll();
		
		request.setAttribute("tipoArt", lstTA);
		request.setAttribute("linea", lstL);
		request.setAttribute("medida", lstM);

		/*TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);//, ExportType.PDF);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();*/
		
		/* MODIFICACIONES PARA PAGINACIÃ“N*/
		TableFacade tableFacade = TableFacadeFactory.createTableFacade(TABLA_ID, request);
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		int totalRows = articuloDAO.getTotalRowCount();
		tableFacade.setTotalRows(totalRows);
		int rowStart = limit.getRowSelect().getRowStart();
		int rowEnd = limit.getRowSelect().getRowEnd();
		List lst = articuloDAO.findAll(rowStart, rowEnd);
		tableFacade.setItems(lst);
		
		/* FIN DE MODIFICACIONES PARA PAGINACION*/
		if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
		request.getSession().removeAttribute(BDG_ID);
		request.getSession().setAttribute(METHOD_NAME, "invalidSave");
		request.setAttribute("form", articuloForm);
		request.setAttribute(Constantes.ACCION_KEY, "/articulo");
        request.setAttribute("filtro", "0");
		return mapping.findForward("lista");
		 
	}
	
	//---- Funcion que genera el html de la tabla del jmesa
	private String html(final TableFacade tableFacade, final HttpServletRequest request) {
		tableFacade.setColumnProperties("artCodigo","artNombre","artPorcentajeUtilidad",
				"artPrecioSugerido","artPrecioMinimo","artExcentoIva","audFechaCreacion");
		
		Table table = tableFacade.getTable();
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.articulo.caption");
		
		Row row = table.getRow();
		
		Column nombreColumna = row.getColumn("artCodigo");
		nombreColumna.setTitleKey("tbl.articulo.artCodigo");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				InvArtArticulo articulo = (InvArtArticulo)item;
				HtmlBuilder html = new HtmlBuilder();
				String link = tableFacade.getWebContext().getContextPath();
				link += "/inventario/articulo.do?artCodigo="+articulo.getArtCodigo().toString()+"&accion=edit";
				html.a().href().quote().append(link).quote().close();
				html.append(value);
				html.aEnd();
				return html.toString();
			}
		});
				
		nombreColumna = row.getColumn("artNombre");
		nombreColumna.setTitleKey("tbl.articulo.artNombre");
		
		nombreColumna = row.getColumn("artPorcentajeUtilidad");
		nombreColumna.setTitleKey("tbl.articulo.artPorcentajeUtilidad");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				InvArtArticulo articulo = (InvArtArticulo)item;
				value = articulo.getArtPorcentajeUtilidad() + "%";
				return value;
			}
		});
		
		nombreColumna = row.getColumn("artPrecioSugerido");
		nombreColumna.setTitleKey("tbl.articulo.artPrecioSugerido");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				Format formato = new Format();
				
				double num = new Double(value.toString());
				value = formato.formatDinero(num);
				InvArtArticulo articulo = (InvArtArticulo)item;
				HtmlBuilder html = new HtmlBuilder();
				String link = tableFacade.getWebContext().getContextPath();
				link += "/inventario/articulo.do?artCodigo="+articulo.getArtCodigo().toString()+"&accion=edit2";
				html.a().href().quote().append(link).quote().close();
				html.append(value);
				html.aEnd();
				return html.toString();
			}
		});
		
		nombreColumna = row.getColumn("artPrecioMinimo");
		nombreColumna.setTitleKey("tbl.articulo.artPrecioMinimo");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				Format formato = new Format();
				
				double num = new Double(value.toString());
				value = formato.formatDinero(num);
				
				return value;
			}
		});
		nombreColumna = row.getColumn("artExcentoIva");
		nombreColumna.setTitleKey("tbl.articulo.artExcentoIva");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				InvArtArticulo articulo = (InvArtArticulo)item;
				if(articulo.getArtExcentoIva() == 0){
					value = "No";
				}else{
					value = "Si";
				}
				return value;
			}
		});
		
		nombreColumna = row.getColumn("audFechaCreacion");
		nombreColumna.setTitleKey("tbl.articulo.audFechaCreacion");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				InvArtArticulo articulo = (InvArtArticulo)item;
				String capacidad="capacidad";
				HtmlBuilder html = new HtmlBuilder();
				String link = tableFacade.getWebContext().getContextPath();
				link += "/inventario/articulo.do?artCodigo="+articulo.getArtCodigo().toString()+"&accion=capacity";
				html.a().href().quote().append(link).quote().append("class=\"linkCapacidad\"").title(capacidad).close();
		/*		html.a().href().quote().append(link).quote().close();
				html.append(capacidad);*/
				html.aEnd();
				return html.toString();
			}
		});
		
		return tableFacade.render();
	}
	
	//---- Funcion que genera los exports, el formato que tendran
	 private void export(final TableFacade tableFacade) {
		 tableFacade.setColumnProperties("artCodigo","artNombre","artPorcentajeUtilidad",
					"artPrecioSugerido","artPrecioMinimo","artExcentoIva");
			
			Table table = tableFacade.getTable();
			//---- Titulo de la tabla
			table.setCaptionKey("tbl.articulo.caption");
			
			Row row = table.getRow();
			
			Column nombreColumna = row.getColumn("artCodigo");
			nombreColumna.setTitleKey("tbl.articulo.artCodigo.x");
					
			nombreColumna = row.getColumn("artNombre");
			nombreColumna.setTitleKey("tbl.articulo.artNombre");
			
			nombreColumna = row.getColumn("artPorcentajeUtilidad");
			nombreColumna.setTitleKey("tbl.articulo.artPorcentajeUtilidad");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

				public Object getValue(Object item, String property, int rowcount) {
					Object value = new BasicCellEditor().getValue(item, property, rowcount);
					InvArtArticulo articulo = (InvArtArticulo)item;
					value = articulo.getArtPorcentajeUtilidad() + "%";
					return value;
				}
			});
			
			nombreColumna = row.getColumn("artPrecioSugerido");
			nombreColumna.setTitleKey("tbl.articulo.artPrecioSugerido");
			
			nombreColumna = row.getColumn("artPrecioMinimo");
			nombreColumna.setTitleKey("tbl.articulo.artPrecioMinimo");
			
			nombreColumna = row.getColumn("artExcentoIva");
			nombreColumna.setTitleKey("tbl.articulo.artExcentoIva");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

				public Object getValue(Object item, String property, int rowcount) {
					Object value = new BasicCellEditor().getValue(item, property, rowcount);
					InvArtArticulo articulo = (InvArtArticulo)item;
					if(articulo.getArtExcentoIva() == 0){
						value = "No";
					}else{
						value = "Si";
					}
					return value;
				}
			});
			
		tableFacade.render();
	}
	 
	public ActionForward guardar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ArticuloForm  articuloForm= (ArticuloForm)form;
		InvArtArticuloDAO articuloDAO = new InvArtArticuloDAO(getSessionHibernate(request));
		Transaction tx = articuloDAO.getSession().beginTransaction();

		if(articuloDAO.findByArtNombre(articuloForm.getArtNombre()).size() > 0){
			String fwd = mensajes("errors.articulo.nombreRepetido", articuloForm, request, response);
			return mapping.findForward(fwd);
		}
		
		articuloForm.getArticuloH().setArtPrecioSugerido(0.0);
		
		if(articuloForm.getInvLinLinea().getLinId() < 1){
			String fwd = mensajes("errors.articulo.zero", articuloForm, request, response);
			return mapping.findForward(fwd);
		}
		InvLinLineaDAO lineaDAO = new InvLinLineaDAO(getSessionHibernate(request));
		InvLinLinea linea = lineaDAO.findById(articuloForm.getInvLinLinea().getLinId());
		
		articuloForm.setArtPorcentajeUtilidad(linea.getLinUtilidad());
		articuloForm.setArtPrecioSugerido(articuloForm.getArtPrecioMinimo() * (1+ (articuloForm.getArtPorcentajeUtilidad()/100)));
		if(articuloForm.getArtPrecioMinimo() < 0){
			String fwd = mensajes("errors.articulo.minZero", articuloForm, request, response);
			return mapping.findForward(fwd);
		}
		
		articuloForm.setArtCodigo(linea.getLinCodigo().concat(articuloDAO.nextId(linea.getLinCodigo())));
		if(articuloDAO.findByArtCodigo(articuloForm.getArtCodigo()).size() > 0){
			String fwd = mensajes("errors.articulo.repetido", articuloForm, request, response);
			return mapping.findForward(fwd);
		}
		articuloDAO.save(articuloForm.getArticuloH());
		tx.commit();

		CtrParParametrosDAO parametrosDAO = new CtrParParametrosDAO(getSessionHibernate(request));

		InvCprCapacidadProductoDAO capacidadDAO = new InvCprCapacidadProductoDAO(getSessionHibernate(request));
		InvCprCapacidadProductoId capacidadId = new InvCprCapacidadProductoId();
		capacidadId.setInvArtArticulo(articuloDAO.findById(articuloForm.getArtCodigo()));
		InvBodBodegasDAO bodegasDAO = new InvBodBodegasDAO(getSessionHibernate(request));
		
		InvArtArticulo articulo = capacidadId.getInvArtArticulo();
		InvSmeSaldoMensualDAO saldoMensualDAO = new InvSmeSaldoMensualDAO(getSessionHibernate(request));
		InvSmeSaldoMensual saldoMensual = new InvSmeSaldoMensual();
		saldoMensual.setInvArtArticulo(articulo);
		saldoMensual.setSmeCantidad(0.0);
		saldoMensual.setSmeFecha(new Date());
		saldoMensual.setSmeSaldo(0.0);
		saldoMensual.setSmeCostoArt(0.0);
		saldoMensualDAO.save(saldoMensual);
		tx.commit();
		
		Transaction txc = capacidadDAO.getSession().beginTransaction();
		for (Iterator iterator = bodegasDAO.findAll().iterator(); iterator.hasNext();) {
			InvBodBodegas bodegas = (InvBodBodegas) iterator.next();
			capacidadId.setInvBodBodegas(bodegas);
			InvCprCapacidadProducto capacidadProducto = new InvCprCapacidadProducto();
			capacidadProducto.setId(capacidadId);
			CtrParParametros parametros2 = parametrosDAO.findById("MAX_CAPACIDAD_PRODUCTO");
			capacidadProducto.setCprCantidadMaxima(parametros2.getParValorNumber().intValue());
			CtrParParametros parametros3 = parametrosDAO.findById("MIN_CAPACIDAD_PRODUCTO");
			capacidadProducto.setCprCantidadMinima(parametros3.getParValorNumber().intValue());
			capacidadProducto.setAudFechaCreacion(new Date());
			capacidadProducto.setAudFechaModificacion(new Date());
			capacidadProducto.setAudUsuarioCreacion(articuloForm.getUsuarioConectado().getNombreUsuario());
			capacidadProducto.setAudUsuarioModificacion(articuloForm.getUsuarioConectado().getNombreUsuario());
			capacidadDAO.save(capacidadProducto);
			txc.commit();
		}
		InvPexProductosExistenciaDAO existenciaDAO = new InvPexProductosExistenciaDAO(getSessionHibernate(request));
		Transaction txe = existenciaDAO.getSession().beginTransaction();

		InvPexProductosExistencia existencia = new InvPexProductosExistencia();
		existencia.setArtCodigo(articuloForm.getArtCodigo());
		existencia.setInvArtArticulo(articuloDAO.findById(articuloForm.getArtCodigo()));
		existencia.setPexCantidadProducto(0);
		existencia.setPexCostoProducto(articuloForm.getArtPrecioMinimo());
		existencia.setPexSaldo(0.0);
		existencia.setAudFechaCreacion(new Date());
		existencia.setAudFechaModificacion(new Date());
		existencia.setAudUsuarioCreacion(articuloForm.getUsuarioConectado().getNombreUsuario());
		existencia.setAudUsuarioModificacion(articuloForm.getUsuarioConectado().getNombreUsuario());
		existenciaDAO.save(existencia);
		txe.commit();

		InvEboExistenciaBodegaDAO eboDAO = new InvEboExistenciaBodegaDAO(getSessionHibernate(request));
		InvEboExistenciaBodegaId eboId = new InvEboExistenciaBodegaId();
		eboId.setInvPexProductosExistencia(existenciaDAO.findById(articuloForm.getArtCodigo()));
		InvBodBodegasDAO bodDAO = new InvBodBodegasDAO(getSessionHibernate(request));
		Transaction txebo = eboDAO.getSession().beginTransaction();
		for (Iterator iterator = bodegasDAO.findAll().iterator(); iterator.hasNext();) {
			InvBodBodegas bodegas = (InvBodBodegas) iterator.next();
			eboId.setInvBodBodegas(bodegas);
			InvEboExistenciaBodega eboExistenciaBodega = new InvEboExistenciaBodega();
			eboExistenciaBodega.setId(eboId);
			eboExistenciaBodega.setEboCantidadProducto(0);
			eboExistenciaBodega.setEboSaldo(0.0);
			eboExistenciaBodega.setAudFechaCreacion(new Date());
			eboExistenciaBodega.setAudFechaModificacion(new Date());
			eboExistenciaBodega.setAudUsuarioCreacion(articuloForm.getUsuarioConectado().getNombreUsuario());
			eboExistenciaBodega.setAudUsuarioModificacion(articuloForm.getUsuarioConectado().getNombreUsuario());
			eboDAO.save(eboExistenciaBodega);
			txebo.commit();
		}

		articuloDAO.getSession().flush();
		articuloDAO.getSession().clear();
		
		
		
		request.getSession().setAttribute("sessionArtCodigo", articuloForm.getArticuloH().getArtCodigo());
		return mapping.findForward("capacity2");
	}

	public ActionForward salvar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ArticuloForm  articuloForm= (ArticuloForm)form;
		InvArtArticuloDAO articuloDAO = new InvArtArticuloDAO(getSessionHibernate(request));
		Transaction tx = articuloDAO.getSession().beginTransaction();
		
		InvArtArticulo art = articuloDAO.findById(articuloForm.getArtCodigo());
		if(!articuloForm.getArtNombre().equals(art.getArtNombre())){
			if(articuloDAO.findByArtNombre(articuloForm.getArtNombre()).size()>0){
				String fwd = mensajes("errors.articulo.nombreRepetido", articuloForm, request, response);
				return mapping.findForward(fwd);
			}
		}
		
		if(articuloForm.getArtPrecioMinimo() < 0){
			String fwd = mensajes("errors.articulo.minZero", articuloForm, request, response);
			return mapping.findForward(fwd);
		}
		if(articuloForm.getArtPorcentajeUtilidad() < 0){
			String fwd = mensajes("errors.articulo.porcentaje", articuloForm, request, response);
			return mapping.findForward(fwd);
		}
		
		double minimo = articuloForm.getArtPrecioMinimo();
		double porcentaje = articuloForm.getArtPorcentajeUtilidad()/100;
		double sugerido = minimo * (1 + porcentaje);
		articuloForm.getArticuloH().setArtPrecioSugerido(sugerido);
		articuloDAO.merge(articuloForm.getArticuloH());
		tx.commit();

		InvPexProductosExistenciaDAO existenciaDAO = new InvPexProductosExistenciaDAO(getSessionHibernate(request));
		Transaction txe = existenciaDAO.getSession().beginTransaction();

		InvPexProductosExistencia existencia = existenciaDAO.findById(articuloForm.getArtCodigo());
		int cant = existencia.getPexCantidadProducto();
		existencia.setPexCostoProducto(articuloForm.getArtPrecioMinimo());
		existencia.setPexSaldo(cant * articuloForm.getArtPrecioMinimo());
		existencia.setAudFechaModificacion(new Date());
		existencia.setAudUsuarioModificacion(articuloForm.getUsuarioConectado().getNombreUsuario());
		existenciaDAO.merge(existencia);
		txe.commit();

		InvEboExistenciaBodegaDAO eboDAO = new InvEboExistenciaBodegaDAO(getSessionHibernate(request));
		InvEboExistenciaBodegaId eboId = new InvEboExistenciaBodegaId();
		eboId.setInvPexProductosExistencia(existenciaDAO.findById(articuloForm.getArtCodigo()));
		InvBodBodegasDAO bodDAO = new InvBodBodegasDAO(getSessionHibernate(request));
		Transaction txebo = eboDAO.getSession().beginTransaction();
		for (Iterator iterator = bodDAO.findAll().iterator(); iterator.hasNext();) {
			InvBodBodegas bodegas = (InvBodBodegas) iterator.next();
			eboId.setInvBodBodegas(bodegas);
			InvEboExistenciaBodega eboExistenciaBodega = eboDAO.findById(eboId);
			int cant2 = eboExistenciaBodega.getEboCantidadProducto();
			eboExistenciaBodega.setEboSaldo(cant2 * articuloForm.getArtPrecioMinimo());
			eboExistenciaBodega.setAudFechaModificacion(new Date());
			eboExistenciaBodega.setAudUsuarioModificacion(articuloForm.getUsuarioConectado().getNombreUsuario());
			eboDAO.merge(eboExistenciaBodega);
			txebo.commit();
		}

		articuloDAO.getSession().flush();
		articuloDAO.getSession().clear();
		

		ArticuloForm form2 = new ArticuloForm();
		return lista(mapping,form2,request,response);
	}
	
	public ActionForward eliminar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ArticuloForm  articuloForm= (ArticuloForm)form;
		InvArtArticuloDAO articuloDAO = new InvArtArticuloDAO(getSessionHibernate(request));
		
		InvArtArticulo art = articuloDAO.findById(articuloForm.getArtCodigo());
		if(!articuloForm.getArtNombre().equals(art.getArtNombre())){
			if(articuloDAO.findByArtNombre(articuloForm.getArtNombre()).size()>0){
				String fwd = mensajes("errors.articulo.nombreRepetido", articuloForm, request, response);
				return mapping.findForward(fwd);
			}
		}
		
		Transaction tx = articuloDAO.getSession().beginTransaction();
		try{
			articuloForm.setArticuloH(articuloDAO.findById(articuloForm.getArtCodigo()));
			articuloDAO.delete(articuloForm.getArticuloH());
			tx.commit();
		} catch (Exception e) {
			// TODO: handle exception
			tx.rollback();
			e.printStackTrace();
		}finally{
			articuloDAO.getSession().flush();
			articuloDAO.getSession().clear();
			
		}
		ArticuloForm form2 = new ArticuloForm();
		return lista(mapping,form2,request,response);
	}
	
	public ActionForward editar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ArticuloForm  articuloForm= (ArticuloForm)form;
		InvArtArticuloDAO articuloDAO = new InvArtArticuloDAO(getSessionHibernate(request));
		InvTarTipoArticuloDAO tipoArticuloDAO = new InvTarTipoArticuloDAO(getSessionHibernate(request));
		InvLinLineaDAO lineaDAO = new InvLinLineaDAO(getSessionHibernate(request));
		InvMedMedidaDAO medidaDAO = new InvMedMedidaDAO(getSessionHibernate(request));
		
		List lstTA = tipoArticuloDAO.findAll();
		List lstL = lineaDAO.findAll();
		List lstM = medidaDAO.findAll();
		
		request.setAttribute("tipoArt", lstTA);
		request.setAttribute("linea", lstL);
		request.setAttribute("medida", lstM);
		articuloForm.setArticuloH(articuloDAO.findById(articuloForm.getArtCodigo()));
		request.getSession().setAttribute(METHOD_NAME, "invalidUpdate");
		request.getSession().setAttribute(BDG_ID, articuloForm.getArtCodigo());
		request.setAttribute("form", articuloForm);
		request.setAttribute(Constantes.ACCION_KEY, "/articulo");
        request.setAttribute("filtro", "1");
        
        SecIseInicioSesionDAO inicioSesionDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
        SecIseInicioSesion inicioSesion = inicioSesionDAO.findById(articuloForm.getUsuarioConectado().getNombreUsuario());
        if(inicioSesion.getSecRolRoles().getRolNombre().equals("ADMINISTRADOR")){
        	request.setAttribute("modificaCosto",1);
        }else{
        	request.setAttribute("modificaCosto",0);
        }
        
		return mapping.findForward("dml");
	}
	
		
	public ActionForward cancelar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ArticuloForm form2 = new ArticuloForm();
		return lista(mapping,form2,request,response);
	}
	
	public ActionForward redirectInvalidData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		ActionErrors errors = (ActionErrors)request.getSession().getAttribute(Constantes.ERRORS);
		ArticuloForm  articuloForm= (ArticuloForm)form;
		InvArtArticuloDAO articuloDAO = new InvArtArticuloDAO(getSessionHibernate(request));
		
		//request.getSession().removeAttribute("id");
		String methodName = (String)request.getSession().getAttribute(METHOD_NAME);
		if(methodName!= null){
			if(methodName.equals("invalidSave")){
				List lst = null;
				lst  = articuloDAO.findAll();
				
				InvTarTipoArticuloDAO tipoArticuloDAO = new InvTarTipoArticuloDAO(getSessionHibernate(request));
				InvLinLineaDAO lineaDAO = new InvLinLineaDAO(getSessionHibernate(request));
				InvMedMedidaDAO medidaDAO = new InvMedMedidaDAO(getSessionHibernate(request));
				
				List lstTA = tipoArticuloDAO.findAll();
				List lstL = lineaDAO.findAll();
				List lstM = medidaDAO.findAll();
				
				request.setAttribute("tipoArt", lstTA);
				request.setAttribute("linea", lstL);
				request.setAttribute("medida", lstM);

				TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
				tableFacade.setItems(lst);
				//---- Genera los tipos de formas con que se podran exportar los datos
				tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);//, ExportType.PDF);
				tableFacade.setStateAttr("restore");
				Limit limit = tableFacade.getLimit();
				if (limit.isExported()) {
		        	//---- exporta la tabla
		            export(tableFacade);
		            return null; 
		        } else {
		        	//---- genera el html de la tabla para ser mostrada
		            String html = html(tableFacade, request);
		            request.setAttribute(Constantes.LISTA_KEY, html);
		        }
		        //----- Variables de configuracion
				request.getSession().removeAttribute(BDG_ID);
				request.getSession().setAttribute(METHOD_NAME, "invalidSave");
				request.setAttribute("form", articuloForm);
				request.setAttribute(Constantes.ACCION_KEY, "/articulo");
		        request.setAttribute("filtro", "0");
		        saveMessages(request, errors);
				return mapping.findForward("lista");
			}
			if(methodName.equals("invalidUpdate")){
				InvTarTipoArticuloDAO tipoArticuloDAO = new InvTarTipoArticuloDAO(getSessionHibernate(request));
				InvLinLineaDAO lineaDAO = new InvLinLineaDAO(getSessionHibernate(request));
				InvMedMedidaDAO medidaDAO = new InvMedMedidaDAO(getSessionHibernate(request));
				
				List lstTA = tipoArticuloDAO.findAll();
				List lstL = lineaDAO.findAll();
				List lstM = medidaDAO.findAll();
				
				request.setAttribute("tipoArt", lstTA);
				request.setAttribute("linea", lstL);
				request.setAttribute("medida", lstM);
				articuloForm.setArticuloH(articuloDAO.findById(articuloForm.getArtCodigo()));
				request.getSession().setAttribute(METHOD_NAME, "invalidUpdate");
				request.getSession().setAttribute(BDG_ID, articuloForm.getArtCodigo());
				request.setAttribute("form", articuloForm);
				request.setAttribute(Constantes.ACCION_KEY, "/articulo");
		        request.setAttribute("filtro", "1");
				saveMessages(request, errors);
				return mapping.findForward("dml");
			}
		}
		return lista(mapping, form, request, response);
	}
	
	public ActionForward capacity(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		return mapping.findForward("capacity");
	}
	
	public ActionForward editar2(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ArticuloForm  articuloForm= (ArticuloForm)form;
		InvArtArticuloDAO articuloDAO = new InvArtArticuloDAO(getSessionHibernate(request));
		
		articuloForm.setArticuloH(articuloDAO.findById(articuloForm.getArtCodigo()));
		request.getSession().setAttribute(METHOD_NAME, "invalidUpdate2");
		request.getSession().setAttribute(BDG_ID, articuloForm.getArtCodigo());
		request.setAttribute("form", articuloForm);
		request.setAttribute(Constantes.ACCION_KEY, "/articulo");
        request.setAttribute("filtro", "2");
		return mapping.findForward("dml");
	}
	
	public ActionForward salvar2(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ArticuloForm  articuloForm = (ArticuloForm)form;
		InvArtArticuloDAO articuloDAO = new InvArtArticuloDAO(getSessionHibernate(request));
		Transaction tx = articuloDAO.getSession().beginTransaction();
		try {
			if(articuloForm.getArtPrecioSugerido() < 0){
				String fwd = mensajes("errors.articulo.sugeridoZero", articuloForm, request, response);
				return mapping.findForward(fwd);
			}
			double sugerido = articuloForm.getArtPrecioSugerido();
			double porcentaje1 = articuloForm.getArtPorcentajeUtilidad();
			double utilidad1 = articuloForm.getArtPrecioMinimo()*(porcentaje1/100);
			double utilidad2 = sugerido - articuloForm.getArtPrecioMinimo();
			double porcentaje2 = (porcentaje1 * utilidad2)/utilidad1;
			if(porcentaje2 < 0){
				String fwd = mensajes("errors.articulo.porcentaje", articuloForm, request, response);
				return mapping.findForward(fwd);
			}
			double nuevoPorcentaje = Double.parseDouble(Redondeo.dRound(porcentaje2, 2));
			articuloForm.getArticuloH().setArtPorcentajeUtilidad(nuevoPorcentaje);
			articuloForm.getArticuloH().setArtPrecioSugerido(sugerido);
			articuloDAO.merge(articuloForm.getArticuloH());
			tx.commit();
		} catch (Exception e) {
			// TODO: handle exception
			tx.rollback();
			e.printStackTrace();
		}finally{
			articuloDAO.getSession().flush();
			articuloDAO.getSession().clear();
			
		}
		ArticuloForm form2 = new ArticuloForm();
		return lista(mapping,form2,request,response);
	}
	
	public ActionForward buscar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ArticuloForm articuloForm = (ArticuloForm)form;
		InvArtArticuloDAO articuloDAO = new InvArtArticuloDAO(getSessionHibernate(request));

		List lst  = articuloDAO.findByCriteria(articuloForm.getArticuloH());
		
		InvTarTipoArticuloDAO tipoArticuloDAO = new InvTarTipoArticuloDAO(getSessionHibernate(request));
		InvLinLineaDAO lineaDAO = new InvLinLineaDAO(getSessionHibernate(request));
		InvMedMedidaDAO medidaDAO = new InvMedMedidaDAO(getSessionHibernate(request));
		
		List lstTA = tipoArticuloDAO.findAll();
		List lstL = lineaDAO.findAll();
		List lstM = medidaDAO.findAll();
		
		request.setAttribute("tipoArt", lstTA);
		request.setAttribute("linea", lstL);
		request.setAttribute("medida", lstM);

		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);//, ExportType.PDF);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
		request.getSession().removeAttribute(BDG_ID);
		request.getSession().setAttribute(METHOD_NAME, "invalidSave");
		request.setAttribute("form", articuloForm);
		request.setAttribute(Constantes.ACCION_KEY, "/articulo");
        request.setAttribute("filtro", "0");
		return mapping.findForward("lista");
		 
	}
	
	public String mensajes(String msg,ArticuloForm form,
			HttpServletRequest request, HttpServletResponse response){
		ActionErrors errors = new ActionErrors();
		ArticuloForm  articuloForm= (ArticuloForm)form;
		InvArtArticuloDAO articuloDAO = new InvArtArticuloDAO(getSessionHibernate(request));
		
		//request.getSession().removeAttribute("id");
		String methodName = (String)request.getSession().getAttribute(METHOD_NAME);
		if(methodName!= null){
			if(methodName.equals("invalidSave")){
				List lst = null;
				lst  = articuloDAO.findAll();
				
				InvTarTipoArticuloDAO tipoArticuloDAO = new InvTarTipoArticuloDAO(getSessionHibernate(request));
				InvLinLineaDAO lineaDAO = new InvLinLineaDAO(getSessionHibernate(request));
				InvMedMedidaDAO medidaDAO = new InvMedMedidaDAO(getSessionHibernate(request));
				
				List lstTA = tipoArticuloDAO.findAll();
				List lstL = lineaDAO.findAll();
				List lstM = medidaDAO.findAll();
				
				request.setAttribute("tipoArt", lstTA);
				request.setAttribute("linea", lstL);
				request.setAttribute("medida", lstM);

				TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
				tableFacade.setItems(lst);
				//---- Genera los tipos de formas con que se podran exportar los datos
				tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);//, ExportType.PDF);
				tableFacade.setStateAttr("restore");
				Limit limit = tableFacade.getLimit();
				if (limit.isExported()) {
		        	//---- exporta la tabla
		            export(tableFacade);
		            return null; 
		        } else {
		        	//---- genera el html de la tabla para ser mostrada
		            String html = html(tableFacade, request);
		            request.setAttribute(Constantes.LISTA_KEY, html);
		        }
		        //----- Variables de configuracion
				request.getSession().removeAttribute(BDG_ID);
				request.getSession().setAttribute(METHOD_NAME, "invalidSave");
				request.setAttribute("form", articuloForm);
				request.setAttribute(Constantes.ACCION_KEY, "/articulo");
		        request.setAttribute("filtro", "0");
		        errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(msg));
		        saveMessages(request, errors);
				return "lista";
			}
			if(methodName.equals("invalidUpdate")){
				InvTarTipoArticuloDAO tipoArticuloDAO = new InvTarTipoArticuloDAO(getSessionHibernate(request));
				InvLinLineaDAO lineaDAO = new InvLinLineaDAO(getSessionHibernate(request));
				InvMedMedidaDAO medidaDAO = new InvMedMedidaDAO(getSessionHibernate(request));
				
				List lstTA = tipoArticuloDAO.findAll();
				List lstL = lineaDAO.findAll();
				List lstM = medidaDAO.findAll();
				
				request.setAttribute("tipoArt", lstTA);
				request.setAttribute("linea", lstL);
				request.setAttribute("medida", lstM);
				articuloForm.setArticuloH(articuloDAO.findById(articuloForm.getArtCodigo()));
				request.getSession().setAttribute(METHOD_NAME, "invalidUpdate");
				request.getSession().setAttribute(BDG_ID, articuloForm.getArtCodigo());
				request.setAttribute("form", articuloForm);
				request.setAttribute(Constantes.ACCION_KEY, "/articulo");
		        request.setAttribute("filtro", "1");
		        errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(msg));
				saveMessages(request, errors);
				return "dml";
			}
			if(methodName.equals("invalidUpdate2")){
				articuloForm.setArticuloH(articuloDAO.findById(articuloForm.getArtCodigo()));
				request.getSession().setAttribute(METHOD_NAME, "invalidUpdate2");
				request.getSession().setAttribute(BDG_ID, articuloForm.getArtCodigo());
				request.setAttribute("form", articuloForm);
				request.setAttribute(Constantes.ACCION_KEY, "/articulo");
		        request.setAttribute("filtro", "2");
		        errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(msg));
				saveMessages(request, errors);
				return "dml";
			}
		}
		return "lista";
	}
	
	//<html:text property="artPorcentajeUtilidad" styleId="artPorcUtilId" readonly="true" size="15" maxlength="15" styleClass="obligatorio"/>
	
	public ActionForward cargarUtilidad(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ArticuloForm articuloForm = (ArticuloForm)form;
		InvLinLineaDAO lineaDAO = new InvLinLineaDAO(getSessionHibernate(request));
		
		try{
			InvLinLinea linea = lineaDAO.findById(articuloForm.getLineaId());
			// Construimos una lista para el response
			String listaResponse = "";
			HtmlBuilder htmlBuilder = new HtmlBuilder();
			htmlBuilder.input().type("text").id("artPorcUtilId").
				name("artPorcentajeUtilidad").size("15").
				maxlength("15").styleClass("obligatorio");
			if(articuloForm.getEdit()==1){
				htmlBuilder.readonly();
			}
			htmlBuilder.value(linea.getLinUtilidad().toString()).end();
			
			listaResponse = htmlBuilder.toString();
			response.getWriter().write(listaResponse);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (RuntimeException e) {
			log.error("Error runtime", e);
		} catch (IOException e) {
			log.error(e);
		}
		return null;
	}
	
	
	protected Map getKeyMethodMap() {
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.articulo.lista", "lista");
		map.put("cmd.articulo.guardar", "guardar");
		map.put("cmd.articulo.eliminar", "eliminar");
		map.put("cmd.articulo.salvar", "salvar");
		map.put("cmd.articulo.editar", "editar");
		map.put("cmd.articulo.cancelar", "cancelar");
		map.put("cmd.articulo.redirectInvalidData","redirectInvalidData");
		map.put("cmd.capacidad.lista", "capacity");
		map.put("cmd.articulo.salvar2", "salvar2");
		map.put("cmd.articulo.editar2", "editar2");
		map.put("cmd.articulo.buscar", "buscar");
		map.put("cmd.articulo.cargarUtilidad", "cargarUtilidad");
		return map;
	}
}