/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.inventario.struts.action;

import java.io.IOException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.hibernate.Transaction;
import org.jmesa.view.html.HtmlBuilder;

import com.cetia.sicaco.hibernate.CtaLprLineaPrestamo;
import com.cetia.sicaco.hibernate.CtaLprLineaPrestamoDAO;
import com.cetia.sicaco.hibernate.CtaTprTipoPrestamo;
import com.cetia.sicaco.hibernate.CtaTprTipoPrestamoDAO;
import com.cetia.sicaco.hibernate.InvProProveedor;
import com.cetia.sicaco.hibernate.InvProProveedorDAO;
import com.cetia.sicaco.hibernate.IucPutProveedorTipoPrestamo;
import com.cetia.sicaco.hibernate.IucPutProveedorTipoPrestamoDAO;
import com.cetia.sicaco.inventario.struts.form.ProveedorOrdenForm;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;

/** 
 * MyEclipse Struts
 * Creation date: 01-31-2009
 * 
 * XDoclet definition:
 * @struts.action path="/proveedorOrden" name="proveedorOrdenForm" parameter="accion" scope="request"
 * @struts.action-forward name="dml" path="pagina-dml.inventario.proveedorOrden"
 */
public class ProveedorOrdenAction extends DMLAction {
	
	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ProveedorOrdenForm proveedorOrdenForm = (ProveedorOrdenForm) form;
		InvProProveedorDAO proveedorDAO = new InvProProveedorDAO(getSessionHibernate(request));
		IucPutProveedorTipoPrestamoDAO iucPutProveedorTipoPrestamoDAO = new IucPutProveedorTipoPrestamoDAO(getSessionHibernate(request));
		InvProProveedor proveedor = proveedorDAO.findById(proveedorOrdenForm.getProId2());
		CtaLprLineaPrestamoDAO lprDao = new CtaLprLineaPrestamoDAO(getSessionHibernate(request));
		List lineas = lprDao.findAll();
		request.setAttribute("lineas", lineas);
		CtaTprTipoPrestamoDAO tipoPrestamoDAO = new CtaTprTipoPrestamoDAO(getSessionHibernate(request));
		List<IucPutProveedorTipoPrestamo> l = iucPutProveedorTipoPrestamoDAO.findByProperty("invProProveedor.proId", proveedorOrdenForm.getProId2());
		if(l.size()>0){
			IucPutProveedorTipoPrestamo put = (IucPutProveedorTipoPrestamo)l.get(0);
			proveedorOrdenForm.setIucPutProveedorTipoPrestamoH(put);
			proveedorOrdenForm.setLprId(put.getCtaTprTipoPrestamo().getCtaLprLineaPrestamo().getLprId());
			List tprList = tipoPrestamoDAO.findByLinea(proveedorOrdenForm.getLprId());
			request.setAttribute("tipoPrestamo", tprList);
		}else{
			CtaLprLineaPrestamo lpr = (CtaLprLineaPrestamo)lineas.get(0);
			List tprList = tipoPrestamoDAO.findByLinea(lpr.getLprId());
			request.setAttribute("tipoPrestamo", tprList);
		}
		//proveedorOrdenForm.setIucPutProveedorTipoPrestamoH((l.isEmpty()?new IucPutProveedorTipoPrestamo():l.get(0)));
		//request.setAttribute("tipoPrestamo", tipoPrestamoDAO.findAll());
		request.setAttribute("proveedor", proveedor);
		request.setAttribute(Constantes.ACCION_KEY, "/proveedorOrden");
		return mapping.findForward("dml");
		 
	}
	
	public ActionForward guardar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ProveedorOrdenForm proveedorOrdenForm = (ProveedorOrdenForm) form;
		IucPutProveedorTipoPrestamoDAO iucPutProveedorTipoPrestamoDAO = new IucPutProveedorTipoPrestamoDAO(getSessionHibernate(request));
		Transaction tx = iucPutProveedorTipoPrestamoDAO.getSession().beginTransaction();
		ActionErrors errors = new ActionErrors();
		if(proveedorOrdenForm.getLprId() != -1){
			if(proveedorOrdenForm.getIucPutProveedorTipoPrestamoH().getCtaTprTipoPrestamo().getTprId() != -1){
				try{
					proveedorOrdenForm.getIucPutProveedorTipoPrestamoH().getInvProProveedor().setProId(proveedorOrdenForm.getProId2());
					if(proveedorOrdenForm.getIucPutProveedorTipoPrestamoH().getPutId() != 0){
						iucPutProveedorTipoPrestamoDAO.merge(proveedorOrdenForm.getIucPutProveedorTipoPrestamoH());
					}else{
						iucPutProveedorTipoPrestamoDAO.save(proveedorOrdenForm.getIucPutProveedorTipoPrestamoH());
					}
					tx.commit();
					errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.proveedorOrden.exito"));
				}catch (Exception e) {
					tx.rollback();
					e.printStackTrace();
				}finally{
					iucPutProveedorTipoPrestamoDAO.getSession().flush();
					iucPutProveedorTipoPrestamoDAO.getSession().clear();
					
				}
			}else{
				errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.proveedorOrden.tipoPrestamoNoSeleccionado"));
			}
		}else{
			errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.proveedorOrden.lineaPrestamoNoSeleccionado"));
		}
		saveMessages(request, errors);
	return lista(mapping, form, request, response);
		 
	}
	
	public ActionForward regresar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		return mapping.findForward("regresarToProveedores");
	}
	
	public ActionForward cargarTipos(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ProveedorOrdenForm putForm = (ProveedorOrdenForm)form;
		CtaTprTipoPrestamoDAO tprDao = new CtaTprTipoPrestamoDAO(getSessionHibernate(request));
		String listaResponse = "";
		try{
			if(putForm.getLprId().equals(-1)){
				listaResponse = "No hay elementos que mostrar";
			}else{
				List tpr = tprDao.findByLinea(putForm.getLprId());
				listaResponse = contruirListaTipos(tpr,request);
			}
			response.getWriter().write(listaResponse);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (RuntimeException e) {
			log.error("Error runtime", e);
		} catch (IOException e) {
			log.error(e);
		}
		return null;
	}
	
	private String contruirListaTipos(List tpr, HttpServletRequest request) {
		HtmlBuilder html = new HtmlBuilder();
		html.select().name("iucPutProveedorTipoPrestamoH.ctaTprTipoPrestamo.tprId");
		html.id("tprId").styleClass("obligatorio").close();
		for (Iterator iterator = tpr.iterator(); iterator.hasNext();) {
			CtaTprTipoPrestamo tipo = (CtaTprTipoPrestamo) iterator.next();
			html.option().value(tipo.getTprId().toString()).close().append(tipo.getTprNombre()).optionEnd();
		}
		html.selectEnd();
		return html.toString();
	}

	protected Map getKeyMethodMap() {
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.proveedorOrden.lista", "lista");
		map.put("cmd.proveedor.guardarOrden", "guardar");
		map.put("cmd.proveedor.Regresar", "regresar");
		map.put("cmd.proveedor.cargarTipos", "cargarTipos");
		return map;
	}
}