/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.inventario.struts.action;

import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.hibernate.Transaction;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeImpl;
import org.jmesa.limit.ExportType;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.BasicCellEditor;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.html.HtmlBuilder;

import com.cetia.sicaco.hibernate.InvCprContactoProveedor;
import com.cetia.sicaco.hibernate.InvCprContactoProveedorDAO;
import com.cetia.sicaco.hibernate.InvProProveedor;
import com.cetia.sicaco.hibernate.InvProProveedorDAO;
import com.cetia.sicaco.inventario.struts.form.ContactoProveedorForm;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;

/** 
 * MyEclipse Struts
 * Creation date: 03-25-2008
 * 
 * XDoclet definition:
 * @struts.action path="/contactoProveedor" name="contactoProveedorForm" input="pagina-lista.inventario.contactoProveedor" parameter="accion" scope="request" validate="true"
 * @struts.action-forward name="lista" path="pagina-lista.inventario.contactoProveedor"
 * @struts.action-forward name="dml" path="pagina-dml.inventario.contactoProveedor"
 */
public class ContactoProveedorAction extends DMLAction {
	/*
	 * Generated Methods
	 */

	public static final String TABLA_ID = "invCprContactoProveedor";
	
	public static final String METHOD_NAME = "method";
	
	public static final String CONTACT_PRO_ID = "contactProId";
	
	public static final String CONTACT_ID = "contactId";
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ContactoProveedorForm contactoProveedorForm =  (ContactoProveedorForm)form;
		InvProProveedorDAO proveedorDAO = new InvProProveedorDAO(getSessionHibernate(request));
		InvProProveedor proveedor = proveedorDAO.findById(contactoProveedorForm.getProId());
		
		//Aqui empieza el cï¿½digo para generar Tabla
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(proveedor.getInvCprContactoProveedors());
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		
		Limit limit = tableFacade.getLimit();
        if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
        request.getSession().setAttribute(CONTACT_PRO_ID, contactoProveedorForm.getProId());
        request.getSession().setAttribute(METHOD_NAME, "invalidSave");
        request.setAttribute(Constantes.PROVEEDOR, proveedor);
        request.setAttribute("form",contactoProveedorForm);
        request.setAttribute(Constantes.ACCION_KEY,"/contactoProveedor");
        request.setAttribute("filtro", "0");
        request.setAttribute("boton", "0");
		return mapping.findForward("lista");
		 
	}
	
	//---- Funcion que genera el html de la tabla del jmesa
	private String html(final TableFacade tableFacade, final HttpServletRequest request) {
		tableFacade.setColumnProperties("cprNombreCompleto","cprNumeroTelOficina",
				"cprNumeroTelCelular","cprEmpresaCelular");
		Table table = tableFacade.getTable();
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.contactoProveedor.caption");
		
		Row row = table.getRow();
		
		Column nombreColumna = row.getColumn("cprNombreCompleto");
		nombreColumna.setTitleKey("tbl.contactoProveedor.cprNombreCompleto");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				InvCprContactoProveedor contactoProveedor = (InvCprContactoProveedor)item;
				
				HtmlBuilder html = new HtmlBuilder();
				String link = tableFacade.getWebContext().getContextPath();
				link += "/inventario/contactoProveedor.do?cprId="+contactoProveedor.getCprId().toString()+"&accion=edit";
				html.a().href().quote().append(link).quote().close();
				html.append(value);
				html.aEnd();
				
				return html.toString();
			}
		});
		
		nombreColumna = row.getColumn("cprNumeroTelOficina");
		nombreColumna.setTitleKey("tbl.contactoProveedor.cprNumeroTelOficina");
		
		nombreColumna = row.getColumn("cprNumeroTelCelular");
		nombreColumna.setTitleKey("tbl.contactoProveedor.cprNumeroTelCelular");
		
		nombreColumna = row.getColumn("cprEmpresaCelular");
		nombreColumna.setTitleKey("tbl.contactoProveedor.cprEmpresaCelular");

		return tableFacade.render();
	}
	
	//---- Funcion que genera los exports, el formato que tendran
	 private void export(final TableFacade tableFacade) {
		 tableFacade.setColumnProperties("cprNombreCompleto","cprNumeroTelOficina",
					"cprNumeroTelCelular","cprEmpresaCelular","cprNumeroFax","cprEmail");
			Table table = tableFacade.getTable();
			//---- Titulo de la tabla
			table.setCaptionKey("tbl.contactoProveedor.caption");
			
			Row row = table.getRow();
			
			Column nombreColumna = row.getColumn("cprNombreCompleto");
			nombreColumna.setTitleKey("tbl.contactoProveedor.cprNombreCompleto");
			
			nombreColumna = row.getColumn("cprNumeroTelOficina");
			nombreColumna.setTitleKey("tbl.contactoProveedor.cprNumeroTelOficina");
			
			nombreColumna = row.getColumn("cprNumeroTelCelular");
			nombreColumna.setTitleKey("tbl.contactoProveedor.cprNumeroTelCelular");
			
			nombreColumna = row.getColumn("cprEmpresaCelular");
			nombreColumna.setTitleKey("tbl.contactoProveedor.cprEmpresaCelular");
			
			nombreColumna = row.getColumn("cprNumeroFax");
			nombreColumna.setTitleKey("tbl.contactoProveedor.cprNumeroFax");
			
			nombreColumna = row.getColumn("cprEmail");
			nombreColumna.setTitleKey("tbl.contactoProveedor.cprEmail");
		
		tableFacade.render();
	}
	 
	public ActionForward guardar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ContactoProveedorForm contactoProveedorForm = (ContactoProveedorForm)form;
		InvCprContactoProveedorDAO contactoProveedorDAO = new InvCprContactoProveedorDAO(getSessionHibernate(request));
		Transaction tx = contactoProveedorDAO.getSession().beginTransaction();
		try {
			contactoProveedorForm.getContactoProveedorH().setCprId(contactoProveedorDAO.nextId());
			contactoProveedorDAO.save(contactoProveedorForm.getContactoProveedorH());
			tx.commit();
		} catch (Exception e) {
			// TODO: handle exception
			tx.rollback();
			e.printStackTrace();
		}finally{
			contactoProveedorDAO.getSession().flush();
			contactoProveedorDAO.getSession().clear();
			
		}
		return lista(mapping,form,request,response);
	}

	public ActionForward salvar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ContactoProveedorForm contactoProveedorForm = (ContactoProveedorForm)form;
		InvCprContactoProveedorDAO contactoProveedorDAO = new InvCprContactoProveedorDAO(getSessionHibernate(request));
		Transaction tx = contactoProveedorDAO.getSession().beginTransaction();
		try {
			contactoProveedorDAO.merge(contactoProveedorForm.getContactoProveedorH());
			tx.commit();
		} catch (Exception e) {
			// TODO: handle exception
			tx.rollback();
			e.printStackTrace();
		}finally{
			contactoProveedorDAO.getSession().flush();
			contactoProveedorDAO.getSession().clear();
			
		}
		return lista(mapping,form,request,response);
	}
	
	public ActionForward eliminar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ContactoProveedorForm contactoProveedorForm = (ContactoProveedorForm)form;
		InvCprContactoProveedorDAO contactoProveedorDAO = new InvCprContactoProveedorDAO(getSessionHibernate(request));
		Transaction tx = contactoProveedorDAO.getSession().beginTransaction();
		try {
			contactoProveedorForm.setContactoProveedorH(contactoProveedorDAO.findById(contactoProveedorForm.getCprId()));
			contactoProveedorDAO.delete(contactoProveedorForm.getContactoProveedorH());
			tx.commit();
		} catch (Exception e) {
			// TODO: handle exception
			tx.rollback();
			e.printStackTrace();
		}finally{
			contactoProveedorDAO.getSession().flush();
			contactoProveedorDAO.getSession().clear();
			
		}
		return lista(mapping,form,request,response);
	}
	
	public ActionForward editar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ContactoProveedorForm contactoProveedorForm = (ContactoProveedorForm)form;
		InvCprContactoProveedorDAO contactoProveedorDAO = new InvCprContactoProveedorDAO(getSessionHibernate(request));
		contactoProveedorForm.setContactoProveedorH(contactoProveedorDAO.findById(contactoProveedorForm.getCprId()));
		request.getSession().setAttribute(METHOD_NAME, "invalidUpdate");
		request.getSession().setAttribute(CONTACT_ID, contactoProveedorForm.getCprId());
		InvProProveedorDAO proveedorDAO = new InvProProveedorDAO(getSessionHibernate(request));
		InvProProveedor proveedor = proveedorDAO.findById(contactoProveedorForm.getProId());
		request.setAttribute(Constantes.PROVEEDOR, proveedor);
		request.setAttribute("form", contactoProveedorForm);
		request.setAttribute(Constantes.ACCION_KEY, "/contactoProveedor");
        request.setAttribute("filtro", "0");
        request.setAttribute("boton", "1");
		return mapping.findForward("dml");
	}
	
	public ActionForward agregar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ContactoProveedorForm contactoProveedorForm = (ContactoProveedorForm)form;
		request.setAttribute("form", contactoProveedorForm);
		request.setAttribute(Constantes.ACCION_KEY, "/contactoProveedor");
        request.setAttribute("filtro", "0");
        request.setAttribute("boton", "0");
		return mapping.findForward("dml");
	}
	
	public ActionForward cancelar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		return lista(mapping, form, request, response);
	}
	
	public ActionForward regresar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
			return mapping.findForward("redirectProveedores");
	}
	
	public ActionForward redirectInvalidData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		ActionErrors errors = (ActionErrors)request.getSession().getAttribute(Constantes.ERRORS);
		ContactoProveedorForm contactoProveedorForm = (ContactoProveedorForm)form;
		InvCprContactoProveedorDAO contactoProveedorDAO = new InvCprContactoProveedorDAO(getSessionHibernate(request));
		
		//request.getSession().removeAttribute("id");
		String methodName = (String)request.getSession().getAttribute(METHOD_NAME);
		if(methodName!= null){
			if(methodName.equals("invalidSave")){
				InvProProveedorDAO proveedorDAO = new InvProProveedorDAO(getSessionHibernate(request));
				InvProProveedor proveedor = proveedorDAO.findById((Integer) request.getSession().getAttribute(CONTACT_PRO_ID));
				
				//Aqui empieza el cï¿½digo para generar Tabla
				TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
				tableFacade.setItems(proveedor.getInvCprContactoProveedors());
				//---- Genera los tipos de formas con que se podran exportar los datos
				tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
				tableFacade.setStateAttr("restore");
				
				Limit limit = tableFacade.getLimit();
		        if (limit.isExported()) {
		        	//---- exporta la tabla
		            export(tableFacade);
		            return null; 
		        } else {
		        	//---- genera el html de la tabla para ser mostrada
		            String html = html(tableFacade, request);
		            request.setAttribute(Constantes.LISTA_KEY, html);
		        }
		        //----- Variables de configuracion
		        request.getSession().removeAttribute(CONTACT_ID);
		        request.setAttribute(Constantes.PROVEEDOR, proveedor);
		        request.setAttribute("form",contactoProveedorForm);
		        request.setAttribute(Constantes.ACCION_KEY,"/contactoProveedor");
		        request.setAttribute("filtro", "0");
		        request.setAttribute("boton", "0");
		        saveMessages(request, errors);
				return mapping.findForward("lista");
			}
			if(methodName.equals("invalidUpdate")){
				contactoProveedorForm.setContactoProveedorH(contactoProveedorDAO.findById((Integer) request.getSession().getAttribute(CONTACT_ID)));
				request.setAttribute("form", contactoProveedorForm);
				request.setAttribute(Constantes.ACCION_KEY, "/contactoProveedor");
		        request.setAttribute("filtro", "0");
		        request.setAttribute("boton", "1");
				saveMessages(request, errors);
				return mapping.findForward("dml");
			}
		}
		return lista(mapping, form, request, response);
	}
	
	
	protected Map getKeyMethodMap() {
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.contactoProveedor.lista", "lista");
		map.put("cmd.contactoProveedor.guardar", "guardar");
		map.put("cmd.contactoProveedor.eliminar", "eliminar");
		map.put("cmd.contactoProveedor.salvar", "salvar");
		map.put("cmd.contactoProveedor.editar", "editar");
		map.put("cmd.contactoProveedor.cancelar", "cancelar");
		map.put("cmd.contactoProveedor.agregar", "agregar");
		map.put("cmd.contactoProveedor.return", "regresar");
		map.put("cmd.contactoProveedor.redirectInvalidData", "redirectInvalidData");
		return map;
	}
}