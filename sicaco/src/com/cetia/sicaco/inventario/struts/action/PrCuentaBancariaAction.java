/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.inventario.struts.action;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.hibernate.Transaction;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeImpl;
import org.jmesa.limit.ExportType;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.BasicCellEditor;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.html.HtmlBuilder;

import com.cetia.sicaco.hibernate.CtaTcuTipoCuenta;
import com.cetia.sicaco.hibernate.CtaTcuTipoCuentaDAO;
import com.cetia.sicaco.hibernate.CtrBanBanco;
import com.cetia.sicaco.hibernate.CtrBanBancoDAO;
import com.cetia.sicaco.hibernate.InvPcbProveedorCuentaBancaria;
import com.cetia.sicaco.hibernate.InvPcbProveedorCuentaBancariaDAO;
import com.cetia.sicaco.hibernate.InvPcbProveedorCuentaBancariaId;
import com.cetia.sicaco.hibernate.InvProProveedor;
import com.cetia.sicaco.hibernate.InvProProveedorDAO;
import com.cetia.sicaco.inventario.struts.form.PrCuentaBancariaForm;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;

/** 
 * MyEclipse Struts
 * Creation date: 03-27-2008
 * 
 * XDoclet definition:
 * @struts.action path="/prCuentaBancaria" name="prCuentaBancariaForm" input="redirectInvalidData" parameter="accion" scope="request" validate="true"
 * @struts.action-forward name="lista" path="pagina-lista.inventario.prCuentaBancaria"
 */
public class PrCuentaBancariaAction extends DMLAction {
	/*
	 * Generated Methods
	 */

	public static final String TABLA_ID = "InvPcbProveedorCuentaBancaria";
	
	public static final String PRO_ID = "pro_id";
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	//---- Redirige y crea la tabla de datos a mostrar ya sea en el browser o genera un export
	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		PrCuentaBancariaForm cuentaForm = (PrCuentaBancariaForm)form;
		InvPcbProveedorCuentaBancariaDAO pCuentaBancariaDAO = new InvPcbProveedorCuentaBancariaDAO(getSessionHibernate(request));
		InvProProveedorDAO proveedorDAO = new InvProProveedorDAO(getSessionHibernate(request));
		InvProProveedor proveedor = proveedorDAO.findById(cuentaForm.getProId());
		request.getSession().setAttribute(PRO_ID, cuentaForm.getProId());
		
		CtrBanBancoDAO bancoDAO = new CtrBanBancoDAO(getSessionHibernate(request));

		List lstB = bancoDAO.findAll();
		request.setAttribute("bank", lstB);
		
		CtaTcuTipoCuentaDAO tipoCuentaDAO = new CtaTcuTipoCuentaDAO(getSessionHibernate(request));
		List lstTC = tipoCuentaDAO.findAll();
		request.setAttribute("tipoCuentas", lstTC);
		
		//Aqui empieza el cï¿½digo para generar Tabla
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(proveedor.getInvPcbProveedorCuentaBancarias());
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		
		Limit limit = tableFacade.getLimit();
        if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
        request.setAttribute("form", cuentaForm);
        request.setAttribute(Constantes.PROVEEDOR, proveedor);
        request.setAttribute(Constantes.ACCION_KEY, "/prCuentaBancaria");
        request.setAttribute("filtro", 0);
		return mapping.findForward("lista");
		 
	}

	//---- Funcion que genera el html de la tabla del jmesa
	private String html(final TableFacade tableFacade, final HttpServletRequest request) {
		tableFacade.setColumnProperties("id.ctrBanBanco.banNombre", "ctaTcuTipoCuenta.tcuNombre",
				"id.pcbNumeroCuenta","audUsuarioCreacion");
		Table table = tableFacade.getTable();
				
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.prCuentaBancaria.caption");
		
		Row row = table.getRow();
		
		Column column = row.getColumn("ctaTcuTipoCuenta.tcuNombre");
		column.setTitleKey("tbl.prCuentaBancaria.ctaTcuTipoCuenta.tcuNombre");
		
		column = row.getColumn("id.ctrBanBanco.banNombre");
		column.setTitleKey("tbl.prCuentaBancaria.id.ctrBanBanco.banNombre");
		
		column = row.getColumn("id.pcbNumeroCuenta");
		column.setTitleKey("tbl.prCuentaBancaria.id.pcbNumeroCuenta");
		
		column = row.getColumn("audUsuarioCreacion");
		column.setTitle("Eliminar");
		column.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				InvPcbProveedorCuentaBancaria cuentaBancaria = (InvPcbProveedorCuentaBancaria)item;
				
				HtmlBuilder html = new HtmlBuilder();
				value = "Eliminar";
			//	String link = tableFacade.getWebContext().getContextPath();
				/*html.a().onclick("handlerDeleteButton1('cuenta="+ cuentaBancaria.getId().getPcbNumeroCuenta()+
						"&banId="+cuentaBancaria.getId().getCtrBanBanco().getBanId()+
						"&proId="+cuentaBancaria.getId().getInvProProveedor().getProId() + "');").id("deleteButtonId").close();
				*/html.a().onclick("handlerDeleteButton('"+ cuentaBancaria.getId().getPcbNumeroCuenta()+ "',"+
						cuentaBancaria.getId().getCtrBanBanco().getBanId()+");").id("deleteButtonId").append("class=\"linkEliminar\"").title(value.toString()).close();
				//html.append(value);
				html.aEnd();
								
				return html.toString();
			}
		});
		
		return tableFacade.render();
	}
	
	//---- Funcion que genera los exports, el formato que tendran
	 private void export(final TableFacade tableFacade) {
		 tableFacade.setColumnProperties("id.ctrBanBanco.banNombre", "ctaTcuTipoCuenta.tcuNombre",
					"id.pcbNumeroCuenta");
			Table table = tableFacade.getTable();
					
			//---- Titulo de la tabla
			table.setCaptionKey("tbl.prCuentaBancaria.caption");
			
			Row row = table.getRow();
			
			Column column = row.getColumn("ctaTcuTipoCuenta.tcuNombre");
			column.setTitleKey("tbl.prCuentaBancaria.ctaTcuTipoCuenta.tcuNombre");
			
			column = row.getColumn("id.ctrBanBanco.banNombre");
			column.setTitleKey("tbl.prCuentaBancaria.id.ctrBanBanco.banNombre");
			
			column = row.getColumn("id.pcbNumeroCuenta");
			column.setTitleKey("tbl.prCuentaBancaria.id.pcbNumeroCuenta");
			
			tableFacade.render();
	 }
	 
	 public ActionForward guardar(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {
		PrCuentaBancariaForm cuentaForm = (PrCuentaBancariaForm)form;
		InvPcbProveedorCuentaBancariaDAO cuentaDAO = new InvPcbProveedorCuentaBancariaDAO(getSessionHibernate(request));
		Transaction tx = cuentaDAO.getSession().beginTransaction();
		try{
			InvPcbProveedorCuentaBancariaId id = new InvPcbProveedorCuentaBancariaId();
			InvProProveedorDAO proveedorDAO = new InvProProveedorDAO(getSessionHibernate(request));
			id.setInvProProveedor(proveedorDAO.findById((Integer) request.getSession().getAttribute(PRO_ID)));
			
			CtrBanBancoDAO bancoDAO = new CtrBanBancoDAO(getSessionHibernate(request));
			id.setCtrBanBanco(bancoDAO.findById(cuentaForm.getId().getCtrBanBanco().getBanId()));
			
			id.setPcbNumeroCuenta(cuentaForm.getId().getPcbNumeroCuenta());

			CtaTcuTipoCuentaDAO tipoCuentaDAO = new CtaTcuTipoCuentaDAO(getSessionHibernate(request));
			CtaTcuTipoCuenta tipoCuenta = tipoCuentaDAO.findById(cuentaForm.getCtaTcuTipoCuenta().getTcuId());
			cuentaForm.getProveedorCuentaBancariaH().setCtaTcuTipoCuenta(tipoCuenta);
			
			cuentaForm.setId(id);
			
			cuentaDAO.save(cuentaForm.getProveedorCuentaBancariaH());
			tx.commit();
		} catch (Exception e) {
			// TODO: handle exception
			tx.rollback();
			e.printStackTrace();
		}finally{
			cuentaDAO.getSession().flush();
			cuentaDAO.getSession().clear();
			
		}
		cuentaForm.getProveedorCuentaBancariaH().getId().setCtrBanBanco(new CtrBanBanco());
		cuentaForm.getProveedorCuentaBancariaH().getId().setPcbNumeroCuenta("");
		return lista(mapping,form,request,response);
	}
	 
	 public ActionForward eliminar(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {
		 PrCuentaBancariaForm cuentaForm = (PrCuentaBancariaForm)form;
			InvPcbProveedorCuentaBancariaDAO cuentaDAO = new InvPcbProveedorCuentaBancariaDAO(getSessionHibernate(request));
			Transaction tx = cuentaDAO.getSession().beginTransaction();
			try{
				InvPcbProveedorCuentaBancariaId id = new InvPcbProveedorCuentaBancariaId();
				InvProProveedorDAO proveedorDAO = new InvProProveedorDAO(getSessionHibernate(request));
				id.setInvProProveedor(proveedorDAO.findById(cuentaForm.getProId()));
				
				CtrBanBancoDAO bancoDAO = new CtrBanBancoDAO(getSessionHibernate(request));
				id.setCtrBanBanco(bancoDAO.findById(cuentaForm.getIdBan()));
				
				id.setPcbNumeroCuenta(cuentaForm.getCuenta());
				
				cuentaForm.setId(id);
				InvPcbProveedorCuentaBancaria bancaria = cuentaDAO.findById(id);
				cuentaDAO.delete(bancaria);
				tx.commit();
			} catch (Exception e) {
				tx.rollback();
				e.printStackTrace();
			}finally{
				cuentaDAO.getSession().flush();
				cuentaDAO.getSession().clear();
				
			}
			cuentaForm.getProveedorCuentaBancariaH().getId().setCtrBanBanco(new CtrBanBanco());
			cuentaForm.getProveedorCuentaBancariaH().getId().setPcbNumeroCuenta("");
			return lista(mapping,form,request,response);
		}
	
	 public ActionForward regresar(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {
		 return mapping.findForward("redirectProveedores");
	 }
	 
	 public ActionForward redirectInvalidData(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {
		 	ActionErrors errors = (ActionErrors)request.getSession().getAttribute(Constantes.ERRORS);
		 	PrCuentaBancariaForm cuentaForm = (PrCuentaBancariaForm)form;
			InvPcbProveedorCuentaBancariaDAO pCuentaBancariaDAO = new InvPcbProveedorCuentaBancariaDAO(getSessionHibernate(request));
			InvProProveedorDAO proveedorDAO = new InvProProveedorDAO(getSessionHibernate(request));
			InvProProveedor proveedor = proveedorDAO.findById((Integer)request.getSession().getAttribute(PRO_ID));
			cuentaForm.setProId(proveedor.getProId());
			CtrBanBancoDAO bancoDAO = new CtrBanBancoDAO(getSessionHibernate(request));

			List lstB = bancoDAO.findAll();
			request.setAttribute("bank", lstB);
			
			CtaTcuTipoCuentaDAO tipoCuentaDAO = new CtaTcuTipoCuentaDAO(getSessionHibernate(request));
			List lstTC = tipoCuentaDAO.findAll();
			request.setAttribute("tipoCuentas", lstTC);
			
			//Aqui empieza el cï¿½digo para generar Tabla
			TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
			tableFacade.setItems(proveedor.getInvPcbProveedorCuentaBancarias());
			//---- Genera los tipos de formas con que se podran exportar los datos
			tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
			tableFacade.setStateAttr("restore");
			
			Limit limit = tableFacade.getLimit();
	        if (limit.isExported()) {
	        	//---- exporta la tabla
	            export(tableFacade);
	            return null; 
	        } else {
	        	//---- genera el html de la tabla para ser mostrada
	            String html = html(tableFacade, request);
	            request.setAttribute(Constantes.LISTA_KEY, html);
	        }
	        //----- Variables de configuracion
	        request.setAttribute("form", cuentaForm);
	        request.setAttribute(Constantes.PROVEEDOR, proveedor);
	        request.setAttribute(Constantes.ACCION_KEY, "/prCuentaBancaria");
	        request.setAttribute("filtro", 0);
	        saveMessages(request, errors);
			return mapping.findForward("lista");
			 
		}
	 
	
	protected Map getKeyMethodMap() {
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.pcb.lista", "lista");
		map.put("cmd.pcb.guardar", "guardar");
		map.put("cmd.pcb.delete", "eliminar");
		map.put("cmd.pcb.redirectProveedores", "regresar");
		map.put("cmd.pcb.redirectInvalidData", "redirectInvalidData");
		return map;
	}
}