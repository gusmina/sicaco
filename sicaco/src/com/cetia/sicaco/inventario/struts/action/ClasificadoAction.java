/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.inventario.struts.action;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.hibernate.Transaction;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeImpl;
import org.jmesa.limit.ExportType;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.BasicCellEditor;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.html.HtmlBuilder;

import com.cetia.sicaco.hibernate.InvClaClasificado;
import com.cetia.sicaco.hibernate.InvClaClasificadoDAO;
import com.cetia.sicaco.hibernate.InvProProveedorDAO;
import com.cetia.sicaco.hibernate.InvTclTipoClasificacionDAO;
import com.cetia.sicaco.inventario.struts.form.ClasificadoForm;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;

/** 
 * MyEclipse Struts
 * Creation date: 03-26-2008
 * 
 * XDoclet definition:
 * @struts.action path="/clasificado" name="clasificadoForm" input="redirectInvalidData" parameter="accion" scope="request" validate="true"
 * @struts.action-forward name="lista" path="pagina-lista.inventario.clasificado"
 */
public class ClasificadoAction extends DMLAction {
	/*
	 * Generated Methods
	 */

	public static final String TABLA_ID = "invClaClasificado";
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	//---- Redirige y crea la tabla de datos a mostrar ya sea en el browser o genera un export
	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ClasificadoForm clasificadoForm =  (ClasificadoForm)form;
		InvClaClasificadoDAO clasificadoDAO =  new InvClaClasificadoDAO(getSessionHibernate(request));
		InvProProveedorDAO proveedorDAO = new InvProProveedorDAO(getSessionHibernate(request));
		InvTclTipoClasificacionDAO tipoClasificacionDAO = new InvTclTipoClasificacionDAO(getSessionHibernate(request));
		
		List lst = clasificadoDAO.findAll();
		
		request.setAttribute("listaClasificado", lst);
		List lp = proveedorDAO.findAll();
//		List lp = clasificadoDAO.findAllProId();
		request.setAttribute("listProv", lp);
		List lt = tipoClasificacionDAO.findAll();
//		List lt = clasificadoDAO.findAllTclClasificacion();
		request.setAttribute("listTcl", lt);
	    
		//Aqui empieza el c�digo para generar Tabla
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		
		Limit limit = tableFacade.getLimit();
        if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
        request.setAttribute(Constantes.ACCION_KEY, "/clasificado");
        request.setAttribute("filtro", "1");
		return mapping.findForward("lista");
		 
	}

	//---- Funcion que genera el html de la tabla del jmesa
	private String html(final TableFacade tableFacade, final HttpServletRequest request) {
		tableFacade.setColumnProperties("id.invProProveedor.proNombre","id.invTclTipoClasificacion.tclClasificacion","audUsuarioCreacion");
		Table table = tableFacade.getTable();
				
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.clasificado.caption");
		
		Row row = table.getRow();
		
		Column nombreColumna = row.getColumn("id.invProProveedor.proNombre");
		nombreColumna.setTitleKey("tbl.clasificado.id.invProProveedor.proNombre");
		
		Column column = row.getColumn("id.invTclTipoClasificacion.tclClasificacion");
		column.setTitleKey("tbl.clasificado.id.invTclTipoClasificacion.tclClasificacion");
		
		column = row.getColumn("audUsuarioCreacion");
		column.setTitle("Eliminar");
		
		column.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				InvClaClasificado clasificado = (InvClaClasificado)item;
				HtmlBuilder html = new HtmlBuilder();
				String del = "eliminar";
				/*value = "eliminar";
				String link = tableFacade.getWebContext().getContextPath();
				html.a().onclick("handlerDeleteButton("+ clasificado.getId().getInvProProveedor().getProId()+
						",\'" + clasificado.getId().getInvTclTipoClasificacion().getTclClasificacion()+ "\');").id("deleteButtonId").close();
				html.append(value);
				html.aEnd();*/
				//---- Generar link para entrar a edicion
				String link = tableFacade.getWebContext().getContextPath();
				link += "/inventario/clasificado.do?id.invProProveedor.proId="+clasificado.getId().getInvProProveedor().getProId()+"&id.invTclTipoClasificacion.tclClasificacion="+clasificado.getId().getInvTclTipoClasificacion().getTclClasificacion()+"&accion=eliminar";
				html.a().href().quote().append(link).quote().close();
				//---- Agregamos el link con el nombre = value
				html.append(del);
				html.aEnd();
				
				return html.toString();
			}
		});
		
		return tableFacade.render();
	}
	
	//---- Funcion que genera los exports, el formato que tendran
	 private void export(final TableFacade tableFacade) {
		 tableFacade.setColumnProperties("id.secRolRoles.rolNombre","id.secMopMenuOpcion.mopName","audUsuarioCreacion");
			Table table = tableFacade.getTable();
					
			//---- Titulo de la tabla
			table.setCaptionKey("tbl.rolMenu.caption.export");
			
			Row row = table.getRow();
			
			Column nombreColumna = row.getColumn("id.secRolRoles.rolNombre");
			nombreColumna.setTitleKey("tbl.rolMenu.id.rolNombre");
			
			Column column = row.getColumn("id.secMopMenuOpcion.mopName");
			column.setTitleKey("tbl.rolMenu.id.mopName.export");
			
			tableFacade.render();
	 }

	 public ActionForward buscar(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response){
		 ClasificadoForm clasificadoForm = (ClasificadoForm)form;
		 InvClaClasificadoDAO clasificadoDAO = new InvClaClasificadoDAO(getSessionHibernate(request));
		 List lst = clasificadoDAO.findByCriteria(clasificadoForm.getClasificadoH());
		 InvProProveedorDAO proveedorDAO = new InvProProveedorDAO(getSessionHibernate(request));
		InvTclTipoClasificacionDAO tipoClasificacionDAO = new InvTclTipoClasificacionDAO(getSessionHibernate(request));
		
		//List lst = clasificadoDAO.findAll();
		
		request.setAttribute("listaClasificado", lst);
		List lp = proveedorDAO.findAll();
//			List lp = clasificadoDAO.findAllProId();
		request.setAttribute("listProv", lp);
		List lt = tipoClasificacionDAO.findAll();
//			List lt = clasificadoDAO.findAllTclClasificacion();
		request.setAttribute("listTcl", lt);
	    
		//Aqui empieza el c�digo para generar Tabla
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		
		Limit limit = tableFacade.getLimit();
        if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
        request.setAttribute(Constantes.ACCION_KEY, "/clasificado");
        request.setAttribute("filtro", "1");
		return mapping.findForward("lista");
	 }
	 
	 public ActionForward eliminar(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response){
		 ClasificadoForm clasificadoForm = (ClasificadoForm)form;
		 InvClaClasificadoDAO clasificadoDAO =  new InvClaClasificadoDAO(getSessionHibernate(request));
		 Transaction tx = clasificadoDAO.getSession().beginTransaction();
		 /*
		 Integer hp = clasificadoForm.getHiddenProId();
		 String tp = clasificadoForm.getHiddenTclClasificacion();
		 
		 clasificadoForm.getClasificadoH().getId().getInvProProveedor().setProId(hp);
		 clasificadoForm.getClasificadoH().getId().getInvTclTipoClasificacion().setTclClasificacion(tp);
		 
		 InvClaClasificadoId clasificadoId = clasificadoForm.getClasificadoH().getId();
		 */
		 try {
			//clasificadoForm.setClasificadoH(clasificadoDAO.findById(clasificadoId));
			clasificadoForm.setClasificadoH(clasificadoDAO.findById(clasificadoForm.getId()));
			clasificadoDAO.delete(clasificadoForm.getClasificadoH());
			tx.commit();
		} catch (Exception e) {
			tx.rollback();
			e.printStackTrace();
		}finally{
			clasificadoDAO.getSession().flush();
			clasificadoDAO.getSession().clear();
			
		}
		 return lista(mapping, form, request, response);
	 }
	 
	 public ActionForward guardar(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response){
		 ClasificadoForm clasificadoForm = (ClasificadoForm)form;
		 InvClaClasificadoDAO clasificadoDAO =  new InvClaClasificadoDAO(getSessionHibernate(request));
		 Transaction tx = clasificadoDAO.getSession().beginTransaction();
		 try {
			//clasificadoForm.setClasificadoH(clasificadoDAO.findById(clasificadoForm.getId()));
			clasificadoDAO.save(clasificadoForm.getClasificadoH());
			tx.commit();
		} catch (Exception e) {
			tx.rollback();
			e.printStackTrace();
		}finally{
			clasificadoDAO.getSession().flush();
			clasificadoDAO.getSession().clear();
			
		}
		 return lista(mapping, form, request, response);
	 }
	 
	
	protected Map getKeyMethodMap() {
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.clasificado.lista", "lista");
		map.put("cmd.clasificado.eliminar", "eliminar");
		map.put("cmd.clasificado.buscar", "buscar");
		map.put("cmd.clasificado.guardar", "guardar");
		return map;
	}
}