/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.cliente.struts.action;

import java.text.ParseException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeImpl;
import org.jmesa.limit.ExportType;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.editor.DateCellEditor;

import com.cetia.sicaco.cliente.struts.form.VerComentariosForm;
import com.cetia.sicaco.hibernate.CliComComentario;
import com.cetia.sicaco.hibernate.CliComComentarioDAO;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;

/**
 * MyEclipse Struts Creation date: 08-15-2008
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/verComentarios" name="verComentariosForm"
 *                parameter="accion" scope="request" validate="true"
 */
public class VerComentariosAction extends DMLAction {
	private static final Log log = LogFactory
			.getLog(VerComentariosAction.class);
	public static final String TABLA_ID = "tablaDeComentarios";

	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward buscarComentario(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		log.debug("Iniciamos la busqueda de un comentario");

		VerComentariosForm verComentariosForm = (VerComentariosForm) form;
		if (listar(verComentariosForm, request, response))
			return mapping.findForward("verLista");
		else
			return null;
	}

	private boolean listar(VerComentariosForm verComentariosForm,
			HttpServletRequest request, HttpServletResponse response) {
		CliComComentarioDAO comentarioDAO = new CliComComentarioDAO(getSessionHibernate(request));
		try {
			List<CliComComentario> comentarios = comentarioDAO.buscarPorFechas(
					verComentariosForm.getFechaInicioDate(), verComentariosForm
							.getFechaFinDate());
			TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
			tableFacade.setItems(comentarios);

			tableFacade.setExportTypes(response, ExportType.CSV,
					ExportType.JEXCEL);// , ExportType.PDF);
			tableFacade.setStateAttr("restore");
			Limit limit = tableFacade.getLimit();
			if (limit.isExported()) {
				// ---- exporta la tabla
				export(tableFacade);
				return false;
			} else {
				// ---- genera el html de la tabla para ser mostrada
				String html = html(tableFacade, request);
				request.setAttribute(Constantes.LISTA_KEY, html);
			}
		} catch (ParseException e) {
			log.error("Error al parsear las fechas", e);
		}
		return true;
	}

	private String html(final TableFacade tableFacade,
			final HttpServletRequest request) {
		tableFacade.setColumnProperties("comFechaIngreso", "secIseInicioSesion.iseNombreUsuario", "secIseInicioSesion.secPerPersona.perId","comComentario");
		Table table = tableFacade.getTable();
		// ---- Titulo de la tabla
		table.setCaptionKey("tbl.comentario.caption");

		Row row = table.getRow();
		/*
		 * Column nombreColumna = row.getColumn("invProProveedor.proNombre");
		 * nombreColumna.setTitleKey("tbl.cref.invProProveedor.proNombre");
		 */
		Column nombreColumna = row.getColumn("comFechaIngreso");
		nombreColumna.setTitleKey("tbl.comentario.comFechaIngreso");
		nombreColumna.getCellRenderer().setCellEditor(
				new DateCellEditor("dd-MM-yyyy HH:mm:ss"));
		
		nombreColumna = row.getColumn("secIseInicioSesion.iseNombreUsuario");
		nombreColumna.setTitleKey("tbl.comentario.comCodUsuario");

		nombreColumna = row.getColumn("secIseInicioSesion.secPerPersona.perId");
		nombreColumna.setTitleKey("tbl.comentario.comNombreUsuario");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){
			public Object getValue(Object item, String property, int rowcount) {
                CliComComentario comentario = (CliComComentario)item;
                String nombreUsuario = "";                
                nombreUsuario+=comentario.getSecIseInicioSesion().getSecPerPersona().getPerPrimerNombre()+" "+
                comentario.getSecIseInicioSesion().getSecPerPersona().getPerSegundoNombre()+" "+
                comentario.getSecIseInicioSesion().getSecPerPersona().getPerTercerNombre()+" "+
                comentario.getSecIseInicioSesion().getSecPerPersona().getPerPrimerApellido()+" "+
                comentario.getSecIseInicioSesion().getSecPerPersona().getPerSegundoApellido()+" "+
                comentario.getSecIseInicioSesion().getSecPerPersona().getPerApellidoCasada();
                
                return nombreUsuario;
			}
		});
		
		nombreColumna = row.getColumn("comComentario");
		nombreColumna.setTitleKey("tbl.comentario.comComentario");

		return tableFacade.render();
	}

	private void export(TableFacade tableFacade) {
		tableFacade.setColumnProperties("comFechaIngreso", "comComentario");
		Table table = tableFacade.getTable();
		// ---- Titulo de la tabla
		table.setCaptionKey("tbl.comentario.caption");

		Row row = table.getRow();
		/*
		 * Column nombreColumna = row.getColumn("invProProveedor.proNombre");
		 * nombreColumna.setTitleKey("tbl.cref.invProProveedor.proNombre");
		 */
		Column nombreColumna = row.getColumn("comFechaIngreso");
		nombreColumna.setTitleKey("tbl.comentario.comFechaIngreso");
		nombreColumna.getCellRenderer().setCellEditor(
				new DateCellEditor("dd-MM-yyyy HH:mi:ss"));

		nombreColumna = row.getColumn("comComentario");
		nombreColumna.setTitleKey("tbl.comentario.comComentario");

		tableFacade.render();
	}

	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		VerComentariosForm verComentariosForm = (VerComentariosForm) form;
		listar(verComentariosForm, request, response);
		return mapping.findForward("verLista");
	}

	
	protected Map<String,String> getKeyMethodMap() {
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.vcomentario.buscar", "buscarComentario");
		map.put("cmd.vcomentario.lista", "lista");
		return map;
	}
}