/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.procesosEspeciales.struts.action;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.DriverManager;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.export.JRCsvExporter;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.engine.xml.JRXmlLoader;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRichTextString;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.apache.struts.upload.FormFile;
import org.hibernate.Transaction;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeImpl;
import org.jmesa.limit.ExportType;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.BasicCellEditor;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.html.HtmlBuilder;

import com.cetia.sicaco.cuentaCorriente.struts.action.CuentaAhorroAction;
import com.cetia.sicaco.cuentaCorriente.struts.action.CuentaAsociadoAction;
import com.cetia.sicaco.cuentaCorriente.struts.form.TipoSeguroForm;
import com.cetia.sicaco.hibernate.CtaAscAsociado;
import com.cetia.sicaco.hibernate.CtaAscAsociadoDAO;
import com.cetia.sicaco.hibernate.CtaCahCuentaAhorro;
import com.cetia.sicaco.hibernate.CtaCahCuentaAhorroDAO;
import com.cetia.sicaco.hibernate.CtaCasCuentaAsociado;
import com.cetia.sicaco.hibernate.CtaCasCuentaAsociadoDAO;
import com.cetia.sicaco.hibernate.CtaDptDepartamentoTrabajo;
import com.cetia.sicaco.hibernate.CtaEtrEmpresaTrabajo;
import com.cetia.sicaco.hibernate.CtaEtrEmpresaTrabajoDAO;
import com.cetia.sicaco.hibernate.CtaFxpFiadorPrestamo;
import com.cetia.sicaco.hibernate.CtaFxpFiadorPrestamoDAO;
import com.cetia.sicaco.hibernate.CtaMxaMovimientoAhorro;
import com.cetia.sicaco.hibernate.CtaMxaMovimientoAhorroDAO;
import com.cetia.sicaco.hibernate.CtaMxpMovimientoPrestamo;
import com.cetia.sicaco.hibernate.CtaMxpMovimientoPrestamoDAO;
import com.cetia.sicaco.hibernate.CtaMxsMovimientoSeguros;
import com.cetia.sicaco.hibernate.CtaMxsMovimientoSegurosDAO;
import com.cetia.sicaco.hibernate.CtaPrePrestamo;
import com.cetia.sicaco.hibernate.CtaPrePrestamoDAO;
import com.cetia.sicaco.hibernate.CtaPxtPersonaExterna;
import com.cetia.sicaco.hibernate.CtaPxtPersonaExternaDAO;
import com.cetia.sicaco.hibernate.CtaRetRetencionesDeMas;
import com.cetia.sicaco.hibernate.CtaRetRetencionesDeMasDAO;
import com.cetia.sicaco.hibernate.CtaSegSeguros;
import com.cetia.sicaco.hibernate.CtaSegSegurosDAO;
import com.cetia.sicaco.hibernate.CtaTinTasaInteresDAO;
import com.cetia.sicaco.hibernate.CtaTisTipoSeguro;
import com.cetia.sicaco.hibernate.CtaTisTipoSeguroDAO;
import com.cetia.sicaco.hibernate.CtaTntTipoNota;
import com.cetia.sicaco.hibernate.CtaTntTipoNotaDAO;
import com.cetia.sicaco.hibernate.CtaTtrTipoTransaccion;
import com.cetia.sicaco.hibernate.CtaTtrTipoTransaccionDAO;
import com.cetia.sicaco.hibernate.CtaTxaTransaccionxcuentaAsociado;
import com.cetia.sicaco.hibernate.CtaTxaTransaccionxcuentaAsociadoDAO;
import com.cetia.sicaco.hibernate.CtrEstEstadoDAO;
import com.cetia.sicaco.hibernate.CtrParParametros;
import com.cetia.sicaco.hibernate.CtrParParametrosDAO;
import com.cetia.sicaco.hibernate.HibernateSessionFactory;
import com.cetia.sicaco.hibernate.OrdOcoOrdenDeCompra;
import com.cetia.sicaco.hibernate.OrdOcoOrdenDeCompraDAO;
import com.cetia.sicaco.hibernate.SecPerPersona;
import com.cetia.sicaco.hibernate.SecPerPersonaDAO;
import com.cetia.sicaco.procesosEspeciales.struts.form.PlanillaForm;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;
import com.cetia.sicaco.struts.PartidaAutomatica;
import com.mad.utilidades.ElapsedTime;
import com.mad.utilidades.ExportWebReport;
import com.mad.utilidades.Format;
import com.mad.utilidades.IntereseYMora;
import com.mad.utilidades.Redondeo;
import com.mad.utilidades.ReportFile;

/**
 * MyEclipse Struts Creation date: 11-06-2008
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/planilla" name="planillaForm"
 *                input="redirectInvalidData" parameter="accion" scope="request"
 *                validate="true"
 * @struts.action-forward name="lista"
 *                        path="pagina-lista.procesosEspeciales.planilla"
 */
public class PlanillaAction extends DMLAction {

	public String TABLA_ID = "ObjetoQuery";
	public String WICH_ONE = "";
	public String USUARIO = "";
	public Double DIVISOR = 1.0;

	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		PlanillaForm planillaForm = (PlanillaForm) form;

		CtrParParametrosDAO parametrosDAO = new CtrParParametrosDAO(getSessionHibernate(request));
		CtrParParametros parametros = parametrosDAO
				.findById("DIVISOR_CUOTAS_MES");
		DIVISOR = parametros.getParValorNumber();

		CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));

		if (planillaForm.getTipoDesc() > 0) {
			request.getSession().setAttribute("tipo_desc",
					planillaForm.getTipoDesc());
		} else {
			planillaForm.setTipoDesc((Integer) request.getSession()
					.getAttribute("tipo_desc"));
		}

		if (planillaForm.getTipoDesc() == 3) {
			if (planillaForm.getTipoCuenta() == null
					|| planillaForm.getTipoCuenta().equals("")) {
				WICH_ONE = "A";
			}
		}
		if (planillaForm.getTipoDesc() == 4) {
			if (planillaForm.getCuentaPar() == null
					|| planillaForm.getCuentaPar().equals("")) {
				WICH_ONE = "E";
			}
		}

		CtaEtrEmpresaTrabajoDAO empresaTrabajoDAO = new CtaEtrEmpresaTrabajoDAO(getSessionHibernate(request));
		List lemp = empresaTrabajoDAO.findAll();
		request.setAttribute("lemp", lemp);

		// ----- Variables de configuracion
		planillaForm.setFin(asociadoDAO.countAllByEmpresa(-1));
		if (planillaForm.getFin() < 0) {
			planillaForm.setFin(0);
		}
		request.setAttribute("form", planillaForm);
		request.setAttribute("tipoDesc", planillaForm.getTipoDesc());
		request.setAttribute("edit", 0);
		request.setAttribute(Constantes.ACCION_KEY, "/planilla");
		return mapping.findForward("lista");
	}

	private ArrayList<AsociadoOFiador> setLista(List lst, int i,HttpServletRequest request) {
		ArrayList<AsociadoOFiador> lstAoF = new ArrayList<AsociadoOFiador>();
		if (i == 0) {
			for (Iterator iterator = lst.iterator(); iterator.hasNext();) {
				CtaAscAsociado asociado = (CtaAscAsociado) iterator.next();
				AsociadoOFiador aof = new AsociadoOFiador();
				aof.setCodigoEmpleado(asociado.getAscCodigo());
				aof.setDescAhorros(obtenerDescuentos(asociado, "B", "B", 0.0,request));
				aof.setDescAportaciones(obtenerDescuentos(asociado, "B", "A",
						0.0,request));
				aof.setDescPrestamos(obtenerDescuentos(asociado, "C", "", 0.0,request));
				aof.setDescSeguros(obtenerDescuentos(asociado, "D", "", 0.0,request));
				aof.setId(asociado.getAscId());
				aof.setNombreCompleto(asociado.getSecPerPersona()
						.getPerPrimerApellido()
						+ ", "
						+ asociado.getSecPerPersona().getPerPrimerNombre());
				aof.setTipo(i);
				lstAoF.add(aof);
				log.warn("Se inserto el asociado: " + aof.getId());
			}
		} else {
			for (Iterator iterator = lst.iterator(); iterator.hasNext();) {
				CtaFxpFiadorPrestamo fiador = (CtaFxpFiadorPrestamo) iterator
						.next();
				AsociadoOFiador aof = new AsociadoOFiador();
				aof.setCodigoEmpleado(fiador.getCtaPxtPersonaExterna()
						.getPxtCodigoEmpleado());
				aof.setDescAhorros(0.0);
				aof.setDescAportaciones(0.0);
				aof.setDescSeguros(0.0);
				aof.setId(fiador.getFxpId().toString());
				aof.setDescPrestamos(obtenerDescPreFiador(aof
						.getCodigoEmpleado(),request));
				aof.setNombreCompleto(fiador.getCtaPxtPersonaExterna()
						.getPxtPrimerApellido()
						+ ", "
						+ fiador.getCtaPxtPersonaExterna().getPxtNombres());
				aof.setTipo(i);
				lstAoF.add(aof);
				log.warn("Se inserto el empleado: " + aof.getId());
			}
		}
		return lstAoF;
	}

	private Double obtenerDescPreFiador(String codigoEmpleado,HttpServletRequest request) {
		CtaPxtPersonaExternaDAO externaDAO = new CtaPxtPersonaExternaDAO(getSessionHibernate(request));
		List externos = externaDAO.findByPxtCodigoEmpleado(codigoEmpleado);

		CtrParParametrosDAO parametrosDAO = new CtrParParametrosDAO(getSessionHibernate(request));
		CtrParParametros parametros = parametrosDAO
				.findById("DIVISOR_CUOTAS_MES");

		Double total = 0.0;
		for (Iterator iterator = externos.iterator(); iterator.hasNext();) {
			CtaPxtPersonaExterna externa = (CtaPxtPersonaExterna) iterator
					.next();
			CtaCasCuentaAsociadoDAO casDao = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
			List casList = casDao.findByProperty("ctaPxtPersonaExterna.pxtId",
					externa.getPxtId());
			for (Iterator iterator2 = casList.iterator(); iterator2.hasNext();) {
				CtaCasCuentaAsociado cas = (CtaCasCuentaAsociado) iterator2
						.next();
				total = total + cas.getCtaPrePrestamo().getPreCuota()
						/ parametros.getParValorNumber();
			}
		}
		return total;
	}

	private List obtenerEmpleadosFiadores(HttpServletRequest request) {
		ArrayList<CtaAscAsociado> fAsociados = new ArrayList<CtaAscAsociado>();
		CtaFxpFiadorPrestamoDAO fiadorPrestamoDAO = new CtaFxpFiadorPrestamoDAO(getSessionHibernate(request));
		List fiadoresEmpleados = fiadorPrestamoDAO.findAllEmployees();
		return fiadoresEmpleados;
	}

	public ActionForward buscar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		PlanillaForm planillaForm = (PlanillaForm) form;
		CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
		// Indica si inicie una busqueda
		request.getSession().setAttribute("busquedaPlanilla", 1);

		if (planillaForm.getTipoDesc() > 0) {
			request.getSession().setAttribute("tipo_desc",
					planillaForm.getTipoDesc());
		} else {
			planillaForm.setTipoDesc((Integer) request.getSession()
					.getAttribute("tipo_desc"));
		}

		if (planillaForm.getTipoDesc() == 3) {
			if (planillaForm.getTipoCuenta() == null
					|| planillaForm.getTipoCuenta().equals("")) {
				WICH_ONE = "A";
			} else {
				WICH_ONE = planillaForm.getTipoCuenta();
			}
		}
		if (planillaForm.getTipoDesc() == 4) {
			if (planillaForm.getCuentaPar() == null
					|| planillaForm.getCuentaPar().equals("")) {
				WICH_ONE = "E";
			} else {
				WICH_ONE = planillaForm.getCuentaPar();
			}
		}

		List lst = new ArrayList();
		if (planillaForm.getSelected() == 0) {
			lst = asociadoDAO.findByNameUserPlanillaAndEtr(planillaForm
					.getCtaAscAsociado(), planillaForm.getEmpresa());
		}
		if (planillaForm.getSelected() == 3) {
			lst = asociadoDAO.findByNameUserPlanillaAndEtr(planillaForm
					.getCtaAscAsociado(), planillaForm.getEmpresa());
		}
		if (planillaForm.getSelected() == 2) {
			lst = asociadoDAO.findByNameUserPlanillaAndEtr(planillaForm
					.getCtaAscAsociado(), planillaForm.getEmpresa());
		}
		if (planillaForm.getSelected() == 4) {
			planillaForm.getCtaAscAsociado().getSecPerPersona()
					.setPerPrimerApellido(planillaForm.getPerApellido());
			planillaForm.getCtaAscAsociado().getSecPerPersona()
					.setPerPrimerNombre(planillaForm.getPerNombre());
			lst = asociadoDAO.findByNameUserPlanillaAndEtr(planillaForm
					.getCtaAscAsociado(), planillaForm.getEmpresa());
		}

		request.getSession().setAttribute("listaPlanilla", lst);

		CtaEtrEmpresaTrabajoDAO empresaTrabajoDAO = new CtaEtrEmpresaTrabajoDAO(getSessionHibernate(request));
		List lemp = empresaTrabajoDAO.findAll();
		request.setAttribute("lemp", lemp);

		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);

		// ---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
			// ---- exporta la tabla
			int tipoD = (Integer) request.getSession()
					.getAttribute("tipo_desc");
			if (tipoD == 1) {
				export(tableFacade,request);
			}
			if (tipoD == 2) {
				export2(tableFacade,request);
			}
			if (tipoD == 3) {
				export3(tableFacade,request);
			}
			if (tipoD == 4) {
				export4(tableFacade,request);
			}
			return null;
		} else {
			// ---- genera el html de la tabla para ser mostrada
			String html = "";
			if (planillaForm.getTipoDesc() == 1) {
				html = html(tableFacade, request);
			}
			if (planillaForm.getTipoDesc() == 2) {
				html = html2(tableFacade, request);
			}
			if (planillaForm.getTipoDesc() == 3) {
				html = html3(tableFacade, request);
			}
			if (planillaForm.getTipoDesc() == 4) {
				html = html4(tableFacade, request);
			}
			request.setAttribute(Constantes.LISTA_KEY, html);
		}
		// ----- Variables de configuracion
		request.setAttribute("form", planillaForm);
		request.setAttribute("tipoDesc", planillaForm.getTipoDesc());
		request.setAttribute("edit", 0);
		request.setAttribute(Constantes.ACCION_KEY, "/planilla");
		return mapping.findForward("lista");
	}

	// ---- metodo que genera el html de la tabla del jmesa
	private String html(final TableFacade tableFacade,
			final HttpServletRequest request) {
		tableFacade.setColumnProperties("ascCodigo", "ascId",
				"ascCodigoAsociado", "ascIngresoCoope", "ascRetiroCoope",
				"ascProfesion", "ascSalario", "ascAsociadoPadre");
		Table table = tableFacade.getTable();
		// ---- Titulo de la tabla
		table.setCaptionKey("tbl.planilla.caption");

		Row row = table.getRow();
		Column nombreColumna = row.getColumn("ascCodigo");
		nombreColumna.setTitleKey("tbl.planilla.ascCodigo");

		nombreColumna = row.getColumn("ascId");
		nombreColumna.setTitleKey("tbl.planilla.asociado");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property,
						rowcount);
				CtaAscAsociado asociado = (CtaAscAsociado) item;
				String nombreAsociado = "";
				SecPerPersonaDAO personaDAO = new SecPerPersonaDAO(getSessionHibernate(request));
				SecPerPersona persona = personaDAO.findById(asociado
						.getSecPerPersona().getPerId());
				nombreAsociado = persona.getPerPrimerApellido() + ", "
						+ persona.getPerPrimerNombre();
				return nombreAsociado;
			}

		});

		nombreColumna = row.getColumn("ascCodigoAsociado");
		nombreColumna.setTitleKey("tbl.planilla.cuotaIngreso");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property,
						rowcount);
				CtaAscAsociado asociado = (CtaAscAsociado) item;
				CtaCasCuentaAsociadoDAO casDao = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
				return Format.formatDinero(casDao.getCuotaAfiliacion(asociado
						.getAscId()));
			}

		});

		nombreColumna = row.getColumn("ascIngresoCoope");
		nombreColumna.setTitleKey("tbl.planilla.aportaciones");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property,
						rowcount);
				CtaAscAsociado asociado = (CtaAscAsociado) item;
				double descAportaciones = 0.0;
				descAportaciones += obtenerDescuentos(asociado, "B", "A",
						descAportaciones,request);
				return Format.formatDinero(descAportaciones / DIVISOR);
			}

		});

		nombreColumna = row.getColumn("ascRetiroCoope");
		nombreColumna.setTitleKey("tbl.planilla.ahorros");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property,
						rowcount);
				CtaAscAsociado asociado = (CtaAscAsociado) item;
				double descAhorros = 0.0;
				descAhorros += obtenerDescuentos(asociado, "B", "B",
						descAhorros,request);
				return Format.formatDinero(descAhorros / DIVISOR);
			}

		});

		nombreColumna = row.getColumn("ascProfesion");
		nombreColumna.setTitleKey("tbl.planilla.prestamos");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property,
						rowcount);
				CtaAscAsociado asociado = (CtaAscAsociado) item;
				double descPrestamos = 0.0;
				descPrestamos += obtenerDescuentos(asociado, "C", "",
						descPrestamos,request);
				return Format.formatDinero(descPrestamos / DIVISOR);
			}

		});

		nombreColumna = row.getColumn("ascSalario");
		nombreColumna.setTitleKey("tbl.planilla.seguros");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property,
						rowcount);
				CtaAscAsociado asociado = (CtaAscAsociado) item;
				double descSeguros = 0.0;
				descSeguros += obtenerDescuentos(asociado, "D", "", descSeguros,request);
				return Format.formatDinero(descSeguros / DIVISOR);
			}

		});

		nombreColumna = row.getColumn("ascAsociadoPadre");
		nombreColumna.setTitleKey("tbl.planilla.total");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property,
						rowcount);
				CtaAscAsociado asociado = (CtaAscAsociado) item;

				CtaCasCuentaAsociadoDAO casDao = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
				double cuotaAfiliacion = casDao.getCuotaAfiliacion(asociado
						.getAscId());

				double descAportaciones = 0.0;
				descAportaciones += obtenerDescuentos(asociado, "B", "A",
						descAportaciones,request);

				double descAhorros = 0.0;
				descAhorros += obtenerDescuentos(asociado, "B", "B",
						descAhorros,request);

				double descPrestamos = 0.0;
				descPrestamos += obtenerDescuentos(asociado, "C", "",
						descPrestamos,request);

				double descSeguros = 0.0;
				descSeguros += obtenerDescuentos(asociado, "D", "", descSeguros,request);

				return Format
						.formatDinero(cuotaAfiliacion
								+ (descAportaciones + descAhorros
										+ descPrestamos + descSeguros)
								/ DIVISOR);
			}
		});
		return tableFacade.render();
	}

	protected double obtenerDescuentos(CtaAscAsociado asociado,
			String tipoCuenta, String tipoCuenta2, double descuentos,HttpServletRequest request) {
		double descuentosX = descuentos;
		// CtaCasCuentaAsociadoDAO casDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
		descuentosX = getDescuentos(asociado.getAscId(), tipoCuenta,
				tipoCuenta2, descuentosX,request);

		// CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
		if (asociado.getAscPagaraPadre() != null
				&& asociado.getAscPagaraPadre().equalsIgnoreCase("S")) {
			descuentosX = montosDependientes(asociado.getAscId(), descuentosX,
					tipoCuenta, tipoCuenta2,request);
		}

		return descuentosX;
	}

	private double getDescuentos(String ascId, String tipoCuenta,
			String tipoCuenta2, double descuentosX,HttpServletRequest request) {
		CtaCasCuentaAsociadoDAO casDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
		List cuentas = casDAO.findByAscAndTipoCuenta2(ascId, tipoCuenta);
		for (Iterator iterator = cuentas.iterator(); iterator.hasNext();) {
			CtaCasCuentaAsociado cas = (CtaCasCuentaAsociado) iterator.next();
			if (tipoCuenta.equals("B")) {
				if (cas.getCtaCahCuentaAhorro().getCahId().substring(0, 1)
						.equals(tipoCuenta2)) {
					CtaCahCuentaAhorro ahorro = cas.getCtaCahCuentaAhorro();
					descuentosX += ahorro.getCahCuota();
				}
			}
			if (tipoCuenta.equals("C")) {
				CtaPrePrestamo prestamo = cas.getCtaPrePrestamo();
				if (prestamo.getPreSaldoActualT() > 0) {
					descuentosX += prestamo.getPreCuota();
				}
			}
			if (tipoCuenta.equals("D")) {
				CtaSegSeguros seguros = cas.getCtaSegSeguros();
				if (seguros.getSegSaldoActual() > 0) {
					descuentosX += seguros.getSegCuota();
				}
			}
		}
		return descuentosX;
	}

	private Double montosDependientes(String ascId, double descuentosX,
			String tipoCuenta, String tipoCuenta2,HttpServletRequest request) {
		CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
		List dependientes = asociadoDAO.findByPadreYPadrePaga(ascId);
		for (Iterator iterator2 = dependientes.iterator(); iterator2.hasNext();) {
			CtaAscAsociado dependiente = (CtaAscAsociado) iterator2.next();
			descuentosX = getDescuentos(dependiente.getAscId(), tipoCuenta,
					tipoCuenta2, descuentosX,request);
		}
		return descuentosX;
	}

	// ---- metodo que genera los exports, el formato que tendran
	private void export(final TableFacade tableFacade,final HttpServletRequest request) {
		tableFacade.setColumnProperties("ascCodigo", "ascIngresoCoope",
				"ascRetiroCoope", "ascProfesion", "ascSalario",
				"ascAsociadoPadre");
		Table table = tableFacade.getTable();
		// ---- Titulo de la tabla
		table.setCaptionKey("tbl.planilla.caption");

		Row row = table.getRow();
		Column nombreColumna = row.getColumn("ascCodigo");
		nombreColumna.setTitleKey("tbl.planilla.ascCodigo.x");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {

			public String getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property,
						rowcount);
				CtaAscAsociado asociado = (CtaAscAsociado) item;
				String codigo = "'" + asociado.getAscCodigo();
				return codigo;
			}

		});

		nombreColumna = row.getColumn("ascIngresoCoope");
		nombreColumna.setTitleKey("tbl.planilla.aportaciones");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property,
						rowcount);
				CtaAscAsociado asociado = (CtaAscAsociado) item;
				double descAportaciones = 0.0;
				descAportaciones += obtenerDescuentos(asociado, "B", "A",
						descAportaciones,request);
				return descAportaciones;
			}

		});

		nombreColumna = row.getColumn("ascRetiroCoope");
		nombreColumna.setTitleKey("tbl.planilla.ahorros");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property,
						rowcount);
				CtaAscAsociado asociado = (CtaAscAsociado) item;
				double descAhorros = 0.0;
				descAhorros += obtenerDescuentos(asociado, "B", "B",
						descAhorros,request);
				return descAhorros;
			}

		});

		nombreColumna = row.getColumn("ascProfesion");
		nombreColumna.setTitleKey("tbl.planilla.prestamos");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property,
						rowcount);
				CtaAscAsociado asociado = (CtaAscAsociado) item;
				double descPrestamos = 0.0;
				descPrestamos += obtenerDescuentos(asociado, "C", "",
						descPrestamos,request);
				return descPrestamos;
			}

		});

		nombreColumna = row.getColumn("ascSalario");
		nombreColumna.setTitleKey("tbl.planilla.seguros");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property,
						rowcount);
				CtaAscAsociado asociado = (CtaAscAsociado) item;
				double descSeguros = 0.0;
				descSeguros += obtenerDescuentos(asociado, "D", "", descSeguros,request);
				return descSeguros;
			}

		});

		nombreColumna = row.getColumn("ascAsociadoPadre");
		nombreColumna.setTitleKey("tbl.planilla.total");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property,
						rowcount);
				CtaAscAsociado asociado = (CtaAscAsociado) item;
				double descAportaciones = 0.0;
				descAportaciones += obtenerDescuentos(asociado, "B", "A",
						descAportaciones,request);

				double descAhorros = 0.0;
				descAhorros += obtenerDescuentos(asociado, "B", "B",
						descAhorros,request);

				double descPrestamos = 0.0;
				descPrestamos += obtenerDescuentos(asociado, "C", "",
						descPrestamos,request);

				double descSeguros = 0.0;
				descSeguros += obtenerDescuentos(asociado, "D", "", descSeguros,request);

				return descAportaciones + descAhorros + descPrestamos
						+ descSeguros;
			}
		});

		tableFacade.render();
	}

	// ---- metodo que genera el html de la tabla del jmesa
	private String html2(final TableFacade tableFacade,
			final HttpServletRequest request) {
		tableFacade.setColumnProperties("ascCodigo", "ascId",
				"ascIngresoCoope", "ascAsociadoPadre");
		Table table = tableFacade.getTable();
		// ---- Titulo de la tabla
		table.setCaptionKey("tbl.planilla.caption");

		Row row = table.getRow();
		Column nombreColumna = row.getColumn("ascCodigo");
		nombreColumna.setTitleKey("tbl.planilla.ascCodigo");

		nombreColumna = row.getColumn("ascId");
		nombreColumna.setTitleKey("tbl.planilla.asociado");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property,
						rowcount);
				CtaAscAsociado asociado = (CtaAscAsociado) item;
				String nombreAsociado = "";
				SecPerPersonaDAO personaDAO = new SecPerPersonaDAO(getSessionHibernate(request));
				SecPerPersona persona = personaDAO.findById(asociado
						.getSecPerPersona().getPerId());
				nombreAsociado = persona.getPerPrimerApellido() + ", "
						+ persona.getPerPrimerNombre();
				return nombreAsociado;
			}

		});

		nombreColumna = row.getColumn("ascIngresoCoope");
		nombreColumna.setTitleKey("tbl.planilla.empresa");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property,
						rowcount);
				CtaAscAsociado asociado = (CtaAscAsociado) item;
				String empresa = "";
				if (asociado.getAscDirTrabajo() == null
						|| asociado.getAscDirTrabajo().equals("")) {
					CtaDptDepartamentoTrabajo departamentoTrabajo = asociado
							.getCtaDptDepartamentoTrabajo();
					CtaEtrEmpresaTrabajoDAO empresaTrabajoDAO = new CtaEtrEmpresaTrabajoDAO(getSessionHibernate(request));
					CtaEtrEmpresaTrabajo empresaTrabajo = empresaTrabajoDAO
							.findById(departamentoTrabajo
									.getCtaEtrEmpresaTrabajo().getEtrId());
					empresa = empresaTrabajo.getEtrNombre();
				} else {
					empresa = asociado.getAscDirTrabajo();
				}
				return empresa;
			}

		});

		nombreColumna = row.getColumn("ascAsociadoPadre");
		nombreColumna.setTitleKey("tbl.planilla.total");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property,
						rowcount);
				CtaAscAsociado asociado = (CtaAscAsociado) item;

				CtaCasCuentaAsociadoDAO casDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
				double afiliacion = casDAO.getCuotaAfiliacion(asociado
						.getAscId());

				double descAportaciones = 0.0;
				descAportaciones += obtenerDescuentos(asociado, "B", "A",
						descAportaciones,request);

				double descAhorros = 0.0;
				descAhorros += obtenerDescuentos(asociado, "B", "B",
						descAhorros,request);

				double descPrestamos = 0.0;
				descPrestamos += obtenerDescuentos(asociado, "C", "",
						descPrestamos,request);

				double descSeguros = 0.0;
				descSeguros += obtenerDescuentos(asociado, "D", "", descSeguros,request);

				return Format
						.formatDinero(afiliacion
								+ (descAportaciones + descAhorros
										+ descPrestamos + descSeguros)
								/ DIVISOR);
			}
		});

		return tableFacade.render();
	}

	// ---- metodo que genera los exports, el formato que tendran
	private void export2(final TableFacade tableFacade,final HttpServletRequest request) {
		tableFacade.setColumnProperties("ascCodigo", "ascIngresoCoope",
				"ascAsociadoPadre");
		Table table = tableFacade.getTable();
		// ---- Titulo de la tabla
		table.setCaptionKey("tbl.planilla.caption");

		Row row = table.getRow();
		Column nombreColumna = row.getColumn("ascCodigo");
		nombreColumna.setTitleKey("tbl.planilla.ascCodigo.x");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property,
						rowcount);
				CtaAscAsociado asociado = (CtaAscAsociado) item;
				String codigo = "'" + asociado.getAscCodigo();
				return codigo;
			}

		});

		nombreColumna = row.getColumn("ascIngresoCoope");
		nombreColumna.setTitleKey("tbl.planilla.empresa");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property,
						rowcount);
				CtaAscAsociado asociado = (CtaAscAsociado) item;
				String empresa = "";
				if (asociado.getAscDirTrabajo() == null
						|| asociado.getAscDirTrabajo().equals("")) {
					CtaDptDepartamentoTrabajo departamentoTrabajo = asociado
							.getCtaDptDepartamentoTrabajo();
					CtaEtrEmpresaTrabajoDAO empresaTrabajoDAO = new CtaEtrEmpresaTrabajoDAO(getSessionHibernate(request));
					CtaEtrEmpresaTrabajo empresaTrabajo = empresaTrabajoDAO
							.findById(departamentoTrabajo
									.getCtaEtrEmpresaTrabajo().getEtrId());
					empresa = empresaTrabajo.getEtrNombre();
				} else {
					empresa = asociado.getAscDirTrabajo();
				}
				return empresa;
			}

		});

		nombreColumna = row.getColumn("ascAsociadoPadre");
		nombreColumna.setTitleKey("tbl.planilla.total");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property,
						rowcount);
				CtaAscAsociado asociado = (CtaAscAsociado) item;
				double descAportaciones = 0.0;
				descAportaciones += obtenerDescuentos(asociado, "B", "A",
						descAportaciones,request);

				double descAhorros = 0.0;
				descAhorros += obtenerDescuentos(asociado, "B", "B",
						descAhorros,request);

				double descPrestamos = 0.0;
				descPrestamos += obtenerDescuentos(asociado, "C", "",
						descPrestamos,request);

				double descSeguros = 0.0;
				descSeguros += obtenerDescuentos(asociado, "D", "", descSeguros,request);

				return descAportaciones + descAhorros + descPrestamos
						+ descSeguros;
			}
		});

		tableFacade.render();
	}

	// ---- metodo que genera el html de la tabla del jmesa
	private String html3(final TableFacade tableFacade,
			final HttpServletRequest request) {
		if (WICH_ONE.equals("A")) {
			tableFacade.setColumnProperties("ascCodigo", "ascId",
					"ascIngresoCoope");
		}
		if (WICH_ONE.equals("B")) {
			tableFacade.setColumnProperties("ascCodigo", "ascId",
					"ascRetiroCoope");
		}
		if (WICH_ONE.equals("C")) {
			tableFacade.setColumnProperties("ascCodigo", "ascId",
					"ascProfesion");
		}
		if (WICH_ONE.equals("D")) {
			tableFacade.setColumnProperties("ascCodigo", "ascId", "ascSalario");
		}

		Table table = tableFacade.getTable();
		// ---- Titulo de la tabla
		table.setCaptionKey("tbl.planilla.caption");

		Row row = table.getRow();
		Column nombreColumna = row.getColumn("ascCodigo");
		nombreColumna.setTitleKey("tbl.planilla.ascCodigo");

		nombreColumna = row.getColumn("ascId");
		nombreColumna.setTitleKey("tbl.planilla.asociado");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property,
						rowcount);
				CtaAscAsociado asociado = (CtaAscAsociado) item;
				String nombreAsociado = "";
				SecPerPersonaDAO personaDAO = new SecPerPersonaDAO(getSessionHibernate(request));
				SecPerPersona persona = personaDAO.findById(asociado
						.getSecPerPersona().getPerId());
				nombreAsociado = persona.getPerPrimerApellido() + ", "
						+ persona.getPerPrimerNombre();
				return nombreAsociado;
			}

		});

		if (WICH_ONE.equals("A")) {
			nombreColumna = row.getColumn("ascIngresoCoope");
			nombreColumna.setTitleKey("tbl.planilla.aportaciones");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {

				public Object getValue(Object item, String property,
						int rowcount) {
					Object value = new BasicCellEditor().getValue(item,
							property, rowcount);
					CtaAscAsociado asociado = (CtaAscAsociado) item;
					double descAportaciones = 0.0;
					descAportaciones += obtenerDescuentos(asociado, "B", "A",
							descAportaciones,request);
					return Format.formatDinero(descAportaciones / DIVISOR);
				}

			});
		}
		if (WICH_ONE.equals("B")) {
			nombreColumna = row.getColumn("ascRetiroCoope");
			nombreColumna.setTitleKey("tbl.planilla.ahorros");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {

				public Object getValue(Object item, String property,
						int rowcount) {
					Object value = new BasicCellEditor().getValue(item,
							property, rowcount);
					CtaAscAsociado asociado = (CtaAscAsociado) item;
					double descAhorros = 0.0;
					descAhorros += obtenerDescuentos(asociado, "B", "B",
							descAhorros,request);
					return Format.formatDinero(descAhorros / DIVISOR);
				}

			});
		}
		if (WICH_ONE.equals("C")) {
			nombreColumna = row.getColumn("ascProfesion");
			nombreColumna.setTitleKey("tbl.planilla.prestamos");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {

				public Object getValue(Object item, String property,
						int rowcount) {
					Object value = new BasicCellEditor().getValue(item,
							property, rowcount);
					CtaAscAsociado asociado = (CtaAscAsociado) item;

					CtaCasCuentaAsociadoDAO casDao = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
					double afiliacion = casDao.getCuotaAfiliacion(asociado
							.getAscId());

					double descPrestamos = 0.0;
					descPrestamos += obtenerDescuentos(asociado, "C", "",
							descPrestamos,request);
					return Format.formatDinero(afiliacion + descPrestamos
							/ DIVISOR);
				}

			});
		}
		if (WICH_ONE.equals("D")) {
			nombreColumna = row.getColumn("ascSalario");
			nombreColumna.setTitleKey("tbl.planilla.seguros");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {

				public Object getValue(Object item, String property,
						int rowcount) {
					Object value = new BasicCellEditor().getValue(item,
							property, rowcount);
					CtaAscAsociado asociado = (CtaAscAsociado) item;
					double descSeguros = 0.0;
					descSeguros += obtenerDescuentos(asociado, "D", "",
							descSeguros,request);
					return Format.formatDinero(descSeguros / DIVISOR);
				}

			});
		}

		return tableFacade.render();
	}

	// ---- metodo que genera los exports, el formato que tendran
	private void export3(final TableFacade tableFacade,final HttpServletRequest request) {
		if (WICH_ONE.equals("A")) {
			tableFacade.setColumnProperties("ascCodigo", "ascIngresoCoope");
		}
		if (WICH_ONE.equals("B")) {
			tableFacade.setColumnProperties("ascCodigo", "ascRetiroCoope");
		}
		if (WICH_ONE.equals("C")) {
			tableFacade.setColumnProperties("ascCodigo", "ascProfesion");
		}
		if (WICH_ONE.equals("D")) {
			tableFacade.setColumnProperties("ascCodigo", "ascSalario");
		}

		Table table = tableFacade.getTable();
		// ---- Titulo de la tabla
		table.setCaptionKey("tbl.planilla.caption");

		Row row = table.getRow();
		Column nombreColumna = row.getColumn("ascCodigo");
		nombreColumna.setTitleKey("tbl.planilla.ascCodigo.x");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property,
						rowcount);
				CtaAscAsociado asociado = (CtaAscAsociado) item;
				String codigo = "'" + asociado.getAscCodigo();
				return codigo;
			}

		});

		if (WICH_ONE.equals("A")) {
			nombreColumna = row.getColumn("ascIngresoCoope");
			nombreColumna.setTitleKey("tbl.planilla.aportaciones");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {

				public Object getValue(Object item, String property,
						int rowcount) {
					Object value = new BasicCellEditor().getValue(item,
							property, rowcount);
					CtaAscAsociado asociado = (CtaAscAsociado) item;
					double descAportaciones = 0.0;
					descAportaciones += obtenerDescuentos(asociado, "B", "A",
							descAportaciones,request);
					return descAportaciones;
				}

			});
		}
		if (WICH_ONE.equals("B")) {
			nombreColumna = row.getColumn("ascRetiroCoope");
			nombreColumna.setTitleKey("tbl.planilla.ahorros");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {

				public Object getValue(Object item, String property,
						int rowcount) {
					Object value = new BasicCellEditor().getValue(item,
							property, rowcount);
					CtaAscAsociado asociado = (CtaAscAsociado) item;
					double descAhorros = 0.0;
					descAhorros += obtenerDescuentos(asociado, "B", "B",
							descAhorros,request);
					return descAhorros;
				}

			});
		}
		if (WICH_ONE.equals("C")) {
			nombreColumna = row.getColumn("ascProfesion");
			nombreColumna.setTitleKey("tbl.planilla.prestamos");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {

				public Object getValue(Object item, String property,
						int rowcount) {
					Object value = new BasicCellEditor().getValue(item,
							property, rowcount);
					CtaAscAsociado asociado = (CtaAscAsociado) item;
					double descPrestamos = 0.0;
					descPrestamos += obtenerDescuentos(asociado, "C", "",
							descPrestamos,request);
					return descPrestamos;
				}

			});
		}
		if (WICH_ONE.equals("D")) {
			nombreColumna = row.getColumn("ascSalario");
			nombreColumna.setTitleKey("tbl.planilla.seguros");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {

				public Object getValue(Object item, String property,
						int rowcount) {
					Object value = new BasicCellEditor().getValue(item,
							property, rowcount);
					CtaAscAsociado asociado = (CtaAscAsociado) item;
					double descSeguros = 0.0;
					descSeguros += obtenerDescuentos(asociado, "D", "",
							descSeguros,request);
					return descSeguros;
				}

			});
		}

		tableFacade.render();
	}

	// ---- metodo que genera el html de la tabla del jmesa
	private String html4(final TableFacade tableFacade,
			final HttpServletRequest request) {
		if (WICH_ONE.equals("E")) {
			tableFacade.setColumnProperties("ascCodigo", "ascId",
					"ascNacionalidad", "ascJefeInmediato");
		}
		if (WICH_ONE.equals("F")) {
			tableFacade.setColumnProperties("ascCodigo", "ascId",
					"ascNacionalidad", "ascJefeInmediato", "ascSalario");
		}
		if (WICH_ONE.equals("G")) {
			tableFacade.setColumnProperties("ascCodigo", "ascId",
					"ascNacionalidad", "ascJefeInmediato", "ascSalario");
		}

		Table table = tableFacade.getTable();
		// ---- Titulo de la tabla
		table.setCaptionKey("tbl.planilla.caption");

		Row row = table.getRow();
		Column nombreColumna = row.getColumn("ascCodigo");
		nombreColumna.setTitleKey("tbl.planilla.ascCodigo");

		nombreColumna = row.getColumn("ascId");
		nombreColumna.setTitleKey("tbl.planilla.asociado");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property,
						rowcount);
				CtaAscAsociado asociado = (CtaAscAsociado) item;
				String nombreAsociado = "";
				SecPerPersonaDAO personaDAO = new SecPerPersonaDAO(getSessionHibernate(request));
				SecPerPersona persona = personaDAO.findById(asociado
						.getSecPerPersona().getPerId());
				nombreAsociado = persona.getPerPrimerApellido() + ", "
						+ persona.getPerPrimerNombre();
				return nombreAsociado;
			}

		});

		if (WICH_ONE.equals("E")) {
			nombreColumna = row.getColumn("ascNacionalidad");
			nombreColumna.setTitleKey("tbl.planilla.ahoYApor");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {

				public Object getValue(Object item, String property,
						int rowcount) {
					Object value = new BasicCellEditor().getValue(item,
							property, rowcount);
					CtaAscAsociado asociado = (CtaAscAsociado) item;
					double descAportaciones = 0.0;
					descAportaciones += obtenerDescuentos(asociado, "B", "A",
							descAportaciones,request);

					double descAhorros = 0.0;
					descAhorros += obtenerDescuentos(asociado, "B", "B",
							descAhorros,request);

					return Format.formatDinero((descAportaciones + descAhorros)
							/ DIVISOR);
				}
			});

			nombreColumna = row.getColumn("ascJefeInmediato");
			nombreColumna.setTitleKey("tbl.planilla.presYSeg");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {

				public Object getValue(Object item, String property,
						int rowcount) {
					Object value = new BasicCellEditor().getValue(item,
							property, rowcount);
					CtaAscAsociado asociado = (CtaAscAsociado) item;
					CtaCasCuentaAsociadoDAO casDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));

					double afiliacion = casDAO.getCuotaAfiliacion(asociado
							.getAscId());

					double descPrestamos = 0.0;
					descPrestamos += obtenerDescuentos(asociado, "C", "",
							descPrestamos,request);

					double descSeguros = 0.0;
					descSeguros += obtenerDescuentos(asociado, "D", "",
							descSeguros,request);
					return Format.formatDinero(afiliacion
							+ (descPrestamos + descSeguros) / DIVISOR);
				}
			});

		}
		if (WICH_ONE.equals("F")) {
			nombreColumna = row.getColumn("ascNacionalidad");
			nombreColumna.setTitleKey("tbl.planilla.aportaciones");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {

				public Object getValue(Object item, String property,
						int rowcount) {
					Object value = new BasicCellEditor().getValue(item,
							property, rowcount);
					CtaAscAsociado asociado = (CtaAscAsociado) item;
					double descAportaciones = 0.0;
					descAportaciones += obtenerDescuentos(asociado, "B", "A",
							descAportaciones,request);
					return Format.formatDinero(descAportaciones / DIVISOR);
				}

			});

			nombreColumna = row.getColumn("ascJefeInmediato");
			nombreColumna.setTitleKey("tbl.planilla.ahorros");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {

				public Object getValue(Object item, String property,
						int rowcount) {
					Object value = new BasicCellEditor().getValue(item,
							property, rowcount);
					CtaAscAsociado asociado = (CtaAscAsociado) item;
					double descAportaciones = 0.0;
					descAportaciones += obtenerDescuentos(asociado, "B", "B",
							descAportaciones,request);
					return Format.formatDinero(descAportaciones / DIVISOR);
				}

			});

			nombreColumna = row.getColumn("ascSalario");
			nombreColumna.setTitleKey("tbl.planilla.presYSeg");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {

				public Object getValue(Object item, String property,
						int rowcount) {
					Object value = new BasicCellEditor().getValue(item,
							property, rowcount);
					CtaAscAsociado asociado = (CtaAscAsociado) item;
					CtaCasCuentaAsociadoDAO casDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));

					double afiliacion = casDAO.getCuotaAfiliacion(asociado
							.getAscId());

					double descPrestamos = 0.0;
					descPrestamos += obtenerDescuentos(asociado, "C", "",
							descPrestamos,request);

					double descSeguros = 0.0;
					descSeguros += obtenerDescuentos(asociado, "D", "",
							descSeguros,request);
					return Format.formatDinero(afiliacion
							+ (descPrestamos + descSeguros) / DIVISOR);
				}
			});
		}

		if (WICH_ONE.equals("G")) {
			nombreColumna = row.getColumn("ascNacionalidad");
			nombreColumna.setTitleKey("tbl.planilla.ahoYApor");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {

				public Object getValue(Object item, String property,
						int rowcount) {
					Object value = new BasicCellEditor().getValue(item,
							property, rowcount);
					CtaAscAsociado asociado = (CtaAscAsociado) item;
					double descAportaciones = 0.0;
					descAportaciones += obtenerDescuentos(asociado, "B", "A",
							descAportaciones,request);

					double descAhorros = 0.0;
					descAhorros += obtenerDescuentos(asociado, "B", "B",
							descAhorros,request);

					return Format.formatDinero((descAportaciones + descAhorros)
							/ DIVISOR);
				}
			});

			nombreColumna = row.getColumn("ascJefeInmediato");
			nombreColumna.setTitleKey("tbl.planilla.prestamos");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {

				public Object getValue(Object item, String property,
						int rowcount) {
					Object value = new BasicCellEditor().getValue(item,
							property, rowcount);
					CtaAscAsociado asociado = (CtaAscAsociado) item;

					CtaCasCuentaAsociadoDAO casDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
					double afiliacion = casDAO.getCuotaAfiliacion(asociado
							.getAscId());

					double descPrestamos = 0.0;
					descPrestamos += obtenerDescuentos(asociado, "C", "",
							descPrestamos,request);
					return Format.formatDinero(afiliacion + descPrestamos
							/ DIVISOR);
				}

			});

			nombreColumna = row.getColumn("ascSalario");
			nombreColumna.setTitleKey("tbl.planilla.seguros");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {

				public Object getValue(Object item, String property,
						int rowcount) {
					Object value = new BasicCellEditor().getValue(item,
							property, rowcount);
					CtaAscAsociado asociado = (CtaAscAsociado) item;
					double descSeguros = 0.0;
					descSeguros += obtenerDescuentos(asociado, "D", "",
							descSeguros,request);
					return Format.formatDinero(descSeguros / DIVISOR);
				}

			});
		}

		return tableFacade.render();
	}

	// ---- metodo que genera los exports, el formato que tendran
	private void export4(final TableFacade tableFacade,final HttpServletRequest request) {
		if (WICH_ONE.equals("E")) {
			tableFacade.setColumnProperties("ascCodigo", "ascNacionalidad",
					"ascJefeInmediato");
		}
		if (WICH_ONE.equals("F")) {
			tableFacade.setColumnProperties("ascCodigo", "ascNacionalidad",
					"ascJefeInmediato", "ascSalario");
		}
		if (WICH_ONE.equals("G")) {
			tableFacade.setColumnProperties("ascCodigo", "ascNacionalidad",
					"ascJefeInmediato", "ascSalario");
		}

		Table table = tableFacade.getTable();
		// ---- Titulo de la tabla
		table.setCaptionKey("tbl.planilla.caption");

		Row row = table.getRow();
		Column nombreColumna = row.getColumn("ascCodigo");
		nombreColumna.setTitleKey("tbl.planilla.ascCodigo.x");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property,
						rowcount);
				CtaAscAsociado asociado = (CtaAscAsociado) item;
				String codigo = "'" + asociado.getAscCodigo();
				return codigo;
			}

		});

		if (WICH_ONE.equals("E")) {
			nombreColumna = row.getColumn("ascNacionalidad");
			nombreColumna.setTitleKey("tbl.planilla.ahoYApor");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {

				public Object getValue(Object item, String property,
						int rowcount) {
					Object value = new BasicCellEditor().getValue(item,
							property, rowcount);
					CtaAscAsociado asociado = (CtaAscAsociado) item;
					double descAportaciones = 0.0;
					descAportaciones += obtenerDescuentos(asociado, "B", "A",
							descAportaciones,request);

					double descAhorros = 0.0;
					descAhorros += obtenerDescuentos(asociado, "B", "B",
							descAhorros,request);

					return descAportaciones + descAhorros;
				}
			});

			nombreColumna = row.getColumn("ascJefeInmediato");
			nombreColumna.setTitleKey("tbl.planilla.presYSeg");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {

				public Object getValue(Object item, String property,
						int rowcount) {
					Object value = new BasicCellEditor().getValue(item,
							property, rowcount);
					CtaAscAsociado asociado = (CtaAscAsociado) item;
					CtaCasCuentaAsociadoDAO casDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));

					double descPrestamos = 0.0;
					descPrestamos += obtenerDescuentos(asociado, "C", "",
							descPrestamos,request);

					double descSeguros = 0.0;
					descSeguros += obtenerDescuentos(asociado, "D", "",
							descSeguros,request);
					return descPrestamos + descSeguros;
				}
			});

		}
		if (WICH_ONE.equals("F")) {
			nombreColumna = row.getColumn("ascNacionalidad");
			nombreColumna.setTitleKey("tbl.planilla.aportaciones");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {

				public Object getValue(Object item, String property,
						int rowcount) {
					Object value = new BasicCellEditor().getValue(item,
							property, rowcount);
					CtaAscAsociado asociado = (CtaAscAsociado) item;
					double descAportaciones = 0.0;
					descAportaciones += obtenerDescuentos(asociado, "B", "A",
							descAportaciones,request);
					return descAportaciones;
				}

			});

			nombreColumna = row.getColumn("ascJefeInmediato");
			nombreColumna.setTitleKey("tbl.planilla.ahorros");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {

				public Object getValue(Object item, String property,
						int rowcount) {
					Object value = new BasicCellEditor().getValue(item,
							property, rowcount);
					CtaAscAsociado asociado = (CtaAscAsociado) item;
					double descAportaciones = 0.0;
					descAportaciones += obtenerDescuentos(asociado, "B", "B",
							descAportaciones,request);
					return descAportaciones;
				}

			});

			nombreColumna = row.getColumn("ascSalario");
			nombreColumna.setTitleKey("tbl.planilla.presYSeg");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {

				public Object getValue(Object item, String property,
						int rowcount) {
					Object value = new BasicCellEditor().getValue(item,
							property, rowcount);
					CtaAscAsociado asociado = (CtaAscAsociado) item;
					CtaCasCuentaAsociadoDAO casDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));

					double descPrestamos = 0.0;
					descPrestamos += obtenerDescuentos(asociado, "C", "",
							descPrestamos,request);

					double descSeguros = 0.0;
					descSeguros += obtenerDescuentos(asociado, "D", "",
							descSeguros,request);
					return descPrestamos + descSeguros;
				}
			});
		}

		if (WICH_ONE.equals("G")) {
			nombreColumna = row.getColumn("ascNacionalidad");
			nombreColumna.setTitleKey("tbl.planilla.ahoYApor");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {

				public Object getValue(Object item, String property,
						int rowcount) {
					Object value = new BasicCellEditor().getValue(item,
							property, rowcount);
					CtaAscAsociado asociado = (CtaAscAsociado) item;
					double descAportaciones = 0.0;
					descAportaciones += obtenerDescuentos(asociado, "B", "A",
							descAportaciones,request);

					double descAhorros = 0.0;
					descAhorros += obtenerDescuentos(asociado, "B", "B",
							descAhorros,request);

					return descAportaciones + descAhorros;
				}
			});

			nombreColumna = row.getColumn("ascJefeInmediato");
			nombreColumna.setTitleKey("tbl.planilla.prestamos");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {

				public Object getValue(Object item, String property,
						int rowcount) {
					Object value = new BasicCellEditor().getValue(item,
							property, rowcount);
					CtaAscAsociado asociado = (CtaAscAsociado) item;
					double descPrestamos = 0.0;
					descPrestamos += obtenerDescuentos(asociado, "C", "",
							descPrestamos,request);
					return descPrestamos;
				}

			});

			nombreColumna = row.getColumn("ascSalario");
			nombreColumna.setTitleKey("tbl.planilla.seguros");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {

				public Object getValue(Object item, String property,
						int rowcount) {
					Object value = new BasicCellEditor().getValue(item,
							property, rowcount);
					CtaAscAsociado asociado = (CtaAscAsociado) item;
					double descSeguros = 0.0;
					descSeguros += obtenerDescuentos(asociado, "D", "",
							descSeguros,request);
					return descSeguros;
				}

			});
		}
		tableFacade.render();
	}

	public ActionForward guardar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		TipoSeguroForm tipoSeguroForm = (TipoSeguroForm) form;
		CtaTisTipoSeguroDAO tipoSeguroDAO = new CtaTisTipoSeguroDAO(getSessionHibernate(request));

		Transaction tx = tipoSeguroDAO.getSession().beginTransaction();
		try {
			if (tipoSeguroDAO.findByTisNombre(
					tipoSeguroForm.getTipoSeguroH().getTisNombre()).isEmpty()) {
				tipoSeguroForm.setCtaPlmPlanMeses(null);
				CtrParParametrosDAO parametrosDAO = new CtrParParametrosDAO(getSessionHibernate(request));

				tipoSeguroForm.setTisFinPoliza(ElapsedTime.obtenerFechaMeses(
						tipoSeguroForm.getTisInicioPoliza(), parametrosDAO
								.findById("ANHO_POLIZA").getParValorNumber()
								.intValue()));

				CtaTntTipoNotaDAO tipoNotaDAO = new CtaTntTipoNotaDAO(getSessionHibernate(request));
				CtaTntTipoNota tipoNota = tipoNotaDAO.findById(tipoSeguroForm
						.getCtaTntTipoNota().getTntId());
				tipoSeguroForm.setCtaTntTipoNota(tipoNota);

				tipoSeguroDAO.save(tipoSeguroForm.getTipoSeguroH());
			} else {
				mensajes("errors.tisNombreRepetido", request);
				return lista(mapping, form, request, response);
			}
		} catch (Exception e) {
			tx.rollback();
			e.printStackTrace();
		} finally {
			tx.commit();
			tipoSeguroDAO.getSession().flush();
			tipoSeguroDAO.getSession().clear();
			
		}
		TipoSeguroForm tipoSeguroForm2 = new TipoSeguroForm();
		return lista(mapping, tipoSeguroForm2, request, response);
	}

	public ActionForward cargarDatos(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		TipoSeguroForm tipoSeguroForm = (TipoSeguroForm) form;
		CtaTisTipoSeguroDAO tipoSeguroDAO = new CtaTisTipoSeguroDAO(getSessionHibernate(request));
		tipoSeguroForm.setTipoSeguroH(tipoSeguroDAO.findById(tipoSeguroForm
				.getTisId()));

		CtaTntTipoNotaDAO tipoNotaDAO = new CtaTntTipoNotaDAO(getSessionHibernate(request));
		List lstTnt = tipoNotaDAO.findAll();
		request.setAttribute("lstTnt", lstTnt);

		List lst = tipoSeguroDAO.findAll();

		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);

		// ---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
			// ---- exporta la tabla
			export(tableFacade,request);
			return null;
		} else {
			// ---- genera el html de la tabla para ser mostrada
			String html = html(tableFacade, request);
			request.setAttribute(Constantes.LISTA_KEY, html);
		}
		// ----- Variables de configuracion
		request.setAttribute("form", tipoSeguroForm);
		request.setAttribute("edit", 1);
		request.setAttribute(Constantes.ACCION_KEY, "/tipoSeguro");
		return mapping.findForward("lista");
	}

	public ActionForward redirectInvalidData(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		ActionErrors errors = (ActionErrors) request.getSession().getAttribute(
				Constantes.ERRORS);
		saveMessages(request, errors);
		return lista(mapping, form, request, response);
	}

	public void mensajes(String msg, HttpServletRequest request) {
		ActionErrors errors = new ActionErrors();
		errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(msg));
		saveMessages(request, errors);
	}

	public ActionForward eliminar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		TipoSeguroForm tipoSeguroForm = (TipoSeguroForm) form;
		CtaTisTipoSeguroDAO tipoSeguroDAO = new CtaTisTipoSeguroDAO(getSessionHibernate(request));

		Transaction tx = tipoSeguroDAO.getSession().beginTransaction();
		try {
			CtaTisTipoSeguro tipoSeguro = tipoSeguroDAO.findById(tipoSeguroForm
					.getTisId2());
			if (tipoSeguro.getCtaSegSeguroses().size() > 0) {
				mensajes("errors.tis.tieneHijos", request);
				return lista(mapping, form, request, response);
			} else {
				tipoSeguroDAO.delete(tipoSeguro);
			}
		} catch (Exception e) {
			tx.rollback();
			e.printStackTrace();
		} finally {
			tx.commit();
			tipoSeguroDAO.getSession().flush();
			tipoSeguroDAO.getSession().clear();
			
		}
		mensajes("msg.tis.eliminacionExitosa", request);
		TipoSeguroForm tipoSeguroForm2 = new TipoSeguroForm();
		return lista(mapping, tipoSeguroForm2, request, response);
	}

	public ActionForward salvar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		TipoSeguroForm tipoSeguroForm = (TipoSeguroForm) form;
		CtaTisTipoSeguroDAO tipoSeguroDAO = new CtaTisTipoSeguroDAO(getSessionHibernate(request));
		CtaTisTipoSeguro tipoSeguro = tipoSeguroDAO.findById(tipoSeguroForm
				.getTisId());
		Transaction tx = tipoSeguroDAO.getSession().beginTransaction();
		try {
			if (tipoSeguroForm.getTipoSeguroH().getTisNombre().equals(
					tipoSeguro.getTisNombre())) {
				tipoSeguroForm.setCtaPlmPlanMeses(null);
				CtrParParametrosDAO parametrosDAO = new CtrParParametrosDAO(getSessionHibernate(request));

				tipoSeguroForm.setTisFinPoliza(ElapsedTime.obtenerFechaMeses(
						tipoSeguroForm.getTisInicioPoliza(), parametrosDAO
								.findById("ANHO_POLIZA").getParValorNumber()
								.intValue()));

				CtaTntTipoNotaDAO tipoNotaDAO = new CtaTntTipoNotaDAO(getSessionHibernate(request));
				CtaTntTipoNota tipoNota = tipoNotaDAO.findById(tipoSeguroForm
						.getCtaTntTipoNota().getTntId());
				tipoSeguroForm.setCtaTntTipoNota(tipoNota);

				tipoSeguroDAO.merge(tipoSeguroForm.getTipoSeguroH());
			} else {
				if (tipoSeguroDAO.findByTisNombre(
						tipoSeguroForm.getTipoSeguroH().getTisNombre())
						.isEmpty()) {
					tipoSeguroForm.setCtaPlmPlanMeses(null);

					CtaTntTipoNotaDAO tipoNotaDAO = new CtaTntTipoNotaDAO(getSessionHibernate(request));
					CtaTntTipoNota tipoNota = tipoNotaDAO
							.findById(tipoSeguroForm.getCtaTntTipoNota()
									.getTntId());
					tipoSeguroForm.setCtaTntTipoNota(tipoNota);

					tipoSeguroDAO.merge(tipoSeguroForm.getTipoSeguroH());
				} else {
					mensajes("errors.tisNombreRepetido", request);
					return lista(mapping, form, request, response);
				}
			}
		} catch (Exception e) {
			tx.rollback();
			e.printStackTrace();
		} finally {
			tx.commit();
			tipoSeguroDAO.getSession().flush();
			tipoSeguroDAO.getSession().clear();
			
		}
		mensajes("msg.tis.modificacionExitosa", request);
		TipoSeguroForm tipoSeguroForm2 = new TipoSeguroForm();
		return lista(mapping, tipoSeguroForm2, request, response);
	}

	public ActionForward cancelar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		return lista(mapping, form, request, response);
	}

	public ActionForward verificar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		PlanillaForm planillaForm = (PlanillaForm) form;

		CtaEtrEmpresaTrabajoDAO etrDao = new CtaEtrEmpresaTrabajoDAO(getSessionHibernate(request));
		List empresas = etrDao.findAll();
		request.setAttribute("empresas", empresas);

		// ----- Variables de configuracion
		request.setAttribute(Constantes.ACCION_KEY, "/planilla");
		return mapping.findForward("verificar");
	}

	public ActionForward cargar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		PlanillaForm planillaForm = (PlanillaForm) form;
		CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
		List lst = asociadoDAO.findAllInternosByEmpresa(planillaForm
				.getEmpresa());
		FormFile file = planillaForm.getArchivo();
		List listaExcel = leerExcel(file, request, lst, planillaForm
				.getUsuarioConectado().getNombreUsuario(), planillaForm
				.getEmpresa());

		request.getSession().setAttribute("lPlanilla", listaExcel);

		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(listaExcel);

		// ---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		tableFacade.setMaxRows(listaExcel.size());
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
			// ---- exporta la tabla
			export(tableFacade,request);
			return null;
		} else {
			// ---- genera el html de la tabla para ser mostrada
			String html = "";
			html = htmlV(tableFacade, request);
			request.setAttribute(Constantes.LISTA_KEY, html);
		}

		CtaEtrEmpresaTrabajoDAO etrDao = new CtaEtrEmpresaTrabajoDAO(getSessionHibernate(request));
		List empresas = etrDao.findAll();
		request.setAttribute("empresas", empresas);

		// ----- Variables de configuracion
		// planillaForm.setArchivo(null);
		request.setAttribute("form", planillaForm);
		request.setAttribute(Constantes.ACCION_KEY, "/planilla");
		request.setAttribute("edit", 1);
		return mapping.findForward("verificar");
	}

	public ArrayList leerExcel(FormFile file, HttpServletRequest request,
			List lst, String usuario, int empresa) {
		CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
		CtaCasCuentaAsociadoDAO casDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
		CtrParParametrosDAO parametrosDAO = new CtrParParametrosDAO(getSessionHibernate(request));
		// divisor
		CtrParParametros parametros = parametrosDAO
				.findById("DIVISOR_CUOTAS_MES");
		InputStream inputStream = null;
		// ArrayList<CompPlanilla> listaEncontrados = new ArrayList();
		ArrayList<CompPlanilla> listaNoEncontrados = new ArrayList();
		ArrayList<CompPlanilla> lista = new ArrayList<CompPlanilla>();
		try {
			inputStream = file.getInputStream();
		} catch (IOException e) {
			mensajes("error.planilla.fileNotFound", request);
			log
					.error("archivo no fue encontrado en la direccion proporcionada");
			e.printStackTrace();
		}

		POIFSFileSystem fileSystem = null;

		try {
			fileSystem = new POIFSFileSystem(inputStream);

			HSSFWorkbook workBook = new HSSFWorkbook(fileSystem);
			HSSFSheet sheet = workBook.getSheetAt(0);
			Iterator<HSSFRow> rows = sheet.rowIterator();
			int rowNum = 0;

			while (rows.hasNext()) {
				/** Extraccion de Fila* */
				HSSFRow row = rows.next();
				Iterator<HSSFCell> cells = row.cellIterator();
				String logFinal = "";
				while (cells.hasNext()) {
					/** Extraccion de 1º Columna -> Codigo de Asociado* */
					HSSFCell cell = cells.next();
					if (cell.getCellNum() < 2) {
						HSSFRichTextString richTextString = cell
								.getRichStringCellValue();
						if (richTextString != null
								&& !richTextString.toString().trim().equals("")) {
							List listAsoc = asociadoDAO
									.findByAscCodigo(richTextString.getString());
							CompPlanilla compPlanilla = null;
							String codAsoc = richTextString.toString().trim();

							cell = cells.next();
							if (listAsoc.size() > 0) {
								CtaAscAsociado asociado = (CtaAscAsociado) listAsoc
										.get(0);

								/** Extracion de 2º columna -> valor descuento* */
								Double valor = 0.0;
								int tipoCell = cell.getCellType();
								if (tipoCell == 0) {
									// verificamos si es numerico
									valor = cell.getNumericCellValue();
								}

								if (tipoCell == 1) {
									// verificamos si es string
									HSSFRichTextString valorDescuentoEnString = cell
											.getRichStringCellValue();
									if (valorDescuentoEnString != null
											&& !valorDescuentoEnString
													.toString().trim().equals(
															"")) {
										valor = new Double(
												valorDescuentoEnString
														.toString());
									}
								}
								DecimalFormat df = new DecimalFormat("0.00");
								String temp= df.format(valor);
								valor = Double.parseDouble(temp);
								double actual = Redondeo.roundDouble(casDAO
										.getTotalDescuentosAsociado(asociado
												.getAscId(), parametros
												.getParValorNumber()), 2);
								rowNum++;
//								System.out.println("Fila " + rowNum + " - "
//										+ codAsoc + "| " + valor);
								/** Verificamos si es asociado de dicha empresa* */
								if (lst.contains(asociado)) {
									compPlanilla = new CompPlanilla(asociado
											.getAscId(), asociado
											.getAscCodigo(), actual, valor,
											(valor > 0) ? 1 : -1);
								} else {
									if (asociado.getCtaDptDepartamentoTrabajo()
											.getCtaEtrEmpresaTrabajo()
											.getEtrId() == empresa) {
										compPlanilla = new CompPlanilla(
												asociado.getAscId(), asociado
														.getAscCodigo(),
												actual, valor, (valor > 0) ? 1
														: -1);
									} else {
										compPlanilla = new CompPlanilla(
												asociado.getAscId(), asociado
														.getAscCodigo(), 0.0,
												valor, -1);
									}
								}
								/*
								 * if(lst.contains(asociado)){ if(valor > 0){
								 * compPlanilla = new
								 * CompPlanilla(asociado.getAscId(),asociado.getAscCodigo(),actual,valor,1);
								 * listaEncontrados.add(compPlanilla); logFinal +=
								 * "asociado " + richTextString.toString() + "
								 * encontrado\n"; }else{ compPlanilla = new
								 * CompPlanilla(asociado.getAscId(),asociado.getAscCodigo(),actual,valor,-1);
								 * listaNoEncontrados.add(compPlanilla);
								 * logFinal += "asociado " +
								 * richTextString.toString() + "; valor negativo
								 * no es aceptado\n"; } }else{ compPlanilla =
								 * new CompPlanilla(asociado.getAscId(),
								 * asociado.getAscCodigo(), 0.0, valor, -1);
								 * logFinal += "asociado " +
								 * richTextString.toString() + "; no fue
								 * encontrado\n"; }
								 */
							} else {
								/**
								 * VERIFICAMOS SI LA PERSONA DEL EXCEL ES
								 * PERSONA EXTERNA*
								 */
								CtaPxtPersonaExternaDAO personaExternaDAO = new CtaPxtPersonaExternaDAO(getSessionHibernate(request));
								double valor = cell.getNumericCellValue();
								List lstPxt = personaExternaDAO
										.findByPxtCodigoEmpleado(codAsoc);
								if (lstPxt.size() > 0) {
									CtaPxtPersonaExterna pxt = (CtaPxtPersonaExterna) lstPxt
											.get(0);
									Double actual = obtenerDescPreFiador(pxt
											.getPxtCodigoEmpleado(),request);
									compPlanilla = new CompPlanilla(pxt
											.getPxtId(), pxt
											.getPxtCodigoEmpleado(), actual,
											valor, 2);
								} else {
									compPlanilla = new CompPlanilla("",
											codAsoc, 0.0, valor, -2);
									// enviarTransaccionARetenciones(valor,
									// usuario, richTextString.toString());
								}

								/*
								 * if(personaExternaDAO.findByPxtCodigoEmpleado(richTextString.getString().trim()).size()>0){
								 * CtaPxtPersonaExterna pxt =
								 * (CtaPxtPersonaExterna)
								 * personaExternaDAO.findByPxtCodigoEmpleado(richTextString.getString()).get(0);
								 * Double actual =
								 * obtenerDescPreFiador(pxt.getPxtCodigoEmpleado());
								 * compPlanilla = new
								 * CompPlanilla(pxt.getPxtId(),pxt.getPxtCodigoEmpleado(),actual,valor,2);
								 * listaEncontrados.add(compPlanilla); logFinal +=
								 * "empleado " + richTextString.toString() + "
								 * encontrado\n"; }else{ compPlanilla = new
								 * CompPlanilla("", richTextString.toString(),
								 * 0.0, valor, -2);
								 * listaNoEncontrados.add(compPlanilla);
								 * logFinal += "empleado " +
								 * richTextString.toString() + " NO encontrado o
								 * no es empleado de Taca\n"; logFinal +=
								 * "asociado " + richTextString.toString() + ";
								 * no fue encontrado\n";
								 * //enviarTransaccionARetenciones(valor,
								 * usuario, richTextString.toString()); }
								 */
							}
							lista.add(compPlanilla);
						}
					}
				}
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
		return lista;
	}

	private class CompPlanilla {
		private String ascId;
		private String codigoEmpleado;
		private double tDescBase;
		private double tDescPlanilla;
		private int encontrado; // 1 si sí, -1 si no, 2 si es fiadorEmpleado,

		// -2 si no lo es

		public CompPlanilla() {
			super();
		}

		public CompPlanilla(String ascId, String codigoEmpleado,
				double tDescBase, double tDescPlanilla, int encontrado) {
			super();
			this.ascId = ascId;
			this.codigoEmpleado = codigoEmpleado;
			this.tDescBase = tDescBase;
			this.tDescPlanilla = tDescPlanilla;
			this.encontrado = encontrado;
		}

		public String getAscId() {
			return ascId;
		}

		public void setAscId(String ascId) {
			this.ascId = ascId;
		}

		public String getCodigoEmpleado() {
			return codigoEmpleado;
		}

		public void setCodigoEmpleado(String codigoEmpleado) {
			this.codigoEmpleado = codigoEmpleado;
		}

		public double getTDescBase() {
			return tDescBase;
		}

		public void setTDescBase(double descBase) {
			tDescBase = descBase;
		}

		public double getTDescPlanilla() {
			DecimalFormat df = new DecimalFormat("0.00");
			return Double.parseDouble(df.format(tDescPlanilla));
		}

		public void setTDescPlanilla(double descPlanilla) {
			tDescPlanilla = descPlanilla;
		}

		public int getEncontrado() {
			return encontrado;
		}

		public void setEncontrado(int encontrado) {
			this.encontrado = encontrado;
		}

	}

	// ---- metodo que genera el html de la tabla del jmesa
	private String htmlV(final TableFacade tableFacade,
			final HttpServletRequest request) {
		tableFacade.setColumnProperties("codigoEmpleado", "tDescBase", "ascId",
				"tDescPlanilla", "encontrado");
		Table table = tableFacade.getTable();
		// ---- Titulo de la tabla
		table.setCaptionKey("tbl.compPlanilla.caption");

		Row row = table.getRow();
		Column nombreColumna = row.getColumn("codigoEmpleado");
		nombreColumna.setTitleKey("tbl.compPlanilla.codigoEmpleado");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property,
						rowcount);
				CompPlanilla compPlanilla = (CompPlanilla) item;
				return compPlanilla.getCodigoEmpleado();
			}
		});

		nombreColumna = row.getColumn("tDescBase");
		nombreColumna.setTitleKey("tbl.compPlanilla.tDescBase");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property,
						rowcount);
				CompPlanilla compPlanilla = (CompPlanilla) item;
				return Format.formatDinero(compPlanilla.getTDescBase());
			}
		});

		nombreColumna = row.getColumn("ascId");
		nombreColumna.setTitleKey("tbl.compPlanilla.comparacion");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property,
						rowcount);
				CompPlanilla compPlanilla = (CompPlanilla) item;
				String valor = "";
				if (compPlanilla.getTDescBase() > compPlanilla
						.getTDescPlanilla()) {
					valor = " > ";
				}
				if (compPlanilla.getTDescBase() < compPlanilla
						.getTDescPlanilla()) {
					valor = " < ";
				}
				if (compPlanilla.getTDescBase() == compPlanilla
						.getTDescPlanilla()) {
					valor = " = ";
				}
				return valor;
			}
		});

		nombreColumna = row.getColumn("tDescPlanilla");
		nombreColumna.setTitleKey("tbl.compPlanilla.tDescPlanilla");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property,
						rowcount);
				CompPlanilla compPlanilla = (CompPlanilla) item;
				return Format.formatDinero(compPlanilla.getTDescPlanilla());
			}
		});

		nombreColumna = row.getColumn("encontrado");
		nombreColumna.setTitleKey("tbl.compPlanilla.encontrado");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property,
						rowcount);
				CompPlanilla compPlanilla = (CompPlanilla) item;
				String valor = "";
				if (compPlanilla.getEncontrado() == 1
						|| compPlanilla.getEncontrado() == 2) {
					valor = "Si";
				} else {
					valor = "No";
				}
				return valor;
			}
		});

		return tableFacade.render();
	}

	public ActionForward actualizar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		PlanillaForm planillaForm = (PlanillaForm) form;
		String respuesta = "";
		ArrayList<String> errors = new ArrayList<String>();
		PartidaAutomatica partidaAutomatica = new PartidaAutomatica();
		USUARIO = planillaForm.getUsuarioConectado().getNombreUsuario();
		CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
		CtaCasCuentaAsociadoDAO casDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));

		// divisor
		CtrParParametrosDAO parametrosDAO = new CtrParParametrosDAO(getSessionHibernate(request));
		CtrParParametros parametros = parametrosDAO
				.findById("DIVISOR_CUOTAS_MES");

		// fecha del movimiento
		SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
		Date movimiento = new Date();
		Long comprobante = null;

		try {
			movimiento = sdf.parse(planillaForm.getFecha());

			String fechaTemp = sdf.format(movimiento);
			String[] f = fechaTemp.split("-");
			String dia = f[0];
			String mes = f[1];
			String ano = f[2];
			fechaTemp = ano + mes + dia;
			comprobante = ((-1) * (Long.parseLong(fechaTemp)));
			// System.out.println("Comprobante: "+comprobante);

			int diferencia = diferenciaEnDias(movimiento, new Date());
			//System.out.println("La diferencia en dias =" + diferencia);
			if (Math.abs(diferencia) > 16) {
				// if (Math.abs(diferencia) > 16){
				errors.add(getResources(request).getMessage(
						"error.planilla.fechaInvalida"));
				respuesta = respuesta + construirListaErrores(errors);
				request.setAttribute("respuesta", respuesta);
				request.setAttribute("errores", true);
				return verificar(mapping, form, request, response);
			}

			// movimiento = sdf.parse("");

		} catch (ParseException e) {
			// TODO Auto-generated catch block
			// e.printStackTrace();
			// movimiento = new Date();
			// mensajes("error.planilla.fechaInvalida", request);
			errors.add(getResources(request).getMessage(
					"error.planilla.fechaInvalida"));
			respuesta = respuesta + construirListaErrores(errors);
			request.setAttribute("respuesta", respuesta);
			request.setAttribute("errores", true);
			return verificar(mapping, form, request, response);
		}
		DecimalFormat df = new DecimalFormat("0.00");
		CtaTxaTransaccionxcuentaAsociadoDAO txaDao = new CtaTxaTransaccionxcuentaAsociadoDAO(getSessionHibernate(request));
		// txaDao.nextComprobante();
		if (request.getSession().getAttribute("lPlanilla").equals(null)) {
			// mensajes("error.planilla.noArchivo", request);
			errors.add(getResources(request).getMessage(
					"error.planilla.noArchivo"));
			request.setAttribute("errores", true);
		} else {
			List lPlanilla = (List) request.getSession().getAttribute(
					"lPlanilla");
			if (lPlanilla == null) {
				errors.add(getResources(request).getMessage(
						"error.planilla.noArchivo"));
				// System.out.println("Error: No archivo
				// ->"+getResources(request).getMessage("error.planilla.noArchivo"));
				request.setAttribute("errores", true);
				// mensajes("error.planilla.noArchivo", request);
			} else {
				if (lPlanilla.size() < 1) {
					// mensajes("error.planilla.lVacia", request);
					errors.add(getResources(request).getMessage(
							"error.planilla.lVacia"));
					request.setAttribute("errores", true);
				} else {
					for (Iterator iterator = lPlanilla.iterator(); iterator
							.hasNext();) {
						CompPlanilla compPlanilla = (CompPlanilla) iterator
								.next();
						double monto = compPlanilla.getTDescPlanilla();
						// Si es un Asociado
						if (compPlanilla.getEncontrado() == 1
								|| compPlanilla.getEncontrado() == -1) {
							CtaAscAsociado asociado = asociadoDAO
									.findById(compPlanilla.getAscId());

							// log
//							System.out.println("monto inicial: " + monto);

							if (monto > 0) {
								CtaCahCuentaAhorroDAO ahorroDAO = new CtaCahCuentaAhorroDAO(getSessionHibernate(request));
								Transaction tx = ahorroDAO.getSession()
										.beginTransaction();

								if (!asociado.getAscPagoIngreso().equals("S")) {
									monto = descontarPagoIngreso(asociado
											.getAscId(), monto, movimiento,request);
								}
								monto = Double.parseDouble(df.format(monto));
								// log
//								System.out
//										.println("monto despues del pago Ingreso: "
//												+ monto);

								List cuentasAportaciones = casDAO
										.findByAscAndTipoCuenta2(asociado
												.getAscId(), "B");
								// Descuenta aportaciones
								monto = descontarPorCuenta(cuentasAportaciones,
										monto, asociado, tx, "A", "",
										comprobante, movimiento, parametros
												.getParValorNumber(),request);
								monto = Double.parseDouble(df.format(monto));

								// log
//								System.out
//										.println("monto despues de las aportaciones: "
//												+ monto);
																
								
								// Seguros
								List cuentasSeguros = casDAO
										.findByAscAndTipoCuenta2(asociado
												.getAscId(), "D");
								monto = descontarPorCuenta(cuentasSeguros,
										monto, asociado, tx, "D", "",
										comprobante, movimiento, parametros
												.getParValorNumber(),request);
								monto = Double.parseDouble(df.format(monto));
								// log
//								System.out.println("monto despues de seguros: "
//										+ monto);

								
								// Ahorros
								monto = descontarPorCuenta(cuentasAportaciones,
										monto, asociado, tx, "B", "CC",
										comprobante, movimiento, parametros
												.getParValorNumber(),request); // CC
								// ahorros
								// con
								// cuota
								// mensual
								monto = Double.parseDouble(df.format(monto));
								// log
//								System.out
//										.println("monto despues de ahorros con cuota mensual: "
//												+ monto);

								
						/*
						 * se Modifica el metodo findByAscAndTipoCuenta2, para que extraiga los prestamos
						 * que no provienen de una orden de compra,
						 * para extraer los prestamos provenientes de una orden de compra se utilizara CO
						 * y no solo C
						 * se ha creado el metodo findByAscAndTipoCuenta3, pues findByAscAndTipoCuenta2 se utiliza desde
						 * varios lugares  
						 * */ 


								List cuentasPrestamos = casDAO
								.findByAscAndTipoCuenta3(asociado
										.getAscId(), "C");
								
								// Descuentos prestamos sin fiador
								if (cuentasPrestamos.size() > 0)
									monto = descontarPorCuenta(
											cuentasPrestamos, monto, asociado,
											tx, "C", "NoF", comprobante,
											movimiento, parametros
													.getParValorNumber(),request);

								// log
								monto = Double.parseDouble(df.format(monto));
//								System.out
//										.println("monto despues de prestamos sin fiador: "
//												+ monto);


								// Prestamos con fiador
								if (cuentasPrestamos.size() > 0)
									monto = descontarPorCuenta(
											cuentasPrestamos, monto, asociado,
											tx, "C", "SiF", comprobante,
											movimiento, parametros
													.getParValorNumber(),request);

								monto = Double.parseDouble(df.format(monto));
								// log
//								System.out
//										.println("monto despues de prestamos con fiador: "
//												+ monto);

								//aportaciones de dependientes
								if ( 
										asociadoDAO.findByPadreYPadrePaga(asociado.getAscId()).size() >0
										) {
									
									
									List pagarHijos = asociadoDAO
											.findByPadreYPadrePaga(asociado.getAscId());
									for (Iterator iterator2 = pagarHijos.iterator(); iterator2
											.hasNext();) {
										CtaAscAsociado dependientes = (CtaAscAsociado) iterator2
												.next();
										monto = pagarDependientes(dependientes, monto, "A",
												"", comprobante, movimiento, parametros.getParValorNumber(),request);
//										System.out
//										.println("monto despues de aportaciones de dependientes : "
//												+ monto);
//										
										monto = pagarDependientes(dependientes, monto, "B",
												"CC", comprobante, movimiento, parametros.getParValorNumber(),request);
//										System.out
//										.println("monto despues de ahorros de dependientes : "
//												+ monto);
										monto = pagarDependientes(dependientes, monto, "C",
												"SiF", comprobante, movimiento, parametros.getParValorNumber(),request);
										monto = pagarDependientes(dependientes, monto, "C",
												"NoF", comprobante, movimiento, parametros.getParValorNumber(),request);
//										System.out
//										.println("monto despues de prestamos de dependientes : "
//												+ monto);
										monto = pagarDependientes(dependientes, monto, "D",
												"", comprobante, movimiento, parametros.getParValorNumber(),request);
//										System.out
//										.println("monto despues de seguros de dependientes : "
//												+ monto);
										
									}

								}
								 
								
								
								
								
								
								// Prestamos de orden de compra
								List cuentasPrestamos2 = casDAO
								.findByAscAndTipoCuenta3(asociado
										.getAscId(),"CO");
								
								if (cuentasPrestamos2.size() > 0)
									monto = descontarPorCuenta(
											cuentasPrestamos2, monto, asociado,
											tx, "C", "NoF", comprobante,
											movimiento, parametros
													.getParValorNumber(),request);
								monto = Double.parseDouble(df.format(monto));
								// log
//								System.out
//										.println("monto despues de prestamos Orden de compra: "
//												+ monto);
								
								
								// Ahorro descuentos o retenciones de mas
								if (asociado.getCtrEstEstado().getEstId() == 6) {
//									System.out
//											.println("===========================================================");
//									System.out
//											.println("El asociado esta inactivo, se envia a retenciones de  mas:");
//									System.out.println("Codigo: "
//											+ asociado.getAscCodigoAsociado());
//									System.out.println("Nombre: "
//											+ asociado.getSecPerPersona()
//													.getPerPrimerNombre()
//											+ " "
//											+ asociado.getSecPerPersona()
//													.getPerPrimerApellido());
//									System.out
//											.println("Empresa trabajo: "
//													+ asociado
//															.getCtaDptDepartamentoTrabajo()
//															.getCtaEtrEmpresaTrabajo()
//															.getEtrNombre());
//									System.out.println("Valor retenido: "
//											+ monto);
//									System.out
//											.println("===========================================================");
									partidaAutomatica
											.crearPartidaAutomaticaPlanilla(
													"8;"
															+ asociado
																	.getCtaDptDepartamentoTrabajo()
																	.getCtaEtrEmpresaTrabajo()
																	.getEtrId(),
													monto, USUARIO, 3,
													movimiento,request);
									CtaRetRetencionesDeMasDAO retencionDAO = new CtaRetRetencionesDeMasDAO(getSessionHibernate(request));
									Transaction txRet = retencionDAO
											.getSession().beginTransaction();
									CtaRetRetencionesDeMas retencion = new CtaRetRetencionesDeMas();
									retencion.setRetCodigoAsc(asociado
											.getAscCodigoAsociado());
									retencion.setRetNombreAsc(asociado
											.getSecPerPersona()
											.getPerPrimerNombre()
											+ " "
											+ asociado.getSecPerPersona()
													.getPerSegundoNombre()
											+ " "
											+ asociado.getSecPerPersona()
													.getPerPrimerApellido()
											+ " "
											+ asociado.getSecPerPersona()
													.getPerSegundoApellido());
									retencion.setRetEmp(asociado
											.getCtaDptDepartamentoTrabajo()
											.getCtaEtrEmpresaTrabajo()
											.getEtrNombre());
									retencion.setRetValorDesc(monto);

									retencionDAO.save(retencion);
									txRet.commit();

								} else {
									monto = descontarPorCuenta(
											cuentasAportaciones, monto,
											asociado, tx, "B", "P",
											comprobante, movimiento, parametros
													.getParValorNumber(),request); // Cuenta
									// Principal
									// (ahorro
									// descuentos)
									// log
//									System.out
//											.println("monto despues de ahorro descuentos: "
//													+ monto);
								}

								if (monto > 0) {/*
												 * PartidaAutomatica.crearPartidaAutomatica(
												 * "10;1;-1;-1;45;0;"
												 * +asociado.getCtaDptDepartamentoTrabajo().getCtaEtrEmpresaTrabajo().getEtrId() ,
												 * monto,
												 * planillaForm.getUsuarioConectado().getNombreUsuario(),1,null,null,null);
												 */
									partidaAutomatica
											.crearPartidaAutomatica(
													"10;1;-1;-1;45;0;"
															+ asociado
																	.getCtaDptDepartamentoTrabajo()
																	.getCtaEtrEmpresaTrabajo()
																	.getEtrId(),
													monto,
													planillaForm
															.getUsuarioConectado()
															.getNombreUsuario(),
													3, null, null, null,request);

								}
							}
						}
						// Si es un empleado fiador
						if (compPlanilla.getEncontrado() == 2) {
							CtaPxtPersonaExternaDAO externaDAO = new CtaPxtPersonaExternaDAO(getSessionHibernate(request));
							List externas = externaDAO
									.findByPxtCodigoEmpleado(compPlanilla
											.getCodigoEmpleado());
							for (Iterator iterator2 = externas.iterator(); iterator2
									.hasNext();) {
								CtaPxtPersonaExterna pxt = (CtaPxtPersonaExterna) iterator2
										.next();
								List aPagar = casDAO.findByProperty(
										"ctaPxtPersonaExterna.pxtId", pxt
												.getPxtId());
								for (Iterator iterator3 = aPagar.iterator(); iterator3
										.hasNext();) {
									CtaCasCuentaAsociado cuentaExterno = (CtaCasCuentaAsociado) iterator3
											.next();
									monto = descontarEmpleadoFiador(
											cuentaExterno, monto, comprobante,
											movimiento, parametros
													.getParValorNumber(),request);
								}
							}
						}

						if (compPlanilla.getEncontrado() == -2) {
//							System.out.println("compPlanilla.getEncontrado()"
//									+ compPlanilla.getEncontrado());
//							System.out.println("A retenciones de mas: "
//									+ compPlanilla.getCodigoEmpleado());
							// enviarTransaccionARetenciones(compPlanilla.getTDescPlanilla(),
							// USUARIO, compPlanilla.getCodigoEmpleado());
						}
					}
				}

			}

		}
		USUARIO = "";
		if (!errors.isEmpty()) {
			respuesta = respuesta + construirListaErrores(errors);
			request.setAttribute("respuesta", respuesta);
			return verificar(mapping, form, request, response);
		} else {
			mensajes("msg.planilla.saldosActualizados", request);
			return verificar(mapping, form, request, response);
		}
	}

	private double descontarPagoIngreso(String ascId, double monto,
			Date movimiento,HttpServletRequest request) {
		CtrParParametrosDAO parametrosDAO = new CtrParParametrosDAO(getSessionHibernate(request));
		CtrParParametros parametros = parametrosDAO
				.findById("VALOR_INSCRIPCION");
		monto = monto - parametros.getParValorNumber();

		CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
		CtaAscAsociado asociado = asociadoDAO.findById(ascId);

		asociado.setAscPagoIngreso("S");
		asociadoDAO.merge(asociado);
		Transaction tx = asociadoDAO.getSession().beginTransaction();
		PartidaAutomatica partidaAutomatica = new PartidaAutomatica();
		partidaAutomatica.crearPartidaAutomaticaPlanilla("11", parametrosDAO
				.findById("VALOR_INSCRIPCION").getParValorNumber(), USUARIO, 1,
				movimiento,request);
		tx.commit();

		asociadoDAO.getSession().flush();
		asociadoDAO.getSession().clear();
		// Agregar envio a contabilidad

		return monto;
	}

	private double descontarEmpleadoFiador(CtaCasCuentaAsociado cuentaExterno,
			double monto, Long comprobante, Date movimiento, Double divisor,HttpServletRequest request) {
		CtaTtrTipoTransaccionDAO ttrDao = new CtaTtrTipoTransaccionDAO(getSessionHibernate(request));
		CtaTtrTipoTransaccion ttr = ttrDao.findById(12);
		Transaction tx = ttrDao.getSession().beginTransaction();
		monto = procesaPrestamo(monto, "SiF", ttr, comprobante, cuentaExterno,
				tx, movimiento, divisor,request);
		return monto;
	}

	private double descontarPorCuenta(List cuentas, Double monto,
			CtaAscAsociado asociado, Transaction tx, String tipo,
			String fiador, Long comprobante, Date movimiento, Double divisor,HttpServletRequest request) {
		DecimalFormat df = new DecimalFormat("0.00");
		monto = Double.parseDouble(df.format(monto));
		if(monto >= 0.005){
		
		CtaTtrTipoTransaccionDAO ttrDao = new CtaTtrTipoTransaccionDAO(getSessionHibernate(request));
		CtaTtrTipoTransaccion ttr = ttrDao.findById(12);

		for (Iterator iterator2 = cuentas.iterator(); iterator2.hasNext();) {
			CtaCasCuentaAsociado cas = (CtaCasCuentaAsociado) iterator2.next();
			// double aportaciones = obtenerDescuentos(asociado, "B", "A", 0.0);
			if (monto > 0.0) {
				if (tipo.equals("A") || tipo.equals("B")) {
					if (fiador.equals("CC")) {
						if (cas.getCtaCahCuentaAhorro().getCahCuota() > 0.0) {
							monto = procesarAhorroAportacion(monto, tipo, cas,
									tx, ttr, comprobante, movimiento, divisor,request);
						}
					}
					if (fiador.equals("P")) {
						if (cas.getCasPrincipal().equals("S")) {
							monto = procesarAhorroAportacion(monto, tipo, cas,
									tx, ttr, comprobante, movimiento, divisor,request);
						}
					}
					if (tipo.equals("A")) {
						monto = procesarAhorroAportacion(monto, tipo, cas, tx,
								ttr, comprobante, movimiento, divisor,request);
					}
				}
				if (tipo.equals("C")) {
					monto = procesaPrestamo(monto, fiador, ttr, comprobante,
							cas, tx, movimiento, divisor,request);

				}
				if (tipo.equals("D")) {
					monto = procesaSeguros(monto, ttr, comprobante, tx, cas,
							movimiento, divisor,request);
				}
				CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
				
			}
		}
	}else{
		return 0;
	}
		 return monto;
	}

	private double descontarPorCuentaDep(List cuentas, Double monto,
			CtaAscAsociado asociado, Transaction tx, String tipo,
			String fiador, Long comprobante, Date movimiento, Double divisor,HttpServletRequest request) {
		DecimalFormat df = new DecimalFormat("0.00");
		monto = Double.parseDouble(df.format(monto));
		if(monto >= 0.005){
		
		CtaTtrTipoTransaccionDAO ttrDao = new CtaTtrTipoTransaccionDAO(getSessionHibernate(request));
		CtaTtrTipoTransaccion ttr = ttrDao.findById(12);

		for (Iterator iterator2 = cuentas.iterator(); iterator2.hasNext();) {
			CtaCasCuentaAsociado cas = (CtaCasCuentaAsociado) iterator2.next();
			// double aportaciones = obtenerDescuentos(asociado, "B", "A", 0.0);
			if (monto > 0.0) {
				if (tipo.equals("A") || tipo.equals("B")) {
					if (fiador.equals("CC")) {
						if (cas.getCtaCahCuentaAhorro().getCahCuota() > 0.0) {
							monto = procesarAhorroAportacion(monto, tipo, cas,
									tx, ttr, comprobante, movimiento, divisor,request);
						}
					}
					if (fiador.equals("P")) {
						if (cas.getCasPrincipal().equals("S")) {
							monto = procesarAhorroAportacion(monto, tipo, cas,
									tx, ttr, comprobante, movimiento, divisor,request);
						}
					}
					if (tipo.equals("A")) {
						monto = procesarAhorroAportacion(monto, tipo, cas, tx,
								ttr, comprobante, movimiento, divisor,request);
					}
				}
				if (tipo.equals("C")) {
					monto = procesaPrestamo(monto, fiador, ttr, comprobante,
							cas, tx, movimiento, divisor,request);

				}
				if (tipo.equals("D")) {
					monto = procesaSeguros(monto, ttr, comprobante, tx, cas,
							movimiento, divisor,request);
				}
				CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
			}
		}
	}else{
		return 0;
	}
		 return monto;
	}
	
	
	private double pagarDependientes(CtaAscAsociado asociado, double monto,
			String tipo, String fiador, Long comprobante, Date movimiento,
			Double divisor,HttpServletRequest request) {
		CtaCasCuentaAsociadoDAO casDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
		DecimalFormat df = new DecimalFormat("##0.00");
		monto = Double.parseDouble(df.format(monto));
		if (monto > 0) {
			CtaCahCuentaAhorroDAO ahorroDAO = new CtaCahCuentaAhorroDAO(getSessionHibernate(request));
			Transaction tx = ahorroDAO.getSession().beginTransaction();
			if (tipo.equals("A") || tipo.equals("B")) {
				List cuentasAportaciones = casDAO.findByAscAndTipoCuenta2(
						asociado.getAscId(), "B");
				// Descuenta aportaciones
				monto = descontarPorCuentaDep(cuentasAportaciones, monto,
						asociado, tx, tipo, fiador, comprobante, movimiento,
						divisor,request);
			}
			if (tipo.equals("C")) {
				List cuentasPrestamos = casDAO.findByAscAndTipoCuenta2(asociado
						.getAscId(), "C");
				// Descuentas prestamos sin fiador
				monto = descontarPorCuentaDep(cuentasPrestamos, monto, asociado,
						tx, "C", fiador, comprobante, movimiento, divisor,request);
			}
			if (tipo.equals("D")) {
				List cuentasSeguros = casDAO.findByAscAndTipoCuenta2(asociado
						.getAscId(), "D");
				monto = descontarPorCuentaDep(cuentasSeguros, monto, asociado, tx,
						"D", "", comprobante, movimiento, divisor,request);
			}
		}
		return monto;
	}

	private double procesaSeguros(double monto, CtaTtrTipoTransaccion ttr,
			Long comprobante, Transaction tx, CtaCasCuentaAsociado cas,
			Date movimiento, Double divisor,HttpServletRequest request) {
		DecimalFormat df = new DecimalFormat("0.00");
		CtaCasCuentaAsociadoDAO casDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
		CtaTxaTransaccionxcuentaAsociadoDAO txaDAO = new CtaTxaTransaccionxcuentaAsociadoDAO(getSessionHibernate(request));
		CtaSegSegurosDAO segurosDAO = new CtaSegSegurosDAO(getSessionHibernate(request));
		CtaSegSeguros seguros = segurosDAO.findById(cas.getCtaSegSeguros()
				.getSegId());
		CtaCasCuentaAsociado cuentaA = casDAO.findById(cas.getCasCuenta());
		CtaAscAsociado asociado = cuentaA.getCtaAscAsociado();
		Double cuotaDividida = 0.0;
		// cuotaDividida
		// || asociado.getCtrEstEstado().getEstId() == 6
		if (asociado.getCtrEstEstado().getEstId() == 6) {
			cuotaDividida = seguros.getSegSaldoActual();
			cuotaDividida = Double.parseDouble(df.format(cuotaDividida));
		} else {
			cuotaDividida = seguros.getSegCuota() / divisor;
			cuotaDividida = Double.parseDouble(df.format(cuotaDividida));
		}
		double montoActualizable2 = 0.0;
		/*
		 * if(monto >= seguros.getSegCuota()){ if(seguros.getSegCuota() >=
		 * seguros.getSegSaldoActual()){ monto = monto -
		 * seguros.getSegSaldoActual(); montoActualizable2 =
		 * seguros.getSegSaldoActual(); }else{ montoActualizable2 =
		 * seguros.getSegCuota(); monto = monto - seguros.getSegCuota(); } }
		 */

		if (monto >= cuotaDividida) {
			if (cuotaDividida >= seguros.getSegSaldoActual()) {
				monto = monto - seguros.getSegSaldoActual();
				montoActualizable2 = seguros.getSegSaldoActual();
			} else {
				montoActualizable2 = cuotaDividida;
				monto = monto - cuotaDividida;
			}
		} else {
			if (monto >= seguros.getSegSaldoActual()) {
				monto = monto - seguros.getSegSaldoActual();
				montoActualizable2 = seguros.getSegSaldoActual();
			} else {
				montoActualizable2 = monto;
				monto = 0.0;
			}
		}

		CtaTxaTransaccionxcuentaAsociado txa = new CtaTxaTransaccionxcuentaAsociado();
		txa = crearTxa(txa, cas, ttr, comprobante, montoActualizable2,
				movimiento);
		txaDAO.save2(txa);
		tx.commit();
		txaDAO.getSession().flush();
		txaDAO.getSession().clear();

		// Actualizacion de saldos.
		CtaMxsMovimientoSeguros mxsAnterior = new CtaMxsMovimientoSeguros();

		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		CtaMxsMovimientoSegurosDAO mxsDao = new CtaMxsMovimientoSegurosDAO(getSessionHibernate(request));
		mxsAnterior = mxsDao.findMovimientoAnterior(seguros.getSegId(), sdf
				.format(movimiento));
		if(mxsAnterior == null) return monto;
		if (montoActualizable2 < mxsAnterior.getMxsSaldo()) {
			seguros.setSegSaldoActual(mxsAnterior.getMxsSaldo()- montoActualizable2);
			segurosDAO.merge(seguros);

			CtaMxsMovimientoSeguros mxs = new CtaMxsMovimientoSeguros();
			mxs.setCtaSegSeguros(seguros);
			mxs.setCtaTxaTransaccionxcuentaAsociado(txa);
			mxs.setMxsFecha(movimiento);
			mxs.setMxsMonto(txa.getTxaMonto());
			double mxsSaldo = seguros.getSegSaldoActual();
			mxs.setMxsSaldo(mxsSaldo);
			mxs.setAudFechaCreacion(new Date());
			mxs.setAudFechaModificacion(new Date());
			mxs.setAudUsuarioCreacion(USUARIO);
			mxs.setAudUsuarioModificacion(USUARIO);
			mxsDao.save(mxs);

			tx.commit();
		} else {
			seguros.setSegSaldoActual(0.0);
			segurosDAO.merge(seguros);

			CtaMxsMovimientoSeguros mxs = new CtaMxsMovimientoSeguros();
			mxs.setCtaSegSeguros(seguros);
			mxs.setCtaTxaTransaccionxcuentaAsociado(txa);
			mxs.setMxsFecha(movimiento);
			mxs.setMxsMonto(txa.getTxaMonto());
			mxs.setMxsSaldo(0.00);
			mxs.setAudFechaCreacion(new Date());
			mxs.setAudFechaModificacion(new Date());
			mxs.setAudUsuarioCreacion(USUARIO);
			mxs.setAudUsuarioModificacion(USUARIO);
			mxsDao.save(mxs);
			tx.commit();
		}
		CtaAscAsociadoDAO ascDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));

		CtaEtrEmpresaTrabajo empresa = asociado.getCtaDptDepartamentoTrabajo()
				.getCtaEtrEmpresaTrabajo();

		// ENVIO A CONTABILIDAD
		if (empresa != null)
			enviarTransaccionAContabilidad(txa, USUARIO, "D", cas, 0.0, empresa
					.getEtrId().toString(), movimiento,request);
		else
			enviarTransaccionAContabilidad(txa, USUARIO, "D", cas, 0.0, "-1",
					movimiento,request);

		// actualizacion de saldos

		List l = mxsDao.findMovimientosSiguientes(seguros.getSegId(), sdf
				.format(movimiento));

		Iterator i = l.iterator();
		CtaMxsMovimientoSeguros mxaSiguiente = new CtaMxsMovimientoSeguros();
		Double saldoAnterior = mxsAnterior.getMxsSaldo() - montoActualizable2;

		while (i.hasNext()) {

			mxaSiguiente = (CtaMxsMovimientoSeguros) i.next();
			// abono
			if (mxaSiguiente.getCtaTxaTransaccionxcuentaAsociado()
					.getCtaTtrTipoTransaccion().getTtrUso().equals("A")) {
				mxaSiguiente.setMxsSaldo(saldoAnterior
						- mxaSiguiente.getMxsMonto());
				saldoAnterior = saldoAnterior - mxaSiguiente.getMxsMonto();
				seguros.setSegSaldoActual(saldoAnterior
						- mxaSiguiente.getMxsMonto());
			} else {// cargo
				mxaSiguiente.setMxsSaldo(saldoAnterior
						+ mxaSiguiente.getMxsMonto());
				saldoAnterior = saldoAnterior + mxaSiguiente.getMxsMonto();
				seguros.setSegSaldoActual(saldoAnterior
						+ mxaSiguiente.getMxsMonto());
			}
			segurosDAO.merge(seguros);
			mxsDao.merge(mxaSiguiente);
		}
		tx.commit();
		return monto;
	}

	private double procesarAhorroAportacion(double monto, String tipo,
			CtaCasCuentaAsociado cas, Transaction tx,
			CtaTtrTipoTransaccion ttr, Long comprobante, Date movimiento,
			Double divisor,HttpServletRequest request) {
		CtaMxaMovimientoAhorroDAO mxaDao = new CtaMxaMovimientoAhorroDAO(getSessionHibernate(request));
		DecimalFormat df = new DecimalFormat("0.00");
		CtaTxaTransaccionxcuentaAsociadoDAO txaDao = new CtaTxaTransaccionxcuentaAsociadoDAO(getSessionHibernate(request));
		Transaction tx1 = txaDao.getSession().beginTransaction();
		CtaCasCuentaAsociadoDAO cuentaDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
		CuentaAsociadoAction cuentaAsociadoAction = new CuentaAsociadoAction();
		CuentaAhorroAction cuentaAhorroAction = new CuentaAhorroAction();
		// CtaCasCuentaAsociado cuentaA =
		// cuentaDAO.findById(cas.getCasCuenta());
		CtaCasCuentaAsociado cuentaA = (CtaCasCuentaAsociado) cuentaDAO
				.findByProperty("casCuenta", cas.getCasCuenta()).get(0);
		CtaAscAsociado asociado = cuentaA.getCtaAscAsociado();
		CtaEtrEmpresaTrabajo empresa = new CtaEtrEmpresaTrabajo();
		try {
			empresa = asociado.getCtaDptDepartamentoTrabajo()
			.getCtaEtrEmpresaTrabajo();	
		} catch (Exception e) {
			empresa = null;
		}
		
		
		if (cas.getCtaCahCuentaAhorro().getCahId().substring(0, 1).equals(tipo)) {
			double montoTran = 0.0;
			double nuevoInteres = 0.0;
			CtaCahCuentaAhorro aportacion = cas.getCtaCahCuentaAhorro();

			// Que solo realice movimientos si hay alguna cuota, sino no
			if (aportacion.getCahCuota() != null
					&& aportacion.getCahCuota() > 0) {

				// cuotaDividida
				Double cuotaDividida = aportacion.getCahCuota() / divisor;
				cuotaDividida = Double.parseDouble(df.format(cuotaDividida));
				if (tipo.equals("B")) {
					
					if(mxaDao.movimientosPost(aportacion.getCahId(), movimiento) < 1){
						aportacion.setCahInteresAcumulado(cuentaAsociadoAction.
								getTotalInteresesAhorroP(aportacion.getCahId(),request, movimiento));	
					}														
					
					nuevoInteres = cuentaAhorroAction
							.calculoInteresTransaccion(aportacion.getCahId(),
									movimiento,request);
				}

				if (monto >= cuotaDividida) {
					aportacion.setCahSaldoActual(aportacion.getCahSaldoActual()
							+ cuotaDividida);
					monto = monto - cuotaDividida;
					montoTran = cuotaDividida;
				} else {
					aportacion.setCahSaldoActual(aportacion.getCahSaldoActual()
							+ monto);
					montoTran = monto;
					monto = 0.0;
				}

				// Realizamos un merge a la cuenta de ahorro o aportacion
				CtaCahCuentaAhorroDAO cahDao = new CtaCahCuentaAhorroDAO(getSessionHibernate(request));
				cahDao.merge(aportacion);

				CtaTxaTransaccionxcuentaAsociado txa = new CtaTxaTransaccionxcuentaAsociado();
				txa = crearTxa(txa, cas, ttr, comprobante, montoTran,
						movimiento);
				txaDao.save2(txa);
				tx1.commit();

				// Envio a Contabilidad
				if (empresa == null)
					enviarTransaccionAContabilidad(txa, USUARIO, tipo, cas,
							0.0, "-1", movimiento,request);
				else
					enviarTransaccionAContabilidad(txa, USUARIO, tipo, cas,
							0.0, empresa.getEtrId().toString(), movimiento,request);

				// Actualizacion de saldos.
				CtaMxaMovimientoAhorroDAO mxaDao2 = new CtaMxaMovimientoAhorroDAO(getSessionHibernate(request));
				CtaMxaMovimientoAhorro mxaAnterior = new CtaMxaMovimientoAhorro();

				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
				mxaAnterior = mxaDao2.findMovimientoAnterior(aportacion
						.getCahId(), sdf.format(movimiento));
				if (mxaAnterior == null || mxaAnterior.getMxaSaldo() == null) {
					mxaAnterior = new CtaMxaMovimientoAhorro();
					mxaAnterior.setMxaSaldo(0.0);
				}

				
				CtaMxaMovimientoAhorro mxaNew = new CtaMxaMovimientoAhorro();
				mxaNew.setCtaCahCuentaAhorro(aportacion);
				mxaNew.setMxaFecha(movimiento);
				mxaNew.setMxaInteresTran(nuevoInteres);
				mxaNew.setMxaMonto(montoTran);

				mxaNew.setMxaSaldo(mxaAnterior.getMxaSaldo() + montoTran);
				// primer saldo desde que se hiso el descuento en planilla.
				mxaNew.setCtaTxaTransaccionxcuentaAsociado(txa);
				mxaNew.setAudFechaCreacion(new Date());
				mxaNew.setAudFechaModificacion(new Date());
				mxaNew.setAudUsuarioCreacion(USUARIO);
				mxaNew.setAudUsuarioModificacion(USUARIO);
				mxaDao.save(mxaNew);

				List l = mxaDao2.findMovimientosSiguientes(aportacion
						.getCahId(), sdf.format(movimiento));
				Iterator i = l.iterator();
				CtaMxaMovimientoAhorro mxaSiguiente = new CtaMxaMovimientoAhorro();
				Double saldoAnterior = mxaAnterior.getMxaSaldo() + montoTran;
				while (i.hasNext()) {
					
					/*nuevoInteres = CuentaAhorroAction
					.calculoInteresTransaccion(aportacion.getCahId(),
							mxaSiguiente.getMxaFecha());*/
					nuevoInteres = 0.00;
					mxaSiguiente = (CtaMxaMovimientoAhorro) i.next();
					double saldo = 0.00;
					if(mxaSiguiente.getCtaTxaTransaccionxcuentaAsociado().getCtaTtrTipoTransaccion().getTtrUso().equalsIgnoreCase("C")){
						saldo=saldoAnterior- mxaSiguiente.getMxaMonto();
						if(mxaSiguiente.getCtaTxaTransaccionxcuentaAsociado().getCtaTtrTipoTransaccion().getTtrId() == new Integer(42)){
							saldo = saldoAnterior;
						}
					}else{
						saldo=saldoAnterior+ mxaSiguiente.getMxaMonto();
					}
					mxaSiguiente.setMxaSaldo(saldo);
					mxaSiguiente.setMxaFecha(mxaSiguiente.getMxaFecha());
					mxaDao2.merge(mxaSiguiente);
					if(mxaSiguiente.getCtaTxaTransaccionxcuentaAsociado().getCtaTtrTipoTransaccion().getTtrUso().equalsIgnoreCase("C")){
						saldoAnterior = saldoAnterior - mxaSiguiente.getMxaMonto();
					}else{
						saldoAnterior = saldoAnterior + mxaSiguiente.getMxaMonto();	
					}
					
				}
				tx1.commit();
			} else {
				if (cas.getCasPrincipal() != null
						&& cas.getCasPrincipal().equals("S")) {
					aportacion.setCahSaldoActual(aportacion.getCahSaldoActual()
							+ monto);
					montoTran = monto;
					
					if(mxaDao.movimientosPost(aportacion.getCahId(), movimiento) < 1){
						aportacion.setCahInteresAcumulado(cuentaAsociadoAction.
								getTotalInteresesAhorroP(aportacion.getCahId(),request, movimiento));	
					}														
					
					nuevoInteres = cuentaAhorroAction
							.calculoInteresTransaccion(aportacion.getCahId(),
									movimiento,request);

					
					
					monto = 0.0;

					// Realizamos un merge a la cuenta de ahorro o aportacion
					CtaCahCuentaAhorroDAO cahDao = new CtaCahCuentaAhorroDAO(getSessionHibernate(request));
					cahDao.merge(aportacion);

					CtaTxaTransaccionxcuentaAsociado txa = new CtaTxaTransaccionxcuentaAsociado();
					txa = crearTxa(txa, cas, ttr, comprobante, montoTran,
							movimiento);
					txaDao.save2(txa);

					// ENVIO A CONTABILIDAD
					if (empresa == null)
						enviarTransaccionAContabilidad(txa, USUARIO, tipo, cas,
								0.0, "-1", movimiento,request);
					else
						enviarTransaccionAContabilidad(txa, USUARIO, tipo, cas,
								0.0, empresa.getEtrId().toString(), movimiento,request);
					tx1.commit();

					// Actualizacion de saldos.
					CtaMxaMovimientoAhorroDAO mxaDao2 = new CtaMxaMovimientoAhorroDAO(getSessionHibernate(request));
					CtaMxaMovimientoAhorro mxaAnterior = new CtaMxaMovimientoAhorro();

					SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
					mxaAnterior = mxaDao2.findMovimientoAnterior(aportacion
							.getCahId(), sdf.format(movimiento));
					if (mxaAnterior == null) {
						mxaAnterior = new CtaMxaMovimientoAhorro();
						mxaAnterior.setMxaSaldo(0.0);
					}
					mxaDao = new CtaMxaMovimientoAhorroDAO(getSessionHibernate(request));
					CtaMxaMovimientoAhorro mxaNew = new CtaMxaMovimientoAhorro();
					mxaNew.setCtaCahCuentaAhorro(aportacion);
					mxaNew.setMxaFecha(movimiento);
					mxaNew.setMxaInteresTran(nuevoInteres);
					mxaNew.setMxaMonto(montoTran);

					mxaNew.setMxaSaldo(mxaAnterior.getMxaSaldo() + montoTran);
					mxaNew.setCtaTxaTransaccionxcuentaAsociado(txa);
					mxaNew.setAudFechaCreacion(new Date());
					mxaNew.setAudFechaModificacion(new Date());
					mxaNew.setAudUsuarioCreacion(USUARIO);
					mxaNew.setAudUsuarioModificacion(USUARIO);
					mxaDao.save(mxaNew);

					List l = mxaDao2.findMovimientosSiguientes(aportacion
							.getCahId(), sdf.format(movimiento));
					Iterator i = l.iterator();
					CtaMxaMovimientoAhorro mxaSiguiente = new CtaMxaMovimientoAhorro();
					Double saldoAnterior = mxaAnterior.getMxaSaldo()
							+ montoTran;
					while (i.hasNext()) {
						nuevoInteres =0.00;
						mxaSiguiente = (CtaMxaMovimientoAhorro) i.next();
						double saldo=0.00;
						if(mxaSiguiente.getCtaTxaTransaccionxcuentaAsociado().getCtaTtrTipoTransaccion().getTtrUso().equalsIgnoreCase("C")){
							saldo=saldoAnterior- mxaSiguiente.getMxaMonto();
						}else{
							saldo=saldoAnterior+ mxaSiguiente.getMxaMonto();
						}
						
						mxaSiguiente.setMxaSaldo(saldo);
						mxaSiguiente.setMxaFecha(mxaSiguiente.getMxaFecha());
						mxaSiguiente.setMxaInteresTran(nuevoInteres);
						mxaDao2.merge(mxaSiguiente);
						saldoAnterior = saldoAnterior
								+ mxaSiguiente.getMxaMonto();
					}
					tx1.commit();
				}
			}
		}
		return monto;
	}

	public double procesaPrestamo(double monto, String fiador,
			CtaTtrTipoTransaccion ttr, Long comprobante,
			CtaCasCuentaAsociado cas, Transaction tx, Date movimiento,
			Double divisor,HttpServletRequest request) {
		if (fiador.equals("NoF")) {
			if (cas.getCtaPrePrestamo().getCtaFxpFiadorPrestamos().size() < 1) {
				monto = accionProcesoPrestamo(monto, ttr, comprobante, cas,
						movimiento, divisor,request);
			}
		} else {
			if (cas.getCtaPrePrestamo().getCtaFxpFiadorPrestamos().size() > 0) {
				monto = accionProcesoPrestamo(monto, ttr, comprobante, cas,
						movimiento, divisor,request);
			}
		}
		return monto;
	}

	private double accionProcesoPrestamo(double monto,
			CtaTtrTipoTransaccion ttr, Long comprobante,
			CtaCasCuentaAsociado cas, Date movimiento, Double divisor,HttpServletRequest request) {
		
		DecimalFormat df = new DecimalFormat("0.00");
		CtaTxaTransaccionxcuentaAsociadoDAO txaDao = new CtaTxaTransaccionxcuentaAsociadoDAO(getSessionHibernate(request));
		CtaPrePrestamoDAO prestamoDAO = new CtaPrePrestamoDAO(getSessionHibernate(request));
		CtaCasCuentaAsociadoDAO casDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
		CtaTinTasaInteresDAO tasaInteresDAO = new CtaTinTasaInteresDAO(getSessionHibernate(request));

		Transaction tx = txaDao.getSession().beginTransaction();

		IntereseYMora iYm = new IntereseYMora();
		iYm.setMora(0.0);
		iYm.setPendiente(0.0);
		iYm.setAcumulado(0.0);
		iYm.setPorcInteres(0.0);

		Double totalInteres = 0.0;

		CtaPrePrestamo prestamo = cas.getCtaPrePrestamo();
		if(prestamo.getPreSaldoActualT() < 0.005)return monto;

		// cuotaDividida
		/*
		 * Ya que se realizo arreglo en la lectura inicial del excel para que se
		 * pudiera pasar hasta este paso, que exista un match, se realizo otra
		 * correccion aqui en la cuota divida, que revisa si existe cuota en el
		 * prestamo, si no tiene cuota se guarda como cuota el saldoActualT
		 */
		CtaCasCuentaAsociado cuentaA = casDAO.findById(cas.getCasCuenta());
		CtaAscAsociado asociado = cuentaA.getCtaAscAsociado();
		Double cuotaDividida = 0.0;

		// || asociado.getCtrEstEstado().getEstId() == 6

		// if(prestamo.getCtaTprTipoPrestamo() != null){
		double montoTran = 0.0;
		CtaMxpMovimientoPrestamoDAO mxpDAO = new CtaMxpMovimientoPrestamoDAO(getSessionHibernate(request));

		// CtaMxpMovimientoPrestamo mxpAnt =
		// mxpDAO.findUltimoMovimiento(prestamo.getPreId()); //movimiento
		// prestamo anterior (debe buscar el movimiento anterior al descuento en
		// planilla)

		CtaMxpMovimientoPrestamo mxpAnt = mxpDAO.findMovimientoFecha(prestamo
				.getPreId(), movimiento);
		// movimiento prestamo anterior(debe buscar el movimiento anterior al
		// descuento enplanilla)

		double totalDebe = 0.0;
		if (mxpAnt == null || mxpAnt.getMxpId() == null) {
			return monto;
			/*
			 * if (cas.getCasFechaApertura().after(movimiento)) return monto; if
			 * (true) throw new NullPointerException("Error, mxpAnterior nulo");
			 * iYm.setPendiente(prestamo.getPrePendMov()); CtrParParametrosDAO
			 * parametrosDAO = new CtrParParametrosDAO(getSessionHibernate(request)); CtrParParametros
			 * parFechaInicio = parametrosDAO
			 * .findById("INICIO_ACUMULACION_INTERESES"); ElapsedTime et = new
			 * ElapsedTime(); Date hoy = new Date(); int diasAcum =
			 * et.getDays(ElapsedTime.dTGC(movimiento), ElapsedTime
			 * .dTGC(parFechaInicio.getParValorDate())); // no hoy, si no // el
			 * dia del // descuento en // planilla // int diasAcum =
			 * et.getDays(ElapsedTime.dTGC(hoy), //
			 * ElapsedTime.dTGC(parFechaInicio.getParValorDate())); Double
			 * interesDelMes = 0.0; if (prestamo.getPreCredito() == null ||
			 * (!prestamo.getPreCredito().equals("O") &&
			 * !prestamo.getPreCredito().equals("F") && !prestamo
			 * .getPreCredito().equals("A"))) {
			 * iYm.setPorcInteres(prestamo.getCtaTprTipoPrestamo()
			 * .getCtaTinTasaInteres().getTinTasa() / 12); } interesDelMes =
			 * prestamo.getPreSaldoActualT() (iYm.getPorcInteres() / 100);
			 * iYm.setAcumulado(diasAcum * (interesDelMes / 30)); totalInteres =
			 * iYm.getAcumulado() + iYm.getPendiente();// + // iYm.getMora();
			 * totalDebe = prestamo.getPreMontoSolicitado() + totalInteres;
			 */} else {
			// Nueva actualizacion de los intereses a pagar
			prestamo.setPreSaldoActualT(mxpAnt.getMxpSaldo());// Coloco como
			// saldo del
			// prestamo el
			// saldo del
			// ultimo
			// movimiento
			// antes de la
			// fecha del
			// descuento en
			// planilla
			iYm = iYm.actualizaInteres(mxpAnt, prestamo, cas, movimiento,request);
			totalInteres = iYm.getAcumulado() + iYm.getPendiente();// +
			// iYm.getMora();
			totalDebe = prestamo.getPreSaldoActualT() + totalInteres;
		}
		if (prestamo.getPreCuota() <= 0.0
				|| asociado.getCtrEstEstado().getEstId() == 6) {
			cuotaDividida = totalDebe;
			cuotaDividida = Double.parseDouble(df.format(cuotaDividida));
			//System.out.println("cuotaDividida = "
				//	+ prestamo.getPreSaldoActualT());
		} else {
			cuotaDividida = prestamo.getPreCuota() / divisor;
			cuotaDividida = Double.parseDouble(df.format(cuotaDividida));
		}
		if (monto >= cuotaDividida) {
			if (cuotaDividida >= totalDebe) {
				// prestamo.setPreSaldoActualT(totalDebe);
				montoTran = totalDebe;
				monto = monto - montoTran;
			} else {
				montoTran = cuotaDividida;
				monto = monto - cuotaDividida;
			}
		} else {
			if (monto >= totalDebe) {
				// prestamo.setPreSaldoActualT(totalDebe);
				montoTran = totalDebe;
				monto = monto - montoTran;
			} else {
				montoTran = monto;
				monto = 0.0;
			}
		}

		CtaTxaTransaccionxcuentaAsociado txa = new CtaTxaTransaccionxcuentaAsociado();
		txa = crearTxa(txa, cas, ttr, comprobante, montoTran, movimiento);
		txaDao.save2(txa);
		tx.commit();

		CtaMxpMovimientoPrestamo mxp = new CtaMxpMovimientoPrestamo();
		mxp.setCtaPrePrestamo(prestamo);
		mxp.setCtaTxaTransaccionxcuentaAsociado(txa);
		mxp.setMxpFecha(movimiento);
		mxp.setAudFechaCreacion(new Date());
		mxp.setAudFechaModificacion(new Date());
		mxp.setAudUsuarioCreacion(USUARIO);
		mxp.setAudUsuarioModificacion(USUARIO);

		CtaEtrEmpresaTrabajo empresa = asociado.getCtaDptDepartamentoTrabajo()
				.getCtaEtrEmpresaTrabajo();

		double montoActualizable = montoTran;
		if (mxpAnt == null || mxpAnt.getMxpId() == null) {

			// mxp.setMxpMora(0.0);
			// mxp.setMxpInteresPendiente(iYm.getPendiente());
			if (montoActualizable >= totalInteres) {
				// mxp.setMxpMora(iYm.getMora());
				mxp.setMxpMora(0.0);
				mxp.setMxpInteresPendiente(iYm.getPendiente());
				mxp.setMxpInteresAcumulado(iYm.getAcumulado());

				prestamo.setPreAcumMov(0.0);
				prestamo.setPrePendMov(0.0);
				prestamo.setPreMoraMov(0.0);
				// totalInteres = (prestamo.getPreSaldoActualT() -
				// prestamo.getPreLiquidoARecibir());
				montoActualizable = montoActualizable - totalInteres;
				if (montoActualizable == 0.0) {
					// Aqui verificar el saldo, deberia ser el monto-saldo
					// pagado hasta ese dia... (el saldo del mov ant menos el
					// descuento en planilla)
					mxp.setMxpSaldoActual(prestamo.getPreMontoSolicitado()
							- prestamo.getPreSaldoActualT());

				} else {
					if (montoActualizable < prestamo.getPreSaldoActualT()) {
						// Aqui verificar el saldo, deberia ser el monto-saldo
						// pagado hasta ese dia... (el saldo del mov ant menos
						// el descuento en planilla)
						mxp
								.setMxpSaldoActual((prestamo
										.getPreMontoSolicitado() - prestamo
										.getPreSaldoActualT())
										+ montoActualizable);

						if (prestamo.getPreCredito() != null
								&& (prestamo.getPreCredito().equals("O") || prestamo
										.getPreCredito().equals("F"))) {
							OrdOcoOrdenDeCompraDAO compraDAO = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
							List ordeneDebe = compraDAO.findTodasLasQueDebe(cas
									.getCtaAscAsociado().getAscId());
							Double montoOrdenes = 0.0;// prestamo.getPreMontoSolicitado()
							// -
							// (prestamo.getPreLiquidoARecibir()
							// + totalInteres);
							montoOrdenes = pagarOrdenes(ordeneDebe,
									montoActualizable,request);
						}
					} else {
						// mxp.setMxpSaldoActual((prestamo.getPreMontoSolicitado()
						// - prestamo.getPreSaldoActualT()) +
						// montoActualizable);
						if (prestamo.getPreCredito() != null
								&& (prestamo.getPreCredito().equals("O") || prestamo
										.getPreCredito().equals("F"))) {
							OrdOcoOrdenDeCompraDAO compraDAO = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
							List ordeneDebe = compraDAO.findTodasLasQueDebe(cas
									.getCtaAscAsociado().getAscId());
							Double montoOrdenes = 0.0;// prestamo.getPreMontoSolicitado()
							// -
							// (prestamo.getPreLiquidoARecibir()
							// + totalInteres);
							montoOrdenes = pagarOrdenes(ordeneDebe,
									montoActualizable,request);
						}
						if (montoActualizable == prestamo.getPreSaldoActualT()) {
							if (prestamo.getPreCredito() == null
									|| (!prestamo.getPreCredito().equals("O")
											&& !prestamo.getPreCredito()
													.equals("F") && !prestamo
											.getPreCredito().equals("A"))) {
								ArrayList fiadores = new ArrayList();
								fiadores.addAll(prestamo
										.getCtaFxpFiadorPrestamos());
								for (Iterator iterator3 = fiadores.iterator(); iterator3
										.hasNext();) {
									CtaFxpFiadorPrestamo fiador2 = (CtaFxpFiadorPrestamo) iterator3
											.next();
									CtaFxpFiadorPrestamoDAO fiadorPrestamoDAO = new CtaFxpFiadorPrestamoDAO(getSessionHibernate(request));
									fiador2.setFxpEstado("S");
									fiadorPrestamoDAO.merge(fiador2);
									tx.commit();
								}

								cas.setCasFechaCierre(new Date());
								CtrEstEstadoDAO estadoDAO = new CtrEstEstadoDAO(getSessionHibernate(request));
								cas.setCtrEstEstado(estadoDAO.findById(17));
								casDAO.merge(cas);
								tx.commit();
							} else {
								OrdOcoOrdenDeCompraDAO compraDAO = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
								List ordeneDebe = compraDAO
										.findTodasLasQueDebe(cas
												.getCtaAscAsociado().getAscId());
								Double montoOrdenes = 0.0;// prestamo.getPreMontoSolicitado()
								// -
								// prestamo.getPreSaldoActualT();
								montoOrdenes = pagarOrdenes(ordeneDebe,
										montoActualizable,request);
								prestamo.setPreCuota(0.0);
							}

						}
						mxp.setMxpSaldoActual(prestamo.getPreMontoSolicitado());
					}
				}

				totalInteres = mxp.getMxpInteresAcumulado()
						+ mxp.getMxpInteresPendiente();
				enviarTransaccionAContabilidad(txa, USUARIO, "C", cas,
						totalInteres, empresa.getEtrId().toString(), movimiento,request);
			} else {
				// Mandar interes corriente
				if (montoActualizable - iYm.getPendiente() < 0) {
					mxp.setMxpInteresPendiente(montoActualizable);
					mxp.setMxpMora(0.0);
					mxp.setMxpInteresAcumulado(0.0);
					mxp.setMxpSaldoActual(prestamo.getPreMontoSolicitado()
							- prestamo.getPreSaldoActualT());

					prestamo.setPreMoraMov(0.0);
					prestamo
							.setPrePendMov((iYm.getPendiente() - montoActualizable)
									+ iYm.getAcumulado());
				} else {
					mxp.setMxpInteresAcumulado(montoActualizable);
					mxp.setMxpInteresPendiente(iYm.getPendiente());
					mxp.setMxpMora(0.0);
					mxp.setMxpSaldoActual(prestamo.getPreMontoSolicitado()
							- prestamo.getPreSaldoActualT());

					prestamo.setPreMoraMov(0.0);
					prestamo.setPrePendMov(iYm.getAcumulado()
							- montoActualizable);
				}
				enviarTransaccionAContabilidad(txa, USUARIO, "C", cas,
						montoActualizable, empresa.getEtrId().toString(),
						movimiento,request);
			}
		} else {
			totalInteres = 0.0;
			/*
			 * if(iYm.getMora() <= montoActualizable){ montoActualizable =
			 * montoActualizable - iYm.getMora();
			 * //mxp.setMxpMora(iYm.getMora()); mxp.setMxpMora(0.0);
			 * prestamo.setPreMoraMov(0.0);
			 */
			if (iYm.getPendiente() <= montoActualizable) {
				montoActualizable = montoActualizable - iYm.getPendiente();
				totalInteres += iYm.getPendiente();

				mxp.setMxpInteresPendiente(iYm.getPendiente());
				prestamo.setPrePendMov(0.0);
				if (iYm.getAcumulado() <= montoActualizable) {
					montoActualizable = montoActualizable - iYm.getAcumulado();
					totalInteres += iYm.getAcumulado();

					mxp.setMxpInteresAcumulado(iYm.getAcumulado());
					// Si acumulado es menor que monto restante no mando nada a
					// prestamo
					if (montoActualizable == 0.0) {
						mxp.setMxpSaldoActual(mxpAnt.getMxpSaldoActual());
						mxp.setMxpSaldo(mxpAnt.getMxpSaldo());
						// Lo mismo que en el anterior pues se paga el acumulado
					} else {
						if (montoActualizable < mxpAnt.getMxpSaldo()) {
							mxp.setMxpSaldoActual(mxpAnt.getMxpSaldoActual()
									+ montoActualizable);
							mxp.setMxpSaldo(mxpAnt.getMxpSaldo()
									- montoActualizable);
							// Si tipo prestamo es NULL, es un Credito y se
							// maneja de la siguiente forma
							if (prestamo.getPreCredito() != null
									&& (prestamo.getPreCredito().equals("O") || prestamo
											.getPreCredito().equals("F"))) {
								OrdOcoOrdenDeCompraDAO compraDAO = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
								List ordeneDebe = compraDAO
										.findTodasLasQueDebe(cas
												.getCtaAscAsociado().getAscId());
								Double montoOrdenes = 0.0;// prestamo.getPreMontoSolicitado()
								// -
								// prestamo.getPreSaldoActualT();
								montoOrdenes = pagarOrdenes(ordeneDebe,
										montoActualizable,request);
							}
							prestamo.setPreSaldoActualT(prestamo
									.getPreSaldoActualT()
									- montoActualizable/*
														 * prestamo.getPreMontoSolicitado() -
														 * mxp.getMxpSaldoActual()
														 */);
						} else {// liquidamos el prestamo
							if (montoActualizable >= mxpAnt.getMxpSaldo()) {
								ArrayList fiadores = new ArrayList();
								fiadores.addAll(prestamo
										.getCtaFxpFiadorPrestamos());
								CtaFxpFiadorPrestamoDAO fiadorPrestamoDAO = new CtaFxpFiadorPrestamoDAO(getSessionHibernate(request));
								Transaction tx1 = fiadorPrestamoDAO
										.getSession().beginTransaction();
								for (Iterator iterator2 = fiadores.iterator(); iterator2
										.hasNext();) {
									CtaFxpFiadorPrestamo fiador = (CtaFxpFiadorPrestamo) iterator2
											.next();
									fiador.setFxpEstado("S");
									fiadorPrestamoDAO.merge(fiador);
								}
								tx1.commit();
								if (prestamo.getPreCredito() == null
										|| (!prestamo.getPreCredito().equals(
												"O") && !prestamo
												.getPreCredito().equals("F"))) {
									Transaction tx2 = casDAO.getSession()
											.beginTransaction();
									cas.setCasFechaCierre(new Date());
									CtrEstEstadoDAO estadoDAO = new CtrEstEstadoDAO(getSessionHibernate(request));
									cas.setCtrEstEstado(estadoDAO.findById(17));
									casDAO.merge(cas);
									tx2.commit();
								}

								// Si tipo prestamo es NULL, es un Credito y se
								// maneja de la siguiente forma
								if (prestamo.getPreCredito() != null
										&& (prestamo.getPreCredito()
												.equals("O") || prestamo
												.getPreCredito().equals("F"))) {
									OrdOcoOrdenDeCompraDAO compraDAO = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
									List ordeneDebe = compraDAO
											.findTodasLasQueDebe(cas
													.getCtaAscAsociado()
													.getAscId());
									Double montoOrdenes = 0.0;// prestamo.getPreMontoSolicitado()
									// -
									// prestamo.getPreSaldoActualT();
									montoOrdenes = pagarOrdenes(ordeneDebe,
											montoActualizable,request);
									prestamo.setPreCuota(0.0);
								}
								// mxp.setMxpSaldoActual((double)
								// prestamo.getPreMontoSolicitado());
								mxp.setMxpSaldoActual(mxpAnt
										.getMxpSaldoActual()
										+ mxpAnt.getMxpSaldo());
								mxp.setMxpSaldo(0.0);
								prestamo.setPreSaldoActualT(0.00);
							}
						}
					}
				} else {
					prestamo.setPrePendMov(iYm.getAcumulado()
							- montoActualizable);
					totalInteres += (iYm.getAcumulado() - montoActualizable);
					mxp.setMxpSaldo(mxpAnt.getMxpSaldo());
					mxp.setMxpInteresAcumulado(montoActualizable);
					mxp.setMxpSaldoActual(mxpAnt.getMxpSaldoActual());
				}
			} else {
				totalInteres += (iYm.getPendiente() - montoActualizable);

				prestamo.setPrePendMov((iYm.getPendiente() - montoActualizable)
						+ iYm.getAcumulado());
				mxp.setMxpInteresPendiente(montoActualizable);
				mxp.setMxpInteresAcumulado(0.0);
				mxp.setMxpSaldo(mxpAnt.getMxpSaldo());
				mxp.setMxpSaldoActual(mxpAnt.getMxpSaldoActual());
			}
			/*
			 * }else{ prestamo.setPrePendMov(iYm.getPendiente() +
			 * iYm.getAcumulado()); //prestamo.setPreMoraMov(mxpAnt.getMxpMora() -
			 * montoActualizable); prestamo.setPreMoraMov(0.0);
			 * //mxp.setMxpMora(montoActualizable); mxp.setMxpMora(0.0);
			 * mxp.setMxpInteresPendiente(0.0); mxp.setMxpInteresAcumulado(0.0);
			 * mxp.setMxpSaldoActual(mxpAnt.getMxpSaldoActual()); }
			 */
			enviarTransaccionAContabilidad(txa, USUARIO, "C", cas,
					totalInteres, empresa.getEtrId().toString(), movimiento,request);
		}
		prestamoDAO.merge(prestamo);
		mxpDAO.save(mxp);
		tx.commit();

		// Actualizacion de Saldos

		List movimientosPost = mxpDAO.findMovimientosPosteriores(prestamo
				.getPreId(), movimiento);
		if (movimientosPost != null) {
			Iterator movIterator = movimientosPost.iterator();
			//System.out.println("movimientosPost.size(): "
				//	+ movimientosPost.size());
			//System.out.println("preId: " + prestamo.getPreId());
			if (movimientosPost.size() > 0) {
				if (cas.getCtrEstEstado().getEstId() == 17) {// si el
					// prestamo se
					// habia pagado,
					// lo vuelvo a
					// activar pq
					// faltan
					// movimientos
					CtrEstEstadoDAO estadoDAO = new CtrEstEstadoDAO(getSessionHibernate(request));
					cas.setCtrEstEstado(estadoDAO.findById(13));
					casDAO.merge(cas);
				}

			}
			while (movIterator.hasNext()) {
				CtaMxpMovimientoPrestamo mov = (CtaMxpMovimientoPrestamo) movIterator
						.next();
				Date fechaMov = mov.getMxpFecha();
				mxpAnt = mxpDAO.findMovimientoFecha(prestamo.getPreId(),
						fechaMov);
				Double montoTranMov = mov.getCtaTxaTransaccionxcuentaAsociado()
						.getTxaMonto();
				Double iPagado = 0.00;
				// if(mxpAnt.getMxpSaldo() <= mov.getMxpSaldo()){
				if (mov.getCtaTxaTransaccionxcuentaAsociado()
						.getCtaTtrTipoTransaccion().getTtrUso()
						.equalsIgnoreCase("A")) {
					// movimiento de abono
					iYm = iYm.actualizaInteres(mxpAnt, prestamo, cas, fechaMov,request);
					mov.setAudUsuarioModificacion(USUARIO);
					mov.setMxpMora(0.00);
					mov.setMxpInteresAcumulado(0.0);
					mov.setMxpInteresPendiente(0.0);
					// Forma normal
					if (iYm.getPendiente() <= montoTranMov) {
						prestamo.setPreMoraMov(0.0);
						mov.setMxpInteresPendiente(iYm.getPendiente());
						montoTranMov = montoTranMov - iYm.getPendiente();
						if (iYm.getAcumulado() <= montoTranMov) {
							prestamo.setPrePendMov(0.0);
							mov.setMxpInteresAcumulado(iYm.getAcumulado());
							montoTranMov = montoTranMov - iYm.getAcumulado();
							if (montoTranMov == 0.0) {
								// mov.setMxpSaldoActual(prestamo.getPreMontoSolicitado()
								// - prestamo.getPreSaldoActualT());
								mov.setMxpSaldoActual(mxpAnt
										.getMxpSaldoActual());
								mov.setMxpSaldo(mxpAnt.getMxpSaldo());
							} else {
								if (montoTranMov < prestamo
										.getPreSaldoActualT()) {
									mov.setMxpSaldoActual(mxpAnt
											.getMxpSaldoActual()/*
																 * (prestamo.getPreMontoSolicitado() -
																 * prestamo.getPreSaldoActualT())
																 */
											+ montoTranMov);
									mov.setMxpSaldo(mxpAnt.getMxpSaldo()
											- montoTranMov);
									// Si tipo prestamo es NULL, es un Credito y
									// se maneja de la siguiente forma
									if (prestamo.getPreCredito() != null
											&& (prestamo.getPreCredito()
													.equals("O") || prestamo
													.getPreCredito()
													.equals("F"))) {
										OrdOcoOrdenDeCompraDAO compraDAO = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
										List ordeneDebe = compraDAO
												.findTodasLasQueDebe(cas
														.getCtaAscAsociado()
														.getAscId());
										Double montoOrdenes = 0.0;// prestamo.getPreMontoSolicitado()
										// -
										// prestamo.getPreSaldoActualT();
										montoOrdenes = pagarOrdenes(ordeneDebe,
												montoTranMov,request);
									}
									prestamo.setPreSaldoActualT(prestamo
											.getPreSaldoActualT()
											- montoTranMov/*
															 * prestamo.getPreMontoSolicitado() -
															 * mov.getMxpSaldoActual()
															 */);
								} else {// liquidamos el prestamo
									if (montoTranMov >= prestamo
											.getPreSaldoActualT()) {
										ArrayList fiadores = new ArrayList();
										fiadores.addAll(prestamo
												.getCtaFxpFiadorPrestamos());
										CtaFxpFiadorPrestamoDAO fiadorPrestamoDAO = new CtaFxpFiadorPrestamoDAO(getSessionHibernate(request));
										Transaction tx1 = fiadorPrestamoDAO
												.getSession()
												.beginTransaction();
										for (Iterator iterator2 = fiadores
												.iterator(); iterator2
												.hasNext();) {
											CtaFxpFiadorPrestamo fiador = (CtaFxpFiadorPrestamo) iterator2
													.next();
											fiador.setFxpEstado("S");
											fiadorPrestamoDAO.merge(fiador);
										}
										tx1.commit();
										if (prestamo.getPreCredito() == null
												|| (!prestamo.getPreCredito()
														.equals("O") && !prestamo
														.getPreCredito()
														.equals("F"))) {
											Transaction tx2 = casDAO
													.getSession()
													.beginTransaction();
											cas.setCasFechaCierre(new Date());
											CtrEstEstadoDAO estadoDAO = new CtrEstEstadoDAO(getSessionHibernate(request));
											cas.setCtrEstEstado(estadoDAO
													.findById(17));
											casDAO.merge(cas);
											tx2.commit();
										}

										// Si tipo prestamo es NULL, es un
										// Credito y se maneja de la siguiente
										// forma
										if (prestamo.getPreCredito() != null
												&& (prestamo.getPreCredito()
														.equals("O") || prestamo
														.getPreCredito()
														.equals("F"))) {
											OrdOcoOrdenDeCompraDAO compraDAO = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
											List ordeneDebe = compraDAO
													.findTodasLasQueDebe(cas
															.getCtaAscAsociado()
															.getAscId());
											Double montoOrdenes = 0.0;// prestamo.getPreMontoSolicitado()
											// -
											// prestamo.getPreSaldoActualT();
											montoOrdenes = pagarOrdenes(
													ordeneDebe, montoTranMov,request);
											prestamo.setPreCuota(0.0);
										}
										mov.setMxpSaldoActual(mxpAnt
												.getMxpSaldoActual()
												+ montoTranMov);
										mov.setMxpSaldo(mxpAnt.getMxpSaldo()
												- montoTranMov);
										prestamo.setPreSaldoActualT(mxpAnt
												.getMxpSaldo()
												- montoTranMov);
										if (prestamo.getPreSaldoActualT() < 0) {
											Transaction tx2 = casDAO
													.getSession()
													.beginTransaction();
											CtrEstEstadoDAO estadoDAO = new CtrEstEstadoDAO(getSessionHibernate(request));
											cas.setCtrEstEstado(estadoDAO
													.findById(13));
											casDAO.merge(cas);
											tx2.commit();
										}
									}
								}
							}
						} else {
							prestamo.setPrePendMov(iYm.getAcumulado()
									- montoTranMov);
							mov.setMxpInteresAcumulado(montoTranMov);
							// mov.setMxpSaldoActual(prestamo.getPreMontoSolicitado()
							// - prestamo.getPreSaldoActualT());
							mov.setMxpSaldoActual(mxpAnt.getMxpSaldoActual());
							mov.setMxpSaldo(mxpAnt.getMxpSaldo());
						}
					} else {
						prestamo
								.setPrePendMov((iYm.getPendiente() - montoTranMov)
										+ iYm.getAcumulado());
						mov.setMxpInteresPendiente(montoTranMov);
						mov.setMxpInteresAcumulado(0.0);
						// mov.setMxpSaldoActual(prestamo.getPreMontoSolicitado()
						// - prestamo.getPreSaldoActualT());
						mov.setMxpSaldoActual(mxpAnt.getMxpSaldoActual());
						mov.setMxpSaldo(mxpAnt.getMxpSaldo());
					}

				} else {
					if (mov.getCtaTxaTransaccionxcuentaAsociado()
							.getCtaTtrTipoTransaccion().getTtrUso().equals("C")) {

						// movimiento de cargo
						mov.setMxpSaldo(mxpAnt.getMxpSaldo() + montoTranMov);
						prestamo.setPreSaldoActualT(prestamo
								.getPreSaldoActualT()
								+ montoTranMov);

						// si hacemos positivo el saldo del prestamo lo
						// colocamos en activo...
						if (prestamo.getPreSaldoActualT() > 0) {
							Transaction tx2 = casDAO.getSession()
									.beginTransaction();
							CtrEstEstadoDAO estadoDAO = new CtrEstEstadoDAO(getSessionHibernate(request));
							cas.setCtrEstEstado(estadoDAO.findById(13));
							casDAO.merge(cas);
							tx2.commit();
						}
					}
				}
				mov.setMxpFecha(fechaMov);
				mov.setAudFechaModificacion(fechaMov);
				
				mxpDAO.merge(mov);
				/*System.out
						.println("TTR USO: "
								+ mov.getCtaTxaTransaccionxcuentaAsociado()
										.getCtaTtrTipoTransaccion()
										.getTtrDescripcion());
				System.out.println("TTR USO: "
						+ mov.getCtaTxaTransaccionxcuentaAsociado()
								.getCtaTtrTipoTransaccion().getTtrId());*/
				prestamoDAO.merge(prestamo);
			}
		}
		tx.commit();

		return monto;
	}

	private Double pagarOrdenes(List ordeneDebe, double monto,HttpServletRequest request) {
		Double montoActualizable = monto;
		OrdOcoOrdenDeCompraDAO compraDAO = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
		Transaction tx = compraDAO.getSession().beginTransaction();
		for (Iterator iterator = ordeneDebe.iterator(); iterator.hasNext();) {
			OrdOcoOrdenDeCompra compra = (OrdOcoOrdenDeCompra) iterator.next();
			if (montoActualizable == 0.00)
				return 0.00;

			if (montoActualizable >= compra.getOcoSaldo()) {
				compra.setOcoSaldo(0.00);
				compra.setOcoPagado(compra.getOcoPagado()
						+ compra.getOcoSaldo());
				montoActualizable -= compra.getOcoSaldo();

				if (compra.getOcoEstado().equals("C")
						|| compra.getOcoEstado().equals("R")) {
					compra.setOcoEstado("P");
					compra.setAudFechaModificacion(new Date());
				}
				if (compra.getOcoEstado().equals("F")) {
					compra.setOcoEstado("G");
					compra.setAudFechaModificacion(new Date());
				}
				if (compra.getOcoEstado().equals("D")) {
					compra.setOcoEstado("S");
					compra.setAudFechaModificacion(new Date());
				}
			} else {
				compra.setOcoSaldo(compra.getOcoSaldo() - montoActualizable);
				compra.setOcoPagado(compra.getOcoPagado() + montoActualizable);
				montoActualizable = 0.00;
			}
			compraDAO.merge(compra);
			
			tx.commit();
			compraDAO.getSession().flush();
			compraDAO.getSession().clear();
		}
		return montoActualizable;
	}

	private CtaTxaTransaccionxcuentaAsociado crearTxa(
			CtaTxaTransaccionxcuentaAsociado txa, CtaCasCuentaAsociado cas,
			CtaTtrTipoTransaccion ttr, Long comprobante, double montoTran,
			Date movimiento) {

		txa.setCtaCasCuentaAsociado(cas);
		txa.setCtaTtrTipoTransaccion(ttr);
		txa.setTxaComprobante(comprobante);
		txa.setTxaFecha(movimiento);
		txa.setTxaMonto(montoTran);
		txa.setAudFechaCreacion(new Date());
		txa.setAudFechaModificacion(new Date());
		txa.setAudUsuarioCreacion(USUARIO);
		txa.setAudUsuarioModificacion(USUARIO);

		return txa;
	}

	private class AsociadoOFiador {
		private int tipo; // 0 es Asociado y 1 es Fiador Empleado Externo
		private String id;
		private String codigoEmpleado;
		private String nombreCompleto;
		private Double descAportaciones;
		private Double descAhorros;
		private Double descPrestamos;
		private Double descSeguros;

		public AsociadoOFiador() {
			super();
		}

		public AsociadoOFiador(int tipo, String id, String codigoEmpleado,
				String nombreCompleto, Double descAportaciones,
				Double descAhorros, Double descPrestamos, Double descSeguros) {
			super();
			this.tipo = tipo;
			this.id = id;
			this.codigoEmpleado = codigoEmpleado;
			this.nombreCompleto = nombreCompleto;
			this.descAportaciones = descAportaciones;
			this.descAhorros = descAhorros;
			this.descPrestamos = descPrestamos;
			this.descSeguros = descSeguros;
		}

		public int getTipo() {
			return tipo;
		}

		public void setTipo(int tipo) {
			this.tipo = tipo;
		}

		public String getId() {
			return id;
		}

		public void setId(String id) {
			this.id = id;
		}

		public String getCodigoEmpleado() {
			return codigoEmpleado;
		}

		public void setCodigoEmpleado(String codigoEmpleado) {
			this.codigoEmpleado = codigoEmpleado;
		}

		public Double getDescAportaciones() {
			return descAportaciones;
		}

		public void setDescAportaciones(Double descAportaciones) {
			this.descAportaciones = descAportaciones;
		}

		public Double getDescAhorros() {
			return descAhorros;
		}

		public void setDescAhorros(Double descAhorros) {
			this.descAhorros = descAhorros;
		}

		public Double getDescPrestamos() {
			return descPrestamos;
		}

		public void setDescPrestamos(Double descPrestamos) {
			this.descPrestamos = descPrestamos;
		}

		public Double getDescSeguros() {
			return descSeguros;
		}

		public void setDescSeguros(Double descSeguros) {
			this.descSeguros = descSeguros;
		}

		public String getNombreCompleto() {
			return nombreCompleto;
		}

		public void setNombreCompleto(String nombreCompleto) {
			this.nombreCompleto = nombreCompleto;
		}
	}

	public ActionForward generar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		ActionForward forward = null;
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
		try {
			HashMap<String, Object> map = new HashMap<String, Object>();
			Date fechaActual = new Date();
			PlanillaForm planillaForm = (PlanillaForm) form;
			String nombreReporte = "";
			String nombreReporte2 = "";
			String pathReporte = "";// ruta reporte
			ServletContext servletContext = getServlet().getServletContext();

			if (planillaForm.getAof() == 1) {
				switch (planillaForm.getTipoDesc()) {
				case 1:
					nombreReporte = "planillaAsociados";
					pathReporte = servletContext.getRealPath("/reportesOtros/"
							+ nombreReporte + "/" + nombreReporte + ".jrxml");
					break;
				case 2:
					nombreReporte = "planillaAsociados2";
					pathReporte = servletContext.getRealPath("/reportesOtros/"
							+ nombreReporte + "/" + nombreReporte + ".jrxml");
					break;
				case 3:
					nombreReporte = "planillaAsociados3";
					if (planillaForm.getTipoCuenta().equals("A")) {
						map.put("CUENTA", new Integer(1));

					}
					if (planillaForm.getTipoCuenta().equals("B")) {
						map.put("CUENTA", new Integer(2));

					}
					if (planillaForm.getTipoCuenta().equals("C")) {
						map.put("CUENTA", new Integer(3));

					}
					if (planillaForm.getTipoCuenta().equals("D")) {
						map.put("CUENTA", new Integer(4));

					}
					pathReporte = servletContext.getRealPath("/reportesOtros/"
							+ nombreReporte + "/" + nombreReporte + ".jrxml");
					break;
				case 4:
					nombreReporte = "planillaAsociados4";
					if (planillaForm.getCuentaPar().equals("E")) {
						nombreReporte2 = "planillaAsociados4a";
					}
					if (planillaForm.getCuentaPar().equals("F")) {
						nombreReporte2 = "planillaAsociados4b";
					}
					if (planillaForm.getCuentaPar().equals("G")) {
						nombreReporte2 = "planillaAsociados4c";
					}
					pathReporte = servletContext.getRealPath("/reportesOtros/"
							+ nombreReporte + "/" + nombreReporte2 + ".jrxml");
					break;
				}
				// map.put("LIM_INI", new Integer(planillaForm.getInicio()));
				// map.put("LIM_FIN", new Integer(planillaForm.getFin()));
			} else {
				switch (planillaForm.getTipoDesc()) {
				case 1:
					nombreReporte = "planillaEmpleados";
					pathReporte = servletContext.getRealPath("/reportesOtros/"
							+ nombreReporte + "/" + nombreReporte + ".jrxml");
					break;
				case 2:
					nombreReporte = "planillaEmpleados2";
					pathReporte = servletContext.getRealPath("/reportesOtros/"
							+ nombreReporte + "/" + nombreReporte + ".jrxml");
					break;
				case 3:
					nombreReporte = "planillaEmpleados3";
					if (planillaForm.getTipoCuenta().equals("A")) {
						map.put("CUENTA", new Integer(1));

					}
					if (planillaForm.getTipoCuenta().equals("B")) {
						map.put("CUENTA", new Integer(2));

					}
					if (planillaForm.getTipoCuenta().equals("C")) {
						map.put("CUENTA", new Integer(3));

					}
					if (planillaForm.getTipoCuenta().equals("D")) {
						map.put("CUENTA", new Integer(4));

					}
					pathReporte = servletContext.getRealPath("/reportesOtros/"
							+ nombreReporte + "/" + nombreReporte + ".jrxml");
					break;
				case 4:
					nombreReporte = "planillaEmpleados4";
					if (planillaForm.getCuentaPar().equals("E")) {
						nombreReporte2 = "planillaEmpleados4a";
					}
					if (planillaForm.getCuentaPar().equals("F")) {
						nombreReporte2 = "planillaEmpleados4b";
					}
					if (planillaForm.getCuentaPar().equals("G")) {
						nombreReporte2 = "planillaEmpleados4c";
					}
					pathReporte = servletContext.getRealPath("/reportesOtros/"
							+ nombreReporte + "/" + nombreReporte2 + ".jrxml");
					break;
				}
			}
			// Connection con =
			// HibernateSessionFactory.getSession().connection();
			String jdbcDriver = "com.mysql.jdbc.Driver";
			Class.forName(jdbcDriver);
			String url = HibernateSessionFactory.getConfiguration()
					.getProperty("connection.url");
			String user = HibernateSessionFactory.getConfiguration()
					.getProperty("connection.username");
			String pass = HibernateSessionFactory.getConfiguration()
					.getProperty("connection.password");

			Connection con = DriverManager.getConnection(url, user, pass);
			FileInputStream input = new FileInputStream(new File(pathReporte));

			JasperDesign jd = JRXmlLoader.load(input);
			JasperReport jr = JasperCompileManager.compileReport(jd);

			CtrParParametrosDAO parametrosDAO = new CtrParParametrosDAO(getSessionHibernate(request));
			CtrParParametros divisor = parametrosDAO
					.findById("DIVISOR_CUOTAS_MES");
			CtrParParametros valorInscripcion = parametrosDAO
					.findById("VALOR_INSCRIPCION");
			map.put("DIVISOR", new BigDecimal(divisor.getParValorNumber()));
			map.put("EMPRESA", new Integer(planillaForm.getEmpresa()));
			System.out.println("Valor de inscripcion:"
					+ valorInscripcion.getParValorNumber().toString());
			map.put("VALOR_INSCRIPCION", new Double(valorInscripcion
					.getParValorNumber()));
			JasperPrint jp = JasperFillManager.fillReport(jr, map, con);// FIXME

			// EXPORT A XLS
			response.setHeader("Cache-Control", "private");
			response.setHeader("Pragma", "Cache");
			response.setContentType("application/vnd.ms-excel");
			response.setHeader("content-Disposition", "attachment;filename="
					+ nombreReporte + dateFormat.format(fechaActual) + ".csv");
			
//			JRXlsExporter xls = new JRXlsExporter();
			JRCsvExporter xls = new JRCsvExporter();
			xls.setParameter(JRExporterParameter.JASPER_PRINT, jp);
			xls.setParameter(JRExporterParameter.OUTPUT_STREAM, response
					.getOutputStream());
			xls.exportReport();
		} catch (Exception e) {
			e.printStackTrace();
			log.error("Se produjo un error al tratar de generar el reporte...",
					e);
		}
		return null;
	}

	public ActionForward cargaFin(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		PlanillaForm planillaForm = (PlanillaForm) form;
		String lista = "";
		HtmlBuilder builder = new HtmlBuilder();
		builder.input().type("text").name("fin").id("finId");
		builder.maxlength("15").size("15").styleClass("obligatorio");
		CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
		Integer fin = 0;
		if (asociadoDAO.countAllByEmpresa(planillaForm.getEmpId()) >= 0) {
			fin = asociadoDAO.countAllByEmpresa(planillaForm.getEmpId());
		}
		builder.value(fin.toString());
		builder.end();
		try {
			response.getWriter().write(builder.toString());
			response.getWriter().flush();
			response.getWriter().close();
		} catch (RuntimeException e) {
			log.error("Error runtime", e);
		} catch (IOException e) {
			log.error(e);
		}
		return null;
	}

	public ActionForward descEmpleadoFiador(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		PlanillaForm planillaForm = (PlanillaForm) form;
		String lista = "";
		HtmlBuilder builder = new HtmlBuilder();
		builder
				.append("<label>Descuentos totales de pr&eacute;stamo: </label>");
		CtaPxtPersonaExternaDAO externaDAO = new CtaPxtPersonaExternaDAO(getSessionHibernate(request));
		if (externaDAO.totalDescuentos(planillaForm.getCodEmpId()) == null) {
			// builder.append("No se encontr&oacute; el c&oacute;digo
			// ingresado");
			if ((planillaForm.getEmpNombre() == null || planillaForm
					.getEmpNombre().trim().equals(""))
					&& (planillaForm.getEmpApelldo() == null || planillaForm
							.getEmpApelldo().trim().equals(""))) {
				builder.append("No se encontr&oacute; el empleado ingresado");
			} else {
				CtaPxtPersonaExterna externa = new CtaPxtPersonaExterna();
				externa.setPxtNombres(planillaForm.getEmpNombre());
				externa.setPxtPrimerApellido(planillaForm.getEmpApelldo());
				List externas = externaDAO.findbyCriteria(externa);
				if (externas.size() > 0) {
					CtaPxtPersonaExterna pxt = (CtaPxtPersonaExterna) externas
							.get(0);
					builder.append(externaDAO.totalDescuentos(
							pxt.getPxtCodigoEmpleado()).toString());
				} else {
					builder
							.append("No se encontr&oacute; el empleado ingresado");
				}
			}
		} else {
			builder.append(externaDAO.totalDescuentos(
					planillaForm.getCodEmpId()).toString());
		}
		try {
			response.getWriter().write(builder.toString());
			response.getWriter().flush();
			response.getWriter().close();
		} catch (RuntimeException e) {
			log.error("Error runtime", e);
		} catch (IOException e) {
			log.error(e);
		}
		return null;
	}

	public ActionForward verReporte(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		PlanillaForm pf = (PlanillaForm) form;
		ExportWebReport ewr = new ExportWebReport();
		CtaRetRetencionesDeMasDAO retDeMasDAO = new CtaRetRetencionesDeMasDAO(getSessionHibernate(request));
		Transaction tx = retDeMasDAO.getSession().beginTransaction();

		String jdbcDriver = "com.mysql.jdbc.Driver";
		try {
			Class.forName(jdbcDriver);
			String url = HibernateSessionFactory.getConfiguration()
					.getProperty("connection.url");
			String user = HibernateSessionFactory.getConfiguration()
					.getProperty("connection.username");
			String pass = HibernateSessionFactory.getConfiguration()
					.getProperty("connection.password");
			ServletContext sc = getServlet().getServletContext();

			String pathJasper = sc
					.getRealPath("/listaReportes/retencionesDeMas/retencionesDeMas.jasper");
			String pathJrxml = sc
					.getRealPath("/listaReportes/retencionesDeMas/retencionesDeMas.jrxml");
			ReportFile rep = new ReportFile();
			rep.setPathJasper(pathJasper);
			rep.setPathReport(pathJrxml);
			rep.addParameter("fecha", new Date());
			Connection con = DriverManager.getConnection(url, user, pass);
			ewr.setReportFile(rep);
			ewr.exportXLSWeb("ReporteRetencionesDeMas", request, response,
					true, con);
			request.removeAttribute("mostrarReporte");
			if (pf.isFinalizado()) {
				retDeMasDAO.deleteAll();
				tx.commit();
				return null;
			}

		} catch (Exception e) {
			// TODO Auto-generated catch block
			// e.printStackTrace();
		}

		return null;
	}

	private void enviarTransaccionAContabilidad(
			CtaTxaTransaccionxcuentaAsociado txa, String nombreUsuario,
			String tipoCuenta, CtaCasCuentaAsociado cas, Double interes,
			String empresa, Date movimiento,HttpServletRequest request) {
		Integer tc = 0;
		Integer clasificacion = -1;
		Integer relacionInteres = -1;
		if (tipoCuenta.equals("A")) {
			tc = 1;
			clasificacion = 0;
			relacionInteres = 0;
		}
		if (tipoCuenta.equals("B")) {
			tc = 2;
			clasificacion = cas.getCtaCahCuentaAhorro().getCtaTahTipoAhorro()
					.getTahId();
			relacionInteres = 1;
		}
		if (tipoCuenta.equals("C")) {
			tc = 3;
			if (cas.getCtaPrePrestamo().getCtaTprTipoPrestamo() == null
					|| cas.getCtaPrePrestamo().getCtaTprTipoPrestamo()
							.getTprId() == null) {
				clasificacion = 0;
			} else {
				/*clasificacion = cas.getCtaPrePrestamo().getCtaTprTipoPrestamo()
						.getTprId();*/
				clasificacion = cas.getCtaPrePrestamo().getCtaTprTipoPrestamo().getCtaLprLineaPrestamo().getLprId();
			}
			relacionInteres = 1;
		}
		if (tipoCuenta.equals("D")) {
			tc = 4;
			clasificacion = cas.getCtaSegSeguros().getCtaTisTipoSeguro()
					.getTisId();
			relacionInteres = 1;
		}
		String parametros = "1;";
		parametros += tc.toString() + ";";
		parametros += clasificacion.toString() + ";";
		parametros += txa.getCtaTtrTipoTransaccion().getTtrId().toString()
				+ ";";
		/*
		 * parametros += relacionInteres.toString(); parametros += ";" +empresa;
		 */

		Double monto = txa.getTxaMonto() - interes;
//		System.out.println("enviarTransaccionAContabilidad monto: "+monto);
		PartidaAutomatica partidaAutomatica = new PartidaAutomatica();
		if (monto > 0) {

			/*
			 * PartidaAutomatica.crearPartidaAutomatica( parametros + "0;"
			 * +empresa , tipoCuenta.equals("C")?monto:txa.getTxaMonto(),
			 * nombreUsuario,3,null,null,null);
			 */
			partidaAutomatica.crearPartidaAutomaticaPlanilla(parametros + "0;"
					+ empresa, tipoCuenta.equals("C") ? monto : txa
					.getTxaMonto(), nombreUsuario, 3, movimiento,request);
		}
		if (interes > 0) {
			/*
			 * PartidaAutomatica.crearPartidaAutomatica( parametros + "1;"
			 * +empresa,
			 * 
			 * nombreUsuario,3,null,null,null);
			 */
			partidaAutomatica.crearPartidaAutomaticaPlanilla(parametros + "1;"
					+ empresa, interes, nombreUsuario, 3, movimiento,request);
		}
	}

	private void enviarTransaccionARetenciones(Double monto, String usuario,
			String asociado,HttpServletRequest request) {
		PartidaAutomatica partidaAutomatica = new PartidaAutomatica();
		partidaAutomatica.crearPartidaAutomatica("8", monto, usuario, 3, null,
				null, null, asociado,request);
	}

	private String construirListaErrores(ArrayList<String> errors) {
		String errores = "<div style=\"text-align:left; width: 35%; font-family:Arial, Helvetica, sans-serif; font-size:11px; color:#D8000C; background-color: #FFBABA; border: 1px solid; margin: 10px 0px; padding:15px 10px 15px 50px; background-repeat: no-repeat; background-position: 10px center\"><b>Se han encontrado los siguientes errores:</b></br><UL>";
		Iterator<String> it = errors.iterator();
		while (it.hasNext()) {
			errores = errores + "<li>" + it.next() + "</li>";
		}
		errores = errores + "<UL></div>";
		return errores;
	}

	public static int diferenciaEnDias(Date fechainicial, Date fechafinal) {
		DateFormat df = DateFormat.getDateInstance(DateFormat.MEDIUM);
		String fi = df.format(fechainicial);
		try {
			fechainicial = df.parse(fi);
		} catch (ParseException ex) {
		}
		String fechafinalstring = df.format(fechafinal);
		try {
			fechafinal = df.parse(fechafinalstring);
		} catch (ParseException ex) {

		}
		long fechainicialms = fechainicial.getTime();
		long fechafinalms = fechafinal.getTime();
		long diferencia = fechafinalms - fechainicialms;
		double dias = Math.floor(diferencia / (1000 * 60 * 60 * 24));
		return ((int) dias);
	}

	protected Map getKeyMethodMap() {
		// TODO Auto-generated method stub
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.planilla.lista", "lista");
		map.put("cmd.planilla.buscar", "buscar");
		map.put("cmd.planilla.verificar", "verificar");
		map.put("cmd.planilla.cargar", "cargar");
		map.put("cmd.planilla.actualizar", "actualizar");
		map.put("cmd.planilla.generar", "generar");
		map.put("cmd.planilla.cargaFin", "cargaFin");
		map.put("cmd.planilla.descEmpleadoFiador", "descEmpleadoFiador");
		map.put("cmd.planilla.verReporte", "verReporte");
		return map;
	}
}