/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.procesosEspeciales.struts.action;

import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.StringTokenizer;

import javax.servlet.ServletContext;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.hibernate.Transaction;
import org.jmesa.view.html.HtmlBuilder;

import com.cetia.sicaco.cuentaCorriente.struts.action.CuentaAhorroAction;
import com.cetia.sicaco.cuentaCorriente.struts.action.CuentaAsociadoAction;
import com.cetia.sicaco.hibernate.ConCueCuenta;
import com.cetia.sicaco.hibernate.ConCueCuentaDAO;
import com.cetia.sicaco.hibernate.CtaAscAsociado;
import com.cetia.sicaco.hibernate.CtaAscAsociadoDAO;
import com.cetia.sicaco.hibernate.CtaCahCuentaAhorro;
import com.cetia.sicaco.hibernate.CtaCahCuentaAhorroDAO;
import com.cetia.sicaco.hibernate.CtaCasCuentaAsociado;
import com.cetia.sicaco.hibernate.CtaCasCuentaAsociadoDAO;
import com.cetia.sicaco.hibernate.CtaChkChequePrestamo;
import com.cetia.sicaco.hibernate.CtaFxpFiadorPrestamo;
import com.cetia.sicaco.hibernate.CtaFxpFiadorPrestamoDAO;
import com.cetia.sicaco.hibernate.CtaMxaMovimientoAhorro;
import com.cetia.sicaco.hibernate.CtaMxaMovimientoAhorroDAO;
import com.cetia.sicaco.hibernate.CtaMxpMovimientoPrestamo;
import com.cetia.sicaco.hibernate.CtaMxpMovimientoPrestamoDAO;
import com.cetia.sicaco.hibernate.CtaMxsMovimientoSeguros;
import com.cetia.sicaco.hibernate.CtaMxsMovimientoSegurosDAO;
import com.cetia.sicaco.hibernate.CtaPrePrestamo;
import com.cetia.sicaco.hibernate.CtaPrePrestamoDAO;
import com.cetia.sicaco.hibernate.CtaSegSeguros;
import com.cetia.sicaco.hibernate.CtaSegSegurosDAO;
import com.cetia.sicaco.hibernate.CtaTahTipoAhorro;
import com.cetia.sicaco.hibernate.CtaTahTipoAhorroDAO;
import com.cetia.sicaco.hibernate.CtaTinTasaInteres;
import com.cetia.sicaco.hibernate.CtaTinTasaInteresDAO;
import com.cetia.sicaco.hibernate.CtaTtrTipoTransaccion;
import com.cetia.sicaco.hibernate.CtaTtrTipoTransaccionDAO;
import com.cetia.sicaco.hibernate.CtaTxaTransaccionxcuentaAsociado;
import com.cetia.sicaco.hibernate.CtaTxaTransaccionxcuentaAsociadoDAO;
import com.cetia.sicaco.hibernate.CtrEstEstadoDAO;
import com.cetia.sicaco.hibernate.HibernateSessionFactory;
import com.cetia.sicaco.hibernate.OrdOcoOrdenDeCompra;
import com.cetia.sicaco.hibernate.OrdOcoOrdenDeCompraDAO;
import com.cetia.sicaco.hibernate.SecIseInicioSesion;
import com.cetia.sicaco.hibernate.SecIseInicioSesionDAO;
import com.cetia.sicaco.hibernate.SecPerPersona;
import com.cetia.sicaco.procesosEspeciales.struts.form.CorreccionCapitalForm;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;
import com.cetia.sicaco.struts.PartidaAutomatica;
import com.mad.utilidades.ExportReport;
import com.mad.utilidades.Format;
import com.mad.utilidades.IntereseYMora;
import com.mad.utilidades.ReportFile;

/** 
 * MyEclipse Struts
 * Creation date: 12-23-2008
 * 
 * XDoclet definition:
 * @struts.action path="/correccionCapital" name="correccionCapitalForm" input="redirectInvalidData" parameter="accion" scope="request" validate="true"
 * @struts.action-forward name="lista" path="pagina-lista.procesosEspeciales.correcionCapital"
 */
public class CorreccionCapitalAction extends DMLAction {
	/*
	 * Generated Methods
	 */

	public String USUARIO = "";
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		CorreccionCapitalForm correccionCapitalForm = (CorreccionCapitalForm) form;
		
		if(correccionCapitalForm.getImprimirReporte()>0){
			if(correccionCapitalForm.getImprimirReporte()== 1){
				request.setAttribute("botonImprimir", 1);
			}
			if(correccionCapitalForm.getImprimirReporte() == 2){
				request.setAttribute("botonImprimir", 2);
			}
		}else{
			request.getSession().removeAttribute("mxaId");
			request.getSession().removeAttribute("comprobante");
		}
		
		CtaTxaTransaccionxcuentaAsociadoDAO txaDao = new CtaTxaTransaccionxcuentaAsociadoDAO(getSessionHibernate(request));
		correccionCapitalForm.setComprobante(txaDao.nextComprobante());
		
		request.setAttribute("form", correccionCapitalForm);
		request.setAttribute(Constantes.ACCION_KEY, "/correccionCapital");
		request.setAttribute("pagina", 1);
		return mapping.findForward("lista");
	}
	
	public ActionForward cargarListaAsociados(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		CorreccionCapitalForm capitalForm = (CorreccionCapitalForm) form;
		List<CtaAscAsociado> listaAsociados = null;
		
		CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
		CtaAscAsociado asociado = new CtaAscAsociado();
		if(capitalForm.getAscEmp() == 2){
			asociado.setAscCodigo(capitalForm.getAscCodigoAsociado());
		}else{
			asociado.setAscCodigoAsociado(capitalForm.getAscCodigoAsociado());
		}
		if(capitalForm.getAscNombre() != null && !capitalForm.getAscNombre().trim().equals("")){
			if(capitalForm.getAscNombre().indexOf(",") == -1){
				if(capitalForm.getAscNombre().trim().indexOf(" ") == -1){
					asociado.getSecPerPersona().setPerPrimerNombre(capitalForm.getAscNombre());
				}else{
					StringTokenizer tokenizer = new StringTokenizer(capitalForm.getAscNombre());
					asociado.getSecPerPersona().setPerPrimerNombre(tokenizer.nextToken().trim());
					asociado.getSecPerPersona().setPerPrimerApellido(tokenizer.nextToken().trim());
				}
			}else{
				if(capitalForm.getAscNombre().trim().startsWith(",")){
					asociado.getSecPerPersona().setPerPrimerApellido("");
					asociado.getSecPerPersona().setPerPrimerNombre(capitalForm.getAscNombre().substring(1).trim());
				}else{
					StringTokenizer tokenizer = new StringTokenizer(capitalForm.getAscNombre().trim(),",");
					asociado.getSecPerPersona().setPerPrimerApellido(tokenizer.nextToken().trim());
					asociado.getSecPerPersona().setPerPrimerNombre(tokenizer.nextToken().trim());
				}
			}
		}
		
		SecPerPersona persona = new SecPerPersona();
		persona.setPerPrimerNombre(capitalForm.getAscNombre());
		
		try {
			listaAsociados = asociadoDAO.findByNameUser2(asociado,10);
			
			Boolean nulo = false;
			if(listaAsociados.size() < 1){
				nulo = true;
			}
			String listaResponse = "";
			listaResponse = construirListaAsociados(listaAsociados, nulo, capitalForm.getTransAsoc(),request);
			
			response.setCharacterEncoding("UTF-8");
			response.getWriter().write(listaResponse);
			
			response.getWriter().flush();
			response.getWriter().close();
		} catch (RuntimeException e) {
			log.error("Error runtime", e);
		} catch (IOException e) {
			log.error(e);
		}
		return null;
	}
	
	private String construirListaAsociados(List<CtaAscAsociado> listaAsociados, Boolean nulo, Integer transAsoc,HttpServletRequest request) {
		String lista = "";
		if(transAsoc == 0){
			lista = "<table id=\"resultadoAsc0\">";
		}else{
			lista = "<table id=\"resultadoAsc1\">";
		}
		lista+="<tr><td colspan=\"2\"><span style=\"font-size: 10px;font-style: italic;\">Asociados:</span></td></tr>";
		if(nulo == true){
			lista+= "<tr><td colspan=\"2\"><span style=\"font-size: 10px;color: red;font-style: italic;\">"
			+ "No se encontro ningun asociado en el sistema para esta b&uacute;squeda</span></td></tr>";
		}else{
			int max2 = 0;
			for (Iterator iterator = listaAsociados.iterator(); iterator.hasNext();) {
				//SecAscAsociado asociado = (SecAscAsociado) iterator.next();
				CtaAscAsociado asociado = (CtaAscAsociado)iterator.next();
				CtaCasCuentaAsociadoDAO cuentaAsociadoDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
				lista += "<tr>";
				if(transAsoc == 0){
					lista += "<td><input onclick=\"JavaScript:saveSeleccionA(this.value);\" type=\"radio\" name=\"_miseleccion\" value=\"";
				}else{
					lista += "<td><input onclick=\"JavaScript:saveSeleccionB(this.value);\" type=\"radio\" name=\"_miseleccion\" value=\"";
				}
				lista +=asociado.getAscCodigoAsociado()
						+ ";"
						+ asociado.getSecPerPersona().getPerPrimerNombre()
						+ " "
						+ asociado.getSecPerPersona().getPerPrimerApellido()
						+ ";"
						+ asociado.getAscId()
						+ "\"/></td>";
					lista += "<td><span style=\"font-size: 10px;color: #6E6E6E;font-style: italic;\">"
						+ asociado.getAscCodigoAsociado()
						+ " - "
						+ asociado.getSecPerPersona().getPerPrimerNombre()
						+ " "
						+ asociado.getSecPerPersona().getPerSegundoNombre()
						+ " "
						+ asociado.getSecPerPersona().getPerPrimerApellido()
						+ " "
						+ asociado.getSecPerPersona().getPerSegundoApellido()
						+ "</span></td>";
					lista += "</tr>";
			}
		}
		lista += "</table>";
		return lista;
	}
	
	public ActionForward cargarHtml(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		CorreccionCapitalForm capitalForm = (CorreccionCapitalForm)form;
		String texto = "";
		HtmlBuilder htmlBuilder = new HtmlBuilder();
		htmlBuilder.table(0).align("center").border("0").close().tr(0).close();
		if(capitalForm.getFuente() == 1){//Aportacion No debe validar inter√©s
			double disponible = 0.0;
			CtaCasCuentaAsociadoDAO casDao = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
			CtaCasCuentaAsociado cas = casDao.findAportacion(capitalForm.getCodigo(),9);
			disponible = cas.getCtaCahCuentaAhorro().getCahSaldoActual();
			htmlBuilder.input().type("hidden").name("cuentaFuente").id("cuentaFuente");
			htmlBuilder.value(cas.getCasCuenta().toString()).close();
			htmlBuilder.td(0).close().append("<label>Disponible</label>").tdEnd();
			htmlBuilder.td(0).close().div().id("cantidadDisponible").close();
			htmlBuilder.input().type("text").readonly().id("cantDisp").size("10").value(Format.formatDinero(disponible)).end();
			htmlBuilder.divEnd().tdEnd();
			htmlBuilder.trEnd(0).tr(0);
		}
		if(capitalForm.getFuente() == 2){//Ahorro
			double disponible=0.0;
			htmlBuilder.td(0).close().append("<label>Cuenta</label>").tdEnd();
			htmlBuilder.td(0).colspan("2").close().select();
			htmlBuilder.onchange("cargarDisponible();");
			htmlBuilder.name("cuentaFuente").id("cuentaFuente").close();
			CtaCasCuentaAsociadoDAO casDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
			
			//c es utilizada para contar la primera cuenta, para mostrar en disponigle desde el inicio
			//lo que este en ella, por lo tanto solo interesa antes que pase a ser 2 el resultado.
			int c = 0;
			List lcas = (List) casDAO.findByAscAndTipoCuenta(capitalForm.getCodigo(),"B");
			for (Iterator iterator = lcas.iterator(); iterator.hasNext();) {
				CtaCasCuentaAsociado cuentaAsociado = (CtaCasCuentaAsociado) iterator.next();
				if(cuentaAsociado.getCtaCahCuentaAhorro().getCahId().substring(0, 1).equals("B")){
					if(cuentaAsociado.getCtrEstEstado().getEstId()==9){
						c ++;
						if(c < 2){
							disponible = cuentaAsociado.getCtaCahCuentaAhorro().getCahSaldoActual();
						}
						htmlBuilder.option().value(cuentaAsociado.getCasCuenta().toString()).close();
						if(cuentaAsociado.getCtaCahCuentaAhorro().getCtaTahTipoAhorro()== null){
							htmlBuilder.append(cuentaAsociado.getCtaCahCuentaAhorro().getCahId() + " - Default");
						}else{
							htmlBuilder.append(cuentaAsociado.getCtaCahCuentaAhorro().getCahId() + " - "
									+ cuentaAsociado.getCtaCahCuentaAhorro().getCtaTahTipoAhorro().getTahNombre());
						}
						htmlBuilder.optionEnd();
					}
				}
			}
			htmlBuilder.selectEnd().tdEnd().trEnd(0).tr(0).close();
			htmlBuilder.td(0).close().append("<label>Disponible</label>").tdEnd();
			htmlBuilder.td(0).close().div().id("cantidadDisponible").close();
			htmlBuilder.input().type("text").readonly().id("cantDisp").size("10").value(Format.formatDinero(disponible)).close();
			htmlBuilder.divEnd().tdEnd();
			htmlBuilder.trEnd(0);
			htmlBuilder.tr(0).close();
			/*
			htmlBuilder.td(0).close().append("<label>Inter&eacute;s</label>").tdEnd();
			htmlBuilder.td(0).close().input().type("text").id("interesId").name("interes").size("10").close();
			*/
			
			htmlBuilder.divEnd().tdEnd();
			htmlBuilder.trEnd(0);
			htmlBuilder.tr(0);
		}
		if(capitalForm.getFuente() == 3){//Pr√©stamo
			double disponible=0.0;
			htmlBuilder.td(0).close().append("<label>Cuenta</label>").tdEnd();
			htmlBuilder.td(0).colspan("2").close().select();
			htmlBuilder.onchange("cargarDisponible();");
			htmlBuilder.name("cuentaFuente").id("cuentaFuente").close();
			CtaCasCuentaAsociadoDAO casDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
			int c = 0;
			List lcas = (List) casDAO.findByAscAndTipoCuenta(capitalForm.getCodigo(),"C");
			for (Iterator iterator = lcas.iterator(); iterator.hasNext();) {
				CtaCasCuentaAsociado cas = (CtaCasCuentaAsociado) iterator.next();
				if(cas.getCtrEstEstado().getEstId()==13){
					c ++;
					if(c < 2){
						CtaMxpMovimientoPrestamoDAO mxpDao = new CtaMxpMovimientoPrestamoDAO(getSessionHibernate(request));
						if(mxpDao.findUltimoMovimiento(cas.getCtaPrePrestamo().getPreId()) != null &&
								mxpDao.findUltimoMovimiento(cas.getCtaPrePrestamo().getPreId()).getMxpId() != null){
							CtaMxpMovimientoPrestamo mxp = mxpDao.findUltimoMovimiento(cas.getCtaPrePrestamo().getPreId());
							disponible = mxp.getMxpSaldoActual();
						}else{
							disponible = cas.getCtaPrePrestamo().getPreMontoSolicitado() - (cas.getCtaPrePrestamo().getPreSaldoActualT()+cas.getCtaPrePrestamo().getPrePendMov());
						}
					}
					htmlBuilder.option().value(cas.getCasCuenta().toString()).close();
					if(cas.getCtaPrePrestamo().getCtaTprTipoPrestamo()== null){
						htmlBuilder.append(cas.getCtaPrePrestamo().getPreId() + " - Credito");
					}else{
						htmlBuilder.append(cas.getCtaPrePrestamo().getPreId() + " - "
								+ cas.getCtaPrePrestamo().getCtaTprTipoPrestamo().getTprNombre());
					}
					htmlBuilder.optionEnd();
				}
			}
			htmlBuilder.selectEnd().tdEnd().trEnd(0).tr(0).close();
			htmlBuilder.td(0).close().append("<label>Disponible</label>").tdEnd();
			htmlBuilder.td(0).close().div().id("cantidadDisponible").close();
			htmlBuilder.input().type("text").readonly().id("cantDisp").size("10").value(Format.formatDinero(disponible)).close();
			htmlBuilder.divEnd().tdEnd();
			htmlBuilder.trEnd(0);
			htmlBuilder.tr(0).close();
			htmlBuilder.td(0).close().append("<label>Inter&eacute;s</label>").tdEnd();
			htmlBuilder.td(0).close().input().type("text").id("interesId").name("interes").size("10").close();
			htmlBuilder.divEnd().tdEnd();
			htmlBuilder.trEnd(0);
			htmlBuilder.tr(0);
		}
		if(capitalForm.getFuente() == 4){//Seguro No debe validar inter√©s
			double disponible=0.0;
			htmlBuilder.td(0).close().append("<label>Cuenta</label>").tdEnd();
			htmlBuilder.td(0).colspan("2").close().select();
			htmlBuilder.onchange("cargarDisponible();");
			htmlBuilder.name("cuentaFuente").id("cuentaFuente").close();
			CtaCasCuentaAsociadoDAO casDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
			int c = 0;
			List lcas = (List) casDAO.findByAscAndTipoCuenta(capitalForm.getCodigo(),"D");
			for (Iterator iterator = lcas.iterator(); iterator.hasNext();) {
				CtaCasCuentaAsociado cas = (CtaCasCuentaAsociado) iterator.next();
				if(cas.getCtrEstEstado().getEstId()==11){
					c ++;
					if(c < 2){
						CtaMxpMovimientoPrestamoDAO mxpDao = new CtaMxpMovimientoPrestamoDAO(getSessionHibernate(request));
						disponible = cas.getCtaSegSeguros().getSegSaldoIni()-cas.getCtaSegSeguros().getSegSaldoActual();
					}
					htmlBuilder.option().value(cas.getCasCuenta().toString()).close();
					htmlBuilder.append(cas.getCtaSegSeguros().getSegId() + " - "
								+ cas.getCtaSegSeguros().getCtaTisTipoSeguro().getTisNombre());
					htmlBuilder.optionEnd();
				}
			}
			htmlBuilder.selectEnd().tdEnd().trEnd(0).tr(0).close();
			htmlBuilder.td(0).close().append("<label>Disponible</label>").tdEnd();
			htmlBuilder.td(0).close().div().id("cantidadDisponible").close();
			htmlBuilder.input().type("text").readonly().id("cantDisp").size("10").value(Format.formatDinero(disponible)).close();
			htmlBuilder.divEnd().tdEnd();
			htmlBuilder.trEnd(0);
			htmlBuilder.tr(0).close();
			//htmlBuilder.td(0).close().append("<label>Inter&eacute;s</label>").tdEnd();
			//htmlBuilder.td(0).close().input().type("text").id("interesId").name("interes").size("10").close();
			htmlBuilder.divEnd().tdEnd();
			htmlBuilder.trEnd(0);
			htmlBuilder.tr(0);
		}
		if(capitalForm.getFuente() == 5){//Contable
			double disponible=0.0;
			int c = 0;
			ConCueCuentaDAO cuenta = new ConCueCuentaDAO(getSessionHibernate(request));
			List cueList = cuenta.findAll();
			Iterator iterador = cueList.iterator();
			htmlBuilder.td(0).close().append("<label>Cuenta Contable</label>").tdEnd();
			htmlBuilder.td(0).colspan("1").close().select().onchange("loadCont($('#cuentaFuente').val(),'cantidadDisponible');");
			//htmlBuilder.input().type("text").name("cuentaFuente").id("cuentaFuente").close();
			htmlBuilder.name("cuentaFuente").id("cuentaFuente").close();
			/*Este es el que estoy intentando meter =D*/
			while(iterador.hasNext()){
				ConCueCuenta cuenta2 =(ConCueCuenta)iterador.next();
				if(c==0){
					disponible = cuenta2.getCueSaldoActual();
				}
				htmlBuilder.option().value(cuenta2.getCueId().toString()).close();
				htmlBuilder.append(cuenta2.getCueCodigoCuenta()+"-"+cuenta2.getCueNombre());	
				htmlBuilder.optionEnd();
				c++;
			}
			/*Este es el que estoy intentando meter =D*/
			//htmlBuilder.tdEnd();
			htmlBuilder.selectEnd().tdEnd().trEnd(0).tr(0).close();
			htmlBuilder.td(0).close();
			//htmlBuilder.input().type("button").value("Cargar").onclick("loadCont($('#cuentaFuente').val());").close().tdEnd();
			htmlBuilder.trEnd(0).tr(0).close();
			htmlBuilder.td(0).close().append("<label>Disponible</label>").tdEnd();
			htmlBuilder.td(0).close().div().id("cantidadDisponible").close();
			htmlBuilder.input().type("text").readonly().id("cantDisp").size("10").value(Format.formatDinero(disponible)).close();
			htmlBuilder.divEnd().tdEnd();
			htmlBuilder.trEnd(0).tr(0);
		}
		htmlBuilder.td(0).close().append("<label>Cantidad</label>").tdEnd();
		htmlBuilder.td(0).close().input().type("text").size("15")
			.onkeyup("dosDecimales($('#txaMonto').val(),'txaMonto');")
			.styleClass("obligatorio").name("txaMonto").id("txaMonto").close().tdEnd();
		htmlBuilder.trEnd(0).tableEnd(1);
		texto = htmlBuilder.toString();
		try{
			response.setCharacterEncoding("UTF-8");
			response.getWriter().write(texto);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (RuntimeException e) {
			log.error("Error runtime", e);
		} catch (IOException e) {
			log.error(e);
		}
		return null;
	}
	
	public ActionForward cargarHtml2(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		CorreccionCapitalForm capitalForm = (CorreccionCapitalForm)form;
		String texto = "";
		IntereseYMora iYm = new IntereseYMora();
		iYm.setAcumulado(0.0);
		iYm.setPendiente(0.0);
		iYm.setMora(0.0);
		
		HtmlBuilder htmlBuilder = new HtmlBuilder();
		htmlBuilder.table(0).align("center").border("0").close().tr(0).close();
		if(capitalForm.getDestino() == 1){
			double disponible = 0.0;
			CtaCasCuentaAsociadoDAO casDao = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
			CtaCasCuentaAsociado cas = casDao.findAportacion(capitalForm.getAscFuente(),9);
			disponible = cas.getCtaCahCuentaAhorro().getCahSaldoActual();
			htmlBuilder.input().type("hidden").name("cuentaDestino").id("cuentaDestino");
			htmlBuilder.value(cas.getCasCuenta().toString()).close();
			htmlBuilder.td(0).close().append("<label>Saldo actual</label>").tdEnd();
			htmlBuilder.td(0).close().div().id("saldoActual").close();
			htmlBuilder.input().type("text").readonly().id("saldo").size("10").value(Format.formatDinero(disponible)).end();
			htmlBuilder.divEnd().tdEnd();
			htmlBuilder.trEnd(0).tr(0);
			
			//desde el codigo comentariado hasta la llave de cierre es el codigo original
			/*htmlBuilder.td(0).close();
			htmlBuilder.input().type("hidden").name("cuentaDestino").id("cuentaDestino");
			CtaCasCuentaAsociadoDAO casDao = new CtaCasCuentaAsociadoDAO();
			CtaCasCuentaAsociado cas = casDao.findAportacion(capitalForm.getAscFuente(),9);*/
			htmlBuilder.value(cas.getCasCuenta().toString()).close();
			htmlBuilder.tdEnd();
			htmlBuilder.trEnd(0);
		}
		if(capitalForm.getDestino() == 2){
			double disponible=0.0;
			htmlBuilder.td(0).close().append("<label>Cuenta</label>").tdEnd();
			htmlBuilder.td(0).colspan("2").close().select();
			htmlBuilder.onchange("cargarDisponibleD();");
			htmlBuilder.name("cuentaDestino").id("cuentaDestino").close();
			CtaCasCuentaAsociadoDAO casDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
			
			//c es utilizada para contar la primera cuenta, para mostrar en disponigle desde el inicio
			//lo que este en ella, por lo tanto solo interesa antes que pase a ser 2 el resultado.
			int c = 0;
			List lcas = (List) casDAO.findByAscAndTipoCuenta(capitalForm.getAscFuente(),"B");
			for (Iterator iterator = lcas.iterator(); iterator.hasNext();) {
				CtaCasCuentaAsociado cuentaAsociado = (CtaCasCuentaAsociado) iterator.next();
				if(cuentaAsociado.getCtaCahCuentaAhorro().getCahId().substring(0, 1).equals("B")){
					if(cuentaAsociado.getCtrEstEstado().getEstId()==9){
						c ++;
						if(c < 2){
							disponible = cuentaAsociado.getCtaCahCuentaAhorro().getCahSaldoActual();
						}
						htmlBuilder.option().value(cuentaAsociado.getCasCuenta().toString()).close();
						if(cuentaAsociado.getCtaCahCuentaAhorro().getCtaTahTipoAhorro()== null){
							htmlBuilder.append(cuentaAsociado.getCtaCahCuentaAhorro().getCahId() + " - Default");
						}else{
							htmlBuilder.append(cuentaAsociado.getCtaCahCuentaAhorro().getCahId() + " - "
									+ cuentaAsociado.getCtaCahCuentaAhorro().getCtaTahTipoAhorro().getTahNombre());
						}
						htmlBuilder.optionEnd();
					}
				}
			}
			htmlBuilder.selectEnd().tdEnd().trEnd(0).tr(0).close();
			htmlBuilder.td(0).close().append("<label>Saldo actual</label>").tdEnd();
			htmlBuilder.td(0).close().div().id("saldoActual").close();
			htmlBuilder.input().type("text").readonly().id("saldo").size("10").value(Format.formatDinero(disponible)).close();
			htmlBuilder.divEnd().tdEnd();
			htmlBuilder.trEnd(0);
			htmlBuilder.tr(0).close();
			/*
			htmlBuilder.td(0).close().append("<label>Inter&eacute;s</label>").tdEnd();
			htmlBuilder.td(0).close().input().type("text").id("interesId").name("interes").size("10").close();
			*/
			
			htmlBuilder.divEnd().tdEnd();
			htmlBuilder.trEnd(0);
			htmlBuilder.tr(0);
			//Desde aqui codigo antiguo intacto por si algo sale mal tomar en cuenta esto
			/*htmlBuilder.td(0).close().append("<label>Cuenta</label>").tdEnd();
			htmlBuilder.td(0).colspan("2").close().select();
			htmlBuilder.name("cuentaDestino").id("cuentaDestino").close();
			CtaCasCuentaAsociadoDAO casDAO = new CtaCasCuentaAsociadoDAO();
			
			//c es utilizada para contar la primera cuenta, para mostrar en disponigle desde el inicio
			//lo que este en ella, por lo tanto solo interesa antes que pase a ser 2 el resultado.
			List lcas = (List) casDAO.findByAscAndTipoCuenta(capitalForm.getAscFuente(),"B");
			for (Iterator iterator = lcas.iterator(); iterator.hasNext();) {
				CtaCasCuentaAsociado cuentaAsociado = (CtaCasCuentaAsociado) iterator.next();
				if(cuentaAsociado.getCtaCahCuentaAhorro().getCahId().substring(0, 1).equals("B")){
					if(cuentaAsociado.getCtrEstEstado().getEstId()==9){
						htmlBuilder.option().value(cuentaAsociado.getCasCuenta().toString()).close();
						if(cuentaAsociado.getCtaCahCuentaAhorro().getCtaTahTipoAhorro()== null){
							htmlBuilder.append(cuentaAsociado.getCtaCahCuentaAhorro().getCahId() + " - Default");
						}else{
							htmlBuilder.append(cuentaAsociado.getCtaCahCuentaAhorro().getCahId() + " - "
									+ cuentaAsociado.getCtaCahCuentaAhorro().getCtaTahTipoAhorro().getTahNombre());
						}
						htmlBuilder.optionEnd();
					}
				}
			}
			htmlBuilder.selectEnd().tdEnd().trEnd(0).tr(0).close();
			htmlBuilder.divEnd().tdEnd();
			htmlBuilder.trEnd(0);*/
		}
		if(capitalForm.getDestino() == 3){
			double disponible=0.0;
			htmlBuilder.td(0).close().append("<label>Cuenta</label>").tdEnd();
			htmlBuilder.td(0).colspan("2").close().select();
			htmlBuilder.onchange("cargarDisponibleD();");
			htmlBuilder.name("cuentaDestino").id("cuentaDestino").close();
			CtaCasCuentaAsociadoDAO casDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
			int c = 0;
			List lcas = (List) casDAO.findByAscAndTipoCuenta(capitalForm.getAscFuente(),"C");
			for (Iterator iterator = lcas.iterator(); iterator.hasNext();) {
				CtaCasCuentaAsociado cas = (CtaCasCuentaAsociado) iterator.next();
				if(cas.getCtrEstEstado().getEstId()==13){
					c ++;
					if(c < 2){
						CtaMxpMovimientoPrestamoDAO mxpDao = new CtaMxpMovimientoPrestamoDAO(getSessionHibernate(request));
						if(mxpDao.findUltimoMovimiento(cas.getCtaPrePrestamo().getPreId()) != null &&
								mxpDao.findUltimoMovimiento(cas.getCtaPrePrestamo().getPreId()).getMxpId() != null){
							CtaMxpMovimientoPrestamo mxp = mxpDao.findUltimoMovimiento(cas.getCtaPrePrestamo().getPreId());
							//original//disponible = mxp.getMxpSaldoActual();
							//disponible = mxp.getMxpSaldo()+mxp.getMxpInteresAcumulado()+mxp.getMxpInteresPendiente();
							iYm = iYm.actualizaInteres(mxp, cas.getCtaPrePrestamo(), cas, new Date(),request);
							disponible = cas.getCtaPrePrestamo().getPreSaldoActualT()+iYm.getAcumulado()+iYm.getPendiente();
						}else{
							//original//disponible = cas.getCtaPrePrestamo().getPreMontoSolicitado() - cas.getCtaPrePrestamo().getPreSaldoActualT();
							disponible = cas.getCtaPrePrestamo().getPreSaldoActualT()+cas.getCtaPrePrestamo().getPreInteresAcumulado()+cas.getCtaPrePrestamo().getPrePendMov();
						}
					}
					htmlBuilder.option().value(cas.getCasCuenta().toString()).close();
					if(cas.getCtaPrePrestamo().getCtaTprTipoPrestamo()== null){
						htmlBuilder.append(cas.getCtaPrePrestamo().getPreId() + " - Credito");
					}else{
						htmlBuilder.append(cas.getCtaPrePrestamo().getPreId() + " - "
								+ cas.getCtaPrePrestamo().getCtaTprTipoPrestamo().getTprNombre());
					}
					htmlBuilder.optionEnd();
				}
			}
			htmlBuilder.selectEnd().tdEnd().trEnd(0).tr(0).close();
			htmlBuilder.td(0).close().append("<label>Saldo actual</label>").tdEnd();
			htmlBuilder.td(0).close().div().id("saldoActual").close();
			htmlBuilder.input().type("text").readonly().id("saldo").size("10").value(Format.formatDinero(disponible)).close();
			htmlBuilder.divEnd().tdEnd();
			htmlBuilder.trEnd(0);
			htmlBuilder.tr(0).close();
			htmlBuilder.divEnd().tdEnd();
			htmlBuilder.trEnd(0);
			htmlBuilder.tr(0);
			
			//codigo original intacto por cualquier incoveniene se puede utilizar este otra vez
			/*htmlBuilder.td(0).close().append("<label>Cuenta</label>").tdEnd();
			htmlBuilder.td(0).colspan("2").close().select();
			htmlBuilder.name("cuentaDestino").id("cuentaDestino").close();
			CtaCasCuentaAsociadoDAO casDAO = new CtaCasCuentaAsociadoDAO();
			int c = 0;
			List lcas = (List) casDAO.findByAscAndTipoCuenta(capitalForm.getAscFuente(),"C");
			for (Iterator iterator = lcas.iterator(); iterator.hasNext();) {
				CtaCasCuentaAsociado cas = (CtaCasCuentaAsociado) iterator.next();
				if(cas.getCtrEstEstado().getEstId()==13){
					htmlBuilder.option().value(cas.getCasCuenta().toString()).close();
					if(cas.getCtaPrePrestamo().getCtaTprTipoPrestamo()== null){
						htmlBuilder.append(cas.getCtaPrePrestamo().getPreId() + " - Credito");
					}else{
						htmlBuilder.append(cas.getCtaPrePrestamo().getPreId() + " - "
								+ cas.getCtaPrePrestamo().getCtaTprTipoPrestamo().getTprNombre());
					}
					htmlBuilder.optionEnd();
				}
			}
			htmlBuilder.selectEnd().tdEnd().trEnd(0).tr(0).close();
			htmlBuilder.divEnd().tdEnd();
			htmlBuilder.trEnd(0);*/
			//codigo original
		}
		if(capitalForm.getDestino() == 4){
			double disponible=0.0;
			htmlBuilder.td(0).close().append("<label>Cuenta</label>").tdEnd();
			htmlBuilder.td(0).colspan("2").close().select();
			htmlBuilder.onchange("cargarDisponibleD();");
			htmlBuilder.name("cuentaDestino").id("cuentaDestino").close();
			CtaCasCuentaAsociadoDAO casDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
			int c = 0;
			List lcas = (List) casDAO.findByAscAndTipoCuenta(capitalForm.getAscFuente(),"D");
			for (Iterator iterator = lcas.iterator(); iterator.hasNext();) {
				CtaCasCuentaAsociado cas = (CtaCasCuentaAsociado) iterator.next();
				if(cas.getCtrEstEstado().getEstId()==11){
					c ++;
					if(c < 2){
						disponible = cas.getCtaSegSeguros().getSegSaldoActual();
					}
					htmlBuilder.option().value(cas.getCasCuenta().toString()).close();
					htmlBuilder.append(cas.getCtaSegSeguros().getSegId() + " - "
								+ cas.getCtaSegSeguros().getCtaTisTipoSeguro().getTisNombre());
					htmlBuilder.optionEnd();
				}
			}
			htmlBuilder.selectEnd().tdEnd().trEnd(0).tr(0).close();
			htmlBuilder.td(0).close().append("<label>Saldo actual</label>").tdEnd();
			htmlBuilder.td(0).close().div().id("saldoActual").close();
			htmlBuilder.input().type("text").readonly().id("saldo").size("10").value(Format.formatDinero(disponible)).close();
			htmlBuilder.divEnd().tdEnd();
			htmlBuilder.trEnd(0);
			htmlBuilder.tr(0).close();
			htmlBuilder.divEnd().tdEnd();
			htmlBuilder.trEnd(0);
			htmlBuilder.tr(0);
			
			//codigo original
			/*htmlBuilder.td(0).close().append("<label>Cuenta</label>").tdEnd();
			htmlBuilder.td(0).colspan("2").close().select();
			htmlBuilder.name("cuentaDestino").id("cuentaDestino").close();
			CtaCasCuentaAsociadoDAO casDAO = new CtaCasCuentaAsociadoDAO();
			int c = 0;
			List lcas = (List) casDAO.findByAscAndTipoCuenta(capitalForm.getAscFuente(),"D");
			for (Iterator iterator = lcas.iterator(); iterator.hasNext();) {
				CtaCasCuentaAsociado cas = (CtaCasCuentaAsociado) iterator.next();
				if(cas.getCtrEstEstado().getEstId()==11){
					htmlBuilder.option().value(cas.getCasCuenta().toString()).close();
					htmlBuilder.append(cas.getCtaSegSeguros().getSegId() + " - "
								+ cas.getCtaSegSeguros().getCtaTisTipoSeguro().getTisNombre());
					htmlBuilder.optionEnd();
				}
			}
			htmlBuilder.selectEnd().tdEnd().trEnd(0).tr(0).close();
			htmlBuilder.divEnd().tdEnd();
			htmlBuilder.trEnd(0);*/
		}
		
		/*Codigo agregado para el nuevo requerimiento siendo hasta el momento la modificacion de mayor peso 13/10/2009*/
		if(capitalForm.getDestino() == 5){//Contable
			double disponible=0.0;
			int c = 0;
			ConCueCuentaDAO cuenta = new ConCueCuentaDAO(getSessionHibernate(request));
			List cueList = cuenta.findAll();
			Iterator iterador = cueList.iterator();
			htmlBuilder.td(0).close().append("<label>Cuenta Contable</label>").tdEnd();
			htmlBuilder.td(0).colspan("1").close().select().onchange("loadCont($('#cuentaDestino').val(),'saldoActual');");
			//original//htmlBuilder.input().type("text").name("cuentaDestino").id("cuentaDestino").close();
			htmlBuilder.name("cuentaDestino").id("cuentaDestino").close();
			while(iterador.hasNext()){
				ConCueCuenta cuenta2 = (ConCueCuenta) iterador.next();
				if(c==0){
					disponible = cuenta2.getCueSaldoActual();
				}
				htmlBuilder.option().value(cuenta2.getCueId().toString()).close();
				htmlBuilder.append(cuenta2.getCueCodigoCuenta()+"-"+cuenta2.getCueNombre());
				htmlBuilder.optionEnd();
				c++;
			}
			htmlBuilder.selectEnd().tdEnd().trEnd(0).tr(0).close();
			//htmlBuilder.tdEnd();
			htmlBuilder.td(0).close();
			/*htmlBuilder.input().type("button").value("Cargar").onclick("loadCont($('#cuentaFuente').val());").close().tdEnd();
			*/htmlBuilder.trEnd(0).tr(0).close();
			htmlBuilder.td(0).close().append("<label>Saldo Actual</label>").tdEnd();
			htmlBuilder.td(0).close().div().id("saldoActual").close();
			htmlBuilder.input().type("text").readonly().id("saldo").size("10").value(Format.formatDinero(disponible)).close();
			htmlBuilder.divEnd().tdEnd();
			htmlBuilder.trEnd(0).tr(0);
		}
		/*Termina codigo agregado para el nuevo requerimiento*/
		
		htmlBuilder.trEnd(0).tableEnd(1);
		texto = htmlBuilder.toString();
		try{
			response.setCharacterEncoding("UTF-8");
			response.getWriter().write(texto);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (RuntimeException e) {
			log.error("Error runtime", e);
		} catch (IOException e) {
			log.error(e);
		}
		return null;
	}
	
	//disponibleCuentaCont
	//modificado el 28/10/2009 porque se cambio el input text por un select para las cuentas cont
	public ActionForward disponibleCuentaCont(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		CorreccionCapitalForm capitalForm = (CorreccionCapitalForm)form;
		ConCueCuentaDAO cuentaDAO = new ConCueCuentaDAO(getSessionHibernate(request));
		String texto = "";
		Double disponible = 0.0;
		//este es el original//List cuentasCont = cuentaDAO.findByCueCodigoCuenta(capitalForm.getCuentaCont());
		//if(cuentasCont.size()>0){
			//ConCueCuenta cue = (ConCueCuenta) cuentasCont.get(0);
		ConCueCuenta cue = (ConCueCuenta) cuentaDAO.findById(Integer.parseInt(capitalForm.getCuentaCont()));
		disponible = cue.getCueSaldoActual();
		//}
		HtmlBuilder htmlBuilder = new HtmlBuilder();
		htmlBuilder.input().type("text").readonly().id("cantDisp").size("10").value(Format.formatDinero(disponible)).close();
		texto = htmlBuilder.toString();
		try{
			response.setCharacterEncoding("UTF-8");
			response.getWriter().write(texto);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (RuntimeException e) {
			log.error("Error runtime", e);
		} catch (IOException e) {
			log.error(e);
		}
		return null;
	}
	
	public ActionForward cancelar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		CorreccionCapitalForm capitalForm = new CorreccionCapitalForm();
		return lista(mapping, capitalForm, request, response);
	}
	
	/*
	 * Abono por transferencia 5
	 * Cargo por transferencia 23
	 * Abono por correccion de Capital 14
	 * Cargo por correccion de capital 24
	 * Abono por correccion de Intereses 18
	 * Cargo por correccion de intereses 28
	 */
	
	public ActionForward transferir(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		CorreccionCapitalForm capitalForm = (CorreccionCapitalForm)form;
		USUARIO = capitalForm.getUsuarioConectado().getNombreUsuario();
		CuentaAhorroAction penalidad = new CuentaAhorroAction();
		double monto = capitalForm.getTxaMonto();
		double pena = 0.0;
		double interes = 0.0;
		//Validacion en general por si no ha llenado algunos campos
		if(validarCorreccion(capitalForm, request)!= true){
			return lista(mapping, capitalForm, request, response);
		}
		
		//Validacion por si las cantidades son mayores que lo disponible
		CtaCasCuentaAsociadoDAO casDao = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
		Double disponible = 0.0;
		if(capitalForm.getFuente() == 1 || capitalForm.getFuente() == 2){
			CtaCasCuentaAsociado cas = casDao.findById(Long.valueOf(capitalForm.getCuentaFuente()));
			CtaCahCuentaAhorroDAO ahorroDAO = new CtaCahCuentaAhorroDAO(getSessionHibernate(request));
			CtaCahCuentaAhorro ahorro = ahorroDAO.findById(cas.getCtaCahCuentaAhorro().getCahId());
			if(capitalForm.getFuente()==2){
				pena = penalidad.calculoPenalidad(ahorro, monto,request);
				monto = monto + pena;
			}
			disponible = ahorro.getCahSaldoActual();
		}
		if(capitalForm.getFuente() == 3){
			CtaCasCuentaAsociado cas = casDao.findById(Long.valueOf(capitalForm.getCuentaFuente()));
			CtaPrePrestamoDAO prestamoDAO = new CtaPrePrestamoDAO(getSessionHibernate(request));
			CtaPrePrestamo prestamo = prestamoDAO.findById(cas.getCtaPrePrestamo().getPreId());
			//disponible = prestamo.getPreMontoSolicitado() - (prestamo.getPreSaldoActualT()+prestamo.getPreInteresAcumulado()+prestamo.getPrePendMov());
			CtaMxpMovimientoPrestamoDAO mxpDao = new CtaMxpMovimientoPrestamoDAO(getSessionHibernate(request));
			CtaMxpMovimientoPrestamo mxp = mxpDao.findUltimoMovimiento(cas.getCtaPrePrestamo().getPreId());
			disponible = mxp.getMxpSaldoActual();
		}
		if(capitalForm.getFuente() == 4){
			CtaCasCuentaAsociado cas = casDao.findById(Long.valueOf(capitalForm.getCuentaFuente()));
			CtaSegSegurosDAO segurosDAO = new CtaSegSegurosDAO(getSessionHibernate(request));
			CtaSegSeguros seguros = segurosDAO.findById(cas.getCtaSegSeguros().getSegId());
			disponible = seguros.getSegSaldoIni() - seguros.getSegSaldoActual();
		}
		if(capitalForm.getFuente() == 5){
			
			ConCueCuentaDAO cuentaDAO = new ConCueCuentaDAO(getSessionHibernate(request));
			//original//List l = cuentaDAO.findByCueCodigoCuenta(capitalForm.getCuentaFuente());
			/*List l = cuentaDAO.findById(Integer.parseInt(capitalForm.getCuentaFuente()));
			if(l!=null){				
				ConCueCuenta cuenta = (ConCueCuenta) l.get(0);*/
				ConCueCuenta cuenta = cuentaDAO.findById(Integer.parseInt(capitalForm.getCuentaFuente()));
				disponible = cuenta.getCueSaldoActual();
			//}
			if(capitalForm.getDestino()==3){
				CtaCasCuentaAsociadoDAO casDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
				CtaCasCuentaAsociado cas = casDAO.findById(new Long(capitalForm.getCuentaDestino()));
				CtaPrePrestamo prestamo = cas.getCtaPrePrestamo();
				CtaMxpMovimientoPrestamoDAO mxpDAO = new CtaMxpMovimientoPrestamoDAO(getSessionHibernate(request));
				CtaMxpMovimientoPrestamo mxpAnt = new CtaMxpMovimientoPrestamo();
				mxpAnt = mxpDAO.findUltimoMovimiento(prestamo.getPreId());
				IntereseYMora iYm= new IntereseYMora();
				iYm.actualizaInteres(mxpAnt, prestamo, cas, new Date(),request);
				interes = iYm.getAcumulado().doubleValue()+iYm.getPendiente().doubleValue();
				
			}
		}
		
		
		if(disponible >= monto || capitalForm.getFuente() == 5){
			
			String texto = "";
			
			//Preparar mensaje para comprobante
			if(capitalForm.getTransOCorr()==1){//Transferencia
				String transcorr = "Transferencia de Fondos";
			}else{
				String transcorr = "Correccion de Capital";
			}
			//De contable a contable
			ConCueCuentaDAO cuentaDAO = new ConCueCuentaDAO(getSessionHibernate(request));
			CtaCasCuentaAsociadoDAO casDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
			if(capitalForm.getFuente()==5 && capitalForm.getDestino()==5){				
				ConCueCuenta cueFuente = cuentaDAO.findById(new Integer(capitalForm.getCuentaFuente()));
				ConCueCuenta cueDestino = cuentaDAO.findById(new Integer(capitalForm.getCuentaDestino()));
				 texto = "Se ha trasferido de la cuenta " + cueFuente.getCueCodigoCuenta() + " - " 
							   + cueFuente.getCueNombre() +
							   " a la cuenta " + cueDestino.getCueCodigoCuenta() + " - "
							   + cueDestino.getCueNombre() + 
							   " la cantidad de $"+capitalForm.getTxaMonto();
							   System.out.println(texto);
			   
			}			
			//De contable a corriente
			if(capitalForm.getFuente()==5 && capitalForm.getDestino()!=5){
				ConCueCuenta cueFuente = cuentaDAO.findById(new Integer(capitalForm.getCuentaFuente()));
				CtaCasCuentaAsociado cas = casDAO.findById(new Long(capitalForm.getCuentaDestino()));
				
				texto = "Se ha trasferido de la cuenta " + cueFuente.getCueCodigoCuenta() + " - " 
				   + cueFuente.getCueNombre() +
				   " la cantidad de $" + capitalForm.getTxaMonto() +
				   " para que sea acreditado al asociado: ";
				String nombre = cas.getCtaAscAsociado().getSecPerPersona().getPerPrimerNombre() + " " +
								cas.getCtaAscAsociado().getSecPerPersona().getPerSegundoNombre() + " " +
								cas.getCtaAscAsociado().getSecPerPersona().getPerTercerNombre() + " " +
								cas.getCtaAscAsociado().getSecPerPersona().getPerPrimerApellido() + " " +
								cas.getCtaAscAsociado().getSecPerPersona().getPerSegundoApellido() + " " + 
								cas.getCtaAscAsociado().getSecPerPersona().getPerApellidoCasada();
				
				if(capitalForm.getDestino()==1){//Abono a aportaciones
					texto = texto + nombre + " ,con codigo de asociado: " + cas.getCtaAscAsociado().getAscCodigoAsociado() +
					" a la cuenta: "+ cas.getCtaCahCuentaAhorro().getCahId() + " Aportaciones";
				}
				if(capitalForm.getDestino()==2){//Abono a ahorros
					texto = texto + nombre + " ,con codigo de asociado: " + cas.getCtaAscAsociado().getAscCodigoAsociado() +
					" a la cuenta: "+ cas.getCtaCahCuentaAhorro().getCahId() + " "  + cas.getCtaCahCuentaAhorro().getCtaTahTipoAhorro().getTahNombre();					
				}
				if(capitalForm.getDestino()==3){//Abono a prestamos
					texto = texto + nombre + " ,con codigo de asociado: " + cas.getCtaAscAsociado().getAscCodigoAsociado() +
					" a la cuenta: "+ cas.getCtaPrePrestamo().getPreId() + " "  + cas.getCtaPrePrestamo().getCtaTprTipoPrestamo().getCtaLprLineaPrestamo().getLprNombre();					
				}
				if(capitalForm.getDestino()==4){//Abono a seguros
					texto = texto + nombre + " ,con codigo de asociado: " + cas.getCtaAscAsociado().getAscCodigoAsociado() +
					" a la cuenta: "+ cas.getCtaSegSeguros().getSegId() + " "  + cas.getCtaSegSeguros().getCtaTisTipoSeguro().getTisNombre();					
				}				
			    System.out.println(texto);
			}
			//De corriente a contable
			if(capitalForm.getFuente()!=5 && capitalForm.getDestino()==5){
				CtaCasCuentaAsociado cas = casDAO.findById(new Long(capitalForm.getCuentaFuente()));
				ConCueCuenta cueDestino = cuentaDAO.findById(new Integer(capitalForm.getCuentaDestino()));
				
				String nombre = cas.getCtaAscAsociado().getSecPerPersona().getPerPrimerNombre() + " " +
				cas.getCtaAscAsociado().getSecPerPersona().getPerSegundoNombre() + " " +
				cas.getCtaAscAsociado().getSecPerPersona().getPerTercerNombre() + " " +
				cas.getCtaAscAsociado().getSecPerPersona().getPerPrimerApellido() + " " +
				cas.getCtaAscAsociado().getSecPerPersona().getPerSegundoApellido() + " " + 
				cas.getCtaAscAsociado().getSecPerPersona().getPerApellidoCasada();
				
				texto = "Yo " +nombre + ", con codigo de asociado " + cas.getCtaAscAsociado().getAscCodigoAsociado() +
							   ", he transferido de la cuenta de ";
				
				if(capitalForm.getFuente()==1){//Abono a aportaciones
					texto = texto + "Aportaciones " + cas.getCtaCahCuentaAhorro().getCahId();
				}
				if(capitalForm.getFuente()==2){//Abono a ahorros
					texto = texto + cas.getCtaCahCuentaAhorro().getCtaTahTipoAhorro().getTahNombre() + " " + cas.getCtaCahCuentaAhorro().getCahId();					
				}
				if(capitalForm.getFuente()==3){//Abono a prestamos
					texto = texto + cas.getCtaPrePrestamo().getCtaTprTipoPrestamo().getCtaLprLineaPrestamo().getLprNombre() + " " +cas.getCtaPrePrestamo().getPreId();					
				}
				if(capitalForm.getFuente()==4){//Abono a seguros
					texto = texto + cas.getCtaSegSeguros().getCtaTisTipoSeguro().getTisNombre() + " " + cas.getCtaSegSeguros().getSegId();					
				}
				texto = texto + " la cantidad de $ " + capitalForm.getTxaMonto() + " a la cuenta contable " + cueDestino.getCueCodigoCuenta() + " - " 
				+ cueDestino.getCueNombre();				
				
			    System.out.println(texto);
			}			
			//De corriente a corriente
			if(capitalForm.getFuente()!=5 && capitalForm.getDestino()!=5){
				CtaCasCuentaAsociado casF = casDAO.findById(new Long(capitalForm.getCuentaFuente()));
				CtaCasCuentaAsociado casD = casDAO.findById(new Long(capitalForm.getCuentaDestino()));
				
				String nombre1 = casF.getCtaAscAsociado().getSecPerPersona().getPerPrimerNombre() + " " +
				casF.getCtaAscAsociado().getSecPerPersona().getPerSegundoNombre() + " " +
				casF.getCtaAscAsociado().getSecPerPersona().getPerTercerNombre() + " " +
				casF.getCtaAscAsociado().getSecPerPersona().getPerPrimerApellido() + " " +
				casF.getCtaAscAsociado().getSecPerPersona().getPerSegundoApellido() + " " + 
				casF.getCtaAscAsociado().getSecPerPersona().getPerApellidoCasada();
				
				String nombre2 = casD.getCtaAscAsociado().getSecPerPersona().getPerPrimerNombre() + " " +
				casD.getCtaAscAsociado().getSecPerPersona().getPerSegundoNombre() + " " +
				casD.getCtaAscAsociado().getSecPerPersona().getPerTercerNombre() + " " +
				casD.getCtaAscAsociado().getSecPerPersona().getPerPrimerApellido() + " " +
				casD.getCtaAscAsociado().getSecPerPersona().getPerSegundoApellido() + " " + 
				casD.getCtaAscAsociado().getSecPerPersona().getPerApellidoCasada();
				
				texto = "Yo " +nombre1 + ", con codigo de asociado " + casF.getCtaAscAsociado().getAscCodigoAsociado() +
				   ", he transferido de la cuenta de ";
				
				if(capitalForm.getFuente()==1){//Abono a aportaciones
					texto = texto + "Aportaciones " + casF.getCtaCahCuentaAhorro().getCahId();
				}
				if(capitalForm.getFuente()==2){//Abono a ahorros
					texto = texto + casF.getCtaCahCuentaAhorro().getCtaTahTipoAhorro().getTahNombre() + " " + casF.getCtaCahCuentaAhorro().getCahId();					
				}
				if(capitalForm.getFuente()==3){//Abono a prestamos
					texto = texto + casF.getCtaPrePrestamo().getCtaTprTipoPrestamo().getCtaLprLineaPrestamo().getLprNombre() + " " +casF.getCtaPrePrestamo().getPreId();					
				}
				if(capitalForm.getFuente()==4){//Abono a seguros
					texto = texto + casF.getCtaSegSeguros().getCtaTisTipoSeguro().getTisNombre() + " " + casF.getCtaSegSeguros().getSegId();					
				}
				texto = texto + " la cantidad de $ " + capitalForm.getTxaMonto() + " para que sea acreditado al asociado: ";

				if(capitalForm.getDestino()==1){//Abono a aportaciones
					texto = texto + nombre2 + " ,con codigo de asociado: " + casD.getCtaAscAsociado().getAscCodigoAsociado() +
					" a la cuenta: "+ casD.getCtaCahCuentaAhorro().getCahId() + " Aportaciones";
				}
				if(capitalForm.getDestino()==2){//Abono a ahorros
					texto = texto + nombre2 + " ,con codigo de asociado: " + casD.getCtaAscAsociado().getAscCodigoAsociado() +
					" a la cuenta: "+ casD.getCtaCahCuentaAhorro().getCahId() + " "  + casD.getCtaCahCuentaAhorro().getCtaTahTipoAhorro().getTahNombre();					
				}
				if(capitalForm.getDestino()==3){//Abono a prestamos
					texto = texto + nombre2 + " ,con codigo de asociado: " + casD.getCtaAscAsociado().getAscCodigoAsociado() +
					" a la cuenta: "+ casD.getCtaPrePrestamo().getPreId() + " "  + casD.getCtaPrePrestamo().getCtaTprTipoPrestamo().getCtaLprLineaPrestamo().getLprNombre();					
				}
				if(capitalForm.getDestino()==4){//Abono a seguros
					texto = texto + nombre2 + " ,con codigo de asociado: " + casD.getCtaAscAsociado().getAscCodigoAsociado() +
					" a la cuenta: "+ casD.getCtaSegSeguros().getSegId() + " "  + casD.getCtaSegSeguros().getCtaTisTipoSeguro().getTisNombre();					
				}				
			    System.out.println(texto);
				
			}			
			
			USUARIO = "";
			capitalForm.setImprimirReporte(1);
			if(capitalForm.getFuente() == 2){
				capitalForm.setImprimirReporte(2);
			}
			
			transfiere(capitalForm.getCuentaFuente(), capitalForm.getFuente(), "C", request,
					capitalForm.getTxaMonto(), interes, capitalForm.getTransOCorr(), texto);
			transfiere(capitalForm.getCuentaDestino(), capitalForm.getDestino(), "A", request,
					capitalForm.getTxaMonto(), interes, capitalForm.getTransOCorr(), texto);
			
			mensajes("exito.tranDML.transaccionExitosa", capitalForm, request, response);
			
			
		}else{
			mensajes("error.tranDML.masQueLoDisponible", capitalForm, request, response);
		}
		return lista(mapping, capitalForm, request, response);
	}
	
	private boolean validarCorreccion(CorreccionCapitalForm capitalForm, HttpServletRequest request) {
		boolean b = true;
		ActionErrors errors = new ActionErrors();
		if(capitalForm.getFuente() == null || capitalForm.getFuente() < 1){
			b = false;
			errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("error.cc.cuentaFuente"));
			saveMessages(request, errors);	
		}else{
			if(capitalForm.getCuentaFuente() == null || capitalForm.getCuentaFuente().trim().equals("")){
				b = false;
				errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("error.cc.cuentaFuente"));
				saveMessages(request, errors);	
			}
		}
		if(capitalForm.getDestino() == null || capitalForm.getDestino() < 1){
			b = false;
			errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("error.cc.cuentaDestino"));
			saveMessages(request, errors);	
		}else{
			if(capitalForm.getCuentaDestino() == null || capitalForm.getCuentaDestino().trim().equals("")){
				b = false;
				errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("error.cc.cuentaDestino"));
				saveMessages(request, errors);	
			}
		}
		if(capitalForm.getFuente().equals(capitalForm.getDestino())){
			if(capitalForm.getCuentaFuente().equals(capitalForm.getCuentaDestino())){
				b = false;
				errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("error.cc.mismaCuenta"));
				saveMessages(request, errors);
			}
		}
		
		if(capitalForm.getTxaMonto() == null || capitalForm.getTxaMonto() <= 0){
			b = false;
			errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("error.cc.txaMonto"));
			saveMessages(request, errors);	
		}
		
		if(capitalForm.getTransOCorr() == 2){
			
			if(capitalForm.getFuente()!= 1 && capitalForm.getFuente()!= 2 && capitalForm.getFuente()!= 4 && capitalForm.getFuente()!= 5){
				if(capitalForm.getInteres() == null || capitalForm.getInteres() < 0){
					b = false;
					errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("error.cc.interes"));
					saveMessages(request, errors);	
				}	
			}
			
			
			
		}
		
		return b;
	}
	
	private void transfiere(String cuenta, Integer fuente, String tipo, 
			HttpServletRequest request, Double monto, 
			Double interes, Integer transOcorr, String texto) {
			System.out.println("Interes: "+ interes);
			// transOCorr = 2 transferencia
			//				1 correccion
		//Cargo a Cuenta Contable
		if(fuente== 5){
			transCuentaCont(cuenta, monto, tipo, transOcorr,request, texto);
		}else{
			//TTR's utilizados
			CtaTtrTipoTransaccionDAO ttrDao = new CtaTtrTipoTransaccionDAO(getSessionHibernate(request));
			//Transferencia comun
			CtaTtrTipoTransaccion ttrAtran = ttrDao.findById(5);//Abono por transferencia 5
			CtaTtrTipoTransaccion ttrCtran = ttrDao.findById(23);//Cargo por transferencia 23
			//Capital
			CtaTtrTipoTransaccion ttrACap = ttrDao.findById(14);//Abono por correccion de Capital 14
			CtaTtrTipoTransaccion ttrCCap = ttrDao.findById(24);//Cargo por correccion de capital 24
			//Interes
			CtaTtrTipoTransaccion ttrAInt = ttrDao.findById(18);//Abono por correccion de Intereses 18
			CtaTtrTipoTransaccion ttrCInt = ttrDao.findById(28);//Cargo por correccion de intereses 28
			
			CtaTxaTransaccionxcuentaAsociadoDAO txaDAO = new CtaTxaTransaccionxcuentaAsociadoDAO(getSessionHibernate(request));
			CtaCasCuentaAsociadoDAO casDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
			Transaction tx = txaDAO.getSession().beginTransaction();
			if(fuente == 1){
				
			}
			Long comprobante = txaDAO.nextComprobante();
//			SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
//			String fechaTemp = sdf.format(new Date());
//			String[] f = fechaTemp.split("-");
//			String dia = f[0];
//			String mes = f[1];
//			String ano = f[2];
//			fechaTemp = ano + mes + dia;
//			Long comprobante = ((-1) * (Long.parseLong(fechaTemp)));
			
			
			request.getSession().setAttribute("comprobante", comprobante);
			Integer cuentaInt = Integer.valueOf(cuenta);
			Long cuentaLong = new Long(cuentaInt);
			CtaCasCuentaAsociado cas =  casDAO.findById(cuentaLong);
			
			//Guarda transaccion sin intereses
			CtaTxaTransaccionxcuentaAsociado txa = new CtaTxaTransaccionxcuentaAsociado();
			txa.setCtaCasCuentaAsociado(cas);
			txa.setTxaFecha(new Date());
			txa.setTxaComprobante(comprobante);
			txa.setTxaMonto(monto);
			txa.setCtaNotNotas(null);
			txa.setTxaNota(texto);
			if(transOcorr==1){ //correccion
				if(tipo.equals("A")){
					txa.setCtaTtrTipoTransaccion(ttrAtran);
				}else{
					txa.setCtaTtrTipoTransaccion(ttrCtran);
				}
			}else{// transferencia
				if(tipo.equals("A")){
					txa.setCtaTtrTipoTransaccion(ttrACap);
				}else{
					txa.setCtaTtrTipoTransaccion(ttrCCap);
				}
			}
			txa.setAudFechaCreacion(new Date());
			txa.setAudFechaModificacion(new Date());
			txa.setAudUsuarioCreacion(USUARIO);
			txa.setAudUsuarioModificacion(USUARIO);
			txaDAO.save(txa);
			
			CtaTxaTransaccionxcuentaAsociado txaInt = new CtaTxaTransaccionxcuentaAsociado();
			
			//Guarda intereses en una transaccion
			if(interes!=null && interes>0.0 && transOcorr == 2){
				txaInt.setCtaCasCuentaAsociado(cas);
				txaInt.setTxaFecha(new Date());
				txaInt.setTxaComprobante(comprobante);
				txaInt.setTxaMonto(interes);
				txaInt.setCtaNotNotas(null);
				txaInt.setTxaNota(texto);
				if(tipo.equals("A")){
					txaInt.setCtaTtrTipoTransaccion(ttrAInt);
				}else{
					txaInt.setCtaTtrTipoTransaccion(ttrCInt);
				}
				txaInt.setAudFechaCreacion(new Date());
				txaInt.setAudFechaModificacion(new Date());
				txaInt.setAudUsuarioCreacion(USUARIO);
				txaInt.setAudUsuarioModificacion(USUARIO);
				txaDAO.save(txaInt);
			}else{//Este else estaba comentariado no se porque pero es necesario para validar cuando el usuario deja en blanco el campo interes
				txaInt.setCtaCasCuentaAsociado(cas);
				txaInt.setTxaFecha(new Date());
				txaInt.setTxaComprobante(comprobante);
				txaInt.setTxaMonto(0.0);
				txaInt.setCtaNotNotas(null);
				txaInt.setTxaNota(texto);
				if(tipo.equals("A")){
					txaInt.setCtaTtrTipoTransaccion(ttrAInt);
				}else{
					txaInt.setCtaTtrTipoTransaccion(ttrCInt);
				}
				txaInt.setAudFechaCreacion(new Date());
				txaInt.setAudFechaModificacion(new Date());
				txaInt.setAudUsuarioCreacion(USUARIO);
				txaInt.setAudUsuarioModificacion(USUARIO);
				txaDAO.save(txaInt);
			}//si esta validacion falta el procedimiento conduce a un error
				
			tx.commit();
			txaDAO.getSession().flush();
			txaDAO.getSession().clear();
			
			//Abono a aportacion
			if(fuente== 1){
				transAportacion(cas, monto, txa, tipo,request);
			}
			
			//Abono o Cargo a ahorros
			if(fuente== 2){
				transAhorros(cas, monto, txa, tipo, transOcorr, request);
				if(transOcorr == 2 && interes != null && interes > 0.0){
					corrInteresAhorro(cas, interes, txaInt, tipo, request);
				}
			}
			
			//Abono a Prestamo
			if(fuente== 3){
				if(transOcorr ==1 && tipo.equals("A")){
					transPrestamo(cas, monto, txa, comprobante,request);
				}else{
					corrPrestamo(cas, txa, txaInt, tipo, transOcorr,request);//el parametro transOcorr no era enviado para este metodo
				}
			}
			
			//Abono a Seguros
			if(fuente== 4){
				if(transOcorr ==1 && tipo.equals("A")){
					transSeguro(cas, monto, txa, comprobante,request);
				}else{
					corrSeguro(cas, txa, txaInt, tipo,request);
				}
			}
			
		}
	}

	private void corrSeguro(CtaCasCuentaAsociado cas,
			CtaTxaTransaccionxcuentaAsociado txa,
			CtaTxaTransaccionxcuentaAsociado txaInt, String tipo,HttpServletRequest request) {
		CtaSegSegurosDAO segurosDAO = new CtaSegSegurosDAO(getSessionHibernate(request));
		Transaction tx = segurosDAO.getSession().beginTransaction();
		CtaSegSeguros seguros = segurosDAO.findById(cas.getCtaSegSeguros().getSegId());
		CtaMxsMovimientoSegurosDAO mxsDao = new CtaMxsMovimientoSegurosDAO(getSessionHibernate(request));
		CtaMxsMovimientoSeguros mxs = new CtaMxsMovimientoSeguros();
		mxs.setCtaSegSeguros(seguros);
		mxs.setCtaTxaTransaccionxcuentaAsociado(txa);
		mxs.setMxsFecha(new Date());
		mxs.setMxsMonto(txa.getTxaMonto());
		if(tipo.equals("A")){
			mxs.setMxsSaldo(seguros.getSegSaldoActual() - txa.getTxaMonto());//+
			seguros.setSegSaldoActual(seguros.getSegSaldoActual() - txa.getTxaMonto());
		}else{
			mxs.setMxsSaldo(seguros.getSegSaldoActual() + txa.getTxaMonto());//-
			seguros.setSegSaldoActual(seguros.getSegSaldoActual() + txa.getTxaMonto());
		}
		mxs.setAudFechaCreacion(new Date());
		mxs.setAudFechaModificacion(new Date());
		mxs.setAudUsuarioCreacion(USUARIO);
		mxs.setAudUsuarioModificacion(USUARIO);
		mxsDao.save(mxs);
		
		segurosDAO.merge(seguros);
		tx.commit();
		enviarTransaccionAContabilidad(txa, USUARIO, "D", cas, 0.0, null, 1,request);
	}

	private void transSeguro(CtaCasCuentaAsociado cas, Double monto,
			CtaTxaTransaccionxcuentaAsociado txa, Long comprobante,HttpServletRequest request) {
		CtaSegSegurosDAO segurosDAO = new CtaSegSegurosDAO(getSessionHibernate(request));
		Transaction tx = segurosDAO.getSession().beginTransaction();
		CtaSegSeguros seguros = segurosDAO.findById(cas.getCtaSegSeguros().getSegId());
		double montoActualizable2 = monto;
		if(montoActualizable2 <= seguros.getSegSaldoActual()){
			seguros.setSegSaldoActual(seguros.getSegSaldoActual() - montoActualizable2);
			segurosDAO.merge(seguros);
			CtaMxsMovimientoSegurosDAO mxsDao = new CtaMxsMovimientoSegurosDAO(getSessionHibernate(request));
			CtaMxsMovimientoSeguros mxs = new CtaMxsMovimientoSeguros();
			mxs.setCtaSegSeguros(seguros);
			mxs.setCtaTxaTransaccionxcuentaAsociado(txa);
			mxs.setMxsFecha(new Date());
			mxs.setMxsMonto(monto);
			//mxs.setMxsSaldo(seguros.getSegSaldoIni() - seguros.getSegSaldoActual());
			mxs.setMxsSaldo(seguros.getSegSaldoActual());
			mxs.setAudFechaCreacion(new Date());
			mxs.setAudFechaModificacion(new Date());
			mxs.setAudUsuarioCreacion(USUARIO);
			mxs.setAudUsuarioModificacion(USUARIO);
			mxsDao.save(mxs);
			
			tx.commit();
			enviarTransaccionAContabilidad(txa, USUARIO, "D", cas, 0.0, null, 1,request);
		}else{
			if(montoActualizable2 >seguros.getSegSaldoActual()){//esta es la condicion original montoActualizable2 >(seguros.getSegSaldoIni() - seguros.getSegSaldoActual()) pero no le veo sentido.
				//original//montoActualizable2 = montoActualizable2 -(seguros.getSegSaldoIni() - seguros.getSegSaldoActual());
				montoActualizable2 = montoActualizable2 -seguros.getSegSaldoActual();//supongo que esto es lo logico el monto menos lo que se debe es el sobrante
				CtaCasCuentaAsociadoDAO casDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
				CtaCasCuentaAsociado principal = casDAO.findPrincipal(cas.getCtaAscAsociado().getAscId());
				CtaCahCuentaAhorroDAO ahorroDAO = new CtaCahCuentaAhorroDAO(getSessionHibernate(request));
				CtaCahCuentaAhorro ahorro = ahorroDAO.findById(principal.getCtaCahCuentaAhorro().getCahId());
				ahorro.setCahSaldoActual(ahorro.getCahSaldoActual() + montoActualizable2);
				CuentaAsociadoAction cuentaAsociadoAction = new CuentaAsociadoAction();
				ahorro.setCahInteresAcumulado(cuentaAsociadoAction.getTotalInteresesAhorro(ahorro.getCahId(),request));
				ahorroDAO.merge(ahorro);
				tx.commit();
				
				//Guardo transaccion de cuenta Principal
				CtaTxaTransaccionxcuentaAsociado txaPrincipal = new CtaTxaTransaccionxcuentaAsociado();
				txaPrincipal.setCtaCasCuentaAsociado(principal);
				CtaTtrTipoTransaccionDAO ttrDao = new CtaTtrTipoTransaccionDAO(getSessionHibernate(request));
				//Transferencia comun
				CtaTtrTipoTransaccion ttrAtran = ttrDao.findById(5);
				txaPrincipal.setCtaTtrTipoTransaccion(ttrAtran);
				txaPrincipal.setTxaComprobante(comprobante);
				txaPrincipal.setTxaFecha(new Date());
				txaPrincipal.setTxaMonto(montoActualizable2);
				txaPrincipal.setCtaNotNotas(null);
				txaPrincipal.setTxaNota("Sobrante de la transaccion");
				CtaTxaTransaccionxcuentaAsociadoDAO txaDAO = new CtaTxaTransaccionxcuentaAsociadoDAO(getSessionHibernate(request));
				txaPrincipal.setAudFechaCreacion(new Date());
				txaPrincipal.setAudFechaModificacion(new Date());
				txaPrincipal.setAudUsuarioCreacion(USUARIO);
				txaPrincipal.setAudUsuarioModificacion(USUARIO);
				txaDAO.save(txaPrincipal);
				tx.commit();
				
				//Movimiento de ahorro cuenta Principal
				CtaMxaMovimientoAhorroDAO mxaDAO = new CtaMxaMovimientoAhorroDAO(getSessionHibernate(request));
				CtaMxaMovimientoAhorro movimientoPrincipal = new CtaMxaMovimientoAhorro();
				movimientoPrincipal.setCtaCahCuentaAhorro(ahorro);
				movimientoPrincipal.setCtaTxaTransaccionxcuentaAsociado(txaPrincipal);
				movimientoPrincipal.setMxaFecha(new Date());
				CuentaAhorroAction cuentaAhorroAction = new CuentaAhorroAction();
				movimientoPrincipal.setMxaInteresTran(cuentaAhorroAction.calculoInteresTransaccion(ahorro.getCahId(), new Date(),request));
				movimientoPrincipal.setMxaMonto(montoActualizable2);
				movimientoPrincipal.setMxaSaldo(ahorro.getCahSaldoActual());
				movimientoPrincipal.setAudFechaCreacion(new Date());
				movimientoPrincipal.setAudFechaModificacion(new Date());
				movimientoPrincipal.setAudUsuarioCreacion(USUARIO);
				movimientoPrincipal.setAudUsuarioModificacion(USUARIO);
				mxaDAO.save(movimientoPrincipal);
				tx.commit();
				
				enviarTransaccionAContabilidad(txaPrincipal, USUARIO, "B", principal, 0.0, null, 1,request);//aqui el tipo de cuenta es B porque manda el sobrenta a una cuenta de ahorro
			}
			//original//txa.setTxaMonto(seguros.getSegSaldoIni() - seguros.getSegSaldoActual());
			txa.setTxaMonto(seguros.getSegSaldoActual());//esto tambien supongo que es lo logico al quitarle el sobrante al monto queda el abono justo para saldar la deuda
			CtaTxaTransaccionxcuentaAsociadoDAO txaDao = new CtaTxaTransaccionxcuentaAsociadoDAO(getSessionHibernate(request));
			txaDao.merge(txa);
			
			seguros.setSegSaldoActual(0.0);
			segurosDAO.merge(seguros);
			
			CtaMxsMovimientoSegurosDAO mxsDao = new CtaMxsMovimientoSegurosDAO(getSessionHibernate(request));
			CtaMxsMovimientoSeguros mxs = new CtaMxsMovimientoSeguros();
			mxs.setCtaSegSeguros(seguros);
			mxs.setCtaTxaTransaccionxcuentaAsociado(txa);
			mxs.setMxsFecha(new Date());
			mxs.setMxsMonto(monto);
			//mxs.setMxsSaldo(seguros.getSegSaldoIni());
			mxs.setMxsSaldo(seguros.getSegSaldoActual());
			mxs.setAudFechaCreacion(new Date());
			mxs.setAudFechaModificacion(new Date());
			mxs.setAudUsuarioCreacion(USUARIO);
			mxs.setAudUsuarioModificacion(USUARIO);
			mxsDao.save(mxs);
			
			Transaction tx1 = segurosDAO.getSession().beginTransaction();
			tx1.commit();
			
			enviarTransaccionAContabilidad(txa, USUARIO, "D", cas, 0.0, null, 1,request);
		}
	}

	private void corrPrestamo(CtaCasCuentaAsociado cas, CtaTxaTransaccionxcuentaAsociado txa,
			CtaTxaTransaccionxcuentaAsociado txaInt, String tipo, Integer transOcorr,HttpServletRequest request) {
		CtaPrePrestamoDAO prestamoDAO = new CtaPrePrestamoDAO(getSessionHibernate(request));
		Transaction tx = prestamoDAO.getSession().beginTransaction();
		CtaPrePrestamo prestamo = prestamoDAO.findById(cas.getCtaPrePrestamo().getPreId());
		CtaMxpMovimientoPrestamoDAO mxpDAO = new CtaMxpMovimientoPrestamoDAO(getSessionHibernate(request));
		CtaMxpMovimientoPrestamo mxp = new CtaMxpMovimientoPrestamo();
		if(mxpDAO.findUltimoMovimiento(prestamo.getPreId())== null || 
				mxpDAO.findUltimoMovimiento(prestamo.getPreId()).getMxpId() == null){
			mxp.setCtaPrePrestamo(prestamo);
			mxp.setCtaTxaTransaccionxcuentaAsociado(txa);
			mxp.setMxpFecha(new Date());
			mxp.setMxpInteresAcumulado(0.0);
			mxp.setMxpInteresPendiente(0.0);
			mxp.setMxpMora(0.0);
			if(tipo.equals("A")){//Abono por correccion de capital
				mxp.setMxpSaldoActual(/*(prestamo.getPreMontoSolicitado() - prestamo.getPreSaldoActualT()) +*/ txa.getTxaMonto());
				prestamo.setPrePendMov(prestamo.getPrePendMov() - txaInt.getTxaMonto());
				prestamo.setPreSaldoActualT(prestamo.getPreSaldoActualT()-txa.getTxaMonto());
			}else{//Cargo por transferencia o correccion de capital
				mxp.setMxpSaldoActual(/*(prestamo.getPreMontoSolicitado() - prestamo.getPreSaldoActualT()) -*/ txa.getTxaMonto());
				prestamo.setPrePendMov(prestamo.getPrePendMov() + txaInt.getTxaMonto());//a mi juicio aqui se deberia de restar el monto
				prestamo.setPreSaldoActualT(prestamo.getPreSaldoActualT()+txa.getTxaMonto());
			}
			mxp.setAudFechaCreacion(new Date());
			mxp.setAudFechaModificacion(new Date());
			mxp.setAudUsuarioCreacion(USUARIO);
			mxp.setAudUsuarioModificacion(USUARIO);
			mxp.setMxpSaldo(prestamo.getPreSaldoActualT());//solucion para los movimientos de prestamo
			mxpDAO.save(mxp);			
			
			prestamoDAO.merge(prestamo);
			tx.commit();
		}else{
			CtaMxpMovimientoPrestamo mxpAnt = mxpDAO.findUltimoMovimiento(prestamo.getPreId());
			mxp.setCtaPrePrestamo(prestamo);
			mxp.setCtaTxaTransaccionxcuentaAsociado(txa);
			mxp.setMxpFecha(new Date());
			mxp.setMxpInteresAcumulado(0.0);
			mxp.setMxpInteresPendiente(0.0);
			mxp.setMxpMora(0.0);
			if(tipo.equals("A")){//Abono por correccion
				mxp.setMxpSaldoActual(mxpAnt.getMxpSaldoActual() + txa.getTxaMonto());
				prestamo.setPrePendMov(prestamo.getPrePendMov() - txaInt.getTxaMonto());
				prestamo.setPreSaldoActualT(prestamo.getPreSaldoActualT()-txa.getTxaMonto());
			}else{//Cargo por transferencia o correccion de capital
				if(prestamo.getPrePendMov() == null) prestamo.setPrePendMov(0.0);
				if(txaInt.getTxaMonto() == null) txaInt.setTxaMonto(0.0);
				
				mxp.setMxpSaldoActual(mxpAnt.getMxpSaldoActual() - txa.getTxaMonto());//esta es la sentencia original
				
				prestamo.setPrePendMov(prestamo.getPrePendMov() + txaInt.getTxaMonto());
				prestamo.setPreSaldoActualT(prestamo.getPreSaldoActualT()+txa.getTxaMonto());
			}
			mxp.setAudFechaCreacion(new Date());
			mxp.setAudFechaModificacion(new Date());
			mxp.setAudUsuarioCreacion(USUARIO);
			mxp.setAudUsuarioModificacion(USUARIO);
			prestamoDAO.merge(prestamo);
			mxp.setMxpSaldo(prestamo.getPreSaldoActualT());
			mxpDAO.save(mxp);
			tx.commit();
		}
		enviarTransaccionAContabilidad(txa, USUARIO, "C", cas, 
				(mxp.getMxpInteresAcumulado() + mxp.getMxpInteresPendiente()), null, 1,request);
		if(txaInt.getTxaMonto() > 0){
			enviarTransaccionAContabilidad(txaInt, USUARIO, "C", cas,
txaInt.getTxaMonto()-(mxp.getMxpInteresAcumulado() + mxp.getMxpInteresPendiente()), null, 2,request);
		}
	}

	private void transPrestamo(CtaCasCuentaAsociado cas, Double monto,
			CtaTxaTransaccionxcuentaAsociado txa, Long comprobante,HttpServletRequest request) {//el campo transOcorr no era parametro original de este metodo
		CtaPrePrestamoDAO prestamoDAO = new CtaPrePrestamoDAO(getSessionHibernate(request));
		Transaction tx = prestamoDAO.getSession().beginTransaction();//para registrar la transaccion
		CtaPrePrestamo prestamo = prestamoDAO.findById(cas.getCtaPrePrestamo().getPreId());

		CtaMxpMovimientoPrestamoDAO mxpDAO = new CtaMxpMovimientoPrestamoDAO(getSessionHibernate(request));//donde se registran los movimientos de las cuentas
		CtaMxpMovimientoPrestamo mxp = new CtaMxpMovimientoPrestamo();
		CtaMxpMovimientoPrestamo mxpAnt;
		IntereseYMora iYm = new IntereseYMora();
		iYm.setAcumulado(0.0);
		iYm.setMora(0.0);
		iYm.setPendiente(0.0);
		if(prestamo.getPreCredito() != null && (prestamo.getPreCredito().equals("O") || prestamo.getPreCredito().equals("F"))){//O si es un prestamo por orden de compra y F si es de factura
			iYm.setPorcInteres(0.0);
		}else{
			iYm.setPorcInteres(prestamo.getCtaTprTipoPrestamo().getCtaTinTasaInteres().getTinTasa());
		}
		
		if(mxpDAO.findUltimoMovimiento(prestamo.getPreId())==null){//me imagino que el ultimo movimiento de esa cuenta
			mxpAnt = new CtaMxpMovimientoPrestamo();
			mxpAnt.setMxpSaldoActual(0.00);
			System.out.println("El movimiento anterior es nulo");
			iYm.setMora(0.0);
			iYm.setPendiente(prestamo.getPrePendMov());
			iYm.setAcumulado(0.0);
			//prestamo.setPrePendMov(prestamo.getPreSaldoActualT() - prestamo.getPreLiquidoARecibir());
			//prestamo.setPreSaldoActualT(prestamo.getPreLiquidoARecibir());
		}else{
			mxpAnt = mxpDAO.findUltimoMovimiento(prestamo.getPreId());
			iYm = iYm.actualizaInteres(mxpAnt, prestamo, cas, new Date(),request);//actualiza el interes pero no se si se refiere a la tasa
		}
		mxp.setCtaPrePrestamo(prestamo);
		mxp.setCtaTxaTransaccionxcuentaAsociado(txa);
		mxp.setMxpFecha(new Date());
		mxp.setAudFechaCreacion(new Date());
		mxp.setAudFechaModificacion(new Date());
		mxp.setAudUsuarioCreacion(USUARIO);
		mxp.setAudUsuarioModificacion(USUARIO);
		double montoActualizable = monto;//se guarda el movimiento en la tabla de movimientos de prestamos.
		//double interesTotal = 0.0;
		
		//Forma normal //¬øQue es esto de forma normal?
		/*if(iYm.getMora() != null && iYm.getMora()<= montoActualizable){//si la mora no es nula y es menor que el monto
			mxp.setMxpMora(iYm.getMora());
			montoActualizable = montoActualizable - iYm.getMora();//se le resta al monto la mora*/
			if(iYm.getPendiente() <= montoActualizable){//se pregunta si lo que esta pendiente es menor que el monto modificado
				prestamo.setPreMoraMov(0.0);
				mxp.setMxpInteresPendiente(iYm.getPendiente());
				montoActualizable = montoActualizable - iYm.getPendiente();//se le resta al monto lo que esta pendiente
				if(iYm.getAcumulado() <= montoActualizable){//se pregunta si lo acumulado es menor que el monto modificado
					prestamo.setPrePendMov(0.0);
					mxp.setMxpInteresAcumulado(iYm.getAcumulado());
					montoActualizable = montoActualizable - iYm.getAcumulado();//se le resta al monto lo acumulado
					if(montoActualizable == 0.0){
						//mxp.setMxpSaldoActual(prestamo.getPreMontoSolicitado() - prestamo.getPreSaldoActualT());
						mxp.setMxpSaldoActual(mxpAnt.getMxpSaldoActual());
					}else{
						if(montoActualizable < prestamo.getPreSaldoActualT()){
							mxp.setMxpSaldoActual(mxpAnt.getMxpSaldoActual()/*(prestamo.getPreMontoSolicitado() - prestamo.getPreSaldoActualT())*/ + montoActualizable);

							//Si tipo prestamo es NULL, es un Credito y se maneja de la siguiente forma
							if(prestamo.getPreCredito() != null && (prestamo.getPreCredito().equals("O") || prestamo.getPreCredito().equals("F"))){
								OrdOcoOrdenDeCompraDAO compraDAO = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
								List ordeneDebe = compraDAO.findTodasLasQueDebe(cas.getCtaAscAsociado().getAscId());
								Double montoOrdenes = 0.0;//prestamo.getPreMontoSolicitado() - prestamo.getPreSaldoActualT();
								montoOrdenes = pagarOrdenes(ordeneDebe,montoActualizable,request);
							}
							prestamo.setPreSaldoActualT(prestamo.getPreSaldoActualT()-montoActualizable/*prestamo.getPreMontoSolicitado() - mxp.getMxpSaldoActual()*/);
						}else{//liquidamos el prestamo
							if(montoActualizable >= (prestamo.getPreSaldoActualT())){
								ArrayList fiadores = new ArrayList();
								fiadores.addAll(prestamo.getCtaFxpFiadorPrestamos());
								for (Iterator iterator2 = fiadores.iterator(); iterator2.hasNext();) {
									CtaFxpFiadorPrestamo fiador = (CtaFxpFiadorPrestamo) iterator2.next();
									CtaFxpFiadorPrestamoDAO fiadorPrestamoDAO = new CtaFxpFiadorPrestamoDAO(getSessionHibernate(request));
									fiador.setFxpEstado("S");
									fiadorPrestamoDAO.merge(fiador);
									tx.commit();
								}
								
								if(prestamo.getPreCredito() == null || (!prestamo.getPreCredito().equals("O") && !prestamo.getPreCredito().equals("F"))){
									CtaCasCuentaAsociadoDAO casDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
									cas.setCasFechaCierre(new Date());
									CtrEstEstadoDAO estadoDAO = new CtrEstEstadoDAO(getSessionHibernate(request));
									cas.setCtrEstEstado(estadoDAO.findById(17));
									casDAO.merge(cas);
									tx.commit();
								}
								
								//Si tipo prestamo es NULL, es un Credito y se maneja de la siguiente forma
								if(prestamo.getPreCredito() != null && (prestamo.getPreCredito().equals("O") || prestamo.getPreCredito().equals("F"))){
									OrdOcoOrdenDeCompraDAO compraDAO = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
									List ordeneDebe = compraDAO.findTodasLasQueDebe(cas.getCtaAscAsociado().getAscId());
									Double montoOrdenes = 0.0;//prestamo.getPreMontoSolicitado() - prestamo.getPreSaldoActualT();
									montoOrdenes = pagarOrdenes(ordeneDebe,montoActualizable,request);
									prestamo.setPreCuota(0.0);
								}
								
								if(montoActualizable > (prestamo.getPreSaldoActualT())){
									if(montoActualizable -prestamo.getPreSaldoActualT() > 0.005)
									siEsMayor(montoActualizable, prestamo, cas, mxpAnt,comprobante,request);
								}
								//mxp.setMxpSaldoActual((double) prestamo.getPreMontoSolicitado());
								mxp.setMxpSaldoActual(mxpAnt.getMxpSaldoActual()+mxpAnt.getMxpSaldo());								
								prestamo.setPreSaldoActualT(0.0);
							}
						}
					}
				}else{//tiene algo que ver con el interes pendiente				
					prestamo.setPrePendMov(iYm.getAcumulado() - montoActualizable);
					mxp.setMxpInteresAcumulado(montoActualizable);
					//mxp.setMxpSaldoActual(prestamo.getPreMontoSolicitado() - prestamo.getPreSaldoActualT());
					mxp.setMxpSaldoActual(mxpAnt.getMxpSaldoActual());					
				}
			}else{//tiene algo que ver con el interes pendiente
				prestamo.setPrePendMov((iYm.getPendiente()-montoActualizable) + iYm.getAcumulado());
				mxp.setMxpInteresPendiente(montoActualizable);
				mxp.setMxpInteresAcumulado(0.0);
				//mxp.setMxpSaldoActual(prestamo.getPreMontoSolicitado() - prestamo.getPreSaldoActualT());
				mxp.setMxpSaldoActual(mxpAnt.getMxpSaldoActual());				
			}
		/*}else{
			if(mxpAnt.getMxpMora() != null){//tiene algo que ver con la mora
				prestamo.setPrePendMov(iYm.getPendiente() + iYm.getAcumulado());
				prestamo.setPreMoraMov(iYm.getMora() - montoActualizable);
				mxp.setMxpMora(montoActualizable);
				mxp.setMxpInteresPendiente(0.0);
				mxp.setMxpInteresAcumulado(0.0);
				mxp.setMxpSaldoActual(prestamo.getPreMontoSolicitado() - prestamo.getPreSaldoActualT());
				//mxp.setMxpSaldoActual(prestamo.getPreSaldoActualT() - montoActualizable);
			}else{
				prestamo.setPrePendMov(iYm.getPendiente() + iYm.getAcumulado());
				prestamo.setPreMoraMov(iYm.getMora());
				mxp.setMxpMora(0.0);
				mxp.setMxpInteresPendiente(0.0);
				mxp.setMxpInteresAcumulado(0.0);
				mxp.setMxpSaldoActual(prestamo.getPreMontoSolicitado() - prestamo.getPreSaldoActualT());
				//mxp.setMxpSaldoActual(prestamo.getPreSaldoActualT() - montoActualizable);
			}
		}*/
		mxp.setMxpSaldo(prestamo.getPreSaldoActualT());
		/*if(prestamo.getPreCredito() != null && (prestamo.getPreCredito().equals("O") || prestamo.getPreCredito().equals("F"))){//¬ø¬ø¬ø??? ni idea
			mxp.setMxpSaldo(prestamo.getPreSaldoActualT()-mxp.getMxpSaldoActual());
			//mxp.setMxpSaldoActual(prestamo.getPreSaldoActualT() - montoActualizable);
		}else{
			mxp.setMxpSaldo(prestamo.getPreSaldoActualT());
		}*/
		mxpDAO.save(mxp);
		prestamoDAO.merge(prestamo);
		tx.commit();
		enviarTransaccionAContabilidad(txa, USUARIO, "C", cas, 
				(mxp.getMxpInteresAcumulado() + mxp.getMxpInteresPendiente()), null, 1,request);//aqui originalmente el tercer parametro es "C" pero entra a este metodo cuando es un abono asi que se cambio por "A"
	}
	
	private void siEsMayor(double montoActualizable, CtaPrePrestamo prestamo,
			CtaCasCuentaAsociado cas, CtaMxpMovimientoPrestamo mxpAnt,
			Long comprobante,HttpServletRequest request) {
		CtaCasCuentaAsociadoDAO casDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
		CtaTtrTipoTransaccionDAO tipoTransaccionDAO = new CtaTtrTipoTransaccionDAO(getSessionHibernate(request));
		Transaction tx = casDAO.getSession().beginTransaction();
		CtaTxaTransaccionxcuentaAsociadoDAO txaDAO = new CtaTxaTransaccionxcuentaAsociadoDAO(getSessionHibernate(request));
		
		montoActualizable = montoActualizable -(mxpAnt.getMxpSaldo());
		CtaCasCuentaAsociado principal = casDAO.findPrincipal(cas.getCtaAscAsociado().getAscId());
		CtaCahCuentaAhorroDAO ahorroDAO = new CtaCahCuentaAhorroDAO(getSessionHibernate(request));
		CtaCahCuentaAhorro ahorro = ahorroDAO.findById(principal.getCtaCahCuentaAhorro().getCahId());
		ahorro.setCahSaldoActual(ahorro.getCahSaldoActual() + montoActualizable);
		CuentaAsociadoAction cuentaAsociadoAction = new CuentaAsociadoAction();
		ahorro.setCahInteresAcumulado(cuentaAsociadoAction.getTotalInteresesAhorro(ahorro.getCahId(),request));
		ahorroDAO.merge(ahorro);
		tx.commit();
		
		//Guardo transaccion de cuenta Principal
		CtaTxaTransaccionxcuentaAsociado txaPrincipal = new CtaTxaTransaccionxcuentaAsociado();
		txaPrincipal.setCtaCasCuentaAsociado(principal);
		txaPrincipal.setCtaTtrTipoTransaccion(tipoTransaccionDAO.findById(11));
		txaPrincipal.setTxaComprobante(comprobante);
		txaPrincipal.setTxaFecha(new Date());
		txaPrincipal.setTxaMonto(montoActualizable);
		txaPrincipal.setCtaNotNotas(null);
		txaPrincipal.setTxaNota("Sobrante de la transaccion");
		txaPrincipal.setAudFechaCreacion(new Date());
		txaPrincipal.setAudFechaModificacion(new Date());
		txaPrincipal.setAudUsuarioCreacion(USUARIO);
		txaPrincipal.setAudUsuarioModificacion(USUARIO);
		txaDAO.save(txaPrincipal);
		tx.commit();
		
		//Movimiento de ahorro cuenta Principal
		CtaMxaMovimientoAhorroDAO mxaDAO = new CtaMxaMovimientoAhorroDAO(getSessionHibernate(request));
		CtaMxaMovimientoAhorro movimientoPrincipal = new CtaMxaMovimientoAhorro();
		movimientoPrincipal.setCtaCahCuentaAhorro(ahorro);
		movimientoPrincipal.setCtaTxaTransaccionxcuentaAsociado(txaPrincipal);
		movimientoPrincipal.setMxaFecha(new Date());
		CuentaAhorroAction cuentaAhorroAction = new CuentaAhorroAction();
		movimientoPrincipal.setMxaInteresTran(cuentaAhorroAction.calculoInteresTransaccion(ahorro.getCahId(), new Date(),request));
		movimientoPrincipal.setMxaMonto(montoActualizable);
		movimientoPrincipal.setAudFechaCreacion(new Date());
		movimientoPrincipal.setAudFechaModificacion(new Date());
		movimientoPrincipal.setAudUsuarioCreacion(USUARIO);
		movimientoPrincipal.setAudUsuarioModificacion(USUARIO);
		movimientoPrincipal.setMxaSaldo(ahorro.getCahSaldoActual());
		mxaDAO.save(movimientoPrincipal);
		tx.commit();
		
		enviarTransaccionAContabilidad(txaPrincipal, USUARIO, "B", principal, 0.0, null, 1,request);
	}
	
	private Double pagarOrdenes(List ordeneDebe, double monto,HttpServletRequest request) {
		Double montoActualizable = monto;
		OrdOcoOrdenDeCompraDAO compraDAO = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
		Transaction tx = compraDAO.getSession().beginTransaction();
		for (Iterator iterator = ordeneDebe.iterator(); iterator.hasNext();) {
			OrdOcoOrdenDeCompra compra = (OrdOcoOrdenDeCompra) iterator.next();
			if(montoActualizable == 0.00) return 0.00;
			
			if(montoActualizable >= compra.getOcoSaldo()){
				compra.setOcoSaldo(0.00);
				compra.setOcoPagado(compra.getOcoPagado()+compra.getOcoSaldo());
				montoActualizable-=compra.getOcoSaldo();
				
				if(compra.getOcoEstado().equals("C") || compra.getOcoEstado().equals("R")){
					compra.setOcoEstado("P");
					compra.setAudFechaModificacion(new Date());
				}
				if(compra.getOcoEstado().equals("F")){
					compra.setOcoEstado("G");
					compra.setAudFechaModificacion(new Date());
				}
				if(compra.getOcoEstado().equals("D")){
					compra.setOcoEstado("S");
					compra.setAudFechaModificacion(new Date());
				}				
			}else{
				compra.setOcoSaldo(compra.getOcoSaldo()-montoActualizable);
				compra.setOcoPagado(compra.getOcoPagado()+montoActualizable);
				montoActualizable=0.00;
			}
			compraDAO.merge(compra);
			tx.commit();
			compraDAO.getSession().flush();
			compraDAO.getSession().clear();
		}
		return montoActualizable;
	}

	private void corrInteresAhorro(CtaCasCuentaAsociado cas, Double interes,
			CtaTxaTransaccionxcuentaAsociado txaInt, String tipo, HttpServletRequest request) {
		CtaCahCuentaAhorroDAO ahorroDAO = new CtaCahCuentaAhorroDAO(getSessionHibernate(request));
		Transaction tx = ahorroDAO.getSession().beginTransaction();
		CtaCahCuentaAhorro ahorro = ahorroDAO.findById(cas.getCtaCahCuentaAhorro().getCahId());
		if(tipo.equals("A")){
			ahorro.setCahInteresAcumulado(ahorro.getCahInteresAcumulado() + interes);
		}else{
			ahorro.setCahInteresAcumulado(ahorro.getCahInteresAcumulado() - interes);
		}
		ahorroDAO.merge(ahorro);
		tx.commit();
		
		CtaMxaMovimientoAhorroDAO movimientoAhorroDAO = new CtaMxaMovimientoAhorroDAO(getSessionHibernate(request));
		CtaMxaMovimientoAhorro movimientoAhorro = new CtaMxaMovimientoAhorro();
		movimientoAhorro.setCtaCahCuentaAhorro(ahorro);
		movimientoAhorro.setCtaTxaTransaccionxcuentaAsociado(txaInt);
		movimientoAhorro.setMxaFecha(new Date());
		movimientoAhorro.setMxaMonto(0.0);
		movimientoAhorro.setMxaSaldo(ahorro.getCahSaldoActual());
		movimientoAhorro.setMxaInteresTran(interes);
		movimientoAhorro.setAudFechaCreacion(new Date());
		movimientoAhorro.setAudFechaModificacion(new Date());
		movimientoAhorro.setAudUsuarioCreacion(USUARIO);
		movimientoAhorro.setAudUsuarioModificacion(USUARIO);
		movimientoAhorroDAO.save(movimientoAhorro);
		tx.commit();
		
		request.getSession().setAttribute("mxaId", movimientoAhorro.getMxaId());
		
		enviarTransaccionAContabilidad(txaInt, USUARIO, "B", cas, interes, null, 2,request);
	}

	private void transAhorros(CtaCasCuentaAsociado cas, Double monto,
			CtaTxaTransaccionxcuentaAsociado txa, String tipo,
			Integer transOcorr, HttpServletRequest request) {
		CtaCahCuentaAhorroDAO ahorroDAO = new CtaCahCuentaAhorroDAO(getSessionHibernate(request));
		Transaction tx = ahorroDAO.getSession().beginTransaction();
		CtaCahCuentaAhorro ahorro = ahorroDAO.findById(cas.getCtaCahCuentaAhorro().getCahId());
		CtaTahTipoAhorroDAO tipoAhorroDAO = new CtaTahTipoAhorroDAO(getSessionHibernate(request));
		CtaTinTasaInteresDAO tasaInteresDAO = new CtaTinTasaInteresDAO(getSessionHibernate(request));
		CtaMxaMovimientoAhorroDAO movimientoAhorroDAO = new CtaMxaMovimientoAhorroDAO(getSessionHibernate(request));
		Transaction txp = movimientoAhorroDAO.getSession().beginTransaction();
		CuentaAhorroAction pena = new CuentaAhorroAction();
		
		ConCueCuentaDAO cuentaDAO = new ConCueCuentaDAO(getSessionHibernate(request));
		ConCueCuenta cuenta = (ConCueCuenta) cuentaDAO.findByCueCodigoCuenta("51302").get(0);
		String id = cuenta.getCueId().toString();
		
		double penalidad = 0.0;
		double monto2 = monto;
		if(transOcorr == 1 && tipo.equals("C")){//porque la penalidad solo aplica cuando se hacen transferencias
			penalidad = pena.calculoPenalidad(ahorro, monto,request);
		}
		double tasaMinima = 0.0;
		CuentaAhorroAction cuentaAhorroAction = new CuentaAhorroAction();
		double interesTran2 = cuentaAhorroAction.calculoInteresTransaccion(ahorro.getCahId(), new Date(),request);
		if(transOcorr == 1){
			if(ahorro.getCtaTahTipoAhorro() != null){
				CtaTahTipoAhorro tipoAhorro = tipoAhorroDAO.findById(ahorro.getCtaTahTipoAhorro().getTahId());
				CtaTinTasaInteres tasaInteres = tasaInteresDAO.findById(tipoAhorro.getCtaTinTasaInteres().getTinId());
				tasaMinima = tasaInteres.getTinTasa();
			}else{
				tasaMinima = tasaInteresDAO.minimaTasadeInteres();
			}
			/*CtrParParametrosDAO parametrosDAO = new CtrParParametrosDAO();
			Date ultimoMovimiento = (Date) movimientoAhorroDAO.findFechaUltimoMovimientoAhorro(ahorro.getCahId());
			GregorianCalendar g1 = new  GregorianCalendar();
			if(ultimoMovimiento == null){
				ultimoMovimiento = cas.getCasFechaApertura();
			}
			g1.setTime(ultimoMovimiento);
			int diasUltimaTrans = 0;
			ElapsedTime elapsedTime = new ElapsedTime();
			GregorianCalendar g2 = new GregorianCalendar();
			Date fechaHoy = new Date();
			g2.setTime(fechaHoy);
			SimpleDateFormat sdf = new SimpleDateFormat("MM");
			String um = sdf.format(ultimoMovimiento);
			String fh = sdf.format(fechaHoy);
			
			g1 = ElapsedTime.dTGC(new Date());
			g1.set(Calendar.MILLISECOND, 0);
			g1.set(Calendar.SECOND, 0);
			g1.set(Calendar.MINUTE, 0);
			g1.set(Calendar.HOUR_OF_DAY, 0);
			
			g2.set(Calendar.MILLISECOND, 0);
			g2.set(Calendar.SECOND, 0);
			g2.set(Calendar.MINUTE, 0);
			g2.set(Calendar.HOUR_OF_DAY, 0);
			
			if(um.equals(fh)){
				diasUltimaTrans = elapsedTime.getDays(g1, g2) - 1;
				if(diasUltimaTrans >0){
					double nuevoInteres = ((ahorro.getCahSaldoActual() * (tasaMinima/100))* diasUltimaTrans) /parametrosDAO.findById("ANHO_CALENDARIO").getParValorNumber();
					
				*/
				CuentaAsociadoAction cuentaAsociadoAction = new CuentaAsociadoAction();
				ahorro.setCahInteresAcumulado(cuentaAsociadoAction.getTotalInteresesAhorro(ahorro.getCahId(),request));
				/*}
			}*/
		}
		//CtaTtrTipoTransaccionDAO ttrDAO = new CtaTtrTipoTransaccionDAO();
		if(tipo.equals("A")){
			ahorro.setCahSaldoActual(ahorro.getCahSaldoActual() + monto);
		}else{
			ahorro.setCahSaldoActual(ahorro.getCahSaldoActual() - monto);
		}
		
		ahorroDAO.merge(ahorro);
		tx.commit();
		
		CtaMxaMovimientoAhorro movimientoAhorro = new CtaMxaMovimientoAhorro();
		movimientoAhorro.setCtaCahCuentaAhorro(ahorro);
		movimientoAhorro.setCtaTxaTransaccionxcuentaAsociado(txa);
		movimientoAhorro.setMxaFecha(new Date());
		movimientoAhorro.setMxaInteresTran(interesTran2);
		movimientoAhorro.setMxaMonto(monto);
		movimientoAhorro.setMxaSaldo(ahorro.getCahSaldoActual());
		movimientoAhorro.setAudFechaCreacion(new Date());
		movimientoAhorro.setAudFechaModificacion(new Date());
		movimientoAhorro.setAudUsuarioCreacion(USUARIO);
		movimientoAhorro.setAudUsuarioModificacion(USUARIO);
		movimientoAhorroDAO.save(movimientoAhorro);
		tx.commit();
		
		if(penalidad > 0.0 && transOcorr == 1){
			/*Transaccion para la penalidad*/
			CtaTtrTipoTransaccionDAO ttrDao = new CtaTtrTipoTransaccionDAO(getSessionHibernate(request));
			CtaTtrTipoTransaccion tipot = ttrDao.findById(38);
			CtaTxaTransaccionxcuentaAsociadoDAO txapDAO = new CtaTxaTransaccionxcuentaAsociadoDAO(getSessionHibernate(request));
			Transaction txapp = txapDAO.getSession().beginTransaction();
			CtaTxaTransaccionxcuentaAsociado txap = new CtaTxaTransaccionxcuentaAsociado();
			double interesTran = cuentaAhorroAction.calculoInteresTransaccion(ahorro.getCahId(), new Date(),request);
			
			txap.setCtaCasCuentaAsociado(cas);
			txap.setAudFechaCreacion(new Date());
			txap.setTxaFecha(new Date());
			txap.setAudFechaModificacion(new Date());
			txap.setTxaComprobante(txapDAO.nextComprobante());
			txap.setTxaMonto(penalidad);
			txap.setCtaTtrTipoTransaccion(tipot);
			txap.setAudUsuarioModificacion(USUARIO);
			txap.setAudUsuarioCreacion(USUARIO);
			txapDAO.save(txap);
			txapp.commit();
			
			ahorro.setCahSaldoActual(ahorro.getCahSaldoActual()-penalidad);
			ahorroDAO.merge(ahorro);
			
			CtaMxaMovimientoAhorro movimientoAhorro2 = new CtaMxaMovimientoAhorro();
			movimientoAhorro2.setCtaCahCuentaAhorro(ahorro);
			movimientoAhorro2.setCtaTxaTransaccionxcuentaAsociado(txap);
			movimientoAhorro2.setMxaFecha(new Date());
			movimientoAhorro2.setMxaInteresTran(interesTran);
			movimientoAhorro2.setMxaMonto(penalidad);
			movimientoAhorro2.setMxaSaldo(ahorro.getCahSaldoActual());
			movimientoAhorro2.setAudFechaCreacion(new Date());
			movimientoAhorro2.setAudFechaModificacion(new Date());
			movimientoAhorro2.setAudUsuarioCreacion(USUARIO);
			movimientoAhorro2.setAudUsuarioModificacion(USUARIO);
			movimientoAhorroDAO.save(movimientoAhorro2);
			txp.commit();
			/*Transaccion para la penalidad*/
			transCuentaCont(id,penalidad,"A",1,request, "");//se cobra la penalidad cuenta 219 productos varios
		}
		
		request.getSession().setAttribute("mxaId", movimientoAhorro.getMxaId());
		
		enviarTransaccionAContabilidad(txa, USUARIO, "B", cas, 0.0, null,1,request);
	}

	private void transAportacion(CtaCasCuentaAsociado cas, Double monto, 
			CtaTxaTransaccionxcuentaAsociado txa, String tipo,HttpServletRequest request) {
		CtaCahCuentaAhorroDAO aportacionDAO = new CtaCahCuentaAhorroDAO(getSessionHibernate(request));
		Transaction tx = aportacionDAO.getSession().beginTransaction();
		CtaCahCuentaAhorro aportacion = aportacionDAO.findById(cas.getCtaCahCuentaAhorro().getCahId());
		
		if(tipo.equals("A")){
			aportacion.setCahSaldoActual(aportacion.getCahSaldoActual() + monto);
		}else{
			aportacion.setCahSaldoActual(aportacion.getCahSaldoActual() - monto);
		}
		aportacionDAO.merge(aportacion);
		tx.commit();
		
		CtaMxaMovimientoAhorroDAO movimientoAhorroDAO = new CtaMxaMovimientoAhorroDAO(getSessionHibernate(request));
		CtaMxaMovimientoAhorro movimientoAhorro = new CtaMxaMovimientoAhorro();
		movimientoAhorro.setCtaCahCuentaAhorro(aportacion);
		movimientoAhorro.setCtaTxaTransaccionxcuentaAsociado(txa);
		movimientoAhorro.setMxaFecha(new Date());
		movimientoAhorro.setMxaMonto(monto);
		movimientoAhorro.setMxaSaldo(aportacion.getCahSaldoActual());
		movimientoAhorro.setAudFechaCreacion(new Date());
		movimientoAhorro.setAudFechaModificacion(new Date());
		movimientoAhorro.setAudUsuarioCreacion(USUARIO);
		movimientoAhorro.setAudUsuarioModificacion(USUARIO);
		movimientoAhorroDAO.save(movimientoAhorro);
		tx.commit();
		
		enviarTransaccionAContabilidad(txa, USUARIO, "A", cas, 0.0, null,1,request);
	}

	/*Metodo modificado por requerimiento para poder transferir hacia cuentas contables 13/10/2009
	  Metodo original sin String tipo en la linea de parametros*/
	private void transCuentaCont(String cuenta, Double monto, String tipo, Integer transOcorr,HttpServletRequest request, String texto) {
		ConCueCuentaDAO cuentaDAO = new ConCueCuentaDAO(getSessionHibernate(request));
		//original//ConCueCuenta cuenta2 = (ConCueCuenta)cuentaDAO.findByCueCodigoCuenta(cuenta).get(0);
		ConCueCuenta cuenta2 = (ConCueCuenta)cuentaDAO.findById(Integer.parseInt(cuenta));
		String concepto = "";
		System.out.println("el tipo es:"+tipo);
		if(transOcorr == 1)
			concepto = "por Transferencia";
		else
			concepto = "por Correccion de capital";
		if(tipo.equals("C")){
			/*ConCueCuentaDAO cuentaDAO = new ConCueCuentaDAO();
			ConCueCuenta cuenta2 = (ConCueCuenta)cuentaDAO.findByCueCodigoCuenta(cuenta).get(0);
			cuenta2.setCueSaldoActual(cuenta2.getCueSaldoActual() - monto);*/
			concepto = "Cargo " + concepto;
			/*Transaction tx2 = cuentaDAO.getSession().beginTransaction();
			cuentaDAO.merge(cuenta2);
			tx2.commit();
			cuentaDAO.getSession().flush();
			cuentaDAO.getSession().clear();*/
		}
		else{
			//cuenta2.setCueSaldoActual(cuenta2.getCueSaldoActual() + monto);
			concepto = "Abono "+concepto;
		}
		if(cuenta.equals("219")){
			concepto = "Penalidad ahorro a plazos";
		}
		Transaction tx2 = cuentaDAO.getSession().beginTransaction();
		cuentaDAO.merge(cuenta2);
		tx2.commit();
		cuentaDAO.getSession().flush();
		cuentaDAO.getSession().clear();
		PartidaAutomatica partidaAutomatica =  new PartidaAutomatica();
		partidaAutomatica.crearPartidaAutomaticaCC(cuenta, monto, tipo, USUARIO, concepto,request);
	}
	/*Metodo modificado*/

	public void mensajes(String msg,CorreccionCapitalForm form,
			HttpServletRequest request, HttpServletResponse response){
		ActionErrors errors = new ActionErrors();
		errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(msg));
        saveMessages(request, errors);
	}
	
	public ActionForward htmlCampoDisponibilidad(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		CorreccionCapitalForm capitalForm = (CorreccionCapitalForm)form;
		String texto = "";
		double disponible = 0.0;
		HtmlBuilder htmlBuilder = new HtmlBuilder();
		CtaCasCuentaAsociadoDAO casDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
		CtaCasCuentaAsociado cas = casDAO.findById(Long.valueOf(capitalForm.getCuentaFuente()));
		if(capitalForm.getFuente() == 2){
			disponible = cas.getCtaCahCuentaAhorro().getCahSaldoActual();
		}
		if(capitalForm.getFuente() == 3){
			CtaMxpMovimientoPrestamoDAO mxpDao = new CtaMxpMovimientoPrestamoDAO(getSessionHibernate(request));
			if(mxpDao.findUltimoMovimiento(cas.getCtaPrePrestamo().getPreId()) != null &&
					mxpDao.findUltimoMovimiento(cas.getCtaPrePrestamo().getPreId()).getMxpId() != null){
				CtaMxpMovimientoPrestamo mxp = mxpDao.findUltimoMovimiento(cas.getCtaPrePrestamo().getPreId());
				disponible = mxp.getMxpSaldoActual();
			}else{
				disponible = cas.getCtaPrePrestamo().getPreMontoSolicitado() - cas.getCtaPrePrestamo().getPreSaldoActualT();
			}
		}
		if(capitalForm.getFuente() == 4){
			disponible = cas.getCtaSegSeguros().getSegSaldoIni() - cas.getCtaSegSeguros().getSegSaldoActual();
		}
		htmlBuilder.td(0).close();//.div().id("cantidadDisponible").close();
		htmlBuilder.input().type("text").readonly().id("cantDisp").size("10").value(Format.formatDinero(disponible)).end();
		htmlBuilder.tdEnd();//divEnd().tdEnd();
		texto = htmlBuilder.toString();
		try{
			response.setCharacterEncoding("UTF-8");
			response.getWriter().write(texto);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (RuntimeException e) {
			log.error("Error runtime", e);
		} catch (IOException e) {
			log.error(e);
		}
		return null;
	}
	
	/*Nueva funcion copia y modificada de su version original htmlCampoDisponibilidad 14/10/2009*/
	//ya funciona, no funcionaba porque no estaba la llave en el map del lookUpDispatchAction
	public ActionForward htmlCampoDisponibilidad2(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		CorreccionCapitalForm capitalForm = (CorreccionCapitalForm)form;
		String texto = "";
		
		IntereseYMora iYm = new IntereseYMora();
		double disponible = 0.0;
		HtmlBuilder htmlBuilder = new HtmlBuilder();
		CtaCasCuentaAsociadoDAO casDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
		CtaCasCuentaAsociado cas = casDAO.findById(Long.valueOf(capitalForm.getCuentaDestino()));
		if(capitalForm.getDestino() == 2){
			disponible = cas.getCtaCahCuentaAhorro().getCahSaldoActual();
		}
		if(capitalForm.getDestino() == 3){
			CtaMxpMovimientoPrestamoDAO mxpDao = new CtaMxpMovimientoPrestamoDAO(getSessionHibernate(request));
			if(mxpDao.findUltimoMovimiento(cas.getCtaPrePrestamo().getPreId()) != null &&
					mxpDao.findUltimoMovimiento(cas.getCtaPrePrestamo().getPreId()).getMxpId() != null){
				CtaMxpMovimientoPrestamo mxp = mxpDao.findUltimoMovimiento(cas.getCtaPrePrestamo().getPreId());
				//original//disponible = mxp.getMxpSaldo()+mxp.getMxpInteresAcumulado()+mxp.getMxpInteresPendiente();
				iYm = iYm.actualizaInteres(mxp, cas.getCtaPrePrestamo(), cas, new Date(),request);
				disponible = cas.getCtaPrePrestamo().getPreSaldoActualT()+iYm.getAcumulado()+iYm.getPendiente();
			}else{
				disponible = cas.getCtaPrePrestamo().getPreSaldoActualT()+cas.getCtaPrePrestamo().getPreInteresAcumulado()+cas.getCtaPrePrestamo().getPrePendMov();
			}
		}
		if(capitalForm.getDestino() == 4){
			disponible = cas.getCtaSegSeguros().getSegSaldoActual();
		}
		htmlBuilder.td(0).close();//.div().id("cantidadDisponible").close();
		htmlBuilder.input().type("text").readonly().id("saldo").size("10").value(Format.formatDinero(disponible)).end();
		htmlBuilder.tdEnd();//divEnd().tdEnd();
		texto = htmlBuilder.toString();
		try{
			response.setCharacterEncoding("UTF-8");
			response.getWriter().write(texto);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (RuntimeException e) {
			log.error("Error runtime", e);
		} catch (IOException e) {
			log.error(e);
		}
		return null;
	}
	/*Termina htmlCampoDisponibilidad2*/
	
	private void enviarTransaccionAContabilidad(CtaTxaTransaccionxcuentaAsociado txa,
			String nombreUsuario, String tipoCuenta, CtaCasCuentaAsociado cas, 
			Double interes, CtaChkChequePrestamo chequePrestamo, int i,HttpServletRequest request) {
		String parametros = "1;";//Seteamos modulo al que pertenece -> CUENTA CORRIENTE
		Integer tc = 0;
		Integer clasificacion = 0;
		Integer relacionInteres = 0;
		
		if(tipoCuenta.equals("A")){//Aportaciones
			tc = 1;
		}
		if(tipoCuenta.equals("B")){//Ahorros
			tc = 2;
			clasificacion = cas.getCtaCahCuentaAhorro().getCtaTahTipoAhorro().getTahId();
		}
		if(tipoCuenta.equals("C")){//Prestamo
			tc = 3;
			if(cas.getCtaPrePrestamo().getCtaTprTipoPrestamo() == null || cas.getCtaPrePrestamo().getCtaTprTipoPrestamo().getTprId()==null){
				clasificacion = 0;
			}else{
				clasificacion = cas.getCtaPrePrestamo().getCtaTprTipoPrestamo().getCtaLprLineaPrestamo().getLprId();
			}
			relacionInteres = 1;
		}
		if(tipoCuenta.equals("D")){//Seguros
			tc = 4;
			clasificacion = cas.getCtaSegSeguros().getCtaTisTipoSeguro().getTisId();
		}
		
		parametros += tc.toString() + ";"; //clasificacion -> Apor, Ahor, Pre, Seg.
		parametros += clasificacion.toString() + ";";//id tipo cuenta
		parametros += txa.getCtaTtrTipoTransaccion().getTtrId().toString() + ";";
		/*parametros += relacionInteres.toString();*/
		Double monto = txa.getTxaMonto() - interes;
		PartidaAutomatica partidaAutomatica =  new PartidaAutomatica();
		if(chequePrestamo != null && chequePrestamo.getChkId()!=null){//partida de cheque
				if(monto > 0){
					partidaAutomatica.crearPartidaAutomatica(
								parametros+"0;-1",//la ultima concatenacion hace referencia a que no relaciona interes ni empresa
								txa.getTxaMonto(),
								nombreUsuario,2,0,chequePrestamo,0,request);
					
				}
				if(interes > 0){
					partidaAutomatica.crearPartidaAutomatica(
							parametros+"1;-1",//la ultima concatenacion hace referencia a que relaciona interes y no empresa
							interes,
							nombreUsuario,2,null,null,null,request);
				}	
		}else{
				if(monto > 0){
					partidaAutomatica.crearPartidaAutomatica(
								parametros+"0;-1",
								txa.getTxaMonto()-interes,
								nombreUsuario,1,null,null,null,request);
				}
				if(interes > 0){
					partidaAutomatica.crearPartidaAutomatica(
							parametros+"1;-1",
							interes,
							nombreUsuario,1,null,null,null,request);
				}	
		}
	}
	
	public ActionForward imprimirReporte2(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		CorreccionCapitalForm capitalForm = (CorreccionCapitalForm)form;
		try{
			Date fechaActual = new Date();
			//ReportesOrdenForm rOrdenForm = (ReportesOrdenForm) form;
			
			response.setHeader("Cache-Control","private");
			response.setHeader("Pragma", "Cache");
			String pathReporte = "";//ruta reporte
			String nombreReporte = "";
			ExportReport exportar = null;
			ReportFile reporte = new ReportFile();
			ServletContext servletContext = getServlet().getServletContext();
			
			nombreReporte = "comprobante";
			pathReporte = servletContext
			.getRealPath("/reportesOtros/facturacion/compRetAhorro/tran.jasper");
			Long comprobante = (Long)request.getSession().getAttribute("comprobante");
			reporte.addParameter("comp",comprobante);
			
			SecIseInicioSesionDAO sesionDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
			SecIseInicioSesion sesion = sesionDAO.findById(capitalForm.getUsuarioConectado().getNombreUsuario());
//			reporte.addParameter("sucNombre",sesion.getSecPerPersona().getSecSucSucursal().getSucNombre());
			
			reporte.setPathJasper(pathReporte);
			exportar = new ExportReport(reporte);//reporte a exportar
			
			//Conexion jdbc normal
			String jdbcDriver = "com.mysql.jdbc.Driver";
			Class.forName(jdbcDriver);
			String url = HibernateSessionFactory.getConfiguration().getProperty("connection.url");
			String user = HibernateSessionFactory.getConfiguration().getProperty("connection.username");
			String pass = HibernateSessionFactory.getConfiguration().getProperty("connection.password");

			Connection con = DriverManager.getConnection(url, user, pass);


			//Connection con = HibernateSessionFactory.getSession().connection();
			//System.out.println(JRPropertiesMap.class.getPackage().getImplementationVersion());
			byte[] repCompilado = exportar.exportReportPDF(con);
			//exportar.exportReportPDF("algunPdf.pdf", con);
			
			response.setContentType("application/pdf");
			response.setContentLength(repCompilado.length);
			response.setHeader("content-Disposition", "attachment;filename="+nombreReporte+"-"+fechaActual.getTime()+".pdf");
			//response.setHeader("content-Disposition", "attachment;filename="+nombreReporte+"-"+rForm.getFechaReporte()+".pdf");
			ServletOutputStream outputStream = response.getOutputStream();
			outputStream.write(repCompilado, 0, repCompilado.length);
			outputStream.flush();
			outputStream.close();
			
		}catch(Exception e){
			e.printStackTrace();
			log.error("Se produjo un error al tratar de generar el reporte...", e);
			System.out.println("Se produjo un error al tratar de generar el reporte...\n");
		}
		return null;
	}

	//imprimirReporte
	public ActionForward imprimirReporte(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		CorreccionCapitalForm capitalForm = (CorreccionCapitalForm)form;
		try{
			Date fechaActual = new Date();
			
			response.setHeader("Cache-Control","private");
			response.setHeader("Pragma", "Cache");
			String pathReporte = "";//ruta reporte
			String nombreReporte = "";
			ExportReport exportar = null;
			ReportFile reporte = new ReportFile();
			ServletContext servletContext = getServlet().getServletContext();
			
			nombreReporte = "compRetiroAh";
			pathReporte = servletContext
			.getRealPath("/reportesOtros/facturacion/compRetAhorro/tran.jasper");
			int mxaId = (Integer) request.getSession().getAttribute("mxaId");
			long comprobante = (Long) request.getSession().getAttribute("comprobante");
//			reporte.addParameter("mxaId",mxaId);
			reporte.addParameter("comp",comprobante);
			SecIseInicioSesionDAO sesionDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
			SecIseInicioSesion sesion = sesionDAO.findById(capitalForm.getUsuarioConectado().getNombreUsuario());
			
//			reporte.addParameter("sucNombre",sesion.getSecPerPersona().getSecSucSucursal().getSucNombre());
			reporte.setPathJasper(pathReporte);
			exportar = new ExportReport(reporte);//reporte a exportar
			
			//Conexion jdbc normal
			String jdbcDriver = "com.mysql.jdbc.Driver";
			Class.forName(jdbcDriver);
			String url = HibernateSessionFactory.getConfiguration().getProperty("connection.url");
			String user = HibernateSessionFactory.getConfiguration().getProperty("connection.username");
			String pass = HibernateSessionFactory.getConfiguration().getProperty("connection.password");

			Connection con = DriverManager.getConnection(url, user, pass);

			byte[] repCompilado = exportar.exportReportPDF(con);
			
			response.setContentType("application/pdf");
			response.setContentLength(repCompilado.length);
			response.setHeader("content-Disposition", "attachment;filename="+nombreReporte+"-"+fechaActual.getTime()+".pdf");
			ServletOutputStream outputStream = response.getOutputStream();
			outputStream.write(repCompilado, 0, repCompilado.length);
			outputStream.flush();
			outputStream.close();
			
		}catch(Exception e){
			e.printStackTrace();
			log.error("Se produjo un error al tratar de generar el reporte...", e);
			System.out.println("Se produjo un error al tratar de generar el reporte...\n");
		}
		return null;
	}
	
	@Override
	protected Map getKeyMethodMap() {
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.cc.lista", "lista");
		map.put("cmd.cc.cargarListaAsociados", "cargarListaAsociados");
		map.put("cmd.cc.cargarHtml", "cargarHtml");
		map.put("cmd.cc.cargarHtml2", "cargarHtml2");
		map.put("cmd.cc.disponibleCuentaCont", "disponibleCuentaCont");
		map.put("cmd.cc.seleccionaDestino", "seleccionaDestino");
		map.put("cmd.cc.cancelar", "cancelar");
		map.put("cmd.cc.transferir", "transferir");
		map.put("cmd.cc.htmlCampoDisponibilidad", "htmlCampoDisponibilidad");
		map.put("cmd.cc.htmlCampoDisponibilidad2", "htmlCampoDisponibilidad2");
		map.put("cmd.txc.imprimirReporte", "imprimirReporte");
		map.put("cmd.txc.imprimirReporte2", "imprimirReporte2");
		return map;
	}
}