/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.procesosEspeciales.struts.action;

import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.StringTokenizer;

import javax.servlet.ServletContext;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.hibernate.Transaction;
import org.jmesa.view.html.HtmlBuilder;

import com.cetia.sicaco.hibernate.ConCueCuenta;
import com.cetia.sicaco.hibernate.ConCueCuentaDAO;
import com.cetia.sicaco.hibernate.CtaAscAsociado;
import com.cetia.sicaco.hibernate.CtaAscAsociadoDAO;
import com.cetia.sicaco.hibernate.CtaCahCuentaAhorro;
import com.cetia.sicaco.hibernate.CtaCahCuentaAhorroDAO;
import com.cetia.sicaco.hibernate.CtaCasCuentaAsociado;
import com.cetia.sicaco.hibernate.CtaCasCuentaAsociadoDAO;
import com.cetia.sicaco.hibernate.CtaChkChequePrestamo;
import com.cetia.sicaco.hibernate.CtaEtrEmpresaTrabajo;
import com.cetia.sicaco.hibernate.CtaFxpFiadorPrestamo;
import com.cetia.sicaco.hibernate.CtaFxpFiadorPrestamoDAO;
import com.cetia.sicaco.hibernate.CtaMxaMovimientoAhorro;
import com.cetia.sicaco.hibernate.CtaMxaMovimientoAhorroDAO;
import com.cetia.sicaco.hibernate.CtaMxpMovimientoPrestamo;
import com.cetia.sicaco.hibernate.CtaMxpMovimientoPrestamoDAO;
import com.cetia.sicaco.hibernate.CtaMxsMovimientoSeguros;
import com.cetia.sicaco.hibernate.CtaMxsMovimientoSegurosDAO;
import com.cetia.sicaco.hibernate.CtaPrePrestamo;
import com.cetia.sicaco.hibernate.CtaPrePrestamoDAO;
import com.cetia.sicaco.hibernate.CtaSegSeguros;
import com.cetia.sicaco.hibernate.CtaSegSegurosDAO;
import com.cetia.sicaco.hibernate.CtaTahTipoAhorro;
import com.cetia.sicaco.hibernate.CtaTahTipoAhorroDAO;
import com.cetia.sicaco.hibernate.CtaTinTasaInteres;
import com.cetia.sicaco.hibernate.CtaTinTasaInteresDAO;
import com.cetia.sicaco.hibernate.CtaTtrTipoTransaccion;
import com.cetia.sicaco.hibernate.CtaTtrTipoTransaccionDAO;
import com.cetia.sicaco.hibernate.CtaTxaTransaccionxcuentaAsociado;
import com.cetia.sicaco.hibernate.CtaTxaTransaccionxcuentaAsociadoDAO;
import com.cetia.sicaco.hibernate.CtrBanBancoDAO;
import com.cetia.sicaco.hibernate.CtrEstEstadoDAO;
import com.cetia.sicaco.hibernate.CtrParParametrosDAO;
import com.cetia.sicaco.hibernate.HibernateSessionFactory;
import com.cetia.sicaco.hibernate.OrdOcoOrdenDeCompra;
import com.cetia.sicaco.hibernate.OrdOcoOrdenDeCompraDAO;
import com.cetia.sicaco.hibernate.SecIseInicioSesion;
import com.cetia.sicaco.hibernate.SecIseInicioSesionDAO;
import com.cetia.sicaco.hibernate.SecPerPersona;
import com.cetia.sicaco.procesosEspeciales.struts.form.CorreccionCapitalForm;
import com.cetia.sicaco.procesosEspeciales.struts.form.TransaccionFechaForm;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;
import com.cetia.sicaco.struts.PartidaAutomatica;
import com.mad.utilidades.ElapsedTime;
import com.mad.utilidades.ExportReport;
import com.mad.utilidades.Format;
import com.mad.utilidades.IntereseYMora;
import com.mad.utilidades.ReportFile;

/** 
 * MyEclipse Struts
 * Creation date: 01-27-2009
 * 
 * XDoclet definition:
 * @struts.action path="/transaccionFecha" name="transaccionFechaForm" input="redirectInvalidData" parameter="accion" scope="request" validate="true"
 * @struts.action-forward name="lista" path="pagina-lista.procesosEspeciales.transaccionFecha"
 */
public class TransaccionFechaAction extends DMLAction {
	/*
	 * Generated Methods
	 */

	public String USUARIO = "";
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		TransaccionFechaForm tfForm = (TransaccionFechaForm) form;
		
		CtrBanBancoDAO bancoDAO = new CtrBanBancoDAO(getSessionHibernate(request));
		List lban = bancoDAO.findAll();
		request.setAttribute("bancos", lban);
		
		//CorreccionCapitalForm correccionCapitalForm = (CorreccionCapitalForm) form;
		/*
		if(correccionCapitalForm.getImprimirReporte()>0){
			if(correccionCapitalForm.getImprimirReporte()== 1){
				request.setAttribute("botonImprimir", 1);
			}
			if(correccionCapitalForm.getImprimirReporte() == 2){
				request.setAttribute("botonImprimir", 2);
			}
		}else{
			request.getSession().removeAttribute("mxaId");
			request.getSession().removeAttribute("comprobante");
		}
		*/
		CtaTxaTransaccionxcuentaAsociadoDAO txaDao = new CtaTxaTransaccionxcuentaAsociadoDAO(getSessionHibernate(request));
		tfForm.setComprobante(txaDao.nextComprobante());
		
		request.setAttribute("form", tfForm);
		request.setAttribute(Constantes.ACCION_KEY, "/transaccionFecha");
		request.setAttribute("pagina", 1);
		return mapping.findForward("lista");
	}
	
	public ActionForward cargarListaAsociados(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		TransaccionFechaForm tfForm = (TransaccionFechaForm)form;
		//CorreccionCapitalForm capitalForm = (CorreccionCapitalForm) form;
		List<CtaAscAsociado> listaAsociados = null;
		
		CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
		CtaAscAsociado asociado = new CtaAscAsociado();
		if(tfForm.getAscEmp() == 2){
			asociado.setAscCodigo(tfForm.getAscCodigoAsociado());
		}else{
			asociado.setAscCodigoAsociado(tfForm.getAscCodigoAsociado());
		}
		if(tfForm.getAscNombre() != null && !tfForm.getAscNombre().trim().equals("")){
			if(tfForm.getAscNombre().indexOf(",") == -1){
				if(tfForm.getAscNombre().trim().indexOf(" ") == -1){
					asociado.getSecPerPersona().setPerPrimerNombre(tfForm.getAscNombre());
				}else{
					StringTokenizer tokenizer = new StringTokenizer(tfForm.getAscNombre());
					asociado.getSecPerPersona().setPerPrimerNombre(tokenizer.nextToken().trim());
					asociado.getSecPerPersona().setPerPrimerApellido(tokenizer.nextToken().trim());
				}
			}else{
				if(tfForm.getAscNombre().trim().startsWith(",")){
					asociado.getSecPerPersona().setPerPrimerApellido("");
					asociado.getSecPerPersona().setPerPrimerNombre(tfForm.getAscNombre().substring(1).trim());
				}else{
					StringTokenizer tokenizer = new StringTokenizer(tfForm.getAscNombre().trim(),",");
					asociado.getSecPerPersona().setPerPrimerApellido(tokenizer.nextToken().trim());
					asociado.getSecPerPersona().setPerPrimerNombre(tokenizer.nextToken().trim());
				}
			}
		}
		
		SecPerPersona persona = new SecPerPersona();
		persona.setPerPrimerNombre(tfForm.getAscNombre());
		
		try {
			listaAsociados = asociadoDAO.findByNameUser(asociado,10);
			
			Boolean nulo = false;
			if(listaAsociados.size() < 1){
				nulo = true;
			}
			String listaResponse = "";
			listaResponse = construirListaAsociados(listaAsociados, nulo,request);
			
			response.getWriter().write(listaResponse);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (RuntimeException e) {
			log.error("Error runtime", e);
		} catch (IOException e) {
			log.error(e);
		}
		return null;
	}
	
	private String construirListaAsociados(List<CtaAscAsociado> listaAsociados, Boolean nulo,HttpServletRequest request) {
		String lista = "";
		lista = "<table id=\"resultadoAsc0\">";
		lista+="<tr><td colspan=\"2\"><span style=\"font-size: 10px;font-style: italic;\">Asociados:</span></td></tr>";
		if(nulo == true){
			lista+= "<tr><td colspan=\"2\"><span style=\"font-size: 10px;color: red;font-style: italic;\">"
			+ "No se encontro ningun asociado en el sistema para esta b&uacute;squeda</span></td></tr>";
		}else{
			int max2 = 0;
			for (Iterator iterator = listaAsociados.iterator(); iterator.hasNext();) {
				//SecAscAsociado asociado = (SecAscAsociado) iterator.next();
				CtaAscAsociado asociado = (CtaAscAsociado)iterator.next();
				CtaCasCuentaAsociadoDAO cuentaAsociadoDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
				lista += "<tr>";
				lista += "<td><input onclick=\"JavaScript:saveSeleccionA(this.value);\" type=\"radio\" name=\"_miseleccion\" value=\"";
				lista +=asociado.getAscCodigoAsociado()
						+ ";"
						+ asociado.getSecPerPersona().getPerPrimerNombre()
						+ " "
						+ asociado.getSecPerPersona().getPerPrimerApellido()
						+ ";"
						+ asociado.getAscId()
						+ "\"/></td>";
					lista += "<td><span style=\"font-size: 10px;color: #6E6E6E;font-style: italic;\">"
						+ asociado.getAscCodigoAsociado()
						+ " - "
						+ asociado.getSecPerPersona().getPerPrimerNombre()
						+ " "
						+ asociado.getSecPerPersona().getPerSegundoNombre()
						+ " "
						+ asociado.getSecPerPersona().getPerPrimerApellido()
						+ " "
						+ asociado.getSecPerPersona().getPerSegundoApellido()
						+ "</span></td>";
					lista += "</tr>";
			}
		}
		lista += "</table>";
		return lista;
	}
	
	public ActionForward cargarHtml(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		CorreccionCapitalForm capitalForm = (CorreccionCapitalForm)form;
		String texto = "";
		HtmlBuilder htmlBuilder = new HtmlBuilder();
		htmlBuilder.table(0).align("center").border("0").close().tr(0).close();
		if(capitalForm.getFuente() == 1){
			double disponible = 0.0;
			CtaCasCuentaAsociadoDAO casDao = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
			CtaCasCuentaAsociado cas = casDao.findAportacion(capitalForm.getCodigo(),9);
			disponible = cas.getCtaCahCuentaAhorro().getCahSaldoActual();
			htmlBuilder.input().type("hidden").name("cuentaFuente").id("cuentaFuente");
			htmlBuilder.value(cas.getCasCuenta().toString()).close();
			htmlBuilder.td(0).close().append("<label>Disponible</label>").tdEnd();
			htmlBuilder.td(0).close().div().id("cantidadDisponible").close();
			htmlBuilder.input().type("text").readonly().id("cantDisp").size("10").value(Format.formatDinero(disponible)).end();
			htmlBuilder.divEnd().tdEnd();
			htmlBuilder.trEnd(0).tr(0);
		}
		if(capitalForm.getFuente() == 2){
			double disponible=0.0;
			htmlBuilder.td(0).close().append("<label>Cuenta</label>").tdEnd();
			htmlBuilder.td(0).colspan("2").close().select();
			htmlBuilder.onchange("cargarDisponible();");
			htmlBuilder.name("cuentaFuente").id("cuentaFuente").close();
			CtaCasCuentaAsociadoDAO casDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
			
			//c es utilizada para contar la primera cuenta, para mostrar en disponigle desde el inicio
			//lo que este en ella, por lo tanto solo interesa antes que pase a ser 2 el resultado.
			int c = 0;
			List lcas = (List) casDAO.findByAscAndTipoCuenta(capitalForm.getCodigo(),"B");
			for (Iterator iterator = lcas.iterator(); iterator.hasNext();) {
				CtaCasCuentaAsociado cuentaAsociado = (CtaCasCuentaAsociado) iterator.next();
				if(cuentaAsociado.getCtaCahCuentaAhorro().getCahId().substring(0, 1).equals("B")){
					if(cuentaAsociado.getCtrEstEstado().getEstId()==9){
						c ++;
						if(c < 2){
							disponible = cuentaAsociado.getCtaCahCuentaAhorro().getCahSaldoActual();
						}
						htmlBuilder.option().value(cuentaAsociado.getCasCuenta().toString()).close();
						if(cuentaAsociado.getCtaCahCuentaAhorro().getCtaTahTipoAhorro()== null){
							htmlBuilder.append(cuentaAsociado.getCtaCahCuentaAhorro().getCahId() + " - Default");
						}else{
							htmlBuilder.append(cuentaAsociado.getCtaCahCuentaAhorro().getCahId() + " - "
									+ cuentaAsociado.getCtaCahCuentaAhorro().getCtaTahTipoAhorro().getTahNombre());
						}
						htmlBuilder.optionEnd();
					}
				}
			}
			htmlBuilder.selectEnd().tdEnd().trEnd(0).tr(0).close();
			htmlBuilder.td(0).close().append("<label>Disponible</label>").tdEnd();
			htmlBuilder.td(0).close().div().id("cantidadDisponible").close();
			htmlBuilder.input().type("text").readonly().id("cantDisp").size("10").value(Format.formatDinero(disponible)).close();
			htmlBuilder.divEnd().tdEnd();
			htmlBuilder.trEnd(0);
			htmlBuilder.tr(0).close();
			htmlBuilder.td(0).close().append("<label>Inter&eacute;s</label>").tdEnd();
			htmlBuilder.td(0).close().input().type("text").id("interesId").name("interes").size("10").close();
			htmlBuilder.divEnd().tdEnd();
			htmlBuilder.trEnd(0);
			htmlBuilder.tr(0);
		}
		if(capitalForm.getFuente() == 3){
			double disponible=0.0;
			htmlBuilder.td(0).close().append("<label>Cuenta</label>").tdEnd();
			htmlBuilder.td(0).colspan("2").close().select();
			htmlBuilder.onchange("cargarDisponible();");
			htmlBuilder.name("cuentaFuente").id("cuentaFuente").close();
			CtaCasCuentaAsociadoDAO casDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
			int c = 0;
			List lcas = (List) casDAO.findByAscAndTipoCuenta(capitalForm.getCodigo(),"C");
			for (Iterator iterator = lcas.iterator(); iterator.hasNext();) {
				CtaCasCuentaAsociado cas = (CtaCasCuentaAsociado) iterator.next();
				if(cas.getCtrEstEstado().getEstId()==13){
					c ++;
					if(c < 2){
						CtaMxpMovimientoPrestamoDAO mxpDao = new CtaMxpMovimientoPrestamoDAO(getSessionHibernate(request));
						if(mxpDao.findUltimoMovimiento(cas.getCtaPrePrestamo().getPreId()) != null &&
								mxpDao.findUltimoMovimiento(cas.getCtaPrePrestamo().getPreId()).getMxpId() != null){
							CtaMxpMovimientoPrestamo mxp = mxpDao.findUltimoMovimiento(cas.getCtaPrePrestamo().getPreId());
							disponible = mxp.getMxpSaldoActual();
						}else{
							disponible = cas.getCtaPrePrestamo().getPreMontoSolicitado() - cas.getCtaPrePrestamo().getPreSaldoActualT();
						}
					}
					htmlBuilder.option().value(cas.getCasCuenta().toString()).close();
					if(cas.getCtaPrePrestamo().getCtaTprTipoPrestamo()== null){
						htmlBuilder.append(cas.getCtaPrePrestamo().getPreId() + " - Credito");
					}else{
						htmlBuilder.append(cas.getCtaPrePrestamo().getPreId() + " - "
								+ cas.getCtaPrePrestamo().getCtaTprTipoPrestamo().getTprNombre());
					}
					htmlBuilder.optionEnd();
				}
			}
			htmlBuilder.selectEnd().tdEnd().trEnd(0).tr(0).close();
			htmlBuilder.td(0).close().append("<label>Disponible</label>").tdEnd();
			htmlBuilder.td(0).close().div().id("cantidadDisponible").close();
			htmlBuilder.input().type("text").readonly().id("cantDisp").size("10").value(Format.formatDinero(disponible)).close();
			htmlBuilder.divEnd().tdEnd();
			htmlBuilder.trEnd(0);
			htmlBuilder.tr(0).close();
			htmlBuilder.td(0).close().append("<label>Inter&eacute;s</label>").tdEnd();
			htmlBuilder.td(0).close().input().type("text").id("interesId").name("interes").size("10").close();
			htmlBuilder.divEnd().tdEnd();
			htmlBuilder.trEnd(0);
			htmlBuilder.tr(0);
		}
		if(capitalForm.getFuente() == 4){
			double disponible=0.0;
			htmlBuilder.td(0).close().append("<label>Cuenta</label>").tdEnd();
			htmlBuilder.td(0).colspan("2").close().select();
			htmlBuilder.onchange("cargarDisponible();");
			htmlBuilder.name("cuentaFuente").id("cuentaFuente").close();
			CtaCasCuentaAsociadoDAO casDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
			int c = 0;
			List lcas = (List) casDAO.findByAscAndTipoCuenta(capitalForm.getCodigo(),"D");
			for (Iterator iterator = lcas.iterator(); iterator.hasNext();) {
				CtaCasCuentaAsociado cas = (CtaCasCuentaAsociado) iterator.next();
				if(cas.getCtrEstEstado().getEstId()==11){
					c ++;
					if(c < 2){
						CtaMxpMovimientoPrestamoDAO mxpDao = new CtaMxpMovimientoPrestamoDAO(getSessionHibernate(request));
						disponible = cas.getCtaSegSeguros().getSegSaldoActual();
					}
					htmlBuilder.option().value(cas.getCasCuenta().toString()).close();
					htmlBuilder.append(cas.getCtaSegSeguros().getSegId() + " - "
								+ cas.getCtaSegSeguros().getCtaTisTipoSeguro().getTisNombre());
					htmlBuilder.optionEnd();
				}
			}
			htmlBuilder.selectEnd().tdEnd().trEnd(0).tr(0).close();
			htmlBuilder.td(0).close().append("<label>Disponible</label>").tdEnd();
			htmlBuilder.td(0).close().div().id("cantidadDisponible").close();
			htmlBuilder.input().type("text").readonly().id("cantDisp").size("10").value(Format.formatDinero(disponible)).close();
			htmlBuilder.divEnd().tdEnd();
			htmlBuilder.trEnd(0);
			htmlBuilder.tr(0).close();
			htmlBuilder.td(0).close().append("<label>Inter&eacute;s</label>").tdEnd();
			htmlBuilder.td(0).close().input().type("text").id("interesId").name("interes").size("10").close();
			htmlBuilder.divEnd().tdEnd();
			htmlBuilder.trEnd(0);
			htmlBuilder.tr(0);
		}
		if(capitalForm.getFuente() == 5){
			double disponible=0.0;
			htmlBuilder.td(0).close().append("<label>Cuenta Contable</label>").tdEnd();
			htmlBuilder.td(0).colspan("1").close();
			htmlBuilder.input().type("text").name("cuentaFuente").id("cuentaFuente").close();
			htmlBuilder.tdEnd();
			htmlBuilder.td(0).close();
			htmlBuilder.input().type("button").value("Cargar").onclick("loadCont($('#cuentaFuente').val());").close().tdEnd();
			htmlBuilder.trEnd(0).tr(0).close();
			htmlBuilder.td(0).close().append("<label>Disponible</label>").tdEnd();
			htmlBuilder.td(0).close().div().id("cantidadDisponible").close();
			htmlBuilder.input().type("text").readonly().id("cantDisp").size("10").value(Format.formatDinero(disponible)).close();
			htmlBuilder.divEnd().tdEnd();
			htmlBuilder.trEnd(0).tr(0);
		}
		htmlBuilder.td(0).close().append("<label>Cantidad</label>").tdEnd();
		htmlBuilder.td(0).close().input().type("text").size("15")
			.onkeyup("dosDecimales($('#txaMonto').val(),'txaMonto');")
			.styleClass("obligatorio").name("txaMonto").id("txaMonto").close().tdEnd();
		htmlBuilder.trEnd(0).tableEnd(1);
		texto = htmlBuilder.toString();
		try{
			response.getWriter().write(texto);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (RuntimeException e) {
			log.error("Error runtime", e);
		} catch (IOException e) {
			log.error(e);
		}
		return null;
	}
	
	public ActionForward cargarHtml2(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		TransaccionFechaForm tfForm = (TransaccionFechaForm)form;
		//CorreccionCapitalForm capitalForm = (CorreccionCapitalForm)form;
		String texto = "";
		HtmlBuilder htmlBuilder = new HtmlBuilder();
		IntereseYMora iYm = new IntereseYMora();
		htmlBuilder.table(0).align("center").border("0").close().tr(0).close();
		if(tfForm.getDestino() == 1){
			htmlBuilder.td(0).close();
			htmlBuilder.input().type("hidden").name("cuentaDestino").id("cuentaDestino");
			CtaCasCuentaAsociadoDAO casDao = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
			CtaCasCuentaAsociado cas = casDao.findAportacion(tfForm.getCodigo(),9);
			htmlBuilder.value(cas.getCasCuenta().toString()).close();
			htmlBuilder.td(0).close().append("<label>Saldo actual</label>").tdEnd();
			htmlBuilder.td(0).close().div().id("saldoActual").close();
			htmlBuilder.input().type("text").readonly().id("cantDisp").size("10").value(Format.formatDinero(cas.getCtaCahCuentaAhorro().getCahSaldoActual())).end();
			request.getSession().setAttribute("cantDisp", cas.getCtaCahCuentaAhorro().getCahSaldoActual());
			htmlBuilder.divEnd().tdEnd();
			htmlBuilder.trEnd(0).tr(0);			
			htmlBuilder.tdEnd();
			htmlBuilder.trEnd(0);
		}
		if(tfForm.getDestino() == 2){
			htmlBuilder.td(0).close().append("<label>Cuenta</label>").tdEnd();
			htmlBuilder.td(0).colspan("2").close().select();
			htmlBuilder.onchange("cargarDisponible();");
			htmlBuilder.name("cuentaDestino").id("cuentaDestino").close();
			CtaCasCuentaAsociadoDAO casDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
			double saldo=0.00;
			int c = 0;
			//c es utilizada para contar la primera cuenta, para mostrar en disponigle desde el inicio
			//lo que este en ella, por lo tanto solo interesa antes que pase a ser 2 el resultado.
			List lcas = (List) casDAO.findByAscAndTipoCuenta(tfForm.getCodigo(),"B");
			for (Iterator iterator = lcas.iterator(); iterator.hasNext();) {
				CtaCasCuentaAsociado cuentaAsociado = (CtaCasCuentaAsociado) iterator.next();
				if(cuentaAsociado.getCtaCahCuentaAhorro().getCahId().substring(0, 1).equals("B")){
					if(cuentaAsociado.getCtrEstEstado().getEstId()==9){
						c ++;
						if(c < 2){
							saldo = cuentaAsociado.getCtaCahCuentaAhorro().getCahSaldoActual();
						}
						htmlBuilder.option().value(cuentaAsociado.getCasCuenta().toString()).close();
						if(cuentaAsociado.getCtaCahCuentaAhorro().getCtaTahTipoAhorro()== null){
							htmlBuilder.append(cuentaAsociado.getCtaCahCuentaAhorro().getCahId() + " - Default");
						}else{
							htmlBuilder.append(cuentaAsociado.getCtaCahCuentaAhorro().getCahId() + " - "
									+ cuentaAsociado.getCtaCahCuentaAhorro().getCtaTahTipoAhorro().getTahNombre());
						}
						htmlBuilder.optionEnd();
					}
				}
			}
			htmlBuilder.selectEnd().tdEnd().trEnd(0).tr(0).close();
			htmlBuilder.td(0).close().append("<label>Saldo actual</label>").tdEnd();
			htmlBuilder.td(0).close().div().id("saldoActual").close();
			htmlBuilder.input().type("text").readonly().id("cantDisp").size("10").value(Format.formatDinero(saldo)).close();
			request.getSession().setAttribute("cantDisp", saldo);
			htmlBuilder.divEnd().tdEnd();
			htmlBuilder.trEnd(0);
			htmlBuilder.tr(0).close();
			htmlBuilder.divEnd().tdEnd();
			htmlBuilder.trEnd(0);
		}
		if(tfForm.getDestino() == 3){
			double saldo = 0.00;
			htmlBuilder.td(0).close().append("<label>Cuenta</label>").tdEnd();
			htmlBuilder.td(0).colspan("2").close().select();
			htmlBuilder.onchange("cargarDisponible();");
			htmlBuilder.name("cuentaDestino").id("cuentaDestino").close();
			CtaCasCuentaAsociadoDAO casDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
			int c = 0;
			List lcas = (List) casDAO.findByAscAndTipoCuenta(tfForm.getCodigo(),"C");
			for (Iterator iterator = lcas.iterator(); iterator.hasNext();) {
				CtaCasCuentaAsociado cas = (CtaCasCuentaAsociado) iterator.next();
				if(cas.getCtrEstEstado().getEstId()==13){
					c++;
					if(c < 2){
						CtaMxpMovimientoPrestamoDAO mxpDao = new CtaMxpMovimientoPrestamoDAO(getSessionHibernate(request));
						if(mxpDao.findUltimoMovimiento(cas.getCtaPrePrestamo().getPreId()) != null &&
								mxpDao.findUltimoMovimiento(cas.getCtaPrePrestamo().getPreId()).getMxpId() != null){
							CtaMxpMovimientoPrestamo mxp = mxpDao.findUltimoMovimiento(cas.getCtaPrePrestamo().getPreId());
							//original//disponible = mxp.getMxpSaldoActual();
							//disponible = mxp.getMxpSaldo()+mxp.getMxpInteresAcumulado()+mxp.getMxpInteresPendiente();
							iYm = iYm.actualizaInteres(mxp, cas.getCtaPrePrestamo(), cas, new Date(),request);
							saldo = cas.getCtaPrePrestamo().getPreSaldoActualT()+iYm.getAcumulado()+iYm.getPendiente();
						}else{
							//original//disponible = cas.getCtaPrePrestamo().getPreMontoSolicitado() - cas.getCtaPrePrestamo().getPreSaldoActualT();
							saldo = cas.getCtaPrePrestamo().getPreSaldoActualT()+cas.getCtaPrePrestamo().getPreInteresAcumulado()+cas.getCtaPrePrestamo().getPrePendMov();
						}
					}
					htmlBuilder.option().value(cas.getCasCuenta().toString()).close();
					if(cas.getCtaPrePrestamo().getCtaTprTipoPrestamo()== null){
						htmlBuilder.append(cas.getCtaPrePrestamo().getPreId() + " - Credito");
					}else{
						htmlBuilder.append(cas.getCtaPrePrestamo().getPreId() + " - "
								+ cas.getCtaPrePrestamo().getCtaTprTipoPrestamo().getTprNombre());
					}
					htmlBuilder.optionEnd();
				}
			}
			htmlBuilder.selectEnd().tdEnd().trEnd(0).tr(0).close();
			htmlBuilder.td(0).close().append("<label>Saldo actual</label>").tdEnd();
			htmlBuilder.td(0).close().div().id("saldoActual").close();
			htmlBuilder.input().type("text").readonly().id("cantDisp").size("10").value(Format.formatDinero(saldo)).close();
			request.getSession().setAttribute("cantDisp", saldo);
			htmlBuilder.divEnd().tdEnd();
			htmlBuilder.trEnd(0);
			htmlBuilder.tr(0).close();
			htmlBuilder.divEnd().tdEnd();
			htmlBuilder.trEnd(0);
			htmlBuilder.tr(0);
		}
		if(tfForm.getDestino() == 4){
			double disponible=0.0;
			htmlBuilder.td(0).close().append("<label>Cuenta</label>").tdEnd();
			htmlBuilder.td(0).colspan("2").close().select();
			htmlBuilder.onchange("cargarDisponible();");
			htmlBuilder.name("cuentaDestino").id("cuentaDestino").close();
			CtaCasCuentaAsociadoDAO casDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
			int c = 0;
			List lcas = (List) casDAO.findByAscAndTipoCuenta(tfForm.getCodigo(),"D");
			for (Iterator iterator = lcas.iterator(); iterator.hasNext();) {
				CtaCasCuentaAsociado cas = (CtaCasCuentaAsociado) iterator.next();
				if(cas.getCtrEstEstado().getEstId()==11){
					c ++;
					if(c < 2){
						CtaMxpMovimientoPrestamoDAO mxpDao = new CtaMxpMovimientoPrestamoDAO(getSessionHibernate(request));
						disponible = cas.getCtaSegSeguros().getSegSaldoActual();
					}
					htmlBuilder.option().value(cas.getCasCuenta().toString()).close();
					htmlBuilder.append(cas.getCtaSegSeguros().getSegId() + " - "
								+ cas.getCtaSegSeguros().getCtaTisTipoSeguro().getTisNombre());
					htmlBuilder.optionEnd();
				}
			}
			htmlBuilder.selectEnd().tdEnd().trEnd(0).tr(0).close();
			htmlBuilder.td(0).close().append("<label>Saldo actual</label>").tdEnd();
			htmlBuilder.td(0).close().div().id("saldoActual").close();
			htmlBuilder.input().type("text").readonly().id("cantDisp").size("10").value(Format.formatDinero(disponible)).close();
			request.getSession().setAttribute("cantDisp",disponible);
			htmlBuilder.divEnd().tdEnd();
			htmlBuilder.trEnd(0);
			htmlBuilder.tr(0).close();
			htmlBuilder.divEnd().tdEnd();
			htmlBuilder.trEnd(0);
		}
		htmlBuilder.trEnd(0).tableEnd(1);
		texto = htmlBuilder.toString();
		try{
			response.getWriter().write(texto);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (RuntimeException e) {
			log.error("Error runtime", e);
		} catch (IOException e) {
			log.error(e);
		}
		return null;
	}

	
	//disponibleCuentaCont
	public ActionForward disponibleCuentaCont(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		CorreccionCapitalForm capitalForm = (CorreccionCapitalForm)form;
		ConCueCuentaDAO cuentaDAO = new ConCueCuentaDAO(getSessionHibernate(request));
		String texto = "";
		Double disponible = 0.0;
		List cuentasCont = cuentaDAO.findByCueCodigoCuenta(capitalForm.getCuentaCont());
		if(cuentasCont.size()>0){
			ConCueCuenta cue = (ConCueCuenta) cuentasCont.get(0);
			disponible = cue.getCueSaldoActual();
		}
		HtmlBuilder htmlBuilder = new HtmlBuilder();
		htmlBuilder.input().type("text").readonly().id("cantDisp").size("10").value(Format.formatDinero(disponible)).close();
		texto = htmlBuilder.toString();
		try{
			response.getWriter().write(texto);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (RuntimeException e) {
			log.error("Error runtime", e);
		} catch (IOException e) {
			log.error(e);
		}
		return null;
	}
	
	public ActionForward cancelar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		//CorreccionCapitalForm capitalForm = new CorreccionCapitalForm();
		TransaccionFechaForm tfForm = new TransaccionFechaForm();
		return lista(mapping, tfForm, request, response);
	}
	
	/*
	 * Abono por transferencia 5
	 * Cargo por transferencia 23
	 * Abono por correccion de Capital 14
	 * Cargo por correccion de capital 24
	 * Abono por correccion de Intereses 18
	 * Cargo por correccion de intereses 28
	 */
	
	public ActionForward transferir(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		TransaccionFechaForm tfForm = (TransaccionFechaForm) form;
		//CorreccionCapitalForm capitalForm = (CorreccionCapitalForm)form;
		USUARIO = tfForm.getUsuarioConectado().getNombreUsuario();
		
		//Validacion en general por si no ha llenado algunos campos
		if(validarCorreccion(tfForm, request)!= true){
			return lista(mapping, tfForm, request, response);
		}
		
		SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
		Date fechaTrans = new Date();
		try {
			fechaTrans = sdf.parse(tfForm.getFechaTrans());
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		transfiere(tfForm.getCuentaDestino(), tfForm.getDestino(), "A", request,
				tfForm.getTxaMonto(), fechaTrans);
			
		mensajes("exito.tranDML.transaccionExitosa", tfForm, request, response);
		USUARIO = "";
		tfForm.setImprimirReporte(1);
		return cancelar(mapping, form, request, response);
	}
	
	private boolean validarCorreccion(TransaccionFechaForm tfForm, HttpServletRequest request) {
		boolean b = true;
		ActionErrors errors = new ActionErrors();
		if(tfForm.getDestino() == null || tfForm.getDestino() < 1){
			b = false;
			errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("error.cc.cuentaDestino"));
			saveMessages(request, errors);	
		}else{
			if(tfForm.getCuentaDestino() == null || tfForm.getCuentaDestino().trim().equals("")){
				b = false;
				errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("error.cc.cuentaDestino"));
				saveMessages(request, errors);	
			}
		}
		
		Double d = (Double)request.getSession().getAttribute("cantDisp");;
		if (tfForm.getDestino() > 2 && tfForm.getTxaMonto() > d ){
			//b = false;
			System.out.println("tfForm.getTxaMonto()"+tfForm.getTxaMonto());
			System.out.println("tfForm.getCantDisp()"+d);
			errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("error.cc.cantidadIncorrecta"));
			saveMessages(request, errors);	
		}
		
		if(tfForm.getTxaMonto() == null || tfForm.getTxaMonto() <= 0){
			b = false;
			errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("error.cc.txaMonto"));
			saveMessages(request, errors);	
		}
		return b;
		
		
	}
	
	private void transfiere(String cuenta, Integer fuente, String tipo, 
			HttpServletRequest request, Double monto, Date fechaTrans) {
		//TTR's utilizados
		CtaTtrTipoTransaccionDAO ttrDao = new CtaTtrTipoTransaccionDAO(getSessionHibernate(request));
		//Transferencia electronica, abono 33
		CtaTtrTipoTransaccion ttrAelect = ttrDao.findById(33);
		
		CtaTxaTransaccionxcuentaAsociadoDAO txaDAO = new CtaTxaTransaccionxcuentaAsociadoDAO(getSessionHibernate(request));
		CtaCasCuentaAsociadoDAO casDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
		Transaction tx = txaDAO.getSession().beginTransaction();
		Long comprobante = txaDAO.nextComprobante();
		request.getSession().setAttribute("comprobante", comprobante);
		Integer cuentaInt = Integer.valueOf(cuenta);
		Long cuentaLong = new Long(cuentaInt);
		CtaCasCuentaAsociado cas =  casDAO.findById(cuentaLong);
		
		//Guarda transaccion sin intereses
		CtaTxaTransaccionxcuentaAsociado txa = new CtaTxaTransaccionxcuentaAsociado();
		txa.setCtaCasCuentaAsociado(cas);
		txa.setTxaFecha(fechaTrans);
		txa.setTxaComprobante(comprobante);
		txa.setTxaMonto(monto);
		txa.setCtaNotNotas(null);
		txa.setCtaTtrTipoTransaccion(ttrAelect);
		txa.setAudFechaCreacion(new Date());
		txa.setAudFechaModificacion(new Date());
		txa.setAudUsuarioCreacion(USUARIO);
		txa.setAudUsuarioModificacion(USUARIO);
		txaDAO.save(txa);
		
		tx.commit();
		txaDAO.getSession().flush();
		txaDAO.getSession().clear();
		
		//Abono a aportacion
		if(fuente== 1){
			transAportacion(cas, monto, txa, tipo, fechaTrans,request);
		}
		
		//Abono o Cargo a ahorros
		if(fuente== 2){
			transAhorros(cas, monto, txa, tipo, request);
		}
		
		//Abono a Prestamo
		if(fuente== 3){
			transPrestamo(cas, monto, txa, comprobante,request);
		}
		
		//Abono a Seguros
		if(fuente== 4){
			transSeguro(cas, monto, txa, comprobante,request);
		}
		
	}

	private void transSeguro(CtaCasCuentaAsociado cas, Double monto,
			CtaTxaTransaccionxcuentaAsociado txa, Long comprobante,HttpServletRequest request) {
		
		CtaSegSegurosDAO segurosDAO = new CtaSegSegurosDAO(getSessionHibernate(request));
		Transaction tx = segurosDAO.getSession().beginTransaction();
		CtaSegSeguros seguros = segurosDAO.findById(cas.getCtaSegSeguros().getSegId());
		
		double montoActualizable2 = monto;
		if(montoActualizable2 < seguros.getSegSaldoActual()){
			CtaMxsMovimientoSeguros mxs = new CtaMxsMovimientoSeguros();
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
			CtaMxsMovimientoSegurosDAO mxsDao = new CtaMxsMovimientoSegurosDAO(getSessionHibernate(request));
			CtaMxsMovimientoSeguros mxsAnterior = new CtaMxsMovimientoSeguros();
			mxsAnterior = mxsDao.findMovimientoAnterior(seguros.getSegId(), sdf.format(txa.getTxaFecha()));
			
			//seguros.setSegSaldoActual(seguros.getSegSaldoActual() - montoActualizable2);
			seguros.setSegSaldoActual(mxsAnterior.getMxsSaldo()- montoActualizable2);
			segurosDAO.merge(seguros);
			
			mxs.setCtaSegSeguros(seguros);
			mxs.setCtaTxaTransaccionxcuentaAsociado(txa);
			mxs.setMxsFecha(txa.getTxaFecha());
			mxs.setMxsMonto(monto);
			double mxsSaldo = seguros.getSegSaldoActual();
			mxs.setMxsSaldo(mxsSaldo);
			mxs.setAudFechaCreacion(new Date());
			mxs.setAudFechaModificacion(new Date());
			mxs.setAudUsuarioCreacion(USUARIO);
			mxs.setAudUsuarioModificacion(USUARIO);
			mxsDao.save(mxs);
			
			tx.commit();
			enviarTransaccionAContabilidad(txa, USUARIO, "D", cas, 0.0, null, 1,request);
		}else{

			if(montoActualizable2 >(seguros.getSegSaldoIni() - seguros.getSegSaldoActual())){
				montoActualizable2 = montoActualizable2 -(seguros.getSegSaldoIni() - seguros.getSegSaldoActual());
				CtaCasCuentaAsociadoDAO casDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
				CtaCasCuentaAsociado principal = casDAO.findPrincipal(cas.getCtaAscAsociado().getAscId());
				CtaCahCuentaAhorroDAO ahorroDAO = new CtaCahCuentaAhorroDAO(getSessionHibernate(request));
				CtaCahCuentaAhorro ahorro = ahorroDAO.findById(principal.getCtaCahCuentaAhorro().getCahId());
				ahorro.setCahSaldoActual(ahorro.getCahSaldoActual() + montoActualizable2);
				ahorroDAO.merge(ahorro);
				tx.commit();
				
				//Guardo transaccion de cuenta Principal
				CtaTxaTransaccionxcuentaAsociado txaPrincipal = new CtaTxaTransaccionxcuentaAsociado();
				txaPrincipal.setCtaCasCuentaAsociado(principal);
				CtaTtrTipoTransaccionDAO ttrDao = new CtaTtrTipoTransaccionDAO(getSessionHibernate(request));
				//Transferencia comun
				CtaTtrTipoTransaccion ttrAtran = ttrDao.findById(5);
				txaPrincipal.setCtaTtrTipoTransaccion(ttrAtran);
				txaPrincipal.setTxaComprobante(comprobante);
				txaPrincipal.setTxaFecha(txa.getTxaFecha());
				txaPrincipal.setTxaMonto(montoActualizable2);
				txaPrincipal.setCtaNotNotas(null);
				txaPrincipal.setTxaNota("Sobrante de la transaccion");
				txaPrincipal.setAudFechaCreacion(new Date());
				txaPrincipal.setAudFechaModificacion(new Date());
				txaPrincipal.setAudUsuarioCreacion(USUARIO);
				txaPrincipal.setAudUsuarioModificacion(USUARIO);
				CtaTxaTransaccionxcuentaAsociadoDAO txaDAO = new CtaTxaTransaccionxcuentaAsociadoDAO(getSessionHibernate(request));
				txaDAO.save(txaPrincipal);
				tx.commit();
				
				//Movimiento de ahorro cuenta Principal
				CtaMxaMovimientoAhorroDAO mxaDAO = new CtaMxaMovimientoAhorroDAO(getSessionHibernate(request));
				CtaMxaMovimientoAhorro movimientoPrincipal = new CtaMxaMovimientoAhorro();
				movimientoPrincipal.setCtaCahCuentaAhorro(ahorro);
				movimientoPrincipal.setCtaTxaTransaccionxcuentaAsociado(txaPrincipal);
				movimientoPrincipal.setMxaFecha(txa.getTxaFecha());
				movimientoPrincipal.setMxaInteresTran(0.0);
				movimientoPrincipal.setMxaMonto(montoActualizable2);
				movimientoPrincipal.setMxaSaldo(ahorro.getCahSaldoActual());
				movimientoPrincipal.setAudFechaCreacion(new Date());
				movimientoPrincipal.setAudFechaModificacion(new Date());
				movimientoPrincipal.setAudUsuarioCreacion(USUARIO);
				movimientoPrincipal.setAudUsuarioModificacion(USUARIO);
				mxaDAO.save(movimientoPrincipal);
				tx.commit();
				
				enviarTransaccionAContabilidad(txaPrincipal, USUARIO, "B", cas, 0.0, null, 1,request);
			}
			txa.setTxaMonto(seguros.getSegSaldoIni() - seguros.getSegSaldoActual());
			CtaTxaTransaccionxcuentaAsociadoDAO txaDao = new CtaTxaTransaccionxcuentaAsociadoDAO(getSessionHibernate(request));
			txaDao.merge(txa);
			
			seguros.setSegSaldoActual(0.0);
			segurosDAO.merge(seguros);
			
			CtaMxsMovimientoSegurosDAO mxsDao = new CtaMxsMovimientoSegurosDAO(getSessionHibernate(request));
			CtaMxsMovimientoSeguros mxs = new CtaMxsMovimientoSeguros();
			mxs.setCtaSegSeguros(seguros);
			mxs.setCtaTxaTransaccionxcuentaAsociado(txa);
			mxs.setMxsFecha(txa.getTxaFecha());
			mxs.setMxsMonto(monto);
			mxs.setMxsSaldo(seguros.getSegSaldoIni());
			mxs.setAudFechaCreacion(new Date());
			mxs.setAudFechaModificacion(new Date());
			mxs.setAudUsuarioCreacion(USUARIO);
			mxs.setAudUsuarioModificacion(USUARIO);
			mxsDao.save(mxs);
			
			Transaction tx1 = segurosDAO.getSession().beginTransaction();
			tx1.commit();
			
			enviarTransaccionAContabilidad(txa, USUARIO, "D", cas, 0.0, null, 1,request);
		}
		/*
		segurosDAO.merge(seguros);
		Transaction tx1 = segurosDAO.getSession().beginTransaction();
		tx1.commit();*/
	}

	@SuppressWarnings("unchecked")
	private void transPrestamo(CtaCasCuentaAsociado cas, Double monto,
			CtaTxaTransaccionxcuentaAsociado txa, Long comprobante,HttpServletRequest request) {
		
		
		CtaCasCuentaAsociadoDAO casDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
		Transaction tx = casDAO.getSession().beginTransaction();
		CtaCasCuentaAsociado cuentaA = casDAO.findById(cas.getCasCuenta());
		CtaAscAsociado asociado = cuentaA.getCtaAscAsociado();
		
		CtaPrePrestamoDAO prestamoDAO = new CtaPrePrestamoDAO(getSessionHibernate(request));
		CtaPrePrestamo prestamo = prestamoDAO.findById(cas.getCtaPrePrestamo().getPreId());
		
		CtaMxpMovimientoPrestamoDAO mxpDAO = new CtaMxpMovimientoPrestamoDAO(getSessionHibernate(request));
		CtaMxpMovimientoPrestamo mxp = new CtaMxpMovimientoPrestamo();
		CtaMxpMovimientoPrestamo mxpAnt;
		
		IntereseYMora iYm = new IntereseYMora(0.0,0.0,0.0,0.0);
		if(prestamo.getPreCredito() == null || (!prestamo.getPreCredito().equals("O") && !prestamo.getPreCredito().equals("F"))){
			iYm.setPorcInteres(prestamo.getCtaTprTipoPrestamo().getCtaTinTasaInteres().getTinTasa());
		}
		Date movimiento = txa.getTxaFecha();
		//mxpAnt = mxpDAO.findUltimoMovimiento(prestamo.getPreId());
		 mxpAnt = mxpDAO.findMovimientoFecha(prestamo.getPreId(), movimiento);
		
		if(mxpAnt==null){
			mxpAnt = new CtaMxpMovimientoPrestamo();
			mxpAnt.setMxpSaldoActual(0.00);
			System.out.println("El movimiento anterior es nulo");
			iYm.setMora(prestamo.getPreMoraMov());
			iYm.setPendiente(prestamo.getPrePendMov());
			iYm.setAcumulado(0.0);
			//prestamo.setPrePendMov(prestamo.getPreSaldoActualT() - prestamo.getPreLiquidoARecibir());
			//prestamo.setPreSaldoActualT(prestamo.getPreLiquidoARecibir());
		}
		prestamo.setPreSaldoActualT(mxpAnt.getMxpSaldo());
		CtaEtrEmpresaTrabajo empresa = asociado.getCtaDptDepartamentoTrabajo().getCtaEtrEmpresaTrabajo();
		iYm = iYm.actualizaInteres(mxpAnt, prestamo, cas, movimiento,request);
		Double totalInteres = 0.00;
		/*
		mxp.setCtaPrePrestamo(prestamo);
		mxp.setCtaTxaTransaccionxcuentaAsociado(txa);
		mxp.setMxpFecha(movimiento);
		mxp.setAudFechaCreacion(new Date());
		mxp.setAudFechaModificacion(new Date());
		mxp.setAudUsuarioCreacion(USUARIO);
		mxp.setAudUsuarioModificacion(USUARIO);
		mxp.setMxpMora(0.00);
		
		*/

		double montoActualizable = monto;	
		if (iYm.getPendiente() <= montoActualizable) {
			montoActualizable = montoActualizable - iYm.getPendiente();
			totalInteres += iYm.getPendiente();

			mxp.setMxpInteresPendiente(iYm.getPendiente());
			prestamo.setPrePendMov(0.0);
			if (iYm.getAcumulado() <= montoActualizable) {
				montoActualizable = montoActualizable - iYm.getAcumulado();
				totalInteres += iYm.getAcumulado();

				mxp.setMxpInteresAcumulado(iYm.getAcumulado());
				// Si acumulado es menor que monto restante no mando nada a
				// prestamo
				if (montoActualizable == 0.0) {
					mxp.setMxpSaldoActual(mxpAnt.getMxpSaldoActual());
					mxp.setMxpSaldo(mxpAnt.getMxpSaldo());
					// Lo mismo que en el anterior pues se paga el acumulado
				} else {
					if (montoActualizable < mxpAnt.getMxpSaldo()) {
						mxp.setMxpSaldoActual(mxpAnt.getMxpSaldoActual()
								+ montoActualizable);
						mxp.setMxpSaldo(mxpAnt.getMxpSaldo()
								- montoActualizable);
						// Si tipo prestamo es NULL, es un Credito y se
						// maneja de la siguiente forma
						if (prestamo.getPreCredito() != null
								&& (prestamo.getPreCredito().equals("O") || prestamo
										.getPreCredito().equals("F"))) {
							OrdOcoOrdenDeCompraDAO compraDAO = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
							List ordeneDebe = compraDAO
									.findTodasLasQueDebe(cas
											.getCtaAscAsociado().getAscId());
							Double montoOrdenes = 0.0;// prestamo.getPreMontoSolicitado()
														// -
														// prestamo.getPreSaldoActualT();
							montoOrdenes = pagarOrdenes(ordeneDebe,
									montoActualizable,request);
						}
						prestamo
								.setPreSaldoActualT(prestamo
										.getPreSaldoActualT()
										- montoActualizable/*
															 * prestamo.getPreMontoSolicitado() -
															 * mxp.getMxpSaldoActual()
															 */);
					} else {// liquidamos el prestamo
						if (montoActualizable >= mxpAnt.getMxpSaldo()) {
							ArrayList fiadores = new ArrayList();
							fiadores.addAll(prestamo
									.getCtaFxpFiadorPrestamos());
							CtaFxpFiadorPrestamoDAO fiadorPrestamoDAO = new CtaFxpFiadorPrestamoDAO(getSessionHibernate(request));
							Transaction tx1 = fiadorPrestamoDAO
									.getSession().beginTransaction();
							for (Iterator iterator2 = fiadores.iterator(); iterator2
									.hasNext();) {
								CtaFxpFiadorPrestamo fiador = (CtaFxpFiadorPrestamo) iterator2
										.next();
								fiador.setFxpEstado("S");
								fiadorPrestamoDAO.merge(fiador);
							}
							tx1.commit();
							if (prestamo.getPreCredito() == null
									|| (!prestamo.getPreCredito().equals(
											"O") && !prestamo
											.getPreCredito().equals("F"))) {
								Transaction tx2 = casDAO.getSession()
										.beginTransaction();
								cas.setCasFechaCierre(new Date());
								CtrEstEstadoDAO estadoDAO = new CtrEstEstadoDAO(getSessionHibernate(request));
								cas.setCtrEstEstado(estadoDAO.findById(17));
								casDAO.merge(cas);
								tx2.commit();
							}

							// Si tipo prestamo es NULL, es un Credito y se
							// maneja de la siguiente forma
							if (prestamo.getPreCredito() != null
									&& (prestamo.getPreCredito()
											.equals("O") || prestamo
											.getPreCredito().equals("F"))) {
								OrdOcoOrdenDeCompraDAO compraDAO = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
								List ordeneDebe = compraDAO
										.findTodasLasQueDebe(cas
												.getCtaAscAsociado()
												.getAscId());
								Double montoOrdenes = 0.0;// prestamo.getPreMontoSolicitado()
															// -
															// prestamo.getPreSaldoActualT();
								montoOrdenes = pagarOrdenes(ordeneDebe,
										montoActualizable,request);
								prestamo.setPreCuota(0.0);
							}
							// mxp.setMxpSaldoActual((double)
							// prestamo.getPreMontoSolicitado());
							mxp.setMxpSaldoActual(mxpAnt
									.getMxpSaldoActual()
									+ mxpAnt.getMxpSaldo());
							mxp.setMxpSaldo(0.0);
							prestamo.setPreSaldoActualT(0.00);
						}
					}
				}
			} else {
				prestamo.setPrePendMov(iYm.getAcumulado()
						- montoActualizable);
				totalInteres += (iYm.getAcumulado() - montoActualizable);
				mxp.setMxpSaldo(mxpAnt.getMxpSaldo());
				mxp.setMxpInteresAcumulado(montoActualizable);
				mxp.setMxpSaldoActual(mxpAnt.getMxpSaldoActual());
			}
		} else {
			totalInteres += (iYm.getPendiente() - montoActualizable);

			prestamo.setPrePendMov((iYm.getPendiente() - montoActualizable)
					+ iYm.getAcumulado());
			mxp.setMxpInteresPendiente(montoActualizable);
			mxp.setMxpInteresAcumulado(0.0);
			mxp.setMxpSaldo(mxpAnt.getMxpSaldo());
			mxp.setMxpSaldoActual(mxpAnt.getMxpSaldoActual());
		}
		enviarTransaccionAContabilidad(txa, USUARIO, "C", 
				cas, (mxp.getMxpInteresAcumulado() + mxp.getMxpInteresPendiente()
						+ mxp.getMxpMora()), null,1,request);
		// actualizaci�n de saldos:
			List movimientosPost = mxpDAO.findMovimientosPosteriores(prestamo
					.getPreId(), movimiento);
			if (movimientosPost != null) {
				Iterator movIterator = movimientosPost.iterator();
				System.out.println("movimientosPost.size(): "
						+ movimientosPost.size());
				System.out.println("preId: " + prestamo.getPreId());
				if (movimientosPost.size() > 0) {
					if (cas.getCtrEstEstado().getEstId() == 17) {// si el
																	// prestamo se
																	// habia pagado,
																	// lo vuelvo a
																	// activar pq
																	// faltan
																	// movimientos
						CtrEstEstadoDAO estadoDAO = new CtrEstEstadoDAO(getSessionHibernate(request));
						cas.setCtrEstEstado(estadoDAO.findById(13));
						casDAO.merge(cas);
					}

				}
				while (movIterator.hasNext()) {
					CtaMxpMovimientoPrestamo mov = (CtaMxpMovimientoPrestamo) movIterator
							.next();
					Date fechaMov = mov.getMxpFecha();
					mxpAnt = mxpDAO.findMovimientoFecha(prestamo.getPreId(),
							fechaMov);
					Double montoTranMov = mov.getCtaTxaTransaccionxcuentaAsociado()
							.getTxaMonto();

					// if(mxpAnt.getMxpSaldo() <= mov.getMxpSaldo()){
					if (mov.getCtaTxaTransaccionxcuentaAsociado()
							.getCtaTtrTipoTransaccion().getTtrUso()
							.equalsIgnoreCase("A")) {
						// movimiento de abono
						iYm = iYm.actualizaInteres(mxpAnt, prestamo, cas, fechaMov,request);
						mov.setAudUsuarioModificacion(USUARIO);
						mov.setMxpMora(0.00);
						mov.setMxpInteresAcumulado(0.0);
						mov.setMxpInteresPendiente(0.0);
						// Forma normal
						if (iYm.getPendiente() <= montoTranMov) {
							prestamo.setPreMoraMov(0.0);
							mov.setMxpInteresPendiente(iYm.getPendiente());
							montoTranMov = montoTranMov - iYm.getPendiente();
							if (iYm.getAcumulado() <= montoTranMov) {
								prestamo.setPrePendMov(0.0);
								mov.setMxpInteresAcumulado(iYm.getAcumulado());
								montoTranMov = montoTranMov - iYm.getAcumulado();
								if (montoTranMov == 0.0) {
									// mov.setMxpSaldoActual(prestamo.getPreMontoSolicitado()
									// - prestamo.getPreSaldoActualT());
									mov.setMxpSaldoActual(mxpAnt
											.getMxpSaldoActual());
									mov.setMxpSaldo(mxpAnt.getMxpSaldo());
								} else {
									if (montoTranMov < prestamo
											.getPreSaldoActualT()) {
										mov.setMxpSaldoActual(mxpAnt
												.getMxpSaldoActual()/*
																	 * (prestamo.getPreMontoSolicitado() -
																	 * prestamo.getPreSaldoActualT())
																	 */
												+ montoTranMov);
										mov.setMxpSaldo(mxpAnt.getMxpSaldo()
												- montoTranMov);
										// Si tipo prestamo es NULL, es un Credito y
										// se maneja de la siguiente forma
										if (prestamo.getPreCredito() != null
												&& (prestamo.getPreCredito()
														.equals("O") || prestamo
														.getPreCredito()
														.equals("F"))) {
											OrdOcoOrdenDeCompraDAO compraDAO = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
											List ordeneDebe = compraDAO
													.findTodasLasQueDebe(cas
															.getCtaAscAsociado()
															.getAscId());
											Double montoOrdenes = 0.0;// prestamo.getPreMontoSolicitado()
																		// -
																		// prestamo.getPreSaldoActualT();
											montoOrdenes = pagarOrdenes(ordeneDebe,
													montoTranMov,request);
										}
										prestamo
												.setPreSaldoActualT(prestamo
														.getPreSaldoActualT()
														- montoTranMov/*
																		 * prestamo.getPreMontoSolicitado() -
																		 * mov.getMxpSaldoActual()
																		 */);
									} else {// liquidamos el prestamo
										if (montoTranMov >= prestamo
												.getPreSaldoActualT()) {
											ArrayList fiadores = new ArrayList();
											fiadores.addAll(prestamo
													.getCtaFxpFiadorPrestamos());
											CtaFxpFiadorPrestamoDAO fiadorPrestamoDAO = new CtaFxpFiadorPrestamoDAO(getSessionHibernate(request));
											Transaction tx1 = fiadorPrestamoDAO
													.getSession()
													.beginTransaction();
											for (Iterator iterator2 = fiadores
													.iterator(); iterator2
													.hasNext();) {
												CtaFxpFiadorPrestamo fiador = (CtaFxpFiadorPrestamo) iterator2
														.next();
												fiador.setFxpEstado("S");
												fiadorPrestamoDAO.merge(fiador);
											}
											tx1.commit();
											if (prestamo.getPreCredito() == null
													|| (!prestamo.getPreCredito()
															.equals("O") && !prestamo
															.getPreCredito()
															.equals("F"))) {
												Transaction tx2 = casDAO
														.getSession()
														.beginTransaction();
												cas.setCasFechaCierre(new Date());
												CtrEstEstadoDAO estadoDAO = new CtrEstEstadoDAO(getSessionHibernate(request));
												cas.setCtrEstEstado(estadoDAO
														.findById(17));
												casDAO.merge(cas);
												tx2.commit();
											}

											// Si tipo prestamo es NULL, es un
											// Credito y se maneja de la siguiente
											// forma
											if (prestamo.getPreCredito() != null
													&& (prestamo.getPreCredito()
															.equals("O") || prestamo
															.getPreCredito()
															.equals("F"))) {
												OrdOcoOrdenDeCompraDAO compraDAO = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
												List ordeneDebe = compraDAO
														.findTodasLasQueDebe(cas
																.getCtaAscAsociado()
																.getAscId());
												Double montoOrdenes = 0.0;// prestamo.getPreMontoSolicitado()
																			// -
																			// prestamo.getPreSaldoActualT();
												montoOrdenes = pagarOrdenes(
														ordeneDebe, montoTranMov,request);
												prestamo.setPreCuota(0.0);
											}
											mov.setMxpSaldoActual(mxpAnt
													.getMxpSaldoActual()
													+ montoTranMov);
											mov.setMxpSaldo(mxpAnt.getMxpSaldo()
													- montoTranMov);
											prestamo.setPreSaldoActualT(mxpAnt
													.getMxpSaldo()
													- montoTranMov);
											if (prestamo.getPreSaldoActualT() < 0) {
												Transaction tx2 = casDAO
														.getSession()
														.beginTransaction();
												CtrEstEstadoDAO estadoDAO = new CtrEstEstadoDAO(getSessionHibernate(request));
												cas.setCtrEstEstado(estadoDAO
														.findById(13));
												casDAO.merge(cas);
												tx2.commit();
											}
										}
									}
								}
							} else {
								prestamo.setPrePendMov(iYm.getAcumulado()
										- montoTranMov);
								mov.setMxpInteresAcumulado(montoTranMov);
								// mov.setMxpSaldoActual(prestamo.getPreMontoSolicitado()
								// - prestamo.getPreSaldoActualT());
								mov.setMxpSaldoActual(mxpAnt.getMxpSaldoActual());
								mov.setMxpSaldo(mxpAnt.getMxpSaldo());
							}
						} else {
							prestamo
									.setPrePendMov((iYm.getPendiente() - montoTranMov)
											+ iYm.getAcumulado());
							mov.setMxpInteresPendiente(montoTranMov);
							mov.setMxpInteresAcumulado(0.0);
							// mov.setMxpSaldoActual(prestamo.getPreMontoSolicitado()
							// - prestamo.getPreSaldoActualT());
							mov.setMxpSaldoActual(mxpAnt.getMxpSaldoActual());
							mov.setMxpSaldo(mxpAnt.getMxpSaldo());
						}

					} else {
						if (mov.getCtaTxaTransaccionxcuentaAsociado()
								.getCtaTtrTipoTransaccion().getTtrUso().equals("C")) {

							// movimiento de cargo
							mov.setMxpSaldo(mxpAnt.getMxpSaldo() + montoTranMov);
							prestamo.setPreSaldoActualT(prestamo
									.getPreSaldoActualT()
									+ montoTranMov);

							// si hacemos positivo el saldo del prestamo lo
							// colocamos en activo...
							if (prestamo.getPreSaldoActualT() > 0) {
								Transaction tx2 = casDAO.getSession()
										.beginTransaction();
								CtrEstEstadoDAO estadoDAO = new CtrEstEstadoDAO(getSessionHibernate(request));
								cas.setCtrEstEstado(estadoDAO.findById(13));
								casDAO.merge(cas);
								tx2.commit();
							}
						}
					}
					mov.setAudFechaModificacion(new Date());

					mxpDAO.merge(mov);
					System.out
							.println("TTR USO: "
									+ mov.getCtaTxaTransaccionxcuentaAsociado()
											.getCtaTtrTipoTransaccion()
											.getTtrDescripcion());
					System.out.println("TTR USO: "
							+ mov.getCtaTxaTransaccionxcuentaAsociado()
									.getCtaTtrTipoTransaccion().getTtrId());
					prestamoDAO.merge(prestamo);
				}
			}
			tx.commit();
		
		
/*
 * 		//Forma normal
			if(iYm.getPendiente() <= montoActualizable){
				prestamo.setPreMoraMov(0.0);
				mxp.setMxpInteresPendiente(iYm.getPendiente());
				montoActualizable = montoActualizable - iYm.getPendiente();
				if(iYm.getAcumulado() <= montoActualizable){
					prestamo.setPrePendMov(0.0);
					mxp.setMxpInteresAcumulado(iYm.getAcumulado());
					montoActualizable = montoActualizable - iYm.getAcumulado();
					if(montoActualizable == 0.0){
						//mxp.setMxpSaldoActual(prestamo.getPreMontoSolicitado() - prestamo.getPreSaldoActualT());
						mxp.setMxpSaldoActual(mxpAnt.getMxpSaldoActual());
						mxp.setMxpSaldo(mxpAnt.getMxpSaldo());
					}else{
						if(montoActualizable < prestamo.getPreSaldoActualT()){
							mxp.setMxpSaldoActual(mxpAnt.getMxpSaldoActual()(prestamo.getPreMontoSolicitado() - prestamo.getPreSaldoActualT()) + montoActualizable);
							mxp.setMxpSaldo(mxpAnt.getMxpSaldo() - montoActualizable);
							//Si tipo prestamo es NULL, es un Credito y se maneja de la siguiente forma
							if(prestamo.getPreCredito() != null && (prestamo.getPreCredito().equals("O") || prestamo.getPreCredito().equals("F"))){
								OrdOcoOrdenDeCompraDAO compraDAO = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
								List ordeneDebe = compraDAO.findTodasLasQueDebe(cas.getCtaAscAsociado().getAscId());
								Double montoOrdenes = 0.0;//prestamo.getPreMontoSolicitado() - prestamo.getPreSaldoActualT();
								montoOrdenes = pagarOrdenes(ordeneDebe,montoActualizable);
							}
							prestamo.setPreSaldoActualT(prestamo.getPreSaldoActualT()-montoActualizableprestamo.getPreMontoSolicitado() - mxp.getMxpSaldoActual());
						}else{//liquidamos el prestamo
							if(montoActualizable >= prestamo.getPreSaldoActualT()){
								ArrayList fiadores = new ArrayList();
								fiadores.addAll(prestamo.getCtaFxpFiadorPrestamos());
								CtaFxpFiadorPrestamoDAO fiadorPrestamoDAO = new CtaFxpFiadorPrestamoDAO(getSessionHibernate(request));											
								Transaction tx1 = fiadorPrestamoDAO.getSession().beginTransaction();
								for (Iterator iterator2 = fiadores.iterator(); iterator2.hasNext();) {
									CtaFxpFiadorPrestamo fiador = (CtaFxpFiadorPrestamo) iterator2.next();
									fiador.setFxpEstado("S");
									fiadorPrestamoDAO.merge(fiador);												
								}
								tx1.commit();											
								if(prestamo.getPreCredito() == null || (!prestamo.getPreCredito().equals("O") && !prestamo.getPreCredito().equals("F"))){
									Transaction tx2 = casDAO.getSession().beginTransaction();
									cas.setCasFechaCierre(new Date());
									CtrEstEstadoDAO estadoDAO = new CtrEstEstadoDAO(getSessionHibernate(request));
									cas.setCtrEstEstado(estadoDAO.findById(17));
									casDAO.merge(cas);												
									tx2.commit();
								}
								
								//Si tipo prestamo es NULL, es un Credito y se maneja de la siguiente forma
								if(prestamo.getPreCredito() != null && (prestamo.getPreCredito().equals("O") || prestamo.getPreCredito().equals("F"))){
									OrdOcoOrdenDeCompraDAO compraDAO = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
									List ordeneDebe = compraDAO.findTodasLasQueDebe(cas.getCtaAscAsociado().getAscId());
									Double montoOrdenes = 0.0;//prestamo.getPreMontoSolicitado() - prestamo.getPreSaldoActualT();
									montoOrdenes = pagarOrdenes(ordeneDebe,montoActualizable);
									prestamo.setPreCuota(0.0);
								}
								if(montoActualizable > prestamo.getPreSaldoActualT()){
									siEsMayor(montoActualizable, prestamo, cas, mxpAnt,comprobante, txa.getTxaFecha());
								}
								//mxp.setMxpSaldoActual((double) prestamo.getPreMontoSolicitado());
								mxp.setMxpSaldoActual(mxpAnt.getMxpSaldoActual()+mxpAnt.getMxpSaldo());
								prestamo.setPreSaldoActualT(0.00);
							}
						}
					}
				}else{
					prestamo.setPrePendMov(iYm.getAcumulado() - montoActualizable);
					mxp.setMxpInteresAcumulado(montoActualizable);
					//mxp.setMxpSaldoActual(prestamo.getPreMontoSolicitado() - prestamo.getPreSaldoActualT());
					mxp.setMxpSaldoActual(mxpAnt.getMxpSaldoActual());
				}
			}else{
				prestamo.setPrePendMov((iYm.getPendiente()-montoActualizable) + iYm.getAcumulado());
				mxp.setMxpInteresPendiente(montoActualizable);
				mxp.setMxpInteresAcumulado(0.0);
				//mxp.setMxpSaldoActual(prestamo.getPreMontoSolicitado() - prestamo.getPreSaldoActualT());
				mxp.setMxpSaldoActual(mxpAnt.getMxpSaldoActual());
			}

		mxp.setMxpSaldo(prestamo.getPreSaldoActualT());
		mxpDAO.save(mxp);
		//prestamo.setPreSaldoActualT(mxp.getMxpSaldoActual());
		prestamoDAO.merge(prestamo);
		Transaction tx1 = prestamoDAO.getSession().beginTransaction();
		tx1.commit();*/
	
		enviarTransaccionAContabilidad(txa, USUARIO, "C", 
				cas, (mxp.getMxpInteresAcumulado() + mxp.getMxpInteresPendiente()
						+ mxp.getMxpMora()), null,1,request);
		
		prestamoDAO.merge(prestamo);
		mxpDAO.save(mxp);
		tx.commit();
	}
	
	private void siEsMayor(double montoActualizable, CtaPrePrestamo prestamo,
			CtaCasCuentaAsociado cas, CtaMxpMovimientoPrestamo mxpAnt,
			Long comprobante, Date fechaTrans,HttpServletRequest request) {
		CtaCasCuentaAsociadoDAO casDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
		CtaTtrTipoTransaccionDAO tipoTransaccionDAO = new CtaTtrTipoTransaccionDAO(getSessionHibernate(request));
		Transaction tx = casDAO.getSession().beginTransaction();
		CtaTxaTransaccionxcuentaAsociadoDAO txaDAO = new CtaTxaTransaccionxcuentaAsociadoDAO(getSessionHibernate(request));
		
		montoActualizable = montoActualizable -(prestamo.getPreMontoSolicitado() - mxpAnt.getMxpSaldoActual());
		CtaCasCuentaAsociado principal = casDAO.findPrincipal(cas.getCtaAscAsociado().getAscId());
		CtaCahCuentaAhorroDAO ahorroDAO = new CtaCahCuentaAhorroDAO(getSessionHibernate(request));
		CtaCahCuentaAhorro ahorro = ahorroDAO.findById(principal.getCtaCahCuentaAhorro().getCahId());
		ahorro.setCahSaldoActual(ahorro.getCahSaldoActual() + montoActualizable);
		ahorroDAO.merge(ahorro);
		tx.commit();
		
		//Guardo transaccion de cuenta Principal
		CtaTxaTransaccionxcuentaAsociado txaPrincipal = new CtaTxaTransaccionxcuentaAsociado();
		txaPrincipal.setCtaCasCuentaAsociado(principal);
		txaPrincipal.setCtaTtrTipoTransaccion(tipoTransaccionDAO.findById(11));
		txaPrincipal.setTxaComprobante(comprobante);
		txaPrincipal.setTxaFecha(fechaTrans);
		txaPrincipal.setTxaMonto(montoActualizable);
		txaPrincipal.setCtaNotNotas(null);
		txaPrincipal.setTxaNota("Sobrante de la transaccion");
		txaPrincipal.setAudFechaCreacion(new Date());
		txaPrincipal.setAudFechaModificacion(new Date());
		txaPrincipal.setAudUsuarioCreacion(USUARIO);
		txaPrincipal.setAudUsuarioModificacion(USUARIO);
		txaDAO.save(txaPrincipal);
		tx.commit();
		
		//Movimiento de ahorro cuenta Principal
		CtaMxaMovimientoAhorroDAO mxaDAO = new CtaMxaMovimientoAhorroDAO(getSessionHibernate(request));
		CtaMxaMovimientoAhorro movimientoPrincipal = new CtaMxaMovimientoAhorro();
		movimientoPrincipal.setCtaCahCuentaAhorro(ahorro);
		movimientoPrincipal.setCtaTxaTransaccionxcuentaAsociado(txaPrincipal);
		movimientoPrincipal.setMxaFecha(fechaTrans);
		movimientoPrincipal.setMxaInteresTran(0.0);
		movimientoPrincipal.setMxaMonto(montoActualizable);
		movimientoPrincipal.setMxaSaldo(ahorro.getCahSaldoActual());
		movimientoPrincipal.setAudFechaCreacion(new Date());
		movimientoPrincipal.setAudFechaModificacion(new Date());
		movimientoPrincipal.setAudUsuarioCreacion(USUARIO);
		movimientoPrincipal.setAudUsuarioModificacion(USUARIO);
		mxaDAO.save(movimientoPrincipal);
		tx.commit();
		
		enviarTransaccionAContabilidad(txaPrincipal, USUARIO, "B", principal, 0.0, null, 1,request);
	}
	
	private Double pagarOrdenes(List ordeneDebe, double monto,HttpServletRequest request) {
		Double montoActualizable = monto;
		OrdOcoOrdenDeCompraDAO compraDAO = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
		Transaction tx = compraDAO.getSession().beginTransaction();
		for (Iterator iterator = ordeneDebe.iterator(); iterator.hasNext();) {
			OrdOcoOrdenDeCompra compra = (OrdOcoOrdenDeCompra) iterator.next();
			if(montoActualizable == 0.00) return 0.00;
			
			if(montoActualizable >= compra.getOcoSaldo()){
				compra.setOcoSaldo(0.00);
				compra.setOcoPagado(compra.getOcoPagado()+compra.getOcoSaldo());
				montoActualizable-=compra.getOcoSaldo();
				
				if(compra.getOcoEstado().equals("C") || compra.getOcoEstado().equals("R")){
					compra.setOcoEstado("P");
					compra.setAudFechaModificacion(new Date());
				}
				if(compra.getOcoEstado().equals("F")){
					compra.setOcoEstado("G");
					compra.setAudFechaModificacion(new Date());
				}
				if(compra.getOcoEstado().equals("D")){
					compra.setOcoEstado("S");
					compra.setAudFechaModificacion(new Date());
				}				
			}else{
				compra.setOcoSaldo(compra.getOcoSaldo()-montoActualizable);
				compra.setOcoPagado(compra.getOcoPagado()+montoActualizable);
				montoActualizable=0.00;
			}
			compraDAO.merge(compra);
			tx.commit();
			compraDAO.getSession().flush();
			compraDAO.getSession().clear();
		}
		return montoActualizable;
	}

	private void transAhorros(CtaCasCuentaAsociado cas, Double monto,
			CtaTxaTransaccionxcuentaAsociado txa, String tipo,
			HttpServletRequest request) {
		
		CtaCahCuentaAhorroDAO ahorroDAO = new CtaCahCuentaAhorroDAO(getSessionHibernate(request));
		Transaction tx = ahorroDAO.getSession().beginTransaction();
		CtaCahCuentaAhorro ahorro = ahorroDAO.findById(cas.getCtaCahCuentaAhorro().getCahId());
		CtaTahTipoAhorroDAO tipoAhorroDAO = new CtaTahTipoAhorroDAO(getSessionHibernate(request));
		CtaTinTasaInteresDAO tasaInteresDAO = new CtaTinTasaInteresDAO(getSessionHibernate(request));
		CtaMxaMovimientoAhorroDAO movimientoAhorroDAO = new CtaMxaMovimientoAhorroDAO(getSessionHibernate(request));
		double tasaMinima = 0.0;
		if(ahorro.getCtaTahTipoAhorro() != null){
			CtaTahTipoAhorro tipoAhorro = tipoAhorroDAO.findById(ahorro.getCtaTahTipoAhorro().getTahId());
			CtaTinTasaInteres tasaInteres = tasaInteresDAO.findById(tipoAhorro.getCtaTinTasaInteres().getTinId());
			tasaMinima = tasaInteres.getTinTasa();
		}else{
			tasaMinima = tasaInteresDAO.minimaTasadeInteres();
		}
		CtrParParametrosDAO parametrosDAO = new CtrParParametrosDAO(getSessionHibernate(request));
		Date ultimoMovimiento = (Date) movimientoAhorroDAO.findFechaUltimoMovimientoAhorro(ahorro.getCahId());
		GregorianCalendar g1 = new  GregorianCalendar();
		if(ultimoMovimiento == null){
			ultimoMovimiento = cas.getCasFechaApertura();
		}
		g1.setTime(ultimoMovimiento);
		int diasUltimaTrans = 0;
		ElapsedTime elapsedTime = new ElapsedTime();
		GregorianCalendar g2 = new GregorianCalendar();
		Date fechaHoy = txa.getTxaFecha();
		g2.setTime(fechaHoy);
		SimpleDateFormat sdf = new SimpleDateFormat("MM");
		SimpleDateFormat sdf2 = new SimpleDateFormat("yyyy-MM-dd");
		String um = sdf.format(ultimoMovimiento);
		String fh = sdf.format(fechaHoy);
		
		g1 = ElapsedTime.dTGC(new Date());
		g1.set(Calendar.MILLISECOND, 0);
		g1.set(Calendar.SECOND, 0);
		g1.set(Calendar.MINUTE, 0);
		g1.set(Calendar.HOUR_OF_DAY, 0);
		
		g2.set(Calendar.MILLISECOND, 0);
		g2.set(Calendar.SECOND, 0);
		g2.set(Calendar.MINUTE, 0);
		g2.set(Calendar.HOUR_OF_DAY, 0);
		
		if(um.equals(fh)){
			diasUltimaTrans = elapsedTime.getDays(g1, g2) - 1;
			if(diasUltimaTrans >0){
				double nuevoInteres = ((ahorro.getCahSaldoActual() * (tasaMinima/100))* diasUltimaTrans) /parametrosDAO.findById("ANHO_CALENDARIO").getParValorNumber();
				ahorro.setCahInteresAcumulado(ahorro.getCahInteresAcumulado() + nuevoInteres);
			}
		}
		CtaTtrTipoTransaccionDAO ttrDAO = new CtaTtrTipoTransaccionDAO(getSessionHibernate(request));
		
		//actualizacion de saldos :)
		CtaMxaMovimientoAhorro movimientoAnt = new CtaMxaMovimientoAhorro();
		
		movimientoAnt = movimientoAhorroDAO.findMovimientoAnterior(ahorro.getCahId(), sdf2.format(fechaHoy));		
		
		if(tipo.equals("A")){
			ahorro.setCahSaldoActual(movimientoAnt.getMxaSaldo() + monto);
		}else{
			ahorro.setCahSaldoActual(movimientoAnt.getMxaSaldo() - monto);
		}
		
		ahorroDAO.merge(ahorro);
		tx.commit();
		
		CtaMxaMovimientoAhorro movimientoAhorro = new CtaMxaMovimientoAhorro();
		movimientoAhorro.setCtaCahCuentaAhorro(ahorro);
		movimientoAhorro.setCtaTxaTransaccionxcuentaAsociado(txa);
		movimientoAhorro.setMxaFecha(txa.getTxaFecha());
		movimientoAhorro.setMxaMonto(monto);
		movimientoAhorro.setMxaSaldo(ahorro.getCahSaldoActual());
		movimientoAhorro.setAudFechaCreacion(new Date());
		movimientoAhorro.setAudFechaModificacion(new Date());
		movimientoAhorro.setAudUsuarioCreacion(USUARIO);
		movimientoAhorro.setAudUsuarioModificacion(USUARIO);
		movimientoAhorroDAO.save(movimientoAhorro);
		tx.commit();
		
		request.getSession().setAttribute("mxaId", movimientoAhorro.getMxaId());
		
		enviarTransaccionAContabilidad(txa, USUARIO, "B", cas, 0.0, null,1,request);
		
		List l = movimientoAhorroDAO.findMovimientosSiguientes(ahorro
				.getCahId(), sdf.format(fechaHoy));
		Iterator i = l.iterator();
		CtaMxaMovimientoAhorro mxaSiguiente = new CtaMxaMovimientoAhorro();
		Double saldoAnterior = movimientoAnt.getMxaSaldo() + monto;
		while (i.hasNext()) {
			mxaSiguiente = (CtaMxaMovimientoAhorro) i.next();
			mxaSiguiente.setMxaSaldo(saldoAnterior
					+ mxaSiguiente.getMxaMonto());
			movimientoAhorroDAO.merge(mxaSiguiente);
			saldoAnterior = saldoAnterior + mxaSiguiente.getMxaMonto();
		}
		tx.commit();
	}

	private void transAportacion(CtaCasCuentaAsociado cas, Double monto, 
			CtaTxaTransaccionxcuentaAsociado txa, String tipo , Date fecha,HttpServletRequest request) {
		CtaCahCuentaAhorroDAO aportacionDAO = new CtaCahCuentaAhorroDAO(getSessionHibernate(request));
		Transaction tx = aportacionDAO.getSession().beginTransaction();
		CtaCahCuentaAhorro aportacion = aportacionDAO.findById(cas.getCtaCahCuentaAhorro().getCahId());
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		CtaMxaMovimientoAhorroDAO movimientoAhorroDAO = new CtaMxaMovimientoAhorroDAO(getSessionHibernate(request));
		CtaMxaMovimientoAhorro movimientoAhorro = new CtaMxaMovimientoAhorro();
		CtaMxaMovimientoAhorro movimientoAnt = new CtaMxaMovimientoAhorro();
		
		movimientoAnt = movimientoAhorroDAO.findMovimientoAnterior(aportacion.getCahId(), sdf.format(fecha));		
		if(tipo.equals("A")){
			aportacion.setCahSaldoActual(movimientoAnt.getMxaSaldo() + monto);
		}else{
			aportacion.setCahSaldoActual(movimientoAnt.getMxaSaldo() - monto);
		}
		aportacionDAO.merge(aportacion);
		tx.commit();
		
		
		movimientoAhorro.setCtaCahCuentaAhorro(aportacion);
		movimientoAhorro.setCtaTxaTransaccionxcuentaAsociado(txa);
		movimientoAhorro.setMxaFecha(txa.getTxaFecha());
		movimientoAhorro.setMxaMonto(monto);
		movimientoAhorro.setMxaSaldo(aportacion.getCahSaldoActual());
		movimientoAhorro.setAudFechaCreacion(new Date());
		movimientoAhorro.setAudFechaModificacion(new Date());
		movimientoAhorro.setAudUsuarioCreacion(USUARIO);
		movimientoAhorro.setAudUsuarioModificacion(USUARIO);
		movimientoAhorroDAO.save(movimientoAhorro);
		tx.commit();
		
		enviarTransaccionAContabilidad(txa, USUARIO, "A", cas, 0.0, null,1,request);
		List l = movimientoAhorroDAO.findMovimientosSiguientes(aportacion
				.getCahId(), sdf.format(fecha));
		Iterator i = l.iterator();
		CtaMxaMovimientoAhorro mxaSiguiente = new CtaMxaMovimientoAhorro();
		Double saldoAnterior = movimientoAnt.getMxaSaldo() + monto;
		while (i.hasNext()) {
			mxaSiguiente = (CtaMxaMovimientoAhorro) i.next();
			mxaSiguiente.setMxaSaldo(saldoAnterior
					+ mxaSiguiente.getMxaMonto());
			movimientoAhorroDAO.merge(mxaSiguiente);
			saldoAnterior = saldoAnterior + mxaSiguiente.getMxaMonto();
		}
		tx.commit();
	}

	public void mensajes(String msg,TransaccionFechaForm form,
			HttpServletRequest request, HttpServletResponse response){
		ActionErrors errors = new ActionErrors();
		errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(msg));
        saveMessages(request, errors);
	}
	
	public ActionForward htmlCampoDisponibilidad(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
//		CorreccionCapitalForm capitalForm = (CorreccionCapitalForm)form;
		TransaccionFechaForm tfForm = (TransaccionFechaForm)form;
		IntereseYMora iYm = new IntereseYMora();
		String texto = "";
		double disponible = 0.0;
		HtmlBuilder htmlBuilder = new HtmlBuilder();
		CtaCasCuentaAsociadoDAO casDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
		CtaCasCuentaAsociado cas = casDAO.findById(Long.valueOf(tfForm.getCuentaDestino()));
		if(tfForm.getDestino() == 2){
			disponible = cas.getCtaCahCuentaAhorro().getCahSaldoActual();
		}
		if(tfForm.getDestino() == 3){
			CtaMxpMovimientoPrestamoDAO mxpDao = new CtaMxpMovimientoPrestamoDAO(getSessionHibernate(request));
			if(mxpDao.findUltimoMovimiento(cas.getCtaPrePrestamo().getPreId()) != null &&
					mxpDao.findUltimoMovimiento(cas.getCtaPrePrestamo().getPreId()).getMxpId() != null){
				CtaMxpMovimientoPrestamo mxp = mxpDao.findUltimoMovimiento(cas.getCtaPrePrestamo().getPreId());
				iYm = iYm.actualizaInteres(mxp, cas.getCtaPrePrestamo(), cas, new Date(),request);
				disponible = cas.getCtaPrePrestamo().getPreSaldoActualT()+iYm.getAcumulado()+iYm.getPendiente();
				
			}else{
				disponible = cas.getCtaPrePrestamo().getPreMontoSolicitado() - cas.getCtaPrePrestamo().getPreSaldoActualT();
			}
		}
		if(tfForm.getDestino() == 4){
			disponible = cas.getCtaSegSeguros().getSegSaldoActual();
		}
		htmlBuilder.td(0).close();//.div().id("cantidadDisponible").close();
		htmlBuilder.input().type("text").readonly().id("cantDisp").size("10").value(Format.formatDinero(disponible)).end();
		request.getSession().setAttribute("cantDisp", disponible);
		htmlBuilder.tdEnd();//divEnd().tdEnd();
		texto = htmlBuilder.toString();
		try{
			response.getWriter().write(texto);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (RuntimeException e) {
			log.error("Error runtime", e);
		} catch (IOException e) {
			log.error(e);
		}
		return null;
	}
	
	private void enviarTransaccionAContabilidad(CtaTxaTransaccionxcuentaAsociado txa,
			String nombreUsuario, String tipoCuenta, CtaCasCuentaAsociado cas, 
			Double interes, CtaChkChequePrestamo chequePrestamo, int i,HttpServletRequest request) {

		
		String parametros = "1;";//Seteamos modulo al que pertenece -> CUENTA CORRIENTE
		Integer tc = 0;
		Integer clasificacion = 0;
		Integer relacionInteres = 0;
		
		if(tipoCuenta.equals("A")){//Aportaciones
			tc = 1;
		}
		if(tipoCuenta.equals("B")){//Ahorros
			tc = 2;
			clasificacion = cas.getCtaCahCuentaAhorro().getCtaTahTipoAhorro().getTahId();
		}
		if(tipoCuenta.equals("C")){//Prestamo
			tc = 3;
			if(cas.getCtaPrePrestamo().getCtaTprTipoPrestamo() == null || cas.getCtaPrePrestamo().getCtaTprTipoPrestamo().getTprId()==null){
				clasificacion = 0;
			}else{
				clasificacion = cas.getCtaPrePrestamo().getCtaTprTipoPrestamo().getCtaLprLineaPrestamo().getLprId();
			}
			relacionInteres = 1;
		}
		if(tipoCuenta.equals("D")){//Seguros
			tc = 4;
			clasificacion = cas.getCtaSegSeguros().getCtaTisTipoSeguro().getTisId();
		}
		
		parametros += tc.toString() + ";"; //clasificacion -> Apor, Ahor, Pre, Seg.
		parametros += clasificacion.toString() + ";";//id tipo cuenta
		parametros += txa.getCtaTtrTipoTransaccion().getTtrId().toString() + ";";
		/*parametros += relacionInteres.toString();*/
		
		Double monto = txa.getTxaMonto() - interes;
		PartidaAutomatica partidaAutomatica = new PartidaAutomatica();
		if(chequePrestamo != null && chequePrestamo.getChkId()!=null){//partida de cheque
				if(monto > 0){
					partidaAutomatica.crearPartidaAutomatica(
								parametros+"0;-1",//la ultima concatenacion hace referencia a que no relaciona interes ni empresa
								txa.getTxaMonto(),
								nombreUsuario,2,0,chequePrestamo,0,request);
					
				}
				if(interes > 0){
					partidaAutomatica.crearPartidaAutomatica(
							parametros+"1;-1",//la ultima concatenacion hace referencia a que relaciona interes y no empresa
							interes,
							nombreUsuario,2,null,null,null,request);
				}	
		}else{
				if(monto > 0){
					partidaAutomatica.crearPartidaAutomatica(
								parametros+"0;-1",
								txa.getTxaMonto(),
								nombreUsuario,1,null,null,null,request);
				}
				if(interes > 0){
					partidaAutomatica.crearPartidaAutomatica(
							parametros+"1;-1",
							interes,
							nombreUsuario,1,null,null,null,request);
				}	
		}
System.out.println("Parametros: "+parametros);
	}
	
	public ActionForward imprimirReporte2(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		CorreccionCapitalForm capitalForm = (CorreccionCapitalForm)form;
		try{
			Date fechaActual = new Date();
			//ReportesOrdenForm rOrdenForm = (ReportesOrdenForm) form;
			
			response.setHeader("Cache-Control","private");
			response.setHeader("Pragma", "Cache");
			String pathReporte = "";//ruta reporte
			String nombreReporte = "";
			ExportReport exportar = null;
			ReportFile reporte = new ReportFile();
			ServletContext servletContext = getServlet().getServletContext();
			
			nombreReporte = "comprobante";
			pathReporte = servletContext
			.getRealPath("/reportesOtros/facturacion/"+nombreReporte+"/"+nombreReporte+".jasper");
			Long comprobante = (Long)request.getSession().getAttribute("comprobante");
			reporte.addParameter("txaComprobante",comprobante);
			
			SecIseInicioSesionDAO sesionDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
			SecIseInicioSesion sesion = sesionDAO.findById(capitalForm.getUsuarioConectado().getNombreUsuario());
			reporte.addParameter("sucNombre",sesion.getSecPerPersona().getSecSucSucursal().getSucNombre());
			
			reporte.setPathJasper(pathReporte);
			exportar = new ExportReport(reporte);//reporte a exportar
			
			//Conexion jdbc normal
			String jdbcDriver = "com.mysql.jdbc.Driver";
			Class.forName(jdbcDriver);
			String url = HibernateSessionFactory.getConfiguration().getProperty("connection.url");
			String user = HibernateSessionFactory.getConfiguration().getProperty("connection.username");
			String pass = HibernateSessionFactory.getConfiguration().getProperty("connection.password");

			Connection con = DriverManager.getConnection(url, user, pass);


			//Connection con = HibernateSessionFactory.getSession().connection();
			//System.out.println(JRPropertiesMap.class.getPackage().getImplementationVersion());
			byte[] repCompilado = exportar.exportReportPDF(con);
			//exportar.exportReportPDF("algunPdf.pdf", con);
			
			response.setContentType("application/pdf");
			response.setContentLength(repCompilado.length);
			response.setHeader("content-Disposition", "attachment;filename="+nombreReporte+"-"+fechaActual.getTime()+".pdf");
			//response.setHeader("content-Disposition", "attachment;filename="+nombreReporte+"-"+rForm.getFechaReporte()+".pdf");
			ServletOutputStream outputStream = response.getOutputStream();
			outputStream.write(repCompilado, 0, repCompilado.length);
			outputStream.flush();
			outputStream.close();
			
		}catch(Exception e){
			e.printStackTrace();
			log.error("Se produjo un error al tratar de generar el reporte...", e);
			System.out.println("Se produjo un error al tratar de generar el reporte...\n");
		}
		return null;
	}

	//imprimirReporte
	public ActionForward imprimirReporte(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		CorreccionCapitalForm capitalForm = (CorreccionCapitalForm)form;
		try{
			Date fechaActual = new Date();
			
			response.setHeader("Cache-Control","private");
			response.setHeader("Pragma", "Cache");
			String pathReporte = "";//ruta reporte
			String nombreReporte = "";
			ExportReport exportar = null;
			ReportFile reporte = new ReportFile();
			ServletContext servletContext = getServlet().getServletContext();
			
			nombreReporte = "compRetiroAh";
			pathReporte = servletContext
			.getRealPath("/reportesOtros/facturacion/compRetAhorro/compRetiroAh.jasper");
			int mxaId = (Integer) request.getSession().getAttribute("mxaId");
			reporte.addParameter("mxaId",mxaId);
			SecIseInicioSesionDAO sesionDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
			SecIseInicioSesion sesion = sesionDAO.findById(capitalForm.getUsuarioConectado().getNombreUsuario());
			
			reporte.addParameter("sucNombre",sesion.getSecPerPersona().getSecSucSucursal().getSucNombre());
			reporte.setPathJasper(pathReporte);
			exportar = new ExportReport(reporte);//reporte a exportar
			
			//Conexion jdbc normal
			String jdbcDriver = "com.mysql.jdbc.Driver";
			Class.forName(jdbcDriver);
			String url = HibernateSessionFactory.getConfiguration().getProperty("connection.url");
			String user = HibernateSessionFactory.getConfiguration().getProperty("connection.username");
			String pass = HibernateSessionFactory.getConfiguration().getProperty("connection.password");

			Connection con = DriverManager.getConnection(url, user, pass);

			byte[] repCompilado = exportar.exportReportPDF(con);
			
			response.setContentType("application/pdf");
			response.setContentLength(repCompilado.length);
			response.setHeader("content-Disposition", "attachment;filename="+nombreReporte+"-"+fechaActual.getTime()+".pdf");
			ServletOutputStream outputStream = response.getOutputStream();
			outputStream.write(repCompilado, 0, repCompilado.length);
			outputStream.flush();
			outputStream.close();
			
		}catch(Exception e){
			e.printStackTrace();
			log.error("Se produjo un error al tratar de generar el reporte...", e);
			System.out.println("Se produjo un error al tratar de generar el reporte...\n");
		}
		return null;
	}
	
	@Override
	protected Map getKeyMethodMap() {
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.cc.lista", "lista");
		map.put("cmd.cc.cargarListaAsociados", "cargarListaAsociados");
		map.put("cmd.cc.cargarHtml", "cargarHtml");
		map.put("cmd.cc.cargarHtml2", "cargarHtml2");
		map.put("cmd.cc.disponibleCuentaCont", "disponibleCuentaCont");
		map.put("cmd.cc.seleccionaDestino", "seleccionaDestino");
		map.put("cmd.txa.cancelarFecha", "cancelar");
		map.put("cmd.txa.transferirFecha", "transferir");
		map.put("cmd.cc.htmlCampoDisponibilidad", "htmlCampoDisponibilidad");
		map.put("cmd.txc.imprimirReporte", "imprimirReporte");
		map.put("cmd.txc.imprimirReporte2", "imprimirReporte2");
		return map;
	}
}