/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.procesosEspeciales.struts.action;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.Writer;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletContext;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.export.JRCsvExporter;
import net.sf.jasperreports.engine.export.JRTextExporter;
import net.sf.jasperreports.engine.export.JRTextExporterParameter;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.engine.xml.JRXmlLoader;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.hibernate.Transaction;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeImpl;
import org.jmesa.limit.ExportType;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.BasicCellEditor;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.editor.DateCellEditor;
import org.jmesa.view.html.HtmlBuilder;

import com.cetia.sicaco.hibernate.ConCueCuenta;
import com.cetia.sicaco.hibernate.ConCueCuentaDAO;
import com.cetia.sicaco.hibernate.CtaCahCuentaAhorro;
import com.cetia.sicaco.hibernate.CtaCahCuentaAhorroDAO;
import com.cetia.sicaco.hibernate.CtaCasCuentaAsociado;
import com.cetia.sicaco.hibernate.CtaCasCuentaAsociadoDAO;
import com.cetia.sicaco.hibernate.CtaChkChequePrestamo;
import com.cetia.sicaco.hibernate.CtaChkChequePrestamoDAO;
import com.cetia.sicaco.hibernate.CtaMxaMovimientoAhorro;
import com.cetia.sicaco.hibernate.CtaMxaMovimientoAhorroDAO;
import com.cetia.sicaco.hibernate.CtaStbSolTransBanc;
import com.cetia.sicaco.hibernate.CtaStbSolTransBancDAO;
import com.cetia.sicaco.hibernate.CtaTtrTipoTransaccion;
import com.cetia.sicaco.hibernate.CtaTtrTipoTransaccionDAO;
import com.cetia.sicaco.hibernate.CtaTxaTransaccionxcuentaAsociado;
import com.cetia.sicaco.hibernate.CtaTxaTransaccionxcuentaAsociadoDAO;
import com.cetia.sicaco.hibernate.CtrBanBanco;
import com.cetia.sicaco.hibernate.CtrBanBancoDAO;
import com.cetia.sicaco.hibernate.CtrEstEstado;
import com.cetia.sicaco.hibernate.CtrEstEstadoDAO;
import com.cetia.sicaco.hibernate.CtrRckRepositorioCheques;
import com.cetia.sicaco.hibernate.HibernateSessionFactory;
import com.cetia.sicaco.hibernate.OrdOcoOrdenDeCompra;
import com.cetia.sicaco.hibernate.OrdOcoOrdenDeCompraDAO;
import com.cetia.sicaco.hibernate.OrdOpaOrdenDePago;
import com.cetia.sicaco.hibernate.OrdOpaOrdenDePagoDAO;
import com.cetia.sicaco.hibernate.OrdPcoPagoCompra;
import com.cetia.sicaco.hibernate.OrdPcoPagoCompraDAO;
import com.cetia.sicaco.hibernate.SecIseInicioSesion;
import com.cetia.sicaco.hibernate.SecIseInicioSesionDAO;
import com.cetia.sicaco.procesosEspeciales.struts.form.PagaNetBankingForm;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;
import com.cetia.sicaco.struts.PartidaAutomatica;
import com.mad.utilidades.ExportReport;
import com.mad.utilidades.Format;
import com.mad.utilidades.ReportFile;

/** 
 * MyEclipse Struts
 * Creation date: 12-19-2008
 * 
 * XDoclet definition:
 * @struts.action path="/pagaNetBanking" name="pagaNetBankingForm" input="redirectInvalidData" parameter="accion" scope="request" validate="true"
 * @struts.action-forward name="lista" path="pagina-lista.procesosEspeciales.pagaNetBanking"
 */
public class PagaNetBankingAction extends DMLAction {
	/*
	 * Generated Methods
	 */

	public String TABLA_ID = "CtaStbSolTransBanc";
	public Integer pos;
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		PagaNetBankingForm pagaNetBankingForm = (PagaNetBankingForm) form;
		pos = 0;
		CtrBanBancoDAO bancoDAO = new CtrBanBancoDAO(getSessionHibernate(request));
		List<CtrBanBanco> banList = bancoDAO.findAll();
		if(pagaNetBankingForm.getBanId() != null){
			banList = bancoDAO.findByProperty("banId",pagaNetBankingForm.getBanId());
		}
		request.setAttribute("banList", banList);
		List lst = null;
		CtaStbSolTransBancDAO transBancDAO = new CtaStbSolTransBancDAO(getSessionHibernate(request));
		if(banList.size()>0){
			lst = transBancDAO.findByBanco(banList.get(0).getBanId());
			if(banList.get(0).getBanId() == 2){
				request.setAttribute("txt", 1);
			}
		}

		request.setAttribute("estado1", " ");
		request.setAttribute("estado2", " ");
		request.setAttribute("estado3", " ");

		
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);//, ExportType.PDF);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
		request.setAttribute("pagaNetBankingForm", pagaNetBankingForm);
		request.setAttribute(Constantes.ACCION_KEY, "/pagaNetBanking");
		
		return mapping.findForward("lista");
	}

	//---- metodo que genera el html de la tabla del jmesa
	private String html(final TableFacade tableFacade, final HttpServletRequest request) {
        tableFacade.setColumnProperties("stbId", "ctaCbaCuentaBancaria.cbaCuenta",
                                        "stbFechaSol","stbMonto",
                                        "stbNombreAsociado","stbEstado",
                                        "stbRazon", "opaId");
        Table table = tableFacade.getTable();
        //---- Titulo de la tabla
        table.setCaptionKey("tbl.nb.caption");
       
        Row row = table.getRow();
        
        Column nombreColumna = row.getColumn("ctaCbaCuentaBancaria.cbaCuenta");
        nombreColumna.setTitleKey("tbl.nb.cuentaYBanco");
        nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

            public Object getValue(Object item, String property, int rowcount) {
                Object value = new BasicCellEditor().getValue(item, property, rowcount);
                CtaStbSolTransBanc stb = (CtaStbSolTransBanc)item;
                if(stb.getCtaCbaCuentaBancaria()!=null){
                	return stb.getCtaCbaCuentaBancaria().getCbaCuenta();
                }else{
                	return stb.getInvPcbProveedorCuentaBancaria().getId().getPcbNumeroCuenta();
                }
            }
           
        });
       
        nombreColumna = row.getColumn("stbFechaSol");
        nombreColumna.setTitleKey("tbl.nb.stbFechaSol");
        nombreColumna.getCellRenderer().setCellEditor(new DateCellEditor("dd-MMM-yyyy"));
        
        nombreColumna = row.getColumn("stbMonto");
        nombreColumna.setTitleKey("tbl.nb.stbMonto");
        nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

            public Object getValue(Object item, String property, int rowcount) {
                Object value = new BasicCellEditor().getValue(item, property, rowcount);
                CtaStbSolTransBanc transBanc = (CtaStbSolTransBanc)item;
                return Format.formatDinero(transBanc.getStbMonto());
            }
           
        });
        
        nombreColumna = row.getColumn("stbNombreAsociado");
        nombreColumna.setTitleKey("tbl.nb.stbNombreAsociado");
        
        nombreColumna = row.getColumn("stbEstado");
        nombreColumna.setTitleKey("tbl.nb.stbEstado");
        nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

            public Object getValue(Object item, String property, int rowcount) {
                Object value = new BasicCellEditor().getValue(item, property, rowcount);
                CtaStbSolTransBanc transBanc = (CtaStbSolTransBanc)item;
                String estado = "";
                if(transBanc.getStbEstado().equals("E")){
                	estado = "Efectuada";
                }else{
                	estado = "Sin Efectuar";
                }
                return  estado;
            }
           
        });
       
        nombreColumna = row.getColumn("stbRazon");
        nombreColumna.setTitleKey("tbl.nb.stbRazon");
        nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtaStbSolTransBanc transBanc = (CtaStbSolTransBanc)item;
				HtmlBuilder html = new HtmlBuilder();
				if(transBanc.getStbEstado().equals("N")){
					value="<u>Cambiar</u>";
					String link = tableFacade.getWebContext().getContextPath();
					html.a().style("cursor: pointer;").onclick("cambiarEstado('"+ transBanc.getStbId() + "');").id("changeId").close();
					html.append(value);
					html.aEnd().ulEnd();
				}else{
					html.append("");
				}
				return html.toString();
			}
		});
        
        nombreColumna = row.getColumn("opaId");
        nombreColumna.setTitleKey("tbl.nb.eliminar");
        nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtaStbSolTransBanc transBanc = (CtaStbSolTransBanc)item;
				HtmlBuilder html = new HtmlBuilder();
				if(transBanc.getStbEstado().equals("N")){
					value="<u>Eliminar</u>";
					String link = tableFacade.getWebContext().getContextPath();
					html.a().style("cursor: pointer;").onclick("eliminar('"+ transBanc.getStbId() + "');").id("deleteId").close();
					html.append(value);
					html.aEnd().ulEnd();
				}else{
					html.append("");
				}
				return html.toString();
			}
		});
        
        return tableFacade.render();
    }
   
    //---- metodo que genera los exports, el formato que tendran
	private void export(final TableFacade tableFacade) {
		tableFacade.setColumnProperties("benPrimerNombre", "secParParentesco.parDescripcion",
                    "benSexo","benFechaNacimiento");
		Table table = tableFacade.getTable();
         //---- Titulo de la tabla
        table.setCaptionKey("tbl.ben.caption");
       
        Row row = table.getRow();
        Column nombreColumna = row.getColumn("benPrimerNombre");
        nombreColumna.setTitleKey("tbl.ben.benNombre");
       
        nombreColumna = row.getColumn("secParParentesco.parDescripcion");
        nombreColumna.setTitleKey("tbl.ben.parentescoNombre");
       
        nombreColumna = row.getColumn("benSexo");
        nombreColumna.setTitleKey("tbl.ben.benSexo");
       
       
        nombreColumna = row.getColumn("benFechaNacimiento");
        nombreColumna.setTitleKey("tbl.ben.benFechaNacimiento");
           
        tableFacade.render();
    }

    public ActionForward cambiarEstado(ActionMapping mapping, ActionForm form,
 			HttpServletRequest request, HttpServletResponse response) {
 		PagaNetBankingForm pagaNetBankingForm = (PagaNetBankingForm) form;
 		pos = 0;
 		CtrBanBancoDAO bancoDAO = new CtrBanBancoDAO(getSessionHibernate(request));
 		List<CtrBanBanco> banList = bancoDAO.findAll();
 		request.setAttribute("banList", banList);
 		List lst = null;
 		
 		CtaStbSolTransBancDAO transBancDAO = new CtaStbSolTransBancDAO(getSessionHibernate(request));
 		CtaStbSolTransBanc stb = transBancDAO.findById(pagaNetBankingForm.getStbId());
 		
 		CtaTxaTransaccionxcuentaAsociadoDAO txaDao = new CtaTxaTransaccionxcuentaAsociadoDAO(getSessionHibernate(request));
 		
 		if(stb.getStbEstado().equals("N")){
 			stb.setStbEstado("E");
 			if(stb.getCtaCahCuentaAhorro()!=null && stb.getCtaCahCuentaAhorro().getCahId()!= null){
	 			CtaCahCuentaAhorroDAO ahorroDAO = new CtaCahCuentaAhorroDAO(getSessionHibernate(request));
	 			CtaCahCuentaAhorro ahorro = ahorroDAO.findById(stb.getCtaCahCuentaAhorro().getCahId());
	 			CtaCasCuentaAsociadoDAO casDao = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
	 			CtaCasCuentaAsociado cas = casDao.findbyCahId(ahorro.getCahId());
	 			
	 			//Ttr de transaccion electronica efectuada 42
	 			CtaTtrTipoTransaccionDAO ttrDao = new CtaTtrTipoTransaccionDAO(getSessionHibernate(request));
	 			CtaTtrTipoTransaccion ttrEfectuada = ttrDao.findById(42);
	 			
	 			//CtaTxaTransaccionxcuentaAsociadoDAO txaDao = new CtaTxaTransaccionxcuentaAsociadoDAO(getSessionHibernate(request));
	 			CtaTxaTransaccionxcuentaAsociado txa = new CtaTxaTransaccionxcuentaAsociado();
	 			txa.setAudFechaCreacion(new Date());
	 			txa.setAudFechaModificacion(new Date());
	 			txa.setAudUsuarioCreacion(pagaNetBankingForm.getUsuarioConectado().getNombreUsuario());
	 			txa.setAudUsuarioModificacion(txa.getAudUsuarioCreacion());
	 			txa.setCtaCasCuentaAsociado(cas);
	 			txa.setCtaTtrTipoTransaccion(ttrEfectuada);
	 			txa.setCtaNotNotas(null);
	 			txa.setTxaFecha(new Date());
	 			txa.setTxaMonto(stb.getStbMonto());
	 			txa.setTxaNota(ttrEfectuada.getTtrNombre());
	 			txaDao.save(txa);
	 			
	 			CtaMxaMovimientoAhorroDAO mxaDAO = new CtaMxaMovimientoAhorroDAO(getSessionHibernate(request));
	 			CtaMxaMovimientoAhorro mxa = new CtaMxaMovimientoAhorro();
	 			mxa.setAudFechaCreacion(new Date());
	 			mxa.setAudFechaModificacion(new Date());
	 			mxa.setAudUsuarioCreacion(txa.getAudUsuarioCreacion());
	 			mxa.setAudUsuarioModificacion(mxa.getAudUsuarioCreacion());
	 			mxa.setCtaCahCuentaAhorro(ahorro);
	 			mxa.setCtaTxaTransaccionxcuentaAsociado(txa);
	 			mxa.setMxaFecha(new Date());
	 			mxa.setMxaInteresTran(0.0);
	 			mxa.setMxaMonto(stb.getStbMonto());
	 			mxa.setMxaSaldo(ahorro.getCahSaldoActual());
	 			mxaDAO.save(mxa);
	 			
	 			Transaction tx = mxaDAO.getSession().beginTransaction();
	 			tx.commit();
	 			
	 			enviarTransaccionAContabilidad(txa, mxa.getAudUsuarioCreacion(), "B",
	 					cas, 0.0, null,request);
	 			
	 			if(stb.getStbPenalidad()>0){
		 			//Ttr Cargo por penalidad en ahorros 38
		 			CtaTtrTipoTransaccion ctaTtrTipoTransaccion = ttrDao.findById(38);
		 			
	 				txa.setCtaTtrTipoTransaccion(ctaTtrTipoTransaccion);
	 				txa.setTxaMonto(stb.getStbPenalidad());
	 				enviarTransaccionAContabilidad(txa, mxa.getAudUsuarioCreacion(), "B", 
	 						cas, 0.0, null,request);
	 			}
 			}else{
 				if(stb.getPreId() != null){
 					ConCueCuentaDAO cuentaContableDAO = new ConCueCuentaDAO(getSessionHibernate(request));
 					ConCueCuenta cuenta = (ConCueCuenta) cuentaContableDAO.findByCueCodigoCuenta("2140308").get(0);
 					PartidaAutomatica partidaAutomatica =  new PartidaAutomatica();
 					partidaAutomatica.crearPartidaAutomaticaCC(cuenta.getCueId().toString(), stb.getStbMonto(), "A",pagaNetBankingForm.getUsuarioConectado().getNombreUsuario(), "Deposito a cuenta bancaria del liquido a recibir.",request);
 					/*CtaChkChequePrestamoDAO chequePrestamoDAO = new CtaChkChequePrestamoDAO(getSessionHibernate(request));
 					
 		 			//Ttr de transaccion electronica efectuada 42
 		 			CtaTtrTipoTransaccionDAO ttrDao = new CtaTtrTipoTransaccionDAO(getSessionHibernate(request));
 		 			CtaTtrTipoTransaccion ttrEfectuada = ttrDao.findById(42);
 		 			
 		 			//cargo por lo se va a los cheques
 		 			CtaTtrTipoTransaccion tipoTransaccion2 = ttrDao.findById(7);
 		 			
 		 			//CtaTxaTransaccionxcuentaAsociadoDAO txaDao = new CtaTxaTransaccionxcuentaAsociadoDAO(getSessionHibernate(request));
 		 			CtaTxaTransaccionxcuentaAsociado txa = new CtaTxaTransaccionxcuentaAsociado();
 		 			txa.setAudFechaCreacion(new Date());
 		 			txa.setAudFechaModificacion(new Date());
 		 			txa.setAudUsuarioCreacion(pagaNetBankingForm.getUsuarioConectado().getNombreUsuario());
 		 			txa.setAudUsuarioModificacion(txa.getAudUsuarioCreacion());
 		 			txa.setCtaCasCuentaAsociado(cas);
 		 			txa.setCtaTtrTipoTransaccion(ttrEfectuada);
 		 			txa.setCtaNotNotas(null);
 		 			txa.setTxaFecha(new Date());
 		 			txa.setTxaMonto(stb.getStbMonto());
 		 			txa.setTxaNota(ttrEfectuada.getTtrNombre());
 		 			txaDao.save(txa);
 					
 					if(chequePrestamoDAO.findByPrestamo(prestamo.getPreId()).size()>0){
 						List cheques = chequePrestamoDAO.findByPrestamo(prestamo.getPreId());
 						for (Iterator iterator = cheques.iterator(); iterator.hasNext();) {
 							CtaChkChequePrestamo chequePrestamo = (CtaChkChequePrestamo) iterator.next();
 							CtaTxaTransaccionxcuentaAsociado txa2 = new CtaTxaTransaccionxcuentaAsociado();
 							txa2.setCtaCasCuentaAsociado(cas);
 							txa2.setTxaFecha(new Date());
 							txa2.setTxaMonto((double) chequePrestamo.getChkMontoEmitido());
 							txa2.setCtaTtrTipoTransaccion(tipoTransaccion2);
 							txa2.setTxaComprobante(txa.getTxaComprobante());
 							txa2.setAudFechaCreacion(new Date());
 							txa2.setAudFechaModificacion(new Date());
 							txa2.setAudUsuarioCreacion(txa.getAudUsuarioCreacion());
 							txa2.setAudUsuarioModificacion(txa.getAudUsuarioCreacion());
 							txaDao.save(txa2);
 							Transaction tx2 = txaDao.getSession().beginTransaction();
 							tx2.commit();
 							enviarTransaccionAContabilidad(txa2, txa.getAudUsuarioCreacion(), "C", cas, 0.0, chequePrestamo);
 						}
 					}
 					
 					CtaMxpMovimientoPrestamoDAO mxpDao = new CtaMxpMovimientoPrestamoDAO(getSessionHibernate(request));
 					CtaMxpMovimientoPrestamo movimientoPrestamo = new CtaMxpMovimientoPrestamo();
 					movimientoPrestamo.setCtaPrePrestamo(prestamo);
 					movimientoPrestamo.setCtaTxaTransaccionxcuentaAsociado(txa);
 					movimientoPrestamo.setMxpFecha(new Date());
 					movimientoPrestamo.setMxpInteresPendiente(0.0);
 					movimientoPrestamo.setMxpInteresAcumulado(0.0);
 					movimientoPrestamo.setMxpMora(0.0);
 					movimientoPrestamo.setMxpSaldoActual(0.0);
 					movimientoPrestamo.setAudFechaCreacion(new Date());
 					movimientoPrestamo.setAudFechaModificacion(new Date());
 					movimientoPrestamo.setAudUsuarioCreacion(txa.getAudUsuarioCreacion());
 					movimientoPrestamo.setAudUsuarioModificacion(txa.getAudUsuarioCreacion());
 					mxpDao.save(movimientoPrestamo);
 					
 					prestamo.setPreSaldoActualT(prestamo.getPreMontoSolicitado());
 					prestamo.setPrePendMov(0.0);
 					prestamo.setPreMoraMov(0.0);
 					prestamoDAO.merge(prestamo);
 					
 					CtrEstEstadoDAO estadoDAO = new CtrEstEstadoDAO(getSessionHibernate(request));
 					//Se setea estado activo para el prestamo
 					cas.setCtrEstEstado(estadoDAO.findById(13));
 					cas.setCasFechaCierre(ElapsedTime.obtenerFechaMeses(new Date(), prestamo.getCtaTprTipoPrestamo().getCtaPlmPlanMeses().getPlmDuracion()));
 					casDao.merge(cas);
 					
 					Transaction tx2 = prestamoDAO.getSession().beginTransaction();
 					tx2.commit();
 					
 					enviarTransaccionAContabilidad(txa, txa.getAudUsuarioCreacion(), "C", cas, 0.0, null);
 				*/}else{
 					OrdOpaOrdenDePagoDAO pagoDAO = new OrdOpaOrdenDePagoDAO(getSessionHibernate(request));
 					OrdOpaOrdenDePago ordenDePago = pagoDAO.findById(stb.getOpaId());
 					
 					ordenDePago.setOpaEstado("P");
 					pagoDAO.merge(ordenDePago);
 					Transaction tx = pagoDAO.getSession().beginTransaction();
 					tx.commit();
 					
 					//Setear las ordenes de compra pertenecientes a pagadas al proveedor
 					OrdOcoOrdenDeCompraDAO compraDAO = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
 					OrdPcoPagoCompraDAO pagoCompraDAO = new OrdPcoPagoCompraDAO(getSessionHibernate(request));
 					List pagoCompraList = pagoCompraDAO.findByPagoId(ordenDePago);
 					for (Iterator iterator = pagoCompraList.iterator(); iterator.hasNext();) {
 						OrdPcoPagoCompra pco = (OrdPcoPagoCompra) iterator.next();
 						OrdOcoOrdenDeCompra compra = compraDAO.findById(pco.getId().getOrdOcoOrdenDeCompra().getOcoId());
 						if(compra.getOcoEstado().equals("F")){//ya lo cambie Ida
 							compra.setOcoEstado("D");
 						}
 						if(compra.getOcoEstado().equals("G")){
 							compra.setOcoEstado("S");
 						}
 						compraDAO.merge(compra);
 					}
 					Transaction txCompra = compraDAO.getSession().beginTransaction();
 					txCompra.commit();
 					
 					enviarOrdenPagoAContabilidad(ordenDePago,pagaNetBankingForm.getUsuarioConectado().getNombreUsuario(),null,request);
 					pagoDAO.getSession().flush();
 					pagoDAO.getSession().clear();
 				}
 			}
 		}
 		Transaction tx = transBancDAO.getSession().beginTransaction();
 		try{
 			transBancDAO.merge(stb);
 			tx.commit();
 		}catch (Exception e) {
 			tx.rollback();
 			log.error("No logro efectuar actualizacion del estado");
		}finally{
			transBancDAO.getSession().flush();
			transBancDAO.getSession().clear();
		}
 		
 		if(banList.size()>0){
 			lst = transBancDAO.findByBanco(pagaNetBankingForm.getBanId());
 		}
 		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
 		tableFacade.setItems(lst);
 		//---- Genera los tipos de formas con que se podran exportar los datos
 		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);//, ExportType.PDF);
 		tableFacade.setStateAttr("restore");
 		Limit limit = tableFacade.getLimit();
 		if (limit.isExported()) {
         	//---- exporta la tabla
             export(tableFacade);
             return null; 
         } else {
         	//---- genera el html de la tabla para ser mostrada
             String html = html(tableFacade, request);
             request.setAttribute(Constantes.LISTA_KEY, html);
         }
 		
 		request.setAttribute(Constantes.ACCION_KEY, "/pagaNetBanking");
 		request.setAttribute("form", pagaNetBankingForm);
 		return mapping.findForward("lista");
 	}
    
    public ActionForward cambiarLista(ActionMapping mapping, ActionForm form,
 			HttpServletRequest request, HttpServletResponse response) {
 		PagaNetBankingForm pagaNetBankingForm = (PagaNetBankingForm) form;
 		pos = 0;
 		CtrBanBancoDAO bancoDAO = new CtrBanBancoDAO(getSessionHibernate(request));
 		List<CtrBanBanco> banList = bancoDAO.findAll();
 		request.setAttribute("banList", banList);
 		List lst = null;
 		String estado1="", estado2="", estado3="";
 		
 		CtaStbSolTransBancDAO transBancDAO = new CtaStbSolTransBancDAO(getSessionHibernate(request));
 		//lst = transBancDAO.findByBanco(pagaNetBankingForm.getBanId());
		Integer rubro = pagaNetBankingForm.getRubro();
		String rubroP="%";
		if (rubro == -1){
			rubroP="%%";
		}
		if (rubro == 0){
			rubroP="Deposito pago ahorros electronicos";
			estado1="selected=\"selected\"";
			estado2="";
			estado3="";
		}
		if (rubro == 1){
			rubroP="Deposito pago Proveedores electronico";
			estado1="";
			estado2="selected=\"selected\"";
			estado3="";
		}
		if (rubro == 2){
			rubroP="Deposito Pago Prestamo Electronico";
			estado1="";
			estado2="";
			estado3="selected=\"selected\"";
		}
 		lst = transBancDAO.findByBancoAndRubro(pagaNetBankingForm.getBanId(), rubroP);
 		if(pagaNetBankingForm.getBanId() == 2){
			request.setAttribute("txt", 1);
		}
 		request.setAttribute("estado1", estado1);
 		request.setAttribute("estado2", estado2);
 		request.setAttribute("estado3", estado3);
 		
 		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
 		tableFacade.setItems(lst);
 		//---- Genera los tipos de formas con que se podran exportar los datos
 		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);//, ExportType.PDF);
 		tableFacade.setStateAttr("restore");
 		Limit limit = tableFacade.getLimit();
 		if (limit.isExported()) {
         	//---- exporta la tabla
             export(tableFacade);
             return null; 
         } else {
         	//---- genera el html de la tabla para ser mostrada
             String html = html(tableFacade, request);
             request.setAttribute(Constantes.LISTA_KEY, html);
         }
 		
 		request.setAttribute(Constantes.ACCION_KEY, "/pagaNetBanking");
 		request.setAttribute("pagaNetBankingForm", pagaNetBankingForm);
 		return mapping.findForward("lista");
 	}
    
    public ActionForward generaXls(ActionMapping mapping, ActionForm form,
 			HttpServletRequest request, HttpServletResponse response) {
    	PagaNetBankingForm nbForm = (PagaNetBankingForm)form;
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyyMMdd");
		Integer rubro = nbForm.getRubro();
		String rubroP="%";
		if (rubro == -1){
			rubroP="%%";
		}
		if (rubro == 0){
			rubroP="Deposito pago ahorros electronicos";
		}
		if (rubro == 1){
			rubroP="Deposito pago Proveedores electronico";
		}
		if (rubro == 2){
			rubroP="Deposito Pago Prestamo Electronico";
		}
		try{
			HashMap<String, Object> map = new HashMap<String, Object>();
			map.put("banId", new Long(nbForm.getBanId()));
			map.put("rubro", rubroP);
			Date fechaActual = new Date();
			String nombreReporte = "";
			String pathReporte = "";//ruta reporte
			ServletContext servletContext = getServlet().getServletContext();
			//if(nbForm.getBanId() == 1){
				nombreReporte = "flujoEventosCuscatlanEXCEL";
			//}else{
//				nombreReporte = "flujoEventosAgricolaEXCEL";
			//}
			pathReporte = servletContext
				.getRealPath("/reportesOtros/facturacion/flujoEventos/"+nombreReporte+".jrxml");
			
			Connection con = HibernateSessionFactory.getSession().connection();
			FileInputStream input = new FileInputStream(new File(pathReporte));
			
			JasperDesign jd = JRXmlLoader.load(input);
			JasperReport jr = JasperCompileManager.compileReport(jd);
			JasperPrint jp = JasperFillManager.fillReport(jr, map, con);
			
			//EXPORT A XLS
			response.setHeader("Cache-Control","private");
			response.setHeader("Pragma", "Cache");
			response.setContentType("application/vnd.ms-excel");
//			response.setContentType("application/csv");
			response.setHeader("content-Disposition", "attachment;filename=pagoElectronico" + dateFormat.format(fechaActual) + ".xls");
	        JRXlsExporter xls = new JRXlsExporter();
//			JRCsvExporter xls = new JRCsvExporter();
	        
	        xls.setParameter(JRExporterParameter.JASPER_PRINT, jp);
	        xls.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());
	        xls.exportReport();
			
		}catch(Exception e){
			e.printStackTrace();
			log.error("Se produjo un error al tratar de generar el reporte...", e);
		}
		return null;
 	}
    
    public ActionForward generaTxt(ActionMapping mapping, ActionForm form,
 			HttpServletRequest request, HttpServletResponse response) {
    	ActionForward forward = null;
    	PagaNetBankingForm nbForm = (PagaNetBankingForm)form;
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyyMMdd");
		try{
			Integer rubro = nbForm.getRubro();
			String rubroP="%";
			if (rubro == -1){
				rubroP="%%";
			}
			if (rubro == 0){
				rubroP="Deposito pago ahorros electronicos";
			}
			if (rubro == 1){
				rubroP="Deposito pago Proveedores electronico";
			}
			if (rubro == 2){
				rubroP="Deposito Pago Prestamo Electronico";
			}
			HashMap<String, Object> map = new HashMap<String, Object>();
			map.put("banId", new Long(nbForm.getBanId()));
			map.put("rubro", rubroP);
			map.put("sysDel", System.getProperty("line.separator"));
			System.out.println("line:"+System.getProperty("line.separator")+"separator");
			Date fechaActual = new Date();
			//PlanillaForm planillaForm = (PlanillaForm) form;
			String nombreReporte = "";
			String pathReporte = "";//ruta reporte
			ServletContext servletContext = getServlet().getServletContext();
			if(nbForm.getBanId() == 1){
				nombreReporte = "flujoEventosCitiTXT";
			}else{
				nombreReporte = "flujoEventosAgricolaTXT";	
			}
				
			
			pathReporte = servletContext
				.getRealPath("/reportesOtros/facturacion/flujoEventos/"+nombreReporte+".jrxml");
			
			Connection con = HibernateSessionFactory.getSession().connection();
			FileInputStream input = new FileInputStream(new File(pathReporte));
			
			JasperDesign jd = JRXmlLoader.load(input);
			JasperReport jr = JasperCompileManager.compileReport(jd);
			JasperPrint jp = JasperFillManager.fillReport(jr, map, con);
			
			//EXPORT A TXT
//			response.setHeader("Cache-Control","private");
//			response.setHeader("Pragma", "Cache");
//			response.setContentType( "text/plain" );
//			response.setHeader("content-Disposition", "attachment;filename=pagoElectronico" + dateFormat.format(fechaActual) + ".txt");
			
	        /*JRCsvExporter csv = new JRCsvExporter();
			JRTextExporter csv = new JRTextExporter();
	        csv.setParameter(JRExporterParameter.JASPER_PRINT, jp);
	        csv.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());
	        csv.setParameter(JRTextExporterParameter.PAGE_HEIGHT, 82);//text exporter
	        csv.setParameter(JRTextExporterParameter.PAGE_WIDTH, 90);//text exporter
	        csv.exportReport();*/
			String folder = servletContext.getRealPath("/");
			folder = folder + "/PagoTxt/"
					+ ((new SimpleDateFormat("yyyyMMddHHmmss")).format(new Date()))
					+ "/";
			File file = new File(folder);
			System.out.println("folder: "+folder);
			file.mkdirs();
			
			File archivo = new File(folder+"pagoElectronico" + dateFormat.format(fechaActual)+".txt");
			if(archivo.exists()){
				archivo.delete();
			}
			archivo.createNewFile();
			/*map.put("banId", new Long());
			map.put("rubro", );*/
			String net = contenido(rubroP,nbForm.getBanId().toString());
			enviarFileResponse(response, 
					"pagoElectronico" + dateFormat.format(fechaActual)+".txt",
					setContents(archivo, net));
	        
			/*
			JRCsvExporter exporter = new JRCsvExporter();
			exporter.setParameter(JRCsvExporterParameter.FIELD_DELIMITER, ";");
			ByteArrayOutputStream baos = new ByteArrayOutputStream();
			exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
			exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, baos);
			exporter.exportReport();
			output = baos.toByteArray();
			response.setContentType("text/plain");
			response.setContentLength(output.length);
			ServletOutputStream ouputStream = response.getOutputStream();
			ouputStream.write(output);
			ouputStream.flush();
			ouputStream.close(); 
			*/
		}catch(Exception e){
			e.printStackTrace();
			log.error("Se produjo un error al tratar de generar el reporte...", e);
		}
		return null;
 	}
    
    public ActionForward generaPdf(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		PagaNetBankingForm nbForm = (PagaNetBankingForm)form;
		//imprimirReporte
		ActionForward forward = null;
		Integer rubro = nbForm.getRubro();
		String rubroP="%";
		if (rubro == -1){
			rubroP="%%";
		}
		if (rubro == 0){
			rubroP="Deposito pago ahorros electronicos";
		}
		if (rubro == 1){
			rubroP="Deposito pago Proveedores electronico";
		}
		if (rubro == 2){
			rubroP="Deposito Pago Prestamo Electronico";
		}
		try{
			Date fechaActual = new Date();
			//ReportesOrdenForm rOrdenForm = (ReportesOrdenForm) form;
			
			response.setHeader("Cache-Control","private");
			response.setHeader("Pragma", "Cache");
			String pathReporte = "";//ruta reporte
			String nombreReporte = "";
			ExportReport exportar = null;
			ReportFile reporte = new ReportFile();
			ServletContext servletContext = getServlet().getServletContext();
			
			nombreReporte = "retiroAhorroAsocFecha";
			pathReporte = servletContext
			.getRealPath("/reportesOtros/facturacion/"+nombreReporte+"/"+nombreReporte+".jasper");
			String sub = servletContext.getRealPath("/reportesOtros/facturacion/"+nombreReporte);
			reporte.addParameter("banId",nbForm.getBanId());
			reporte.addParameter("rubro",rubroP);
			reporte.addParameter("SUBREPORT_DIR", sub);
			reporte.setPathJasper(pathReporte);
			exportar = new ExportReport(reporte);//reporte a exportar
			
			//Conexion jdbc normal
			String jdbcDriver = "com.mysql.jdbc.Driver";
			Class.forName(jdbcDriver);
			String url = HibernateSessionFactory.getConfiguration().getProperty("connection.url");
			String user = HibernateSessionFactory.getConfiguration().getProperty("connection.username");
			String pass = HibernateSessionFactory.getConfiguration().getProperty("connection.password");

			Connection con = DriverManager.getConnection(url, user, pass);

			byte[] repCompilado = exportar.exportReportPDF(con);
			
			response.setContentType("application/pdf");
			response.setContentLength(repCompilado.length);
			response.setHeader("content-Disposition", "attachment;filename="+nombreReporte+"-"+fechaActual.getTime()+".pdf");
			//response.setHeader("content-Disposition", "attachment;filename="+nombreReporte+"-"+rForm.getFechaReporte()+".pdf");
			ServletOutputStream outputStream = response.getOutputStream();
			outputStream.write(repCompilado, 0, repCompilado.length);
			outputStream.flush();
			outputStream.close();
			
		}catch(Exception e){
			e.printStackTrace();
			log.error("Se produjo un error al tratar de generar el reporte...", e);
			System.out.println("Se produjo un error al tratar de generar el reporte...\n");
		}
		return null;
	}
    
    public ActionForward eliminaNoEfectuado(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		PagaNetBankingForm nbForm = (PagaNetBankingForm)form;
		
		//Ttr de transaccion electronica no efectuada.
		CtaTtrTipoTransaccionDAO ttrDao = new CtaTtrTipoTransaccionDAO(getSessionHibernate(request));
		CtaTtrTipoTransaccion ttrNoEfectuada = ttrDao.findById(43);
		
		CtaStbSolTransBancDAO transBancDAO = new CtaStbSolTransBancDAO(getSessionHibernate(request));
		List lstTrans = transBancDAO.findByBancoAndEstado(nbForm.getBanId(),"N");
		for (Iterator iterator = lstTrans.iterator(); iterator.hasNext();) {
			CtaStbSolTransBanc stb = (CtaStbSolTransBanc) iterator.next();
			if(stb.getCtaCahCuentaAhorro()!= null && stb.getCtaCahCuentaAhorro().getCahId()!=null){
				CtaCahCuentaAhorroDAO ahorroDAO = new CtaCahCuentaAhorroDAO(getSessionHibernate(request));
	 			CtaCahCuentaAhorro ahorro = ahorroDAO.findById(stb.getCtaCahCuentaAhorro().getCahId());
	 			CtaCasCuentaAsociadoDAO casDao = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
	 			CtaCasCuentaAsociado cas = casDao.findbyCahId(ahorro.getCahId());
	 			
	 			CtrEstEstadoDAO estadoDAO = new CtrEstEstadoDAO(getSessionHibernate(request));
	 			CtrEstEstado ctrEstEstado = estadoDAO.findById(9);
	 			cas.setCtrEstEstado(ctrEstEstado);			
	 			casDao.merge(cas);
	 			
	 			ahorro.setCahSaldoActual(ahorro.getCahSaldoActual() + stb.getStbMonto() + stb.getStbPenalidad());
	 			ahorroDAO.merge(ahorro);
	 			
	 			CtaTxaTransaccionxcuentaAsociadoDAO txaDao = new CtaTxaTransaccionxcuentaAsociadoDAO(getSessionHibernate(request));
	 			CtaTxaTransaccionxcuentaAsociado txa = new CtaTxaTransaccionxcuentaAsociado();
	 			txa.setAudFechaCreacion(new Date());
	 			txa.setAudFechaModificacion(new Date());
	 			txa.setAudUsuarioCreacion(nbForm.getUsuarioConectado().getNombreUsuario());
	 			txa.setAudUsuarioModificacion(txa.getAudUsuarioCreacion());
	 			txa.setCtaCasCuentaAsociado(cas);
	 			txa.setCtaTtrTipoTransaccion(ttrNoEfectuada);
	 			txa.setCtaNotNotas(null);
	 			txa.setTxaFecha(new Date());
	 			txa.setTxaMonto(stb.getStbMonto() + stb.getStbPenalidad());
	 			txa.setTxaNota(ttrNoEfectuada.getTtrNombre());
	 			txaDao.save(txa);
	 			
	 			CtaMxaMovimientoAhorroDAO mxaDAO = new CtaMxaMovimientoAhorroDAO(getSessionHibernate(request));
	 			CtaMxaMovimientoAhorro mxa = new CtaMxaMovimientoAhorro();
	 			mxa.setAudFechaCreacion(new Date());
	 			mxa.setAudFechaModificacion(new Date());
	 			mxa.setAudUsuarioCreacion(txa.getAudUsuarioCreacion());
	 			mxa.setAudUsuarioModificacion(mxa.getAudUsuarioCreacion());
	 			mxa.setCtaCahCuentaAhorro(ahorro);
	 			mxa.setCtaTxaTransaccionxcuentaAsociado(txa);
	 			mxa.setMxaFecha(new Date());
	 			mxa.setMxaInteresTran(0.0);
	 			mxa.setMxaMonto(stb.getStbMonto() + stb.getStbPenalidad());
	 			mxa.setMxaSaldo(ahorro.getCahSaldoActual());
	 			mxaDAO.save(mxa);
	 			
	 			Transaction tx = mxaDAO.getSession().beginTransaction();
	 			tx.commit();

			}else{
				if(stb.getPreId() != null){
					DecimalFormat df = new DecimalFormat("0.00");
					ConCueCuentaDAO cuentaContableDAO = new ConCueCuentaDAO(getSessionHibernate(request));
					ConCueCuenta cuenta = (ConCueCuenta) cuentaContableDAO.findByCueCodigoCuenta("2140303").get(0);
					PartidaAutomatica partidaAutomatica =  new PartidaAutomatica();
					partidaAutomatica.crearPartidaAutomaticaCC(cuenta.getCueId().toString(), new Double(df.format(stb.getStbMonto())), "A",nbForm.getUsuarioConectado().getNombreUsuario(), "Depósito a cuenta bancaria del líquido a recibir.",request);					

					/*CtaPrePrestamoDAO prestamoDAO = new CtaPrePrestamoDAO(getSessionHibernate(request));
		 			CtaPrePrestamo prestamo = prestamoDAO.findById(stb.getPreId());
		 			CtaCasCuentaAsociadoDAO casDao = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
		 			CtaCasCuentaAsociado cas = casDao.findByPreId(prestamo.getPreId());
		 			
		 			//15 Estado de prestamo aprobado y en espera de desembolso
		 			CtrEstEstadoDAO estadoDAO = new CtrEstEstadoDAO(getSessionHibernate(request));
		 			CtrEstEstado estado = estadoDAO.findById(15);
		 			cas.setCtrEstEstado(estado);
		 			casDao.merge(cas);
		 			
		 			CtaTxaTransaccionxcuentaAsociadoDAO txaDao = new CtaTxaTransaccionxcuentaAsociadoDAO(getSessionHibernate(request));
		 			CtaTxaTransaccionxcuentaAsociado txa = new CtaTxaTransaccionxcuentaAsociado();
		 			txa.setAudFechaCreacion(new Date());
		 			txa.setAudFechaModificacion(new Date());
		 			txa.setAudUsuarioCreacion(nbForm.getUsuarioConectado().getNombreUsuario());
		 			txa.setAudUsuarioModificacion(txa.getAudUsuarioCreacion());
		 			txa.setCtaCasCuentaAsociado(cas);
		 			txa.setCtaTtrTipoTransaccion(ttrNoEfectuada);
		 			txa.setCtaNotNotas(null);
		 			txa.setTxaFecha(new Date());
		 			txa.setTxaMonto(stb.getStbMonto());
		 			txa.setTxaNota(ttrNoEfectuada.getTtrNombre());
		 			txaDao.save(txa);
		 			
		 			Transaction tx = txaDao.getSession().beginTransaction();
		 			tx.commit();*/
				}else{
					OrdOpaOrdenDePagoDAO pagoDAO = new OrdOpaOrdenDePagoDAO(getSessionHibernate(request));
					OrdOpaOrdenDePago pago = pagoDAO.findById(stb.getOpaId());
					
					pago.setOpaEstado("C");
					pagoDAO.merge(pago);
					
					Transaction tx = pagoDAO.getSession().beginTransaction();
		 			tx.commit();
				}
			}
			transBancDAO.delete(stb);
			Transaction tx2 = transBancDAO.getSession().beginTransaction();
			tx2.commit();
			transBancDAO.getSession().flush();
			transBancDAO.getSession().clear();
		}
		
		
		return lista(mapping, form, request, response);
	}

    /*
    private void enviarTransaccionAContabilidad(CtaTxaTransaccionxcuentaAsociado txa,
			String nombreUsuario, CtaCasCuentaAsociado cas) {
		Integer tc = 0;
		Integer clasificacion = -1;
		Integer relacionInteres = -1;

		tc = 2;
		clasificacion = cas.getCtaCahCuentaAhorro().getCtaTahTipoAhorro().getTahId();
		relacionInteres = 1;

		String parametros ="1;";
		parametros += tc.toString() + ";";
		parametros += clasificacion.toString() + ";";
		parametros += txa.getCtaTtrTipoTransaccion().getTtrId().toString() + ";";
		parametros += relacionInteres.toString();
		
		Double monto = txa.getTxaMonto();
		PartidaAutomatica.crearPartidaAutomatica(
					parametros,
					txa.getTxaMonto(),
					nombreUsuario,1,null,null,null);
	}
    */
    public ActionForward eliminaEfectuados(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		PagaNetBankingForm nbForm = (PagaNetBankingForm)form;
		
		CtaStbSolTransBancDAO transBancDAO = new CtaStbSolTransBancDAO(getSessionHibernate(request));
		List lstTrans = transBancDAO.findByBancoAndEstado(nbForm.getBanId(),"E");
		for (Iterator iterator = lstTrans.iterator(); iterator.hasNext();) {
			CtaStbSolTransBanc stb = (CtaStbSolTransBanc) iterator.next();
			transBancDAO.delete(stb);
		}
		Transaction tx = transBancDAO.getSession().beginTransaction();
		tx.commit();
		transBancDAO.getSession().flush();
		transBancDAO.getSession().clear();
		
		return lista(mapping, form, request, response);
	}
    
    public ActionForward eliminar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		PagaNetBankingForm nbForm = (PagaNetBankingForm)form;
		
		//Ttr de transaccion electronica no efectuada.
		CtaTtrTipoTransaccionDAO ttrDao = new CtaTtrTipoTransaccionDAO(getSessionHibernate(request));
		CtaTtrTipoTransaccion ttrNoEfectuada = ttrDao.findById(43);
		
		CtaStbSolTransBancDAO transBancDAO = new CtaStbSolTransBancDAO(getSessionHibernate(request));
		//List lstTrans = transBancDAO.findByBancoAndEstado(nbForm.getBanId(),"N");
		//for (Iterator iterator = lstTrans.iterator(); iterator.hasNext();) {
		CtaStbSolTransBanc stb = transBancDAO.findById(nbForm.getStbId());
		if(stb.getCtaCahCuentaAhorro()!= null && stb.getCtaCahCuentaAhorro().getCahId()!=null){
			CtaCahCuentaAhorroDAO ahorroDAO = new CtaCahCuentaAhorroDAO(getSessionHibernate(request));
 			CtaCahCuentaAhorro ahorro = ahorroDAO.findById(stb.getCtaCahCuentaAhorro().getCahId());
 			CtaCasCuentaAsociadoDAO casDao = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
 			CtaCasCuentaAsociado cas = casDao.findbyCahId(ahorro.getCahId());
 			
 			CtrEstEstadoDAO estadoDAO = new CtrEstEstadoDAO(getSessionHibernate(request));
 			CtrEstEstado ctrEstEstado = estadoDAO.findById(9);
 			cas.setCtrEstEstado(ctrEstEstado);			
 			casDao.merge(cas);
 			
 			ahorro.setCahSaldoActual(ahorro.getCahSaldoActual() + stb.getStbMonto() + stb.getStbPenalidad());
 			ahorroDAO.merge(ahorro);
 			
 			CtaTxaTransaccionxcuentaAsociadoDAO txaDao = new CtaTxaTransaccionxcuentaAsociadoDAO(getSessionHibernate(request));
 			CtaTxaTransaccionxcuentaAsociado txa = new CtaTxaTransaccionxcuentaAsociado();
 			txa.setAudFechaCreacion(new Date());
 			txa.setAudFechaModificacion(new Date());
 			txa.setAudUsuarioCreacion(nbForm.getUsuarioConectado().getNombreUsuario());
 			txa.setAudUsuarioModificacion(txa.getAudUsuarioCreacion());
 			txa.setCtaCasCuentaAsociado(cas);
 			txa.setCtaTtrTipoTransaccion(ttrNoEfectuada);
 			txa.setCtaNotNotas(null);
 			txa.setTxaFecha(new Date());
 			txa.setTxaMonto(stb.getStbMonto() + stb.getStbPenalidad());
 			txa.setTxaNota(ttrNoEfectuada.getTtrNombre());
 			txaDao.save(txa);
 			
 			CtaMxaMovimientoAhorroDAO mxaDAO = new CtaMxaMovimientoAhorroDAO(getSessionHibernate(request));
 			CtaMxaMovimientoAhorro mxa = new CtaMxaMovimientoAhorro();
 			mxa.setAudFechaCreacion(new Date());
 			mxa.setAudFechaModificacion(new Date());
 			mxa.setAudUsuarioCreacion(txa.getAudUsuarioCreacion());
 			mxa.setAudUsuarioModificacion(mxa.getAudUsuarioCreacion());
 			mxa.setCtaCahCuentaAhorro(ahorro);
 			mxa.setCtaTxaTransaccionxcuentaAsociado(txa);
 			mxa.setMxaFecha(new Date());
 			mxa.setMxaInteresTran(0.0);
 			mxa.setMxaMonto(stb.getStbMonto() + stb.getStbPenalidad());
 			mxa.setMxaSaldo(ahorro.getCahSaldoActual());
 			mxaDAO.save(mxa);
 			
 			Transaction tx = mxaDAO.getSession().beginTransaction();
 			tx.commit();

		}else{
			if(stb.getPreId() != null){
				DecimalFormat df = new DecimalFormat("0.00");
				ConCueCuentaDAO cuentaContableDAO = new ConCueCuentaDAO(getSessionHibernate(request));
				ConCueCuenta cuenta = (ConCueCuenta) cuentaContableDAO.findByCueCodigoCuenta("2140303").get(0);
				PartidaAutomatica partidaAutomatica =  new PartidaAutomatica();
				partidaAutomatica.crearPartidaAutomaticaCC(cuenta.getCueId().toString(), new Double(df.format(stb.getStbMonto())), "A",nbForm.getUsuarioConectado().getNombreUsuario(), "Depósito a cuenta bancaria del líquido a recibir.",request);				
				
				/*CtaPrePrestamoDAO prestamoDAO = new CtaPrePrestamoDAO(getSessionHibernate(request));
	 			CtaPrePrestamo prestamo = prestamoDAO.findById(stb.getPreId());
	 			CtaCasCuentaAsociadoDAO casDao = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
	 			CtaCasCuentaAsociado cas = casDao.findByPreId(prestamo.getPreId());
	 			
	 			//15 Estado de prestamo aprobado y en espera de desembolso
	 			CtrEstEstadoDAO estadoDAO = new CtrEstEstadoDAO(getSessionHibernate(request));
	 			CtrEstEstado estado = estadoDAO.findById(15);
	 			cas.setCtrEstEstado(estado);
	 			casDao.merge(cas);
	 			
	 			CtaTxaTransaccionxcuentaAsociadoDAO txaDao = new CtaTxaTransaccionxcuentaAsociadoDAO(getSessionHibernate(request));
	 			CtaTxaTransaccionxcuentaAsociado txa = new CtaTxaTransaccionxcuentaAsociado();
	 			txa.setAudFechaCreacion(new Date());
	 			txa.setAudFechaModificacion(new Date());
	 			txa.setAudUsuarioCreacion(nbForm.getUsuarioConectado().getNombreUsuario());
	 			txa.setAudUsuarioModificacion(txa.getAudUsuarioCreacion());
	 			txa.setCtaCasCuentaAsociado(cas);
	 			txa.setCtaTtrTipoTransaccion(ttrNoEfectuada);
	 			txa.setCtaNotNotas(null);
	 			txa.setTxaFecha(new Date());
	 			txa.setTxaMonto(stb.getStbMonto());
	 			txa.setTxaNota(ttrNoEfectuada.getTtrNombre());
	 			txaDao.save(txa);
	 			
	 			Transaction tx = txaDao.getSession().beginTransaction();
	 			tx.commit();*/
			}else{
				OrdOpaOrdenDePagoDAO pagoDAO = new OrdOpaOrdenDePagoDAO(getSessionHibernate(request));
				OrdOpaOrdenDePago pago = pagoDAO.findById(stb.getOpaId());
				
				pago.setOpaEstado("C");
				pagoDAO.merge(pago);
				
				Transaction tx = pagoDAO.getSession().beginTransaction();
	 			tx.commit();
			}
		}
		transBancDAO.delete(stb);
		Transaction tx2 = transBancDAO.getSession().beginTransaction();
		tx2.commit();
		transBancDAO.getSession().flush();
		transBancDAO.getSession().clear();
			
		//}
		
		return lista(mapping, form, request, response);
	}
    
    private void enviarTransaccionAContabilidad(CtaTxaTransaccionxcuentaAsociado txa,
			String nombreUsuario, String tipoCuenta, CtaCasCuentaAsociado cas, 
			Double interes, CtaChkChequePrestamo chequePrestamo,HttpServletRequest request) {
		Integer tc = 0;
		Integer clasificacion = -1;
		Integer relacionInteres = -1;
		if(tipoCuenta.equals("A")){
			tc = 1;
			clasificacion = 0;
			relacionInteres = 0;
		}
		if(tipoCuenta.equals("B")){
			tc = 2;
			clasificacion = cas.getCtaCahCuentaAhorro().getCtaTahTipoAhorro().getTahId();
			relacionInteres = 0;
		}
		if(tipoCuenta.equals("C")){
			tc = 3;
			if(cas.getCtaPrePrestamo().getCtaTprTipoPrestamo() == null || cas.getCtaPrePrestamo().getCtaTprTipoPrestamo().getTprId()==null){
				clasificacion = 0;
			}else{
				clasificacion = cas.getCtaPrePrestamo().getCtaTprTipoPrestamo().getCtaLprLineaPrestamo().getLprId();
			}
			relacionInteres = 1;
		}
		if(tipoCuenta.equals("D")){
			tc = 4;
			clasificacion = cas.getCtaSegSeguros().getCtaTisTipoSeguro().getTisId();
			relacionInteres = 1;
		}
		String parametros ="1;";
		parametros += tc.toString() + ";";
		parametros += clasificacion.toString() + ";";
		parametros += txa.getCtaTtrTipoTransaccion().getTtrId().toString() + ";";
		parametros += relacionInteres.toString();
		
		Double monto = txa.getTxaMonto() - interes;
		PartidaAutomatica partidaAutomatica =  new PartidaAutomatica();
		if(monto > 0){
			if(chequePrestamo != null && chequePrestamo.getChkId()!=null){
				partidaAutomatica.crearPartidaAutomatica(
						parametros+";-1",
						txa.getTxaMonto(),
						nombreUsuario,1,0,chequePrestamo,0,request);
			}else{
				partidaAutomatica.crearPartidaAutomatica(
						parametros+";-1",
						txa.getTxaMonto(),
						nombreUsuario,1,null,null,null,request);
			}
		}
		if(interes > 0){
			partidaAutomatica.crearPartidaAutomatica(
					parametros+";-1",
					interes,
					nombreUsuario,1,null,null,null,request);
		}
	}
    
	private void enviarOrdenPagoAContabilidad(OrdOpaOrdenDePago ordenDePago,
			String nombreUsuario, CtrRckRepositorioCheques rck,HttpServletRequest request) {
		//Total de la factura sin iva
		String conOSinDescuento = "0;";
		String parametros = "4;"
			+ ordenDePago.getOpaEstado()+";"
			+ conOSinDescuento
			+ ordenDePago.getInvProProveedor().getInvTprTipoProveedor().getTprId().toString() + ";"
			+ ordenDePago.getInvProProveedor().getProId() + ";";
		/*if(ordenDePago.getOpaTipoPago().equals("N")){
			parametros += "E";
		}else{
			parametros += ordenDePago.getOpaTipoPago();
		}*/
		parametros += ordenDePago.getOpaTipoPago();
		
		CtaChkChequePrestamoDAO chequePrestamoDAO = new CtaChkChequePrestamoDAO(getSessionHibernate(request));
		CtaChkChequePrestamo chequePrestamo = null;
			
		Integer numCheque = 0,tpaId=1;
		if(ordenDePago.getOpaTipoPago().equals("C")){//Cheque
			numCheque = rck.getRckCorrActual();
		
			chequePrestamo = new CtaChkChequePrestamo();
			chequePrestamo.setChkCorrelativoCheque(numCheque);
			chequePrestamo.setChkEmitidoA(ordenDePago.getInvProProveedor().getProNombre());
			chequePrestamo.setChkFecha(new Date());
			SecIseInicioSesionDAO sesionDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
			SecIseInicioSesion sesion = sesionDAO.findById(nombreUsuario);
			chequePrestamo.setChkLugar(sesion.getSecPerPersona().getSecSucSucursal().getSucDireccion());
			
			Double montoE = new Double(ordenDePago.getOpaTotal()-((ordenDePago.getOpaDescuento()/100)*ordenDePago.getOpaTotal()));
			chequePrestamo.setChkMontoEmitido(montoE.floatValue()/*ordenDePago.getOpaTotal().floatValue()*/);

			chequePrestamo.setChkRazon("Pago a Proveedor");
			chequePrestamo.setCtaPrePrestamo(null);
			chequePrestamo.setCtrBanBanco(rck.getCtrCckControlCheques().getCtrBanBanco());
			chequePrestamoDAO.save(chequePrestamo);
			Transaction tx = chequePrestamoDAO.getSession().beginTransaction();
			tx.commit();
			chequePrestamoDAO.getSession().flush();
			chequePrestamoDAO.getSession().clear();
			tpaId=2;
		}else{
			chequePrestamo = null;
		}

		Double montoDesc =ordenDePago.getOpaTotal()-((ordenDePago.getOpaDescuento()/100)*ordenDePago.getOpaTotal());
		PartidaAutomatica partidaAutomatica =  new PartidaAutomatica();
		partidaAutomatica.crearPartidaAutomaticaOrdenPago(
				parametros,
				(ordenDePago.getOpaTotal()),montoDesc,
				nombreUsuario, tpaId, 0, chequePrestamo,0,request);//El tpaId depende de si es efectivo(tpaId=1),cheque(tpaId=2),pago electronico(tpaId=1)
		
		//Descuento
		if(ordenDePago.getOpaDescuento() > 0){
			conOSinDescuento = "1;";
			String parametros2 = "4;"
				+ ordenDePago.getOpaEstado()+";"
				+ conOSinDescuento
				+ ordenDePago.getInvProProveedor().getInvTprTipoProveedor().getTprId().toString() + ";"
				+ ordenDePago.getInvProProveedor().getProId() + ";";
			
			/*if(ordenDePago.getOpaTipoPago().equals("N")){
				parametros2 += "E";
			}else{
				parametros2 += ordenDePago.getOpaTipoPago();
			}*/
			
			parametros2 += ordenDePago.getOpaTipoPago();
			
			partidaAutomatica.crearPartidaAutomaticaOrdenPago(
					parametros2,0.00,
					(ordenDePago.getOpaTotal()*(ordenDePago.getOpaDescuento()/100)),
					nombreUsuario, tpaId,null,null,null,request);
		}
	}
     
	 static public File  setContents(File aFile, String aContents)
			throws FileNotFoundException, IOException {
		if (aFile == null) {
			throw new IllegalArgumentException("File should not be null.");
		}
		if (!aFile.exists()) {
			throw new FileNotFoundException("File does not exist: " + aFile);
		}
		if (!aFile.isFile()) {
			throw new IllegalArgumentException("Should not be a directory: "
					+ aFile);
		}
		if (!aFile.canWrite()) {
			throw new IllegalArgumentException("File cannot be written: "
					+ aFile);
		}

		// use buffering
		Writer output = new BufferedWriter(new FileWriter(aFile));
		try {
			// FileWriter always assumes default encoding is OK!
			output.write(aContents);
		} finally {
			output.close();
		}
		return aFile;
	}

	public void enviarFileResponse(HttpServletResponse response,
			String fileName, File archivo) throws FileNotFoundException,
			IOException {
		//Cambiamos el response para que se puedan bajar los archivos
		response.setContentType("application/octet-stream");
		response.setHeader("content-Disposition", "attachment;filename="+fileName);
		response.setBufferSize((int)archivo.length());
		// Obtenemos el response para poder enviar el archivo
		FileInputStream stream = new FileInputStream(archivo);
		PrintWriter out = response.getWriter();
		int n = -1;
		while ((n = stream.read()) != -1) {
			out.write(n);
		}
		out.flush();
		out.close();
	}
	 
	
	public String contenido(String razon, String banId){
		String jdbcDriver = "com.mysql.jdbc.Driver";
		try {
			Class.forName(jdbcDriver);
		String url = HibernateSessionFactory.getConfiguration().getProperty("connection.url");
		String user = HibernateSessionFactory.getConfiguration().getProperty("connection.username");
		String pass = HibernateSessionFactory.getConfiguration().getProperty("connection.password");
		Connection con = DriverManager.getConnection(url, user, pass);
		int ceros = 11;
		if (banId.equals("1")){
			ceros=15;
		}
		
		Statement st = con.createStatement();
		String sql = "select "+
		"	@rownum:=@rownum+1 correlativo,  "+
		"	lpad(stb.pcb_numero_cuenta,"+ceros+",'0') cbaCuenta,  "+
		"	stb.STB_MONTO stbMonto,  "+
		"	stb.STB_NOMBRE_ASOCIADO stbNombreAsociado,  "+
		"	' ' vacio,  "+
		"	stb.STB_RAZON stbRazon, stb.STB_ESTADO stbEstado, "+
		"	stb.STB_TIPO_AHORRO tipo  "+
		"from 	cta_stb_sol_trans_banc stb, "+
		"	(SELECT @rownum:=0) r "+
		"where  "+
		"	stb.ban_id = "+banId+" "+
		"	and stb.STB_ESTADO = 'N' "+
		"	and stb.STB_RAZON like '"+razon+"' "+
		" UNION  "+
		"select "+
		"	@rownum:=@rownum+1 correlativo,  "+
		"	lpad(cba.CBA_CUENTA,"+ceros+" ,'0') cbaCuenta, "+
		"	stb.STB_MONTO stbMonto,  "+
		"	stb.STB_NOMBRE_ASOCIADO stbNombreAsociado,  "+
		"	' ' vacio,  "+
		"	stb.STB_RAZON stbRazon,  "+
		"	stb.STB_ESTADO stbEstado,  "+
		"	stb.STB_TIPO_AHORRO tipo "+
		"from cta_cba_cuenta_bancaria cba ,  "+
		"	cta_stb_sol_trans_banc stb, "+
		"	(SELECT @rownum:=0) r "+
		"where cba.ban_id =  "+banId+" "+
		"	and stb.cba_id = cba.cba_id  "+
		"	and stb.STB_ESTADO = 'N' "+
		"	and stb.STB_RAZON like  '"+razon+"'";
		
		ResultSet rs = st.executeQuery(sql);
		String contenido="";
		String correlativo="";
		String cbaCuenta= ""; 
		String stbMonto= ""; 
		String stbNombreAsociado= ""; 
		String vacio= ""; 
		String stbRazon= ""; 
		String stbEstado= ""; 
		String tipo= ""; 
		String tab = "\t";
		String pyc = ";";
		DecimalFormat df = new DecimalFormat("0.00");
		
		while (rs.next()) {
			correlativo = rs.getString("correlativo");
			cbaCuenta= rs.getString("cbaCuenta");	
			stbMonto= rs.getString("stbMonto");	
			stbNombreAsociado= rs.getString("stbNombreAsociado");	
			vacio= rs.getString("vacio");	
			stbRazon= rs.getString("stbRazon");	
			stbEstado= rs.getString("stbEstado");	
			tipo= rs.getString("tipo");
			
			if(tipo.equalsIgnoreCase("CORRIENTE")){
				tipo="3";
			}else{
				tipo = "4";
			}
			stbMonto = df.format(new Double(stbMonto));
			
			if (banId.equals("1")){
				contenido+=tipo+tab+cbaCuenta+tab+stbMonto+tab+stbNombreAsociado+tab+stbRazon+System.getProperty("line.separator");
			}else{
				contenido+=cbaCuenta+pyc+stbNombreAsociado+pyc+pyc+stbMonto+pyc+correlativo+pyc+stbRazon+System.getProperty("line.separator");
			}
			
		}
		
		return contenido.substring(0, contenido.length()-2); // quitamos el ultimo salto de linea
		} catch (SQLException sqle) {
			sqle.printStackTrace();
			System.out.println("mensaje: "+sqle.getErrorCode());
			System.out.println("state: "+sqle.getSQLState());
			return new String("");	
		}catch (Exception e) {
			e.printStackTrace();
			return new String("");
		}
		
	}
	
	@Override
	protected Map getKeyMethodMap() {
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.nb.lista","lista");
		map.put("cmd.nb.generaXls", "generaXls");
		map.put("cmd.nb.generaTxt", "generaTxt");
		map.put("cmd.nb.cambiarEstado", "cambiarEstado");
		map.put("cmd.nb.cambiarLista", "cambiarLista");
		map.put("cmd.nb.generaPdf", "generaPdf");
		map.put("cmd.nb.eliminaNoEfectuado", "eliminaNoEfectuado");
		map.put("cmd.nb.eliminaEfectuados", "eliminaEfectuados");
		map.put("cmd.nb.eliminar", "eliminar");
		return map;
	}
}