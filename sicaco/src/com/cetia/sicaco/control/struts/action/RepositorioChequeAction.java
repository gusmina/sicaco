/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.control.struts.action;

import java.io.IOException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.hibernate.Transaction;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeImpl;
import org.jmesa.limit.ExportType;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.BasicCellEditor;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.html.HtmlBuilder;

import com.cetia.sicaco.control.struts.form.RepositorioChequeForm;
import com.cetia.sicaco.hibernate.CtrCckControlCheques;
import com.cetia.sicaco.hibernate.CtrCckControlChequesDAO;
import com.cetia.sicaco.hibernate.CtrCfcControlFacturacion;
import com.cetia.sicaco.hibernate.CtrRckRepositorioCheques;
import com.cetia.sicaco.hibernate.CtrRckRepositorioChequesDAO;
import com.cetia.sicaco.hibernate.CtrRfcRepositorioFacturas;
import com.cetia.sicaco.hibernate.SecSucSucursalDAO;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;
import com.mad.utilidades.Format;

/** 
 * MyEclipse Struts
 * Creation date: 11-25-2008
 * 
 * XDoclet definition:
 * @struts.action path="/respositorioCheque" name="respositorioChequeForm" input="redirectInvalidData" parameter="accion" scope="request" validate="true"
 * @struts.action-forward name="lista" path="pagina-lista.control.repositorioCheque"
 */
public class RepositorioChequeAction extends DMLAction {
	/*
	 * Generated Methods
	 */

	public static final String TABLA_ID = "ctrRckRepositorioCheque";
	private final static String METHOD_NAME = "methodName";
	private final static String REPFACT_ID = "repFactId";
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		RepositorioChequeForm repositorioChequeForm = (RepositorioChequeForm)form;
		CtrRckRepositorioChequesDAO repositorioChequesDAO = new CtrRckRepositorioChequesDAO(getSessionHibernate(request));
		List lst = null;
		lst  = repositorioChequesDAO.findAll();
		
		CtrCckControlChequesDAO controlChequesDAO = new CtrCckControlChequesDAO(getSessionHibernate(request));
		List lstCck= controlChequesDAO.findAllWithBanco();
		request.setAttribute("lstCck", lstCck);
		
		SecSucSucursalDAO sucursalDAO = new SecSucSucursalDAO(getSessionHibernate(request));
		List suc = sucursalDAO.findAllActive();
		request.setAttribute("suc", suc);
		
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);//, ExportType.PDF);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
		request.setAttribute("form", repositorioChequeForm);
		request.setAttribute(Constantes.ACCION_KEY, "/repositorioCheque");
		request.getSession().setAttribute(METHOD_NAME, "invalidSave");
        request.setAttribute("filtro", "0");
		return mapping.findForward("lista");
	}
	
	//---- Funcion que genera el html de la tabla del jmesa
	private String html(final TableFacade tableFacade, final HttpServletRequest request) {
		tableFacade.setColumnProperties("rckNombre","rckFechaIni",
				"ctrCckControlCheques.cckSerie",
				"rckCorrIni","rckCorrActual","rckCorrFin");//, "rckFechaIni" ,"rckFechaFin");
		Table table = tableFacade.getTable();
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.rck.caption");
		
		Row row = table.getRow();
		
		Column nombreColumna = row.getColumn("ctrCckControlCheques.cckSerie");
		nombreColumna.setTitleKey("tbl.rfc.ctrCfcControlFacturacion.cfcSerie");
		
		nombreColumna = row.getColumn("rckFechaIni");
		nombreColumna.setTitleKey("tbl.rfc.banco");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtrRckRepositorioCheques rck = (CtrRckRepositorioCheques)item;
				String banco = rck.getCtrCckControlCheques().getCtrBanBanco().getBanNombre();
				return banco;
			}
		});
		
		nombreColumna = row.getColumn("rckNombre");
		nombreColumna.setTitleKey("tbl.rfc.rfcNombre");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtrRckRepositorioCheques rck = (CtrRckRepositorioCheques)item;
				HtmlBuilder html = new HtmlBuilder();
				String link = tableFacade.getWebContext().getContextPath();
				link += "/control/repositorioCheque.do?rckId="+rck.getRckId().toString()+"&accion=edit";
				html.a().href().quote().append(link).quote().close();
				html.append(value);
				html.aEnd();
				return html.toString();
			}
		});
		
		nombreColumna = row.getColumn("rckCorrIni");
		nombreColumna.setTitleKey("tbl.rfc.rfcCorrIni");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){
			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtrRckRepositorioCheques rck = (CtrRckRepositorioCheques)item;
				CtrCckControlCheques control = rck.getCtrCckControlCheques();
				value = Format.rellenarIzquierda(rck.getRckCorrIni().toString(), "0", control.getCckDigitos());
				return value;
			}
		});
		
		nombreColumna = row.getColumn("rckCorrFin");
		nombreColumna.setTitleKey("tbl.rfc.rfcCorrFin");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){
			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtrRckRepositorioCheques rck = (CtrRckRepositorioCheques)item;
				CtrCckControlCheques control = rck.getCtrCckControlCheques();
				value = Format.rellenarIzquierda(rck.getRckCorrFin().toString(),"0", control.getCckDigitos());
				return value;
			}
		});
		
		nombreColumna = row.getColumn("rckCorrActual");
		nombreColumna.setTitleKey("tbl.rfc.rfcCorrActual");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){
			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtrRckRepositorioCheques rck = (CtrRckRepositorioCheques)item;
				CtrCckControlCheques control = rck.getCtrCckControlCheques();
				value = Format.rellenarIzquierda(rck.getRckCorrActual().toString(),"0", control.getCckDigitos());
				return value;
			}
		});
		/*
		nombreColumna = row.getColumn("rckFechaIni");
		nombreColumna.setTitleKey("tbl.rfc.rfcFechaIni");
		nombreColumna.getCellRenderer().setCellEditor(new DateCellEditor("dd-MMM-yyyy"));
		
		nombreColumna = row.getColumn("rckFechaFin");
		nombreColumna.setTitleKey("tbl.rfc.rfcFechaFin");
		nombreColumna.getCellRenderer().setCellEditor(new DateCellEditor("dd-MMM-yyyy"));
		*/
		return tableFacade.render();
	}
	
	//---- Funcion que genera los exports, el formato que tendran
	 private void export(final TableFacade tableFacade) {
		 tableFacade.setColumnProperties("rfcNombre","ctrCfcControlFacturacion.cfcSerie",
					"rfcCorrIni","rfcCorrActual","rfcCorrFin");//, "rfcFechaIni" ,"rfcFechaFin");
			Table table = tableFacade.getTable();
			//---- Titulo de la tabla
			table.setCaptionKey("tbl.rfc.caption");
			
			Row row = table.getRow();
			
			Column nombreColumna = row.getColumn("ctrCfcControlFacturacion.cfcSerie");
			nombreColumna.setTitleKey("tbl.rfc.ctrCfcControlFacturacion.cfcSerie.x");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

				public Object getValue(Object item, String property, int rowcount) {
					Object value = new BasicCellEditor().getValue(item, property, rowcount);
					CtrRckRepositorioCheques rck = (CtrRckRepositorioCheques)item;
					String serie = rck.getCtrCckControlCheques().getCtrBanBanco().getBanNombre() + 
						" - " + rck.getCtrCckControlCheques().getCckSerie();
					return serie;
				}
			});
			
			nombreColumna = row.getColumn("rfcNombre");
			nombreColumna.setTitleKey("tbl.rfc.rfcNombre");
			
			nombreColumna = row.getColumn("rfcCorrIni");
			nombreColumna.setTitleKey("tbl.rfc.rfcCorrIni");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){
				public Object getValue(Object item, String property, int rowcount) {
					Object value = new BasicCellEditor().getValue(item, property, rowcount);
					CtrRfcRepositorioFacturas rfc = (CtrRfcRepositorioFacturas)item;
					CtrCfcControlFacturacion control = rfc.getCtrCfcControlFacturacion();
					value = Format.formatNumeroFactura(rfc.getRfcCorrIni(), control.getCfcDigitos());
					return value;
				}
			});
			
			nombreColumna = row.getColumn("rfcCorrFin");
			nombreColumna.setTitleKey("tbl.rfc.rfcCorrFin");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){
				public Object getValue(Object item, String property, int rowcount) {
					Object value = new BasicCellEditor().getValue(item, property, rowcount);
					CtrRfcRepositorioFacturas rfc = (CtrRfcRepositorioFacturas)item;
					CtrCfcControlFacturacion control = rfc.getCtrCfcControlFacturacion();
					value = Format.formatNumeroFactura(rfc.getRfcCorrFin(), control.getCfcDigitos());
					return value;
				}
			});
			
			nombreColumna = row.getColumn("rfcCorrActual");
			nombreColumna.setTitleKey("tbl.rfc.rfcCorrActual");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){
				public Object getValue(Object item, String property, int rowcount) {
					Object value = new BasicCellEditor().getValue(item, property, rowcount);
					CtrRfcRepositorioFacturas rfc = (CtrRfcRepositorioFacturas)item;
					CtrCfcControlFacturacion control = rfc.getCtrCfcControlFacturacion();
					value = Format.formatNumeroFactura(rfc.getRfcCorrActual(), control.getCfcDigitos());
					return value;
				}
			});
			/*
			nombreColumna = row.getColumn("rfcFechaIni");
			nombreColumna.setTitleKey("tbl.rfc.rfcFechaIni");
			nombreColumna.getCellRenderer().setCellEditor(new DateCellEditor("dd-MMM-yyyy"));
			
			nombreColumna = row.getColumn("rfcFechaFin");
			nombreColumna.setTitleKey("tbl.rfc.rfcFechaFin");
			nombreColumna.getCellRenderer().setCellEditor(new DateCellEditor("dd-MMM-yyyy"));
		*/
		tableFacade.render();
	}
	 
	public ActionForward guardar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		RepositorioChequeForm rckForm = (RepositorioChequeForm)form;
		CtrRckRepositorioChequesDAO rckDao = new CtrRckRepositorioChequesDAO(getSessionHibernate(request));

		CtrCckControlChequesDAO cckDao = new CtrCckControlChequesDAO(getSessionHibernate(request));
		CtrCckControlCheques cck = cckDao.findById(rckForm.getCtrCckControlCheques().getCckId());
		if(cck == null){
			mensajes("error.rfc.missingSerie", rckForm, request, response);
			return lista(mapping, rckForm, request, response);
		}
		
		if(rckForm.getCtrCckControlCheques().getCckId() == null 
				|| rckForm.getCtrCckControlCheques().getCckId().equals("")){
			mensajes("error.rfc.missingSerie", rckForm, request, response);
			return lista(mapping, rckForm, request, response);
		}
		if(rckForm.getRckCorrFin() > cck.getCckCorrFin()){
			mensajes("error.rfc.mayorCorr", rckForm, request, response);
			return lista(mapping, rckForm, request, response);
		}
		if(rckForm.getRckCorrIni() < cck.getCckCorrIni()){
			mensajes("error.rfc.menorCorr", rckForm, request, response);
			return lista(mapping, rckForm, request, response);
		}
		
		if(rckForm.getRckCorrFin() < rckForm.getRckCorrIni()){
			mensajes("error.rfc.finMenorIni", rckForm, request, response);
			return lista(mapping, rckForm, request, response);
		}/*
		Date fecha1 = ElapsedTime.sTDate(rckForm.getRckFechaFin());
		if(ElapsedTime.fechaMenor(fecha1, new Date())){
			mensajes("error.rfc.fechaFin", rckForm, request, response);
			return lista(mapping, rckForm, request, response);
		}*/
		List seriesIguales = rckDao.findByCckSerie(cck.getCckSerie());
		if(seriesIguales.size()>0){
			for (Iterator iterator = seriesIguales.iterator(); iterator.hasNext();) {
				CtrRckRepositorioCheques repositorioCheques = (CtrRckRepositorioCheques) iterator.next();
				if(repositorioCheques.getRckNombre().trim().equalsIgnoreCase(rckForm.getRckNombre())){
					mensajes("error.rfc.nombreRepetido", rckForm, request, response);
					return lista(mapping, rckForm, request, response);
				}
			}
		}
		
		Transaction tx = rckDao.getSession().beginTransaction();
		rckForm.getRepositorioChequesH().setRckCorrActual(rckForm.getRepositorioChequesH().getRckCorrIni());
		rckDao.save(rckForm.getRepositorioChequesH());
		tx.commit();
		rckDao.getSession().flush();
		rckDao.getSession().clear();
		
		return lista(mapping,form,request,response);
	}

	public ActionForward salvar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		RepositorioChequeForm rckForm = (RepositorioChequeForm)form;
		CtrRckRepositorioChequesDAO rckDao = new CtrRckRepositorioChequesDAO(getSessionHibernate(request));
		
		CtrCckControlChequesDAO cckDAO = new CtrCckControlChequesDAO(getSessionHibernate(request));
		CtrCckControlCheques cck = cckDAO.findById(rckForm.getCtrCckControlCheques().getCckId());
		if(cck == null){
			mensajes("error.rfc.missingSerie", rckForm, request, response);
			return editar(mapping, rckForm, request, response);
		}
		
		if(rckForm.getCtrCckControlCheques().getCckId() == null || rckForm.getCtrCckControlCheques().getCckId().equals("")){
			mensajes("error.rfc.missingSerie", rckForm, request, response);
			return editar(mapping, rckForm, request, response);
		}
		if(rckForm.getRckCorrFin() > cck.getCckCorrFin()){
			mensajes("error.rfc.mayorCorr", rckForm, request, response);
			return editar(mapping, rckForm, request, response);
		}
		if(rckForm.getRckCorrActual() < rckForm.getRckCorrIni() || rckForm.getRckCorrActual() > rckForm.getRckCorrFin()){
			mensajes("error.rfc.corrActualErroneo", rckForm, request, response);
			return lista(mapping, rckForm, request, response);
		}
		if(rckForm.getRckCorrIni() < cck.getCckCorrIni()){
			mensajes("error.rfc.menorCorr", rckForm, request, response);
			return editar(mapping, rckForm, request, response);
		}
		
		if(rckForm.getRckCorrFin() < rckForm.getRckCorrIni()){
			mensajes("error.rfc.finMenorIni", rckForm, request, response);
			return editar(mapping, rckForm, request, response);
		}/*
		Date fecha1 = ElapsedTime.sTDate(rckForm.getRckFechaFin());
		if(ElapsedTime.fechaMenor(fecha1, new Date())){
			mensajes("error.rfc.fechaFin", rckForm, request, response);
			return editar(mapping, rckForm, request, response);
		}*/
		List seriesIguales = rckDao.findByCckSerie(cck.getCckSerie());
		if(seriesIguales.size()>0){
			for (Iterator iterator = seriesIguales.iterator(); iterator.hasNext();) {
				CtrRckRepositorioCheques repositorioCheques = (CtrRckRepositorioCheques) iterator.next();
				if(!repositorioCheques.getRckId().equals(rckForm.getRckId())){
					if(repositorioCheques.getRckNombre().trim().equalsIgnoreCase(rckForm.getRckNombre())){
						mensajes("error.rfc.nombreRepetido", rckForm, request, response);
						return lista(mapping, rckForm, request, response);
					}
				}
			}
		}
		Transaction tx = rckDao.getSession().beginTransaction();
		try {
			rckDao.merge(rckForm.getRepositorioChequesH());
			tx.commit();
		} catch (Exception e) {
			// TODO: handle exception
			tx.rollback();
			e.printStackTrace();
		}finally{
			rckDao.getSession().flush();
			rckDao.getSession().clear();
			
		}
		return lista(mapping,form,request,response);
	}
	
	public ActionForward eliminar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		RepositorioChequeForm rckForm = (RepositorioChequeForm)form;
		CtrRckRepositorioChequesDAO rfcDAO = new CtrRckRepositorioChequesDAO(getSessionHibernate(request));
		Transaction tx = rfcDAO.getSession().beginTransaction();
		try {
			rckForm.setRepositorioChequesH(rfcDAO.findById(rckForm.getRckId()));
			rfcDAO.delete(rckForm.getRepositorioChequesH());
			tx.commit();
		} catch (Exception e) {
			// TODO: handle exception
			tx.rollback();
			e.printStackTrace();
		}finally{
			rfcDAO.getSession().flush();
			rfcDAO.getSession().clear();
			
		}
		return lista(mapping,form,request,response);
	}
	
	public ActionForward editar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		RepositorioChequeForm rckForm = (RepositorioChequeForm)form;
		CtrRckRepositorioChequesDAO rfcDAO = new CtrRckRepositorioChequesDAO(getSessionHibernate(request));
		rckForm.setRepositorioChequesH(rfcDAO.findById(rckForm.getRckId()));
		
		CtrCckControlChequesDAO controlChequesDAO = new CtrCckControlChequesDAO(getSessionHibernate(request));
		List lstCck= controlChequesDAO.findAllWithBanco();
		request.setAttribute("lstCck", lstCck);
		
		SecSucSucursalDAO sucursalDAO = new SecSucSucursalDAO(getSessionHibernate(request));
		List suc = sucursalDAO.findAllActive();
		request.setAttribute("suc", suc);
		
		request.getSession().setAttribute(METHOD_NAME, "invalidUpdate");
		request.getSession().setAttribute(REPFACT_ID, rckForm.getRckId());
		request.setAttribute("form", rckForm);
		request.setAttribute("controlFact", lstCck);
		request.setAttribute(Constantes.ACCION_KEY, "/repositorioCheque");
        request.setAttribute("filtro", "1");
		return mapping.findForward("lista");
	}
		
	public ActionForward cancelar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		return lista(mapping, form, request, response);
	}
	
	public ActionForward redirectInvalidData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		ActionErrors errors = (ActionErrors)request.getSession().getAttribute(Constantes.ERRORS);
		String methodName = (String)request.getSession().getAttribute(METHOD_NAME);
		if(methodName!= null){
			if(methodName.equals("invalidSave")){
		        saveMessages(request, errors);
				return lista(mapping, form, request, response);
			}
			if(methodName.equals("invalidUpdate")){
				saveMessages(request, errors);
				return editar(mapping, form, request, response);
			}
		}
		return lista(mapping, form, request, response);
	}
	
	public void mensajes(String msg,RepositorioChequeForm form,
			HttpServletRequest request, HttpServletResponse response){
		ActionErrors errors = new ActionErrors();
		errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(msg));
        saveMessages(request, errors);
	}
	
	//cargarTablaUsados
	public ActionForward cargarTablaUsados(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		String texto;
		RepositorioChequeForm rckForm = (RepositorioChequeForm)form;
		CtrRckRepositorioChequesDAO repositorioChequesDAO = new CtrRckRepositorioChequesDAO(getSessionHibernate(request));
		List repositorios = repositorioChequesDAO.findByProperty("ctrCckControlCheques.cckId", rckForm.getControlId());
		HtmlBuilder htmlBuilder = new HtmlBuilder();
		htmlBuilder.table(0).append(" align=\"center\" style=\"font-size:x-small;\" bgcolor=\"#EAF7FC\" bordercolor=\"#B0B0B0\" border=\"1\" " ).close();
		htmlBuilder.tr(0).close();
		htmlBuilder.th(0).close().append("Nombre").thEnd();
		htmlBuilder.th(0).close().append("Inicio").thEnd();
		htmlBuilder.th(0).close().append("Fin").thEnd();
		htmlBuilder.trEnd(0);
		if(repositorios.size()<1){
			htmlBuilder.tr(0).close();
			htmlBuilder.td(0).colspan("3").append(" style=\"color:#E95316;\"").close().append("No hay elementos que mostrar").tdEnd();
			htmlBuilder.trEnd(0);
		}else{
			for (Iterator iterator = repositorios.iterator(); iterator.hasNext();) {
				CtrRckRepositorioCheques rck = (CtrRckRepositorioCheques) iterator.next();
				htmlBuilder.tr(0).close();
				htmlBuilder.td(0).close().append(rck.getRckNombre()).tdEnd();
				htmlBuilder.td(0).close().append(rck.getRckCorrIni()).tdEnd();
				htmlBuilder.td(0).close().append(rck.getRckCorrFin()).tdEnd();
				htmlBuilder.trEnd(0);
			}
		}
		htmlBuilder.tableEnd(0);
		texto = htmlBuilder.toString();
		try{
			response.getWriter().write(texto);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (RuntimeException e) {
			log.error("Error runtime", e);
		} catch (IOException e) {
			log.error(e);
		}
		return null;
	}
	
	
	protected Map getKeyMethodMap() {
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.rck.lista", "lista");
		map.put("cmd.rck.guardar", "guardar");
		map.put("cmd.rck.eliminar", "eliminar");
		map.put("cmd.rck.salvar", "salvar");
		map.put("cmd.rck.editar", "editar");
		map.put("cmd.rck.cancelar", "cancelar");
		map.put("cmd.rck.redirectInvalidData","redirectInvalidData");
		map.put("cmd.rck.cargarTablaUsados", "cargarTablaUsados");
		return map;
	}
}