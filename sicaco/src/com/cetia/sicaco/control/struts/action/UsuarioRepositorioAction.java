/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.control.struts.action;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.hibernate.Transaction;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeImpl;
import org.jmesa.limit.ExportType;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.html.HtmlBuilder;

import com.cetia.sicaco.control.struts.form.UsuarioRepositorioForm;
import com.cetia.sicaco.hibernate.CtrRfcRepositorioFacturas;
import com.cetia.sicaco.hibernate.CtrRfcRepositorioFacturasDAO;
import com.cetia.sicaco.hibernate.CtrUreUsuarioRepositorio;
import com.cetia.sicaco.hibernate.CtrUreUsuarioRepositorioDAO;
import com.cetia.sicaco.hibernate.SecPerPersona;
import com.cetia.sicaco.hibernate.SecPerPersonaDAO;
import com.cetia.sicaco.hibernate.SecSucSucursalDAO;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;

/**
 * MyEclipse Struts Creation date: 04-21-2008
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 */
public class UsuarioRepositorioAction extends DMLAction {

	public static final String TABLA_ID = "ctrUreUsuarioRepositorio";

	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		UsuarioRepositorioForm usurepForm = (UsuarioRepositorioForm)form;
		CtrUreUsuarioRepositorioDAO usuarioRepositorioDAO = new CtrUreUsuarioRepositorioDAO(getSessionHibernate(request));
		CtrRfcRepositorioFacturasDAO repositorioFacturasDAO = new CtrRfcRepositorioFacturasDAO(getSessionHibernate(request));
		List lr = repositorioFacturasDAO.findAll();

		request.setAttribute("listRepositorios", lr);
		List list = usuarioRepositorioDAO.findAll();
		// Aqui empieza el cï¿½digo para generar Tabla
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(list);
		// ---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
			// ---- exporta la tabla
			export(tableFacade);
			return null;
		} else {
			// ---- genera el html de la tabla para ser mostrada
			String html = html(tableFacade, request);
			request.setAttribute(Constantes.LISTA_KEY, html);
		}
		// ----- Variables de configuracion
		request.setAttribute("form", usurepForm);
		request.setAttribute(Constantes.ACCION_KEY, "/usuarioRepositorio");
		 request.setAttribute("filtro", "0");
		return mapping.findForward("lista");
	}

	private String html(final TableFacade tableFacade,
			final HttpServletRequest request) {
		tableFacade.setColumnProperties("ctrRfcRepositorioFacturas.rfcNombre","secPerPersona.perPrimerNombre");
		Table table = tableFacade.getTable();

		// ---- Titulo de la tabla
		table.setCaptionKey("tbl.usuarioRepositorio.caption");
		Row row = table.getRow();
		Column nombreColumna = row.getColumn("ctrRfcRepositorioFacturas.rfcNombre");
		nombreColumna.setTitleKey("tbl.usuarioRepositorio.ctrRfcRepositorioFacturas.rfcNombre");
		nombreColumna = row.getColumn("secPerPersona.perPrimerNombre");
		nombreColumna.setTitleKey("tbl.usuarioRepositorio.secPerPersona.perPrimerNombre");
		//creando concatenacion del nombre del usuario
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){
			public Object getValue(Object item, String property, int rowcount) {
				//Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtrUreUsuarioRepositorio usuarioRepositorio = (CtrUreUsuarioRepositorio)item;
				SecPerPersona persona = usuarioRepositorio.getSecPerPersona();
				HtmlBuilder html = new HtmlBuilder();
				String value = persona.getPerPrimerApellido();
				value = value + (isObjectNull(persona.getPerSegundoApellido())?"":(" "+persona.getPerSegundoApellido()));
				value = value + (isObjectNull(persona.getPerApellidoCasada())?"":(" de "+persona.getPerApellidoCasada()));
				value = value + ", " + persona.getPerPrimerNombre();
				html.append(value);
				return html.toString();
			}
		});
		/*nombreColumna = row.getColumn("audUsuarioCreacion");
		nombreColumna.setTitle("Eliminar");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				//Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtrUreUsuarioRepositorio usuarioRepositorio = (CtrUreUsuarioRepositorio)item;
				HtmlBuilder html = new HtmlBuilder();
				String del = "eliminar";
				//---- Generar link para entrar a edicion
				String link = tableFacade.getWebContext().getContextPath();
				link += "/seguridad/usuarioRepositorio.do?id.secRolRoles.rolNombre="+rolMenu.getId().getSecRolRoles().getRolNombre()+"&id.secMopMenuOpcion.mopName="+rolMenu.getId().getSecMopMenuOpcion().getMopName()+"&accion=agrega&boton=1";
				html.a().href().quote().append(link).quote().close();
				//---- Agregamos el link con el nombre = value
				html.append(del);
				html.aEnd();
				
				return html.toString();
			}
		});*/
		return tableFacade.render();
	}
	// ---- Funcion que genera los exports, el formato que tendran
	private void export(final TableFacade tableFacade) {
		tableFacade.setColumnProperties("id.secRolRoles.rolNombre",
				"id.secMopMenuOpcion.mopName", "audUsuarioCreacion");
		Table table = tableFacade.getTable();
		// ---- Titulo de la tabla
		table.setCaptionKey("tbl.usuarioRepositorio.caption.export");
		Row row = table.getRow();
		Column nombreColumna = row.getColumn("id.secRolRoles.rolNombre");
		nombreColumna.setTitleKey("tbl.id.rolNombre");
		Column column = row.getColumn("id.secMopMenuOpcion.mopName");
		column.setTitleKey("tbl.rolMenu.id.mopName.export");
		tableFacade.render();
	}

	public ActionForward forwardToAgregar(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		UsuarioRepositorioForm usuarioRepositorioForm = (UsuarioRepositorioForm) form;
		String value = null;
		CtrRfcRepositorioFacturasDAO repositorioFacturasDAO = new CtrRfcRepositorioFacturasDAO(getSessionHibernate(request));
		List lr = repositorioFacturasDAO.findAll();
		SecPerPersonaDAO secPerPersonaDAO = new SecPerPersonaDAO(getSessionHibernate(request));
		List lp = secPerPersonaDAO.findAll(usuarioRepositorioForm.getUsuarioConectado().getMax());
		List lp2 = new ArrayList();
		for (int i = 0; i < lp.size(); i++) {// Esta parte concatena los
			// nombres de los usuarios para
			// el combo
			UsuarioT usr = new UsuarioT();
			SecPerPersona persona = (SecPerPersona) lp.get(i);
			value = persona.getPerPrimerApellido();
			value = value+(isObjectNull(persona.getPerSegundoApellido()) ? "": (" " + persona.getPerSegundoApellido()));
			value = value+(isObjectNull(persona.getPerApellidoCasada()) ? "": (" de " + persona.getPerApellidoCasada()));
			value = value+", " + persona.getPerPrimerNombre();
			usr.setNombresU(value);
			usr.setId(persona.getPerId());
			lp2.add(usr);
		}
		request.setAttribute("listUsuarios", lp2);
		request.setAttribute("listRepositorios", lr);
		request.setAttribute("filtro", "1");
		request.setAttribute(Constantes.ACCION_KEY, "/usuarioRepositorio");// revisar
		return mapping.findForward("dml");
	}
	
	public ActionForward addSucursal(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		UsuarioRepositorioForm usuarioRepositorioForm = (UsuarioRepositorioForm) form;
		
		SecSucSucursalDAO sucursalDAO = new SecSucSucursalDAO(getSessionHibernate(request));
		List lsuc = sucursalDAO.findAll();
		request.setAttribute("sucursales", lsuc);
		
		String value = null;
		CtrRfcRepositorioFacturasDAO repositorioFacturasDAO = new CtrRfcRepositorioFacturasDAO(getSessionHibernate(request));
		List lr = repositorioFacturasDAO.findAll();

		request.setAttribute("listRepositorios", lr);

		request.setAttribute("filtro", "2");
		request.setAttribute(Constantes.ACCION_KEY, "/usuarioRepositorio");// revisar
		return mapping.findForward("dml");
	}

	public ActionForward guardar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {//se utiliza para almacenar en la base
		UsuarioRepositorioForm usuarioRepositorioForm = (UsuarioRepositorioForm) form;
		CtrUreUsuarioRepositorioDAO usuarioRepositorioDAO = new CtrUreUsuarioRepositorioDAO(getSessionHibernate(request));
		SecPerPersonaDAO secPerPersonaDAO = new SecPerPersonaDAO(getSessionHibernate(request));
		CtrRfcRepositorioFacturasDAO repositorioFacturasDAO = new CtrRfcRepositorioFacturasDAO(getSessionHibernate(request));
		CtrUreUsuarioRepositorio usuarioRepositorioModel = usuarioRepositorioForm.getUsuarioRepositorioH();
		CtrRfcRepositorioFacturas repositorio = repositorioFacturasDAO.findById(usuarioRepositorioModel.getCtrRfcRepositorioFacturas().getRfcId());
		SecPerPersona persona = secPerPersonaDAO.findById(usuarioRepositorioModel.getSecPerPersona().getPerId());
		usuarioRepositorioModel.setSecPerPersona(persona);
		usuarioRepositorioModel.setCtrRfcRepositorioFacturas(repositorio);
		//usuarioRepositorioModel.setUreId(usuarioRepositorioDAO.nextId());
		Transaction trx = usuarioRepositorioDAO.getSession().beginTransaction();
		try {
			usuarioRepositorioDAO.getSession().save(usuarioRepositorioModel);
			trx.commit();
		} catch (Exception e) {
			// TODO: handle exception
			trx.rollback();
			e.printStackTrace();
		} finally {
			usuarioRepositorioDAO.getSession().flush();
			usuarioRepositorioDAO.getSession().clear();
			
		}
		return lista(mapping, form, request, response);
	}
	
	public ActionForward union(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {//se utiliza para almacenar en la base
		UsuarioRepositorioForm usuarioRepositorioForm = (UsuarioRepositorioForm) form;
		CtrUreUsuarioRepositorioDAO usuarioRepositorioDAO = new CtrUreUsuarioRepositorioDAO(getSessionHibernate(request));
		CtrRfcRepositorioFacturasDAO repositorioFacturasDAO = new CtrRfcRepositorioFacturasDAO(getSessionHibernate(request));
		CtrRfcRepositorioFacturas repositorioFacturas = repositorioFacturasDAO.findById(usuarioRepositorioForm.getCtrRfcRepositorioFacturas().getRfcId());
		Transaction tx = usuarioRepositorioDAO.getSession().beginTransaction();
		int sucId = usuarioRepositorioForm.getSucId();
		SecPerPersonaDAO secPerPersonaDAO = new SecPerPersonaDAO(getSessionHibernate(request));
		List lst = secPerPersonaDAO.findAllBySucursal(sucId);
		for (Iterator iterator = lst.iterator(); iterator.hasNext();) {
			SecPerPersona persona = (SecPerPersona) iterator.next();
			CtrUreUsuarioRepositorio uRepositorio = new CtrUreUsuarioRepositorio();
			uRepositorio.setSecPerPersona(persona);
			uRepositorio.setAudFechaCreacion(new Date());
			uRepositorio.setAudFechaModificacion(new Date());
			uRepositorio.setAudUsuarioCreacion(usuarioRepositorioForm.getUsuarioConectado().getNombreUsuario());
			uRepositorio.setAudUsuarioModificacion(usuarioRepositorioForm.getUsuarioConectado().getNombreUsuario());
			
			uRepositorio.setCtrRfcRepositorioFacturas(repositorioFacturas);
			
			usuarioRepositorioDAO.save(uRepositorio);
			
			tx.commit();
		}
		usuarioRepositorioDAO.getSession().flush();
		usuarioRepositorioDAO.getSession().clear();
		

		return lista(mapping, form, request, response);
	}
	
	public ActionForward buscar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		UsuarioRepositorioForm repositorioForm = (UsuarioRepositorioForm) form;
		CtrUreUsuarioRepositorioDAO usuarioRepositorioDAO = new CtrUreUsuarioRepositorioDAO(getSessionHibernate(request));
		List ls = null;
		//Transaction tx = usuarioRepositorioDAO.getSession().beginTransaction();
		SecPerPersonaDAO personaDAO = new SecPerPersonaDAO(getSessionHibernate(request));
		ls = usuarioRepositorioDAO.findByCriteria(repositorioForm.getUsuarioRepositorioH());
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(ls);
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);//, ExportType.PDF);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
		request.setAttribute("form", repositorioForm);
		request.setAttribute(Constantes.ACCION_KEY, "/usuarioRepositorio");
        request.setAttribute("filtro", "0");
		return mapping.findForward("lista");
	}


	
	protected Map<String, String>  getKeyMethodMap() {
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.usuarioRepositorio.lista", "lista");
		map.put("cmd.usuarioRepositorio.forwardToAgregar", "forwardToAgregar");
		map.put("cmd.usuarioRepositorio.addSucursal", "addSucursal");
		map.put("cmd.usuarioRepositorio.agregar", "guardar");
		map.put("cmd.usuarioRepositorio.guardar2", "union");
		map.put("cmd.usuarioRepositorio.buscar", "buscar");
		return map;
	}

	public class UsuarioT {
		private String nombresU;
		private String id;

		public String getNombresU() {
			return nombresU;
		}

		public void setNombresU(String nombresU) {
			this.nombresU = nombresU;
		}

		public String getId() {
			return id;
		}

		public void setId(String id) {
			this.id = id;
		}

	}

}