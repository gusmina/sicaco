/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.control.struts.action;

import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.hibernate.Transaction;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeImpl;
import org.jmesa.limit.ExportType;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.BasicCellEditor;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.html.HtmlBuilder;

import com.cetia.sicaco.control.struts.form.ControlFacturaForm;
import com.cetia.sicaco.hibernate.CtrCfcControlFacturacion;
import com.cetia.sicaco.hibernate.CtrCfcControlFacturacionDAO;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;
import com.mad.utilidades.Format;

/**
 * MyEclipse Struts Creation date: 04-14-2008
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/controlFactura" name="controlFacturaForm"
 *                parameter="accion" scope="request" validate="true"
 */
public class ControlFacturaAction extends DMLAction {

	public static final String TABLA_ID = "ctrCfcControlFacturacion";

	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ControlFacturaForm controlFacturaForm = (ControlFacturaForm) form;
		CtrCfcControlFacturacionDAO ctrlFacturaDAO = new CtrCfcControlFacturacionDAO(getSessionHibernate(request));
		java.util.List lst = null;
		Transaction tx = ctrlFacturaDAO.getSession().beginTransaction();
		lst = ctrlFacturaDAO.findAll();
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);

		// ---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");

		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
			// ---- exporta la tabla
			export(tableFacade);// metodos
			return null;
		} else {
			// ---- genera el html de la tabla para ser mostrada
			String html = html(tableFacade, request);// metodos
			request.setAttribute(Constantes.LISTA_KEY, html);
		}

		// ----- Variables de configuracion
		request.setAttribute(Constantes.ACCION_KEY, "/controlFactura");
		request.setAttribute("filtro", "0");
		return mapping.findForward("lista");
	}

	private String html(final TableFacade tableFacade,
			final HttpServletRequest request) {
		tableFacade.setColumnProperties("cfcSerie", "cfcCorrIni", "cfcCorrFin" ,"audFechaCreacion");
		Table table = tableFacade.getTable();
		// ---- Titulo de la tabla
		table.setCaptionKey("tbl.controlFactura.caption");
		Row row = table.getRow();

		Column nombreColumna = row.getColumn("cfcSerie");
		nombreColumna.setTitleKey("tbl.controlFacturas.cfcSerie");

		nombreColumna = row.getColumn("cfcCorrIni");
		nombreColumna.setTitleKey("tbl.controlFactura.cfcCorrIni");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){
			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtrCfcControlFacturacion control = (CtrCfcControlFacturacion)item;
				value = Format.formatNumeroFactura(control.getCfcCorrIni(), control.getCfcDigitos());
				return value;
			}
		});

		nombreColumna = row.getColumn("cfcCorrFin");
		nombreColumna.setTitleKey("tbl.controlFactura.cfcCorrFin");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){
			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtrCfcControlFacturacion control = (CtrCfcControlFacturacion)item;
				value = Format.formatNumeroFactura(control.getCfcCorrFin(), control.getCfcDigitos());
				return value;
			}
		});
		
		nombreColumna = row.getColumn("audFechaCreacion");
		nombreColumna.setTitleKey("tbl.controlFactura.accion");
		
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){
		public Object getValue(Object item, String property, int rowcount) {
			Object value = new BasicCellEditor().getValue(item, property, rowcount);
			CtrCfcControlFacturacion control = (CtrCfcControlFacturacion)item;
			value = "Editar";
			HtmlBuilder htmlCt = new HtmlBuilder();
			String link = tableFacade.getWebContext().getContextPath();
			link += "/control/controlFactura.do?cfcSerie="+control.getCfcSerie().toString()+"&accion=forwardToEdicion";
			htmlCt.a().href().quote().append(link).quote().append("class=\"linkEditar\"").title(value.toString()).close();
			//htmlCt.a().href().quote().append(link).quote().close();
			//htmlCt.append(value);
			htmlCt.aEnd();
			
			return htmlCt.toString();
		}
	});

		return tableFacade.render();
	}

	// ---- Funcion que genera los exports, el formato que tendran
	private void export(final TableFacade tableFacade) {
		tableFacade.setColumnProperties("ctrEmpEmpresa.empNombre", "cfcSerie",
				"cfcCorrIni", "cfcCorrFin");
		Table table = tableFacade.getTable();
		// ---- Titulo de la tabla
		table.setCaptionKey("tbl.controlFactura.caption");
		Row row = table.getRow();
		Column nombreColumna = row.getColumn("ctrEmpEmpresa.empNombre");
		nombreColumna.setTitleKey("tbl.controlFacturas.ctrEmpEmpresa.empNombre");

		nombreColumna = row.getColumn("cfcSerie");
		nombreColumna.setTitleKey("tbl.controlFacturas.cfcSerie");

		nombreColumna = row.getColumn("cfcCorrIni");
		nombreColumna.setTitleKey("tbl.controlFactura.cfcCorrIni");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){
			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtrCfcControlFacturacion control = (CtrCfcControlFacturacion)item;
				value = Format.formatNumeroFactura(control.getCfcCorrIni(), control.getCfcDigitos());
				return value;
			}
		});

		nombreColumna = row.getColumn("cfcCorrFin");
		nombreColumna.setTitleKey("tbl.controlFactura.cfcCorrFin");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){
			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtrCfcControlFacturacion control = (CtrCfcControlFacturacion)item;
				value = Format.formatNumeroFactura(control.getCfcCorrFin(), control.getCfcDigitos());
				return value;
			}
		});

		tableFacade.render();
	}

	public ActionForward buscar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ControlFacturaForm controlFacturaForm = (ControlFacturaForm) form;
		CtrCfcControlFacturacionDAO ctrCfcControlFacturacionDAO = new CtrCfcControlFacturacionDAO(getSessionHibernate(request));
		java.util.List lst = null;
		Transaction tx = ctrCfcControlFacturacionDAO.getSession().beginTransaction();
		lst  = ctrCfcControlFacturacionDAO.findByCriteria(controlFacturaForm.getControlFacturacionH());


		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);//, ExportType.PDF);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
		request.setAttribute(Constantes.ACCION_KEY, "/controlFactura");
        request.setAttribute("filtro", "0");
		return mapping.findForward("lista");
	}
		
	public ActionForward guardar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ControlFacturaForm cform = (ControlFacturaForm) form;
		CtrCfcControlFacturacionDAO ctrCfcControlFacturacionDAO = new CtrCfcControlFacturacionDAO(getSessionHibernate(request));
		if(cform.getCfcCorrIni()<1){
			mensajes("error.cfc.iniNegativo", cform, request, response);
			return lista(mapping, form, request, response);
		}
		if(cform.getCfcCorrFin() < cform.getCfcCorrIni()){
			mensajes("error.cfc.finMenorIni", cform, request, response);
			return lista(mapping, form, request, response);
		}
		if(ctrCfcControlFacturacionDAO.findSame(cform.getCfcSerie()).size() > 0){
			mensajes("error.cfc.mismaSerie", cform, request, response);
			return lista(mapping, form, request, response);
		}
		
		Transaction tx = ctrCfcControlFacturacionDAO.getSession().beginTransaction();
		CtrCfcControlFacturacion modelControlFactura = cform.getControlFacturacionH();
		ctrCfcControlFacturacionDAO.getSession().save(modelControlFactura);
		tx.commit();
		ctrCfcControlFacturacionDAO.getSession().flush();
		ctrCfcControlFacturacionDAO.getSession().clear();
		
		return lista(mapping, form, request, response);
	}

	public ActionForward editar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ControlFacturaForm cform = (ControlFacturaForm) form;
		if(cform.getCfcCorrIni()<1){
			mensajes("error.cfc.iniNegativo", cform, request, response);
			return forwardToEdicion(mapping, form, request, response);
		}
		if(cform.getCfcCorrFin() < cform.getCfcCorrIni()){
			mensajes("error.cfc.finMenorIni", cform, request, response);
			return forwardToEdicion(mapping, form, request, response);
		}
		CtrCfcControlFacturacionDAO ctrCfcControlFacturacionDAO = new CtrCfcControlFacturacionDAO(getSessionHibernate(request));
		Transaction tx = ctrCfcControlFacturacionDAO.getSession()
				.beginTransaction();
		try {
			ctrCfcControlFacturacionDAO.getSession().merge(cform.getControlFacturacionH());
			tx.commit();
		} catch (Exception e) {
			// TODO: handle exception
			tx.rollback();
			e.printStackTrace();
		} finally {
			ctrCfcControlFacturacionDAO.getSession().flush();
			ctrCfcControlFacturacionDAO.getSession().clear();
			
		}
		return lista(mapping, form, request, response);
	}

	public ActionForward redirectInvalidData(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		ActionErrors errors = (ActionErrors)request.getSession().getAttribute(Constantes.ERRORS);
		saveMessages(request, errors);
		return lista(mapping, form, request, response);
	}
	
	public void mensajes(String msg,ControlFacturaForm form,
			HttpServletRequest request, HttpServletResponse response){
		ActionErrors errors = new ActionErrors();
		errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(msg));
        saveMessages(request, errors);
	}

	public ActionForward forwardToEdicion(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		ControlFacturaForm cForm = (ControlFacturaForm) form;
		CtrCfcControlFacturacionDAO ctrCfcControlFacturacionDAO = new CtrCfcControlFacturacionDAO(getSessionHibernate(request));
		cForm.setControlFacturacionH(ctrCfcControlFacturacionDAO.findById(cForm.getCfcSerie()));
		request.setAttribute("mode", "readonly");
		request.setAttribute("form", cForm);
		request.setAttribute("filtro", "1");
		request.setAttribute(Constantes.ACCION_KEY, "/controlFactura");// revisar
		return mapping.findForward("dml");
	}

	public ActionForward cancelar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		return lista(mapping, form, request, response);
	}

	
	protected Map getKeyMethodMap() {
		// TODO Auto-generated method stub
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.controlFactura.lista", "lista");
		map.put("cmd.controlFactura.guardar", "guardar");
		map.put("cmd.controlFactura.editar", "editar");
		map.put("cmd.controlFactura.buscar", "buscar");
		map.put("cmd.controlFactura.forwardToEdicion", "forwardToEdicion");
		map.put("cmd.controlFactura.redirectInvalidData", "redirectInvalidData");
		map.put("cmd.controlFactura.cancelar", "cancelar");
		return map;
	}

}