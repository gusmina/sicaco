/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.control.struts.action;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.hibernate.Transaction;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeFactory;
import org.jmesa.limit.ExportType;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.BasicCellEditor;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.html.HtmlBuilder;

import com.cetia.sicaco.control.struts.form.ParametrosForm;
import com.cetia.sicaco.hibernate.ConRimRetencionImpuesto;
import com.cetia.sicaco.hibernate.ConRimRetencionImpuestoDAO;
import com.cetia.sicaco.hibernate.CtrParParametros;
import com.cetia.sicaco.hibernate.CtrParParametrosDAO;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;

/** 
 * MyEclipse Struts
 * Creation date: 03-06-2008
 * 
 * XDoclet definition:
 * @struts.action path="/parametros" name="parametrosForm" input="control" parameter="accion" scope="request" validate="true"
 */
public class ParametrosAction extends DMLAction {
	/*
	 * Generated Methods
	 */

	public static final String TABLA_ID = "ctrParParametros";
	private final static String PARMATER_ID="parameterId";
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	
	
	
	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ParametrosForm parametrosForm = (ParametrosForm) form;
		CtrParParametrosDAO parametrosDAO = new CtrParParametrosDAO(getSessionHibernate(request));
		Transaction tx = parametrosDAO.getSession().beginTransaction();
		
		TableFacade tableFacade = TableFacadeFactory.createTableFacade(TABLA_ID, request);
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		int totalRows = parametrosDAO.getTotalRowCount();
		tableFacade.setTotalRows(totalRows);
		int rowStart = limit.getRowSelect().getRowStart();
		int rowEnd = limit.getRowSelect().getRowEnd();
		
		try {

			List<CtrParParametros> lst = parametrosDAO.findAll(rowStart, rowEnd);
			tableFacade.setItems(lst);
			//lst  = parametrosDAO.findAll();
			tx.commit();
		} catch (Exception e) {
			// TODO: handle exception
			tx.rollback();
			e.printStackTrace();
		}finally{
			parametrosDAO.getSession().flush();
			parametrosDAO.getSession().clear();
			
		}
		
		/*TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);//, ExportType.PDF);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();*/
		if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
		request.setAttribute(Constantes.ACCION_KEY, "/parametros");
        request.setAttribute("filtro", "1");
		return mapping.findForward("lista");
		 
	}
	
	//---- Funcion que genera el html de la tabla del jmesa
	private String html(final TableFacade tableFacade, final HttpServletRequest request) {
		tableFacade.setColumnProperties("parNombre","parValorDate","parDescripcion");
		Table table = tableFacade.getTable();
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.parametros.caption");
		
		Row row = table.getRow();
		Column nombreColumna = row.getColumn("parNombre");
		nombreColumna.setTitleKey("tbl.parametros.parNombre");
		
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){
			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtrParParametros parametros = (CtrParParametros)item;
				HtmlBuilder html = new HtmlBuilder();
				
				//---- Generar link para entrar a edicion
				String link = tableFacade.getWebContext().getContextPath();
				if(!parametros.getParNombre().equals("PORCENTAJEAPORTACIONES") && !parametros.getParNombre().equals("PORCENTAJEINTERESES")){
					link += "/control/parametros.do?parNombre="+parametros.getParNombre()+ "&accion=editar";
				}else{
					link += "";
				}
				
				html.a().href().quote().append(link).quote().close();
				//---- Agregamos el link con el nombre = value
				html.append(value);
				html.aEnd();
				
				return html.toString();
			}
		});
		//nombreColumna.getCellRenderer().setCellEditor(new DateCellEditor("dd-MMM-yyyy HH:mm"));
		
		nombreColumna = row.getColumn("parDescripcion");
		nombreColumna.setTitleKey("tbl.parametros.parDescripcion");
		
		nombreColumna = row.getColumn("parValorDate");
		nombreColumna.setTitleKey("tbl.parametros.parValorDate");
		
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtrParParametros parametros = (CtrParParametros)item;
				HtmlBuilder html = new HtmlBuilder();
				if(parametros.getParValorBoolean()!=null && !parametros.getParValorBoolean().toString().trim().equals("")){
					if(parametros.getParValorBoolean() == 1) value = "Verdadero";
					else value = "Falso";
				}else{
					if(parametros.getParValorNumber()!= null && !parametros.getParValorNumber().toString().trim().equals("")){
						if((parametros.getParValorNumber())%1 == 0){
							value = parametros.getParValorNumber().intValue();
						}else{
							value = parametros.getParValorNumber().toString();
						}
						
						
					}else{
						if(parametros.getParValorString()!=null && !parametros.getParValorString().trim().equals("")){
							value = parametros.getParValorString();
						}else{
							SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
							value = sdf.format(parametros.getParValorDate());
						}
					}
				}
				
				//value = ((inicioSesion.getIseFechaActivacion()==null)?"":("Activo"));
				//value = value + ((inicioSesion.getIsePorqueInactivacion()==null)?"":(" "+inicioSesion.getIsePorqueInactivacion()));
				//---- Agregamos el link con el nombre = value
				html.append(value);
				return html.toString();
			}
		});
		
		return tableFacade.render();
	}
	
	//---- Funcion que genera los exports, el formato que tendran
	 private void export(final TableFacade tableFacade) {
		 tableFacade.setColumnProperties("parNombre","parValorDate","parDescripcion");
			Table table = tableFacade.getTable();
			//---- Titulo de la tabla
			table.setCaptionKey("tbl.parametros.caption.export");
			
			Row row = table.getRow();
			Column nombreColumna = row.getColumn("parNombre");
			nombreColumna.setTitleKey("tbl.parametros.parNombre.export");
			
			nombreColumna = row.getColumn("parDescripcion");
			nombreColumna.setTitleKey("tbl.parametros.parDescripcion.export");
			
			nombreColumna = row.getColumn("parValorDate");
			nombreColumna.setTitleKey("tbl.parametros.parValorDate.export");
			
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

				public Object getValue(Object item, String property, int rowcount) {
					Object value = new BasicCellEditor().getValue(item, property, rowcount);
					CtrParParametros parametros = (CtrParParametros)item;
					HtmlBuilder html = new HtmlBuilder();
					if(parametros.getParValorBoolean()!=null && !parametros.getParValorBoolean().toString().trim().equals("")){
						if(parametros.getParValorBoolean() == 1) value = "Verdadero";
						else value = "Falso";
					}else{
						if(parametros.getParValorNumber()!= null && !parametros.getParValorNumber().toString().trim().equals("")){
							value = parametros.getParValorNumber().toString();
						}else{
							if(parametros.getParValorString()!=null && !parametros.getParValorString().trim().equals("")){
								value = parametros.getParValorString();
							}else{
								SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
								value = sdf.format(parametros.getParValorDate());
							}
						}
					}
					
					html.append(value);
					return html.toString();
				}
			});
					
			tableFacade.render();
	}
	 

	//---- Forward que hace render de una tabla que contiene la sesion con la lista de una busqueda
	
	public ActionForward editar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		ParametrosForm parametrosForm = (ParametrosForm) form;
		CtrParParametrosDAO parametrosDAO = new CtrParParametrosDAO(getSessionHibernate(request));
		CtrParParametros ctParParametros = parametrosDAO.findById(parametrosForm.getParNombre());
 		parametrosForm.setParametrosH(ctParParametros);
 		request.getSession().setAttribute(PARMATER_ID,ctParParametros);
		request.setAttribute("form", parametrosForm);
		request.setAttribute(Constantes.ACCION_KEY, "/parametros");
		request.setAttribute("filtro", 0);
		if(parametrosForm.getParametrosH().getParValorNumber() != null){
			parametrosForm.setParValorNumber(ctParParametros.getParValorNumber().toString());
			request.setAttribute("valor", 0);
		}else{
			if(parametrosForm.getParametrosH().getParValorString() != null && !parametrosForm.getParametrosH().getParValorString().trim().equals("")){
				request.setAttribute("valor", 1);
			}else{
				if(parametrosForm.getParametrosH().getParValorBoolean() != null){
					request.setAttribute("valor",2);
				}else{
					request.setAttribute("valor", 3);
				}
			}
		}
		return mapping.findForward("dml");
	}
	@SuppressWarnings("deprecation")
	private ActionForward redirectInvalidData(ActionMapping mapping,HttpServletRequest request,ActionErrors errors){
		ParametrosForm parametrosForm = new ParametrosForm();
		CtrParParametros ctrParParametros =(CtrParParametros)request.getSession().getAttribute(PARMATER_ID);
		parametrosForm.setParametrosH(ctrParParametros);
		request.setAttribute("form", parametrosForm);
		request.setAttribute(Constantes.ACCION_KEY, "/parametros");
		request.setAttribute("filtro", 0);
		if(ctrParParametros.getParValorNumber() != null){
			parametrosForm.setParValorNumber(ctrParParametros.getParValorNumber().toString());
			request.setAttribute("valor", 0);
		}else{
			if(ctrParParametros.getParValorString() != null && !ctrParParametros.getParValorString().trim().equals("")){
				request.setAttribute("valor", 1);
			}else{
				if(ctrParParametros.getParValorBoolean() != null){
					request.setAttribute("valor",2);
				}else{
					request.setAttribute("valor", 3);
				}
			}
		}
		saveMessages(request, errors);
		return mapping.findForward("dml");
	}
	
	
	
	public ActionErrors validateForm(ParametrosForm form){
		ActionErrors errors = new ActionErrors();
				if(form.getTipoDato().equals("s")){
					if(form.getParValorString() == null || form.getParValorString().trim().equals("")){
						errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.parametros.parValor"));
					}
				}
				if(form.getTipoDato().equals("n")){
					if(form.getParValorNumber() == null ||  form.getParValorNumber().trim().equals("")){
						errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.parametros.parValor"));
					}else{
						try {
							Double parValor = Double.parseDouble(form.getParValorNumber());
							form.getParametrosH().setParValorNumber(parValor);
						} catch (Exception e) {
							// TODO: handle exception
							errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.parametros.parValorNumber"));
						}
					}
				}
				if(form.getTipoDato().equals("d")){
					if(form.getParValorDate() == null || form.getParValorDate().trim().equals("")){
						errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.parametros.parValor"));
					}
				}
				if(form.getParDescripcion() == null || form.getParDescripcion().trim().equals("")){
					errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.parametros.parDescripcion"));
				}
				return errors;
	}	
	
	
	public ActionForward salvar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		ActionErrors errors= validateForm((ParametrosForm)form);
		if(errors.size() > 0){
			return redirectInvalidData(mapping,request,errors);
		}
		ParametrosForm parametrosForm = (ParametrosForm) form;
		CtrParParametrosDAO parametrosDAO = new CtrParParametrosDAO(getSessionHibernate(request));
		Transaction trx = parametrosDAO.getSession().beginTransaction();
		if(parametrosForm.getParValorDate()==null){
			parametrosForm.getParametrosH().setParValorDate(new Date());
		}
		parametrosDAO.merge(parametrosForm.getParametrosH());
		if(parametrosForm.getParNombre().equals("IVA")){
			ConRimRetencionImpuestoDAO conRimRetencionImpuestoDAO = new ConRimRetencionImpuestoDAO(getSessionHibernate(request));
			ConRimRetencionImpuesto impuesto = new ConRimRetencionImpuesto();
			impuesto = conRimRetencionImpuestoDAO.findById(1);
			impuesto.setRimImpuesto(new Double(parametrosForm.getParValorNumber()));
			impuesto.setAudUsuarioModificacion(parametrosForm.getUsuarioConectado().getNombreUsuario());
			impuesto.setAudFechaModificacion(new Date());
			conRimRetencionImpuestoDAO.merge(impuesto);
		}
		trx.commit();
		parametrosDAO.getSession().flush();
		parametrosDAO.getSession().clear();
		
		return lista(mapping,form,request,response);
	}
	
	public ActionForward cancelar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		return lista(mapping,form,request,response);
	}
	
	//---- Mapas usados para conectar las acciones
	protected Map<String, String> getKeyMethodMap() {
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.parametros.lista", "lista");
		map.put("cmd.parametros.editar", "editar");
		map.put("cmd.parametros.modificar", "salvar");
		map.put("cmd.parametros.cancelar","cancelar");
		//map.put("cmd.parametros.buscar","buscar");
		return map;
	}
}