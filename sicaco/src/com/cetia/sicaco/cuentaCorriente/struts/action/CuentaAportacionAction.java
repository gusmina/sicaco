/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.cuentaCorriente.struts.action;

import java.sql.Connection;
import java.sql.DriverManager;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletContext;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.hibernate.Transaction;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeImpl;
import org.jmesa.limit.ExportType;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.BasicCellEditor;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.editor.DateCellEditor;

import com.cetia.sicaco.cuentaCorriente.struts.form.AgregaBenForm;
import com.cetia.sicaco.cuentaCorriente.struts.form.CuentaAhorroForm;
import com.cetia.sicaco.cuentaCorriente.struts.form.CuentaAsociadoForm;
import com.cetia.sicaco.hibernate.CtaAscAsociado;
import com.cetia.sicaco.hibernate.CtaAscAsociadoDAO;
import com.cetia.sicaco.hibernate.CtaCahCuentaAhorro;
import com.cetia.sicaco.hibernate.CtaCahCuentaAhorroDAO;
import com.cetia.sicaco.hibernate.CtaCasCuentaAsociado;
import com.cetia.sicaco.hibernate.CtaCasCuentaAsociadoDAO;
import com.cetia.sicaco.hibernate.CtaMxaMovimientoAhorro;
import com.cetia.sicaco.hibernate.CtaMxaMovimientoAhorroDAO;
import com.cetia.sicaco.hibernate.CtaTxaTransaccionxcuentaAsociado;
import com.cetia.sicaco.hibernate.CtaTxaTransaccionxcuentaAsociadoDAO;
import com.cetia.sicaco.hibernate.CtrEstEstado;
import com.cetia.sicaco.hibernate.CtrParParametros;
import com.cetia.sicaco.hibernate.CtrParParametrosDAO;
import com.cetia.sicaco.hibernate.HibernateSessionFactory;
import com.cetia.sicaco.hibernate.SecIseInicioSesion;
import com.cetia.sicaco.hibernate.SecIseInicioSesionDAO;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;
import com.cetia.sicaco.struts.PartidaAutomatica;
import com.mad.utilidades.ExportReport;
import com.mad.utilidades.Format;
import com.mad.utilidades.ReportFile;

/** 
 * MyEclipse Struts
 * Creation date: 08-26-2008
 * 
 * XDoclet definition:
 * @struts.action path="/cuentaAportacion" name="cuentaAhorroForm" input="redirectInvalidData" parameter="accion" scope="request" validate="true"
 * @struts.action-forward name="lista" path="plantilla-lista.cuentaCorriente.cuentaAportacion"
 * @struts.action-forward name="redirectInvalidData" path="redirectInvalidData" redirect="true"
 */
public class CuentaAportacionAction extends DMLAction {
	public String TABLA_ID = "ctaMxaMovimientoAhorro";
	public String LIST_ESTADO = "lstCtrEstEstado";
	
	
	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		CuentaAhorroForm cuentaAhorroForm = (CuentaAhorroForm) form;
		CtaMxaMovimientoAhorroDAO movimientosAhorro = new CtaMxaMovimientoAhorroDAO(getSessionHibernate(request));
		CtrParParametrosDAO parametroCuotaDAO = new CtrParParametrosDAO(getSessionHibernate(request));
		CtrParParametros parametroCuota = new CtrParParametros();
		CtaCahCuentaAhorroDAO cueAhDAO = new CtaCahCuentaAhorroDAO(getSessionHibernate(request));
		List lst = null;
		if(cuentaAhorroForm.getCahId()!=null){//si se modificara
			lst = movimientosAhorro.findByProperty("ctaCahCuentaAhorro.cahId", cuentaAhorroForm.getCahId());
			CtaCasCuentaAsociadoDAO cuentaADAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
			CtaCasCuentaAsociado cuA = new CtaCasCuentaAsociado();
			List listC = cuentaADAO.findByProperty("ctaCahCuentaAhorro.cahId", cuentaAhorroForm.getCahId());
			cuA = (CtaCasCuentaAsociado)listC.get(0);
			cuentaAhorroForm.setCtaCasCuentaAsociado(cuA);
		}else{//si es nueva
			/*if(request.getSession().getAttribute("nuevaCuenta")== null){
				cuentaAhorroForm = (CuentaAhorroForm) request.getAttribute("form");
			}*/
			lst = movimientosAhorro.findByProperty("ctaCahCuentaAhorro.cahId", " ");
			
			cuentaAhorroForm.setCahId(cueAhDAO.generarId("A"));
			parametroCuota = parametroCuotaDAO.findById("APORTACION_MIN");
			Double num = parametroCuota.getParValorNumber();
			cuentaAhorroForm.setCahCuota(num);
			cuentaAhorroForm.setCasValorApertura(0.0);
			SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
			cuentaAhorroForm.setCasFechaApertura(sdf.format(new Date()));
		}
		
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);
		
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
		
		
		CtaAscAsociadoDAO ascDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
		//CtaAscAsociado jpe = ascDAO.findById(cuentaAhorroForm.getAscId());
		if(cuentaAhorroForm.getAscId()== null || cuentaAhorroForm.getAscId().trim().equals("")){
			cuentaAhorroForm.setAscId((String)request.getAttribute("ASC_ID"));
		}
		request.setAttribute("asociadoNombre",ascDAO.findById(cuentaAhorroForm.getAscId()));
		request.setAttribute("referencia", cuentaAhorroForm.getCtaCahCuentaAhorroH());
		request.setAttribute("form", cuentaAhorroForm);
		request.setAttribute(Constantes.ACCION_KEY, "/cuentaAportacion");
		return mapping.findForward("lista");
	}
	
	//---- metodo que genera el html de la tabla del jmesa
	private String html(final TableFacade tableFacade, final HttpServletRequest request) {
		tableFacade.setColumnProperties("mxaFecha", "mxaSaldoActual","mxaMonto");
		Table table = tableFacade.getTable();
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.cah.caption");
		
		Row row = table.getRow();
		Column nombreColumna = row.getColumn("mxaFecha");
		nombreColumna.setTitleKey("tbl.cah.mxaFecha");
		nombreColumna.getCellRenderer().setCellEditor(new DateCellEditor("dd-MMM-yyyy HH:mm:ss"));
		
		nombreColumna = row.getColumn("mxaSaldoActual");
		nombreColumna.setTitleKey("tbl.cah.mxaSaldoActual");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				String coa = "";
				CtaMxaMovimientoAhorro mxa = (CtaMxaMovimientoAhorro)item;
				CtaTxaTransaccionxcuentaAsociadoDAO txaDao = new CtaTxaTransaccionxcuentaAsociadoDAO(getSessionHibernate(request));
				CtaTxaTransaccionxcuentaAsociado txa = txaDao.findById(mxa.getCtaTxaTransaccionxcuentaAsociado().getTxaId());
				if(txa.getCtaTtrTipoTransaccion().getTtrUso().equals("A")){
					coa = "Abono";
				}else{
					coa = "Cargo";
				}
				return coa;
			}
		});
		
		nombreColumna = row.getColumn("mxaMonto");
		nombreColumna.setTitleKey("tbl.cah.txaMonto");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtaMxaMovimientoAhorro mxa = (CtaMxaMovimientoAhorro)item;
				return Format.formatDinero(mxa.getMxaMonto());
			}
		});
		
		return tableFacade.render();
	}
	
	//---- metodo que genera los exports, el formato que tendran
	 private void export(final TableFacade tableFacade) {
		 tableFacade.setColumnProperties("mxaFecha", "mxaSaldoActual","mxaMonto");
			Table table = tableFacade.getTable();
			//---- Titulo de la tabla
			table.setCaptionKey("tbl.cah.caption");
			
			Row row = table.getRow();
			Column nombreColumna = row.getColumn("mxaFecha");
			nombreColumna.setTitleKey("tbl.cah.mxaFecha");
			nombreColumna.getCellRenderer().setCellEditor(new DateCellEditor("dd-MMM-yyyy HH:mm:ss"));
			
			nombreColumna = row.getColumn("mxaSaldoActual");
			nombreColumna.setTitleKey("tbl.cah.mxaSaldoActual");
			
			nombreColumna = row.getColumn("mxaMonto");
			nombreColumna.setTitleKey("tbl.cah.txaMonto");
			
			tableFacade.render();
	}
	 //formulario de busqueda de cuentas en general.
	 public ActionForward buscarMovimientos(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {
		    CuentaAhorroForm cuentaAhorroForm = (CuentaAhorroForm) form;
			CtaMxaMovimientoAhorroDAO movimientosAhorro = new CtaMxaMovimientoAhorroDAO(getSessionHibernate(request));
			CtrParParametrosDAO parametroCuotaDAO = new CtrParParametrosDAO(getSessionHibernate(request));
			CtrParParametros parametroCuota = new CtrParParametros();
			CtaCahCuentaAhorroDAO cueAhDAO = new CtaCahCuentaAhorroDAO(getSessionHibernate(request));
			List lst = null;
			if(cuentaAhorroForm.getCahId()!=null){
				lst = movimientosAhorro.findByPeriod(cuentaAhorroForm.getFechaIni(), cuentaAhorroForm.getFechaFin(),
													cuentaAhorroForm.getCahId());
				//lst = movimientosAhorro.findByProperty("ctaCahCuentaAhorro.cahId", cuentaAhorroForm.getCahId());
				CtaCasCuentaAsociadoDAO cuentaADAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
				CtaCasCuentaAsociado cuA = new CtaCasCuentaAsociado();
				List listC = cuentaADAO.findByProperty("ctaCahCuentaAhorro.cahId", cuentaAhorroForm.getCahId());
				cuA = (CtaCasCuentaAsociado)listC.get(0);
				cuentaAhorroForm.setCtaCasCuentaAsociado(cuA);
			}else{
				cuentaAhorroForm = (CuentaAhorroForm) request.getAttribute("form");
				lst = movimientosAhorro.findByProperty("ctaCahCuentaAhorro.cahId", " ");
				cuentaAhorroForm.setCahId(cueAhDAO.generarId("A"));
				parametroCuota = parametroCuotaDAO.findById("APORTACION_MIN");
				Double num = parametroCuota.getParValorNumber();
				cuentaAhorroForm.setCahCuota(parametroCuota.getParValorNumber());
				cuentaAhorroForm.setCasValorApertura(num);
				SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
				cuentaAhorroForm.setCasFechaApertura(sdf.format(new Date()));
			}
			
			TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
			tableFacade.setItems(lst);
			//---- Genera los tipos de formas con que se podran exportar los datos
			tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
			tableFacade.setStateAttr("restore");
			Limit limit = tableFacade.getLimit();
			if (limit.isExported()) {
	        	//---- exporta la tabla
	            export(tableFacade);
	            return null; 
	        } else {
	        	String html = html(tableFacade, request);
	            request.setAttribute(Constantes.LISTA_KEY, html);
	        }
	        //----- Variables de configuracion
			CtaAscAsociadoDAO ascDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
			request.setAttribute("asociadoNombre",ascDAO.findById(cuentaAhorroForm.getAscId()));
			request.setAttribute("referencia", cuentaAhorroForm.getCtaCahCuentaAhorroH());
			request.setAttribute("form", cuentaAhorroForm);
			request.setAttribute(Constantes.ACCION_KEY, "/cuentaAportacion");
			return mapping.findForward("lista");
		}
	 
	 //guardar de aportaciones.
	 public ActionForward guardar(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {
		 	ActionForward target = null;
			CuentaAhorroForm cuentaAhorroForm = (CuentaAhorroForm)form;
			if(cuentaAhorroForm.getCtaAscAsociadoH().getAscId() == null){
				CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
				cuentaAhorroForm.setCtaAscAsociadoH(asociadoDAO.findById(request.getSession().getAttribute("asociadoIdAportacion").toString()));
				cuentaAhorroForm.setAscId(cuentaAhorroForm.getCtaAscAsociadoH().getAscId());
			}
			CtaCahCuentaAhorroDAO cuentaAhorroDAO = new CtaCahCuentaAhorroDAO(getSessionHibernate(request));
			CtaCahCuentaAhorro ctaCahCuentaAhorro = new CtaCahCuentaAhorro();
			ctaCahCuentaAhorro = cuentaAhorroForm.getCtaCahCuentaAhorroH();
			CtaCasCuentaAsociado cuentaAsociado = new CtaCasCuentaAsociado();
			CtaCasCuentaAsociadoDAO cuentaAsociadoDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
			CtrEstEstado ctrEstEstado = new CtrEstEstado();
			CtaAscAsociadoDAO asocDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
			CtrParParametrosDAO parametroCuotaDAO = new CtrParParametrosDAO(getSessionHibernate(request));
			Double valorApertura = cuentaAhorroForm.getCtaCasCuentaAsociado().getCasValorApertura();
			Double num = valorApertura;
			Double cuota = new Double(cuentaAhorroForm.getCahCuota());
			Transaction tx = cuentaAhorroDAO.getSession().beginTransaction();
			try{
				int totalAport = cuentaAsociadoDAO.findAllCuentasAsociado(cuentaAhorroForm.getAscId(),"A").size();
				int numeroMaxAport = parametroCuotaDAO.findById("MAXIMO_APORTACIONES").getParValorNumber().intValue();
				if(!cuentaAhorroForm.isMdf()){//ingresando un nuevo registro
					//ingreso de cuenta asociado, cuenta ahorro, mov por ahorro
					/*generando codigo cuenta ahorro formato= 'letra identificadora + fecha + correl'*/
					System.out.println("Cuota:" +cuota);
					System.out.println("Ap. Min:" +parametroCuotaDAO.findById("APORTACION_MIN").getParValorNumber());
					if(totalAport < numeroMaxAport){
						if(cuota >= parametroCuotaDAO.findById("APORTACION_MIN").getParValorNumber()){
							//ingresando datos en cuentaAhorro
							ctrEstEstado.setEstId(9);//estado activo
							ctaCahCuentaAhorro.setCtaTahTipoAhorro(null);
							//ctaCahCuentaAhorro.setCtrEstEstado(ctrEstEstado);
							ctaCahCuentaAhorro.setCahInteresAcumulado(0.0);
							if(num>0){
								ctaCahCuentaAhorro.setCahSaldoActual(num);
							}else{
								ctaCahCuentaAhorro.setCahSaldoActual(new Double(0));
							}
							cuentaAhorroForm.setCtaCahCuentaAhorroH(ctaCahCuentaAhorro);
							cuentaAhorroDAO.save(cuentaAhorroForm.getCtaCahCuentaAhorroH());
													
							//ingresando Datos en Cuenta Asociado
							cuentaAsociado.setCasValorApertura(valorApertura);
							SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
							cuentaAsociado.setCasFechaApertura(sdf.parse(cuentaAhorroForm.getCasFechaApertura()));
							cuentaAsociado.setCtaAscAsociado(asocDAO.findById(cuentaAhorroForm.getAscId()));
							cuentaAsociado.setCtaCahCuentaAhorro(ctaCahCuentaAhorro);
							cuentaAsociado.setCtaCbaCuentaBancaria(null);
							cuentaAsociado.setCtaSegSeguros(null);
							cuentaAsociado.setCtaPrePrestamo(null);
							cuentaAsociado.setCasFechaCierre(null);
							cuentaAsociado.setCtrEstEstado(ctrEstEstado);
							cuentaAsociado.setCasPrincipal("N");
							cuentaAsociado.setCtrEstEstado(ctrEstEstado);
							cuentaAsociado.setCtaPxtPersonaExterna(null);
							cuentaAsociadoDAO.save(cuentaAsociado);
							cuentaAhorroForm.setCasCuenta(cuentaAsociado.getCasCuenta());
							if(num>0){
								//ingresando Datos en Transaccion por Cuenta
								CtaTxaTransaccionxcuentaAsociado transaccionCuenta = new CtaTxaTransaccionxcuentaAsociado();
								CtaTxaTransaccionxcuentaAsociadoDAO transaccionCuentaDAO = new CtaTxaTransaccionxcuentaAsociadoDAO(getSessionHibernate(request));
								transaccionCuenta.getCtaTtrTipoTransaccion().setTtrId(3);//abono por aportacion
								transaccionCuenta.setCtaCasCuentaAsociado(cuentaAsociado);
								transaccionCuenta.setTxaMonto(num);
								transaccionCuenta.setTxaComprobante(transaccionCuentaDAO.nextComprobante());
								transaccionCuenta.setTxaFecha(new Date());
								transaccionCuenta.setAudUsuarioCreacion(cuentaAhorroForm.getUsuarioConectado().getNombreUsuario());
								transaccionCuenta.setAudUsuarioModificacion(cuentaAhorroForm.getUsuarioConectado().getNombreUsuario());
								transaccionCuenta.setAudFechaCreacion(new Date());
								transaccionCuenta.setAudFechaModificacion(new Date());
								transaccionCuenta.setTxaNota("Abono por apertura de cuenta de Aportacion");
								transaccionCuentaDAO.save(transaccionCuenta);
								
								//Falta hacer que se imprima un documento al realizar esta transaccion como proceso interno
								//ingresando Movimiento Ahorro
								CtaMxaMovimientoAhorroDAO movAhorroDAO = new CtaMxaMovimientoAhorroDAO(getSessionHibernate(request));
								CtaMxaMovimientoAhorro movAhorro = new CtaMxaMovimientoAhorro();
								movAhorro.setCtaCahCuentaAhorro(ctaCahCuentaAhorro);
								movAhorro.setMxaFecha(transaccionCuenta.getTxaFecha());
								movAhorro.setMxaMonto(num);
								movAhorro.setMxaSaldo(num);
								movAhorro.setCtaTxaTransaccionxcuentaAsociado(transaccionCuenta/*
																				transaccionCuentaDAO.findById(transaccionCuentaDAO.lastId())*/);
								movAhorro.setMxaInteresTran(0.0);
								movAhorro.setAudUsuarioCreacion(cuentaAhorroForm.getUsuarioConectado().getNombreUsuario());
								movAhorro.setAudUsuarioModificacion(cuentaAhorroForm.getUsuarioConectado().getNombreUsuario());
								movAhorro.setAudFechaCreacion(new Date());
								movAhorro.setAudFechaModificacion(new Date());
								movAhorroDAO.save(movAhorro);
								PartidaAutomatica partidaAutomatica =  new PartidaAutomatica();
								partidaAutomatica.crearPartidaAutomatica("1;1;0;"+
										transaccionCuenta.getCtaTtrTipoTransaccion().getTtrId()+";0;-1", num, 
										cuentaAhorroForm.getUsuarioConectado().getNombreUsuario(), 1, null, null, null,request);
								cuentaAhorroForm.setComprobante(transaccionCuenta.getTxaComprobante());
								cuentaAhorroForm.setApertura(true);
								cuentaAhorroForm.setCasCuenta(cuentaAsociado.getCasCuenta());
								target = lista(mapping, form, request, response);
							}else{
								target = forwardToBeneficiario(mapping, form, request, response);
								/*request.getSession().setAttribute("asociadoIdAportacion",cuentaAsociado.getCtaAscAsociado().getAscId());
								request.getSession().setAttribute("porcent",1);
								BeneficiariosForm beneForm = new BeneficiariosForm();
								beneForm.setCuentaX(cuentaAsociado.getCasCuenta());
								request.setAttribute("beneficiariosForm", beneForm);
								target = mapping.findForward("beneficiariosLista");*/
							}
							
							tx.commit();
						    /*request.getSession().setAttribute("asociadoIdAportacion",cuentaAsociado.getCtaAscAsociado().getAscId());
							//request.setAttribute("asociadoIdAportacion", cuentaAsociado.getCtaAscAsociado().getAscId());
							request.getSession().setAttribute("porcent",1);
							BeneficiariosForm beneForm = new BeneficiariosForm();
							beneForm.setCuentaX(cuentaAsociado.getCasCuenta());
							request.setAttribute("beneficiariosForm", beneForm);
							target = mapping.findForward("beneficiariosLista");*/
						}else{
							mensajes("errors.cahCuotaInvalida",request);
							target= lista(mapping, form, request, response);
						}
					}else{
						cuentaAhorroForm.setCtaCahCuentaAhorroH(new CtaCahCuentaAhorro());
						request.getSession().setAttribute("nuevaCuenta", 1);
						mensajes("errors.capSobrepasoNumAportPermitidas",request);
						target= lista(mapping, cuentaAhorroForm, request, response);
					
					}
					
				}else{//modificando un registro
					if(cuota >= parametroCuotaDAO.findById("APORTACION_MIN").getParValorNumber()){
						/*if(num>0){
							ctaCahCuentaAhorro.setCahSaldoActual(num);
						}else{
							ctaCahCuentaAhorro.setCahSaldoActual(new Double(0));
						}*/
						CtaCasCuentaAsociadoDAO cuentaADAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
						CtaCasCuentaAsociado cuA = new CtaCasCuentaAsociado();
						List listC = cuentaADAO.findByProperty("ctaCahCuentaAhorro.cahId", cuentaAhorroForm.getCahId());
						cuA = (CtaCasCuentaAsociado)listC.get(0);
						cuA.getCtaCahCuentaAhorro().setCahCuota(cuota);
						//cuA.getCtaCahCuentaAhorro().setCahCuota(ctaCahCuentaAhorro.getCahCuota());
						cuA.getCtaCahCuentaAhorro().setCahSaldoActual(ctaCahCuentaAhorro.getCahSaldoActual());
						//ctaCahCuentaAhorro = cuentaAhorroForm.getCtaCahCuentaAhorroH();
						//ctrEstEstado.setEstId(9);
						
						//ctaCahCuentaAhorro.setCtaTahTipoAhorro(null);
						//ctaCahCuentaAhorro.setCtrEstEstado(ctrEstEstado);
						//ctaCahCuentaAhorro.setCahInteresAcumulado(0.0);
						//cuentaAhorroDAO.merge(cuA);
						//cuentaAsociado.setCtaPxtPersonaExterna(null);
						//cuentaAsociado.setCtrEstEstado(ctrEstEstado);
						cuentaAsociadoDAO.merge(cuA);
						tx.commit();
						mensajes("exito.ModificacionCuentaAportacion",request);
					}else{
						mensajes("errors.cahCuotaInvalida",request);
					}
					target= lista(mapping, form, request, response);
				}
				
			}catch(Exception e){
				tx.rollback();
				e.printStackTrace();
			}finally{
				cuentaAhorroDAO.getSession().flush();
				cuentaAhorroDAO.getSession().clear();
			}//return to jsp de beneficiarios
			
			return target;
		} 
	 
		 public ActionForward cargarDatos(ActionMapping mapping, ActionForm form,
					HttpServletRequest request, HttpServletResponse response) {
			 CuentaAhorroForm cuentaAForm = (CuentaAhorroForm)form;
			 CtaCahCuentaAhorroDAO cuentaAhorroDAO = new CtaCahCuentaAhorroDAO(getSessionHibernate(request));
			 cuentaAForm.setCtaCahCuentaAhorroH(cuentaAhorroDAO.findById(cuentaAForm.getCahId()));
			return lista(mapping, cuentaAForm, request, response);//mandar nuevo form
		 }
	 
	 
		public ActionForward redirectInvalidData(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response){
			ActionErrors errors = (ActionErrors)request.getSession().getAttribute(Constantes.ERRORS);
			saveMessages(request, errors);
			return lista(mapping, form, request, response);
		}
		
		
		public ActionForward toCuentasDesdeAportacion(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response){
			String asociadoId = request.getSession().getAttribute("asociadoId").toString();
			CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
			CtaAscAsociado asociado = asociadoDAO.findById(asociadoId);
			CuentaAsociadoForm cuentaAsociadoForm = new CuentaAsociadoForm();
			cuentaAsociadoForm.setAscId(asociado.getAscId());
			cuentaAsociadoForm.setAscCodigo(asociado.getAscCodigo());
			cuentaAsociadoForm.setTipoCuentaMadre("Ap");
			request.setAttribute("form", cuentaAsociadoForm);
			return mapping.findForward("regresar");
		}
		
		public void mensajes(String msg, HttpServletRequest request){
			ActionErrors errors = new ActionErrors();
	        errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(msg));
	        saveMessages(request, errors);
		}
		
		public ActionForward forwardToBeneficiarios(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response){
			return mapping.findForward("beneficiariosLista");
		}
		
		public ActionForward forwardToBeneficiario(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {
			CuentaAhorroForm ahorroForm = (CuentaAhorroForm) form;
			AgregaBenForm benForm = new AgregaBenForm();
			benForm.setCuentaX(ahorroForm.getCasCuenta());
			request.setAttribute("agregaBenForm", benForm);
			request.setAttribute(Constantes.ACCION_KEY, "/agregaBen");
			return mapping.findForward("addBeneAport");
			/*CuentaAhorroForm ahorroForm = (CuentaAhorroForm) form;
			request.getSession().setAttribute("asociadoIdAportacion",ahorroForm.getCtaAscAsociadoH().getAscId());
			request.getSession().setAttribute("porcent",1);
			BeneficiariosForm beneForm = new BeneficiariosForm();
			beneForm.setCuentaX(ahorroForm.getCasCuenta());
			request.setAttribute("beneficiariosForm", beneForm);
			return mapping.findForward("beneficiariosLista");*/
		}
	public ActionForward generarComprobante(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		CuentaAhorroForm ahorroForm = (CuentaAhorroForm) form;
		try{
			Date fechaActual = new Date();
			response.setHeader("Cache-Control","private");
			response.setHeader("Pragma", "Cache");
			String pathReporte = "";//ruta reporte
			String nombreReporte = "";
			ExportReport exportar = null;
			ReportFile reporte = new ReportFile();
			ServletContext servletContext = getServlet().getServletContext();
			
			nombreReporte = "comprobante";
			pathReporte = servletContext
			.getRealPath("/reportesOtros/facturacion/"+nombreReporte+"/"+nombreReporte+".jasper");
			reporte.addParameter("txaComprobante",ahorroForm.getComprobante());
			
			SecIseInicioSesionDAO sesionDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
			SecIseInicioSesion sesion = sesionDAO.findById(ahorroForm.getUsuarioConectado().getNombreUsuario());
			reporte.addParameter("sucNombre",sesion.getSecPerPersona().getSecSucSucursal().getSucNombre());
			
			reporte.setPathJasper(pathReporte);
			exportar = new ExportReport(reporte);//reporte a exportar
			
			//Conexion jdbc normal
			String jdbcDriver = "com.mysql.jdbc.Driver";
			Class.forName(jdbcDriver);
			String url = HibernateSessionFactory.getConfiguration().getProperty("connection.url");
			String user = HibernateSessionFactory.getConfiguration().getProperty("connection.username");
			String pass = HibernateSessionFactory.getConfiguration().getProperty("connection.password");
			Connection con = DriverManager.getConnection(url, user, pass);
			byte[] repCompilado = exportar.exportReportPDF(con);				
			response.setContentType("application/pdf");
			response.setContentLength(repCompilado.length);
			response.setHeader("content-Disposition", "attachment;filename="+nombreReporte+"-"+fechaActual.getTime()+".pdf");
			ServletOutputStream outputStream = response.getOutputStream();
			outputStream.write(repCompilado, 0, repCompilado.length);
			outputStream.flush();
			outputStream.close();
			
		}catch(Exception e){
			e.printStackTrace();
			log.error("Se produjo un error al tratar de generar el reporte...", e);
			System.out.println("Se produjo un error al tratar de generar el reporte...\n");
		}
		return null;
	}
		
	protected Map getKeyMethodMap() {
		// TODO Auto-generated method stub
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.cap.lista", "lista");
		map.put("cmd.cap.buscarMovimientos", "buscarMovimientos");
		map.put("cmd.cap.guardar", "guardar");
		map.put("cmd.cap.forwardToBeneficiarios", "forwardToBeneficiarios");
		map.put("cmd.cap.toCuentasDesdeAportacion", "toCuentasDesdeAportacion");
		map.put("cmd.cap.cargarDatos", "cargarDatos");
		map.put("cmd.cap.generarComprobante", "generarComprobante");
		map.put("cmd.cap.redirectInvalidData", "redirectInvalidData");
		map.put("cmd.cap.continuarBeneficiario", "forwardToBeneficiario");
		return map;
	}
}