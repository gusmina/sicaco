/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.cuentaCorriente.struts.action;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeFactory;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.BasicCellEditor;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.html.HtmlBuilder;

import com.cetia.sicaco.asociados.struts.form.AsociadoForm;
import com.cetia.sicaco.hibernate.CtaAscAsociado;
import com.cetia.sicaco.hibernate.CtaAscAsociadoDAO;
import com.cetia.sicaco.hibernate.CtrEstEstadoDAO;
import com.cetia.sicaco.hibernate.SecPerPersona;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;

/** 
 * MyEclipse Struts
 * Creation date: 08-28-2008
 * 
 * XDoclet definition:
 * @struts.action path="/buscarAsociado" name="asociadoForm" parameter="accion" scope="request"
 * @struts.action-forward name="lista" path="pagina-lista.cuentaCorriente.buscarAsociado"
 */
public class BuscarAsociado extends DMLAction {
	
	public static final String TABLA_ID = "ctaAscAsociado";
	
	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		AsociadoForm asociadoForm = (AsociadoForm)form;
 		CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
 		TableFacade tableFacade = TableFacadeFactory.createTableFacade(TABLA_ID, request);
		//tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		int totalRows = asociadoDAO.getTotalRowCountByNameUser(asociadoForm.getAscAsociadoH());
		tableFacade.setTotalRows(totalRows);
		int rowStart = limit.getRowSelect().getRowStart();
		int rowEnd = limit.getRowSelect().getRowEnd();
		List<CtaAscAsociado> lista = asociadoDAO.findByNameUser(asociadoForm.getAscAsociadoH(),rowStart, rowEnd);
		tableFacade.setItems(lista);
		/*List lst = asociadoDAO.findAll(asociadoForm.getUsuarioConectado().getMax());
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();*/
		if (limit.isExported()) {
        	//---- exporta la tabla
        //    export(tableFacade);
            return null; 
        } else {
        	String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
		request.setAttribute("form", form);
		request.setAttribute(Constantes.ACCION_KEY, "/buscarAsociado");
		return mapping.findForward("lista");
	}
	
	
	private String html(final TableFacade tableFacade, final HttpServletRequest request) {
		tableFacade.setColumnProperties("ascCodigoAsociado","secPerPersona.perPrimerNombre","estId");
		Table table = tableFacade.getTable();
		
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.ascAsociado.caption");
		
		Row row = table.getRow();
		Column nombreColumna = row.getColumn("ascCodigoAsociado");
		nombreColumna.setTitleKey("tbl.ascAsociado.ascCodigo");
		
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtaAscAsociado asociado = (CtaAscAsociado)item;
				HtmlBuilder html = new HtmlBuilder();
				value = asociado.getAscCodigoAsociado();
				//---- Generar link para entrar a edicion
				String link = tableFacade.getWebContext().getContextPath();
				link += "/cuentaCorriente/cuentaAsociado.do?accion=lista&ascId="+asociado.getAscId()+
				"&ascCodigoAsociado="+asociado.getAscCodigoAsociado()+"&tipoCuentaMadre=Ap";
				html.a().href().quote().append(link).quote().close();
				html.append(value);
				html.aEnd();				
				return html.toString();	
			}
		});
		
		nombreColumna = row.getColumn("estId");
		nombreColumna.setTitleKey("tbl.ascAsociado.ascEstado");
		
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtaAscAsociado asociado = (CtaAscAsociado)item;
				CtrEstEstadoDAO estadoDAO = new CtrEstEstadoDAO(getSessionHibernate(request));
				value = estadoDAO.findById(asociado.getEstId()).getEstNombre().toString();
				return value;
			}
		});
		
		nombreColumna = row.getColumn("secPerPersona.perPrimerNombre");
		nombreColumna.setTitleKey("tbl.ascAsociado.ascNombre");
		//----- Implementamos la edicion de asociado
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtaAscAsociado asociado = (CtaAscAsociado)item;
				SecPerPersona persona = asociado.getSecPerPersona();
				value = persona.getPerPrimerApellido();
				value = value + (isObjectNull(persona.getPerSegundoApellido())?"":(" "+persona.getPerSegundoApellido()));
				value = value  + ", " +persona.getPerPrimerNombre();
				value = value  + (isObjectNull(persona.getPerSegundoNombre())?"":(" "+persona.getPerSegundoNombre()));		
				return value.toString();	
			}
		});
		
		return tableFacade.render();
	}
	/*
	public ActionForward buscar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		AsociadoForm asociadoForm = (AsociadoForm) form;
 		CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO();
 		TableFacade tableFacade = TableFacadeFactory.createTableFacade(TABLA_ID, request);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();

		tableFacade.setTotalRows(totalRows);
		int rowStart = limit.getRowSelect().getRowStart();
		int rowEnd = limit.getRowSelect().getRowEnd();
		
		tableFacade.setItems(lst);
		/*List lst = asociadoDAO.findByNameUser(asociadoForm.getAscAsociadoH(),asociadoForm.getUsuarioConectado().getMax());
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();*/
		/*if (limit.isExported()) {
        	//---- exporta la tabla
        //    export(tableFacade);
            return null; 
        } else {
        	String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
		request.setAttribute(Constantes.ACCION_KEY, "/buscarAsociado");
		return mapping.findForward("lista");
	}*/
	
	protected Map<String, String> getKeyMethodMap() {
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.busq.lista","lista");
		map.put("cmd.cas.buscarAsociado","lista");
		return map;
	}
}

