/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.cuentaCorriente.struts.action;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.hibernate.Transaction;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeImpl;
import org.jmesa.limit.ExportType;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.BasicCellEditor;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.editor.DateCellEditor;
import org.jmesa.view.html.HtmlBuilder;

import com.cetia.sicaco.cuentaCorriente.struts.form.CuentaAsociadoForm;
import com.cetia.sicaco.cuentaCorriente.struts.form.SegurosForm;
import com.cetia.sicaco.cuentaCorriente.struts.form.TipoSeguroForm;
import com.cetia.sicaco.hibernate.CtaAscAsociado;
import com.cetia.sicaco.hibernate.CtaAscAsociadoDAO;
import com.cetia.sicaco.hibernate.CtaBenBeneficiarios;
import com.cetia.sicaco.hibernate.CtaBenBeneficiariosDAO;
import com.cetia.sicaco.hibernate.CtaBxcBeneficiariosCuenta;
import com.cetia.sicaco.hibernate.CtaBxcBeneficiariosCuentaDAO;
import com.cetia.sicaco.hibernate.CtaCasCuentaAsociado;
import com.cetia.sicaco.hibernate.CtaCasCuentaAsociadoDAO;
import com.cetia.sicaco.hibernate.CtaMxsMovimientoSeguros;
import com.cetia.sicaco.hibernate.CtaMxsMovimientoSegurosDAO;
import com.cetia.sicaco.hibernate.CtaSegSeguros;
import com.cetia.sicaco.hibernate.CtaSegSegurosDAO;
import com.cetia.sicaco.hibernate.CtaTisTipoSeguro;
import com.cetia.sicaco.hibernate.CtaTisTipoSeguroDAO;
import com.cetia.sicaco.hibernate.CtaTtrTipoTransaccion;
import com.cetia.sicaco.hibernate.CtaTtrTipoTransaccionDAO;
import com.cetia.sicaco.hibernate.CtaTxaTransaccionxcuentaAsociado;
import com.cetia.sicaco.hibernate.CtaTxaTransaccionxcuentaAsociadoDAO;
import com.cetia.sicaco.hibernate.CtrEstEstadoDAO;
import com.cetia.sicaco.hibernate.CtrParParametrosDAO;
import com.cetia.sicaco.hibernate.SecParParentescoDAO;
import com.cetia.sicaco.hibernate.SecPerPersona;
import com.cetia.sicaco.hibernate.SecPerPersonaDAO;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;
import com.cetia.sicaco.struts.PartidaAutomatica;
import com.mad.utilidades.Format;

/**
 * MyEclipse Struts Creation date: 09-03-2008
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/seguros" name="segurosForm" input="redirectInvalidData"
 *                parameter="accion" scope="request" validate="true"
 * @struts.action-forward name="lista"
 *                        path="pagina-lista.cuentaCorriente.seguros"
 */

public class SegurosAction extends DMLAction {

	public String TABLA_ID = "ctaBenBeneficiarios";
	public int pos = 0;
	private int TIPO_SEGURO = 0;

	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		SegurosForm segurosForm = (SegurosForm) form;
		pos = 0;
		CtaTisTipoSeguroDAO tipoSeguroDAO = new CtaTisTipoSeguroDAO(getSessionHibernate(request));
		TIPO_SEGURO = 0;
		List lst = tipoSeguroDAO.findAll();

		CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
		CtaAscAsociado asociado = asociadoDAO.findById(segurosForm.getAscId());

		SecPerPersonaDAO personaDAO = new SecPerPersonaDAO(getSessionHibernate(request));
		SecPerPersona persona = personaDAO.findById(asociado.getSecPerPersona()
				.getPerId());

		segurosForm.setCodigoAsociado(asociado.getAscCodigo());
		segurosForm.setAscCodigoAsociado(asociado.getAscCodigoAsociado());
		segurosForm.setAsociado(persona.getPerPrimerApellido() + " "
				+ persona.getPerSegundoApellido() + ", "
				+ persona.getPerPrimerNombre() + " "
				+ persona.getPerSegundoNombre());

		CtaSegSegurosDAO segurosDAO = new CtaSegSegurosDAO(getSessionHibernate(request));
		segurosForm.setSegId(segurosDAO.generarId("D"));

		SecParParentescoDAO parentescoDAO = new SecParParentescoDAO(getSessionHibernate(request));
		List lpar = parentescoDAO.findAll();

		CtaBenBeneficiariosDAO beneficiariosDAO = new CtaBenBeneficiariosDAO(getSessionHibernate(request));
		List lstBen = beneficiariosDAO.findByProperty("ctaAscAsociado.ascId",
				segurosForm.getAscId());

		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lstBen);

		// ---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
			// ---- exporta la tabla
			export(tableFacade);
			return null;
		} else {
			// ---- genera el html de la tabla para ser mostrada
			String html = html(tableFacade, request, segurosForm.getSegId());
			request.setAttribute("_lista2", html);
		}
		// ----- Variables de configuracion

		request.setAttribute("lstParentesco", lpar);
		request.setAttribute("lstTis", lst);
		request.setAttribute("form", segurosForm);
		request.setAttribute("edit", 0);
		request.setAttribute(Constantes.ACCION_KEY, "/seguros");
		return mapping.findForward("lista");
	}

	// ---- metodo que genera el html de la tabla del jmesa
	private String html(final TableFacade tableFacade,
			final HttpServletRequest request, final String segId) {
		tableFacade.setColumnProperties("benPrimerNombre",
				"secParParentesco.parDescripcion", "benSexo",
				"benFechaNacimiento", "benHijo", "benId");
		Table table = tableFacade.getTable();
		// ---- Titulo de la tabla
		table.setCaptionKey("tbl.ben.caption");

		Row row = table.getRow();
		Column nombreColumna = row.getColumn("benPrimerNombre");
		nombreColumna.setTitleKey("tbl.ben.benNombre");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property,
						rowcount);
				CtaBenBeneficiarios beneficiarios = (CtaBenBeneficiarios) item;
				CtaBenBeneficiariosDAO ctaBenBeneficiariosDAO = new CtaBenBeneficiariosDAO(getSessionHibernate(request));
				beneficiarios = ctaBenBeneficiariosDAO.findById(beneficiarios
						.getBenId());
				String nombre = beneficiarios.getBenPrimerApellido() + ", "
						+ beneficiarios.getBenPrimerNombre();
				value = nombre;
				return value;
			}

		});

		nombreColumna = row.getColumn("secParParentesco.parDescripcion");
		nombreColumna.setTitleKey("tbl.ben.parentescoNombre");

		nombreColumna = row.getColumn("benSexo");
		nombreColumna.setTitleKey("tbl.ben.benSexo");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property,
						rowcount);
				CtaBenBeneficiarios beneficiarios = (CtaBenBeneficiarios) item;
				String sexo;
				if (beneficiarios.getBenSexo() == null) {
					sexo = "No aplica";
				} else {
					if (beneficiarios.getBenSexo().equals("F")) {
						sexo = "Femenino";
					} else {
						sexo = "Masculino";
					}
				}
				value = sexo;
				return value;
			}
		});

		nombreColumna = row.getColumn("benFechaNacimiento");
		nombreColumna.setTitleKey("tbl.ben.benFechaNacimiento");
		nombreColumna.getCellRenderer().setCellEditor(
				new DateCellEditor("dd-MMM-yyyy"));

		nombreColumna = row.getColumn("benHijo");
		nombreColumna.setTitleKey("tbl.ben.porcentajes");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property,
						rowcount);
				CtaBenBeneficiarios beneficiarios = (CtaBenBeneficiarios) item;
				CtaBenBeneficiariosDAO ctaBenBeneficiariosDAO = new CtaBenBeneficiariosDAO(getSessionHibernate(request));
				beneficiarios = ctaBenBeneficiariosDAO.findById(beneficiarios
						.getBenId());
				String nombre = beneficiarios.getBenPrimerApellido() + ", "
						+ beneficiarios.getBenPrimerNombre();
				value = nombre;
				CtaBxcBeneficiariosCuentaDAO bxcDAO = new CtaBxcBeneficiariosCuentaDAO(getSessionHibernate(request));
				HtmlBuilder html = new HtmlBuilder();
				List lbxc = bxcDAO.findBySeguro(segId);
				int cont = 0;
				for (Iterator iterator = lbxc.iterator(); iterator.hasNext();) {
					CtaBxcBeneficiariosCuenta bxc = (CtaBxcBeneficiariosCuenta) iterator
							.next();
					if (bxc.getCtaBenBeneficiarios().getBenId().equals(
							beneficiarios.getBenId())) {
						html.input().type("text").name("valores").value(
								"" + bxc.getBxcPorcentaje() + "").size("10")
								.id("porcentajeId" + pos);
						if (TIPO_SEGURO == 8 || TIPO_SEGURO == 0) {
							html.disabled().close();
						} else {
							html.close();
						}

						cont = 1;
					}
				}
				if (cont == 0) {
					html.input().type("text").name("valores").size("10").id(
							"porcentajeId" + pos);
					if (TIPO_SEGURO == 8 || TIPO_SEGURO == 0) {
						html.disabled().close();
					} else {
						html.close();
					}
				}
				pos++;

				return html.toString();
			}

		});

		nombreColumna = row.getColumn("benId");
		nombreColumna.setTitleKey("tbl.ben.check");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property,
						rowcount);
				CtaBenBeneficiarios beneficiarios = (CtaBenBeneficiarios) item;
				CtaBenBeneficiariosDAO ctaBenBeneficiariosDAO = new CtaBenBeneficiariosDAO(getSessionHibernate(request));
				beneficiarios = ctaBenBeneficiariosDAO.findById(beneficiarios
						.getBenId());
				String nombre = beneficiarios.getBenPrimerApellido() + ", "
						+ beneficiarios.getBenPrimerNombre();
				value = nombre;
				HtmlBuilder html = new HtmlBuilder();
				CtaBxcBeneficiariosCuentaDAO bxcDAO = new CtaBxcBeneficiariosCuentaDAO(getSessionHibernate(request));
				List lbxc = bxcDAO.findBySeguro(segId);
				int cont = 0;
				for (Iterator iterator = lbxc.iterator(); iterator.hasNext();) {
					CtaBxcBeneficiariosCuenta bxc = (CtaBxcBeneficiariosCuenta) iterator
							.next();
					if (bxc.getCtaBenBeneficiarios().getBenId().equals(
							beneficiarios.getBenId())) {
						html.input().type("checkbox").name("posiciones").value(
								"" + beneficiarios.getBenId()).checked()
								.close();
						cont = 1;
					}
				}
				if (cont == 0) {
					html.input().type("checkbox").name("posiciones").value(
							"" + beneficiarios.getBenId()).close();
				}
				pos = pos + 1;
				return html.toString();
			}

		});

		return tableFacade.render();
	}

	// ---- metodo que genera los exports, el formato que tendran
	private void export(final TableFacade tableFacade) {
		tableFacade.setColumnProperties("benPrimerNombre",
				"secParParentesco.parDescripcion", "benSexo",
				"benFechaNacimiento");
		Table table = tableFacade.getTable();
		// ---- Titulo de la tabla
		table.setCaptionKey("tbl.ben.caption");

		Row row = table.getRow();
		Column nombreColumna = row.getColumn("benPrimerNombre");
		nombreColumna.setTitleKey("tbl.ben.benNombre");

		nombreColumna = row.getColumn("secParParentesco.parDescripcion");
		nombreColumna.setTitleKey("tbl.ben.parentescoNombre");

		nombreColumna = row.getColumn("benSexo");
		nombreColumna.setTitleKey("tbl.ben.benSexo");

		nombreColumna = row.getColumn("benFechaNacimiento");
		nombreColumna.setTitleKey("tbl.ben.benFechaNacimiento");

		tableFacade.render();
	}

	public ActionForward guardar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		SegurosForm segurosForm = (SegurosForm) form;
		CtaSegSegurosDAO segurosDAO = new CtaSegSegurosDAO(getSessionHibernate(request));
		CtrParParametrosDAO parametrosDAO = new CtrParParametrosDAO(getSessionHibernate(request));
		if (segurosForm.getCtaTisTipoSeguro().getTisId() == 2
				&& parametrosDAO.findById("REQUISITO_VIDA_PARA_MEDICO")
						.getParValorBoolean() == 1) {
			int vidaActivo = 0;
			CtaCasCuentaAsociadoDAO casDao = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
			List lseguros = casDao.findByAscAndTipoCuenta2(segurosForm
					.getAscId(), "D");
			for (Iterator iterator = lseguros.iterator(); iterator.hasNext();) {
				CtaCasCuentaAsociado cas = (CtaCasCuentaAsociado) iterator
						.next();
				if (cas.getCtrEstEstado().getEstId() == 11) {
					CtaSegSeguros seguros = segurosDAO.findById(cas
							.getCtaSegSeguros().getSegId());
					if (seguros.getCtaTisTipoSeguro().getTisId() == 1) {
						vidaActivo++;
					}
				}
			}
			if (vidaActivo < 1) {
				mensajes("error.seg.necesitaVida", request);
				return lista(mapping, segurosForm, request, response);
			}
		}

		CtaBenBeneficiariosDAO beneficiariosDAO = new CtaBenBeneficiariosDAO(getSessionHibernate(request));
		List lstBen = beneficiariosDAO.findByProperty("ctaAscAsociado.ascId",
				segurosForm.getAscId());
		if (lstBen.size() > 0) {
			if (segurosForm.getPosiciones() != null
					&& segurosForm.getPosiciones().length > 0) {
				if (segurosForm.getCtaTisTipoSeguro().getTisId() != 2) {
					Double porcTotal = 0.0;
					for (int i = 0; i < segurosForm.getValores().length; i++) {
						Double object = segurosForm.getValores()[i];
						porcTotal += object;
					}
					if (porcTotal < 100.0) {
						mensajes("error.seguros.porcentajeMenor", request);
						return lista(mapping, segurosForm, request, response);
					}
					Double porcTotal2 = 0.0;
					int j = 0;
					for (Iterator iterator = lstBen.iterator(); iterator
							.hasNext();) {
						CtaBenBeneficiarios beneficiarios = (CtaBenBeneficiarios) iterator
								.next();

						for (int i = 0; i < segurosForm.getPosiciones().length; i++) {
							if (beneficiarios.getBenId() == segurosForm
									.getPosiciones()[i]) {
								porcTotal2 += segurosForm.getValores()[j];
							}
						}
						j++;
					}
					if (porcTotal2 != 100) {
						mensajes("error.seguros.porcentajeEquivocado", request);
						return lista(mapping, segurosForm, request, response);
					}
				}

			} else {
				mensajes("error.seguros.beneficiarios", request);
				return lista(mapping, segurosForm, request, response);
			}
		}
		Transaction tx = segurosDAO.getSession().beginTransaction();
		try {
			CtaTisTipoSeguroDAO tipoSeguroDAO = new CtaTisTipoSeguroDAO(getSessionHibernate(request));
			segurosForm.getSegurosH().setCtaTisTipoSeguro(
					tipoSeguroDAO.findById(segurosForm.getTisId2()));

			CtrEstEstadoDAO estadoDAO = new CtrEstEstadoDAO(getSessionHibernate(request));
			// segurosForm.getSegurosH().setCtrEstEstado(estadoDAO.findById(11));

			segurosForm.getSegurosH().setSegId(segurosDAO.generarId("D"));
			// segurosForm.getSegurosH().setSegCuota(segurosForm.getCtaTisTipoSeguro().getTisCostoAnual()/12);
			segurosForm.getSegurosH().setSegSaldoActual(
					segurosForm.getSegSaldoIni());
			segurosForm.getSegurosH().setCtaTinTasaInteres(null);
			// Seteo el mes en el que se iniciara el cobro en la referencia para
			// ahorrar campos
			segurosForm.getSegurosH().setSegReferencia(
					segurosForm.getMeses().toString());
			segurosDAO.save(segurosForm.getSegurosH());

		} catch (Exception e) {
			tx.rollback();
			e.printStackTrace();
		} finally {
			tx.commit();
			segurosDAO.getSession().flush();
			segurosDAO.getSession().clear();

			CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
			CtaAscAsociado asociado = asociadoDAO.findById(segurosForm
					.getAscId());

			CtaCasCuentaAsociadoDAO cuentaAsociadoDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
			CtrEstEstadoDAO estadoDAO = new CtrEstEstadoDAO(getSessionHibernate(request));

			CtaCasCuentaAsociado cuentaAsociado = new CtaCasCuentaAsociado();
			cuentaAsociado.setCasFechaApertura(new Date());
			cuentaAsociado.setCtaAscAsociado(asociado);
			cuentaAsociado.setCtaCahCuentaAhorro(null);
			cuentaAsociado.setCtaCbaCuentaBancaria(null);
			cuentaAsociado.setCtaPrePrestamo(null);
			cuentaAsociado.setCtaSegSeguros(segurosForm.getSegurosH());
			cuentaAsociado.setCasPrincipal("0");
			// Se setea el estado de espera a cobro: 22, si se escogio el otro
			// mes y no este
			SimpleDateFormat sdf = new SimpleDateFormat("MM");
			Date fechaActual = new Date();
			String fechaString = sdf.format(fechaActual);
			Integer mesActual = Integer.parseInt(fechaString);
			if (segurosForm.getMeses().equals(mesActual)) {
				cuentaAsociado.setCtrEstEstado(estadoDAO.findById(11));
			} else {
				cuentaAsociado.setCtrEstEstado(estadoDAO.findById(22));
			}
			cuentaAsociado.setCtaPxtPersonaExterna(null);
			cuentaAsociadoDAO.save(cuentaAsociado);

			tx.commit();
			cuentaAsociadoDAO.getSession().flush();
			cuentaAsociadoDAO.getSession().clear();

			CtaTtrTipoTransaccionDAO tipoTransaccionDAO = new CtaTtrTipoTransaccionDAO(getSessionHibernate(request));
			CtaTtrTipoTransaccion tipoTranAperSeg = tipoTransaccionDAO
					.findById(44);// 44 = Cargo por apertura de seguro

			// Generando la transaccion 44 = Cargo por apertura de seguro
			CtaTxaTransaccionxcuentaAsociadoDAO txaDAO = new CtaTxaTransaccionxcuentaAsociadoDAO(getSessionHibernate(request));
			CtaTxaTransaccionxcuentaAsociado txa3 = new CtaTxaTransaccionxcuentaAsociado();
			txa3.setCtaCasCuentaAsociado(cuentaAsociado);
			txa3.setTxaFecha(new Date());
			txa3.setTxaComprobante(txaDAO.nextComprobante());
			txa3.setTxaMonto(segurosForm.getSegurosH().getSegSaldoIni());
			txa3.setAudFechaCreacion(new Date());
			txa3.setAudFechaModificacion(new Date());
			txa3.setAudUsuarioCreacion(segurosForm.getUsuarioConectado()
					.getNombreUsuario());
			txa3.setAudUsuarioModificacion(segurosForm.getUsuarioConectado()
					.getNombreUsuario());

			txa3.setCtaTtrTipoTransaccion(tipoTranAperSeg);
			Transaction txTran = txaDAO.getSession().beginTransaction();
			txaDAO.save(txa3);
			txTran.commit();

			// Registro el primer movimiento del seguro
			CtaMxsMovimientoSegurosDAO mxsDAO = new CtaMxsMovimientoSegurosDAO(getSessionHibernate(request));
			CtaMxsMovimientoSeguros mxs = new CtaMxsMovimientoSeguros();
			mxs.setCtaSegSeguros(segurosForm.getSegurosH());
			mxs.setCtaTxaTransaccionxcuentaAsociado(txa3);
			mxs.setMxsFecha(new Date());
			mxs.setMxsMonto(segurosForm.getSegurosH().getSegSaldoIni());
			mxs.setMxsSaldo(segurosForm.getSegurosH().getSegSaldoIni());
			mxs.setAudFechaCreacion(new Date());
			mxs.setAudFechaModificacion(new Date());
			mxs.setAudUsuarioCreacion(segurosForm.getUsuarioConectado()
					.getNombreUsuario());
			mxs.setAudUsuarioModificacion(segurosForm.getUsuarioConectado()
					.getNombreUsuario());

			Transaction txMxs = mxsDAO.getSession().beginTransaction();
			mxsDAO.save(mxs);
			txMxs.commit();

			CtaBxcBeneficiariosCuentaDAO beneficiariosCuentaDAO = new CtaBxcBeneficiariosCuentaDAO(getSessionHibernate(request));

			int pos = 0;
			for (Iterator iterator = lstBen.iterator(); iterator.hasNext();) {
				CtaBenBeneficiarios beneficiarios = (CtaBenBeneficiarios) iterator
						.next();
				if (encuentraPosicion(segurosForm.getPosiciones(),
						beneficiarios.getBenId())) {
					CtaBxcBeneficiariosCuenta beneficiariosCuenta = new CtaBxcBeneficiariosCuenta();
					if (segurosForm.getCtaTisTipoSeguro().getTisId() != 2) {
						Float porcent = segurosForm.getValores()[pos]
								.floatValue();
						beneficiariosCuenta.setBxcPorcentaje(porcent);
					} else {
						float porcent = 0;
						beneficiariosCuenta.setBxcPorcentaje(porcent);
					}
					beneficiariosCuenta.setCtaBenBeneficiarios(beneficiarios);
					beneficiariosCuenta.setCtaCasCuentaAsociado(cuentaAsociado);
					beneficiariosCuentaDAO.save(beneficiariosCuenta);
					tx.commit();
				}
				pos++;
			}
		}
		return cancelar2(mapping, form, request, response);
	}

	private boolean encuentraPosicion(int[] posiciones, Integer benId) {
		for (int i = 0; i < posiciones.length; i++) {
			if (posiciones[i] == benId) {
				return true;
			}
		}
		return false;
	}

	public ActionForward cargarDatos(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		TipoSeguroForm tipoSeguroForm = (TipoSeguroForm) form;
		CtaTisTipoSeguroDAO tipoSeguroDAO = new CtaTisTipoSeguroDAO(getSessionHibernate(request));
		tipoSeguroForm.setTipoSeguroH(tipoSeguroDAO.findById(tipoSeguroForm
				.getTisId()));
		// TIPO_SEGURO = tipoSeguroForm.getTisId();
		List lst = tipoSeguroDAO.findAll();

		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);

		// ---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
			// ---- exporta la tabla
			export(tableFacade);
			return null;
		} else {
			// ---- genera el html de la tabla para ser mostrada
			String html = html(tableFacade, request, "adf");
			request.setAttribute(Constantes.LISTA_KEY, html);
		}
		// ----- Variables de configuracion
		request.setAttribute("form", tipoSeguroForm);
		request.setAttribute("edit", 1);
		request.setAttribute(Constantes.ACCION_KEY, "/tipoSeguro");
		return mapping.findForward("lista");
	}

	public ActionForward redirectInvalidData(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		ActionErrors errors = (ActionErrors) request.getSession().getAttribute(
				Constantes.ERRORS);
		saveMessages(request, errors);
		return lista(mapping, form, request, response);
	}

	public void mensajes(String msg, HttpServletRequest request) {
		ActionErrors errors = new ActionErrors();
		errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(msg));
		saveMessages(request, errors);
	}

	public ActionForward eliminar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		TipoSeguroForm tipoSeguroForm = (TipoSeguroForm) form;
		CtaTisTipoSeguroDAO tipoSeguroDAO = new CtaTisTipoSeguroDAO(getSessionHibernate(request));

		Transaction tx = tipoSeguroDAO.getSession().beginTransaction();
		try {
			CtaTisTipoSeguro tipoSeguro = tipoSeguroDAO.findById(tipoSeguroForm
					.getTisId2());
			if (tipoSeguro.getCtaSegSeguroses().size() > 0) {
				mensajes("errors.tis.tieneHijos", request);
				return lista(mapping, form, request, response);
			} else {
				tipoSeguroDAO.delete(tipoSeguro);
			}
		} catch (Exception e) {
			tx.rollback();
			e.printStackTrace();
		} finally {
			tx.commit();
			tipoSeguroDAO.getSession().flush();
			tipoSeguroDAO.getSession().clear();
			
		}
		mensajes("msg.tis.eliminacionExitosa", request);
		return lista(mapping, new TipoSeguroForm(), request, response);
	}

	public ActionForward salvar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		SegurosForm segurosForm = (SegurosForm) form;
		CtaSegSegurosDAO segurosDAO = new CtaSegSegurosDAO(getSessionHibernate(request));

		CtaBenBeneficiariosDAO beneficiariosDAO = new CtaBenBeneficiariosDAO(getSessionHibernate(request));
		List lstBen = beneficiariosDAO.findByProperty("ctaAscAsociado.ascId",
				segurosForm.getAscId());

		if (lstBen != null && lstBen.size() > 0) {
			if (segurosForm.getPosiciones() != null
					&& segurosForm.getPosiciones().length > 0) {
				if (segurosForm.getCtaTisTipoSeguro().getTisId() != 2) {
					Double porcTotal = 0.0;
					for (int i = 0; i < segurosForm.getValores().length; i++) {
						Double object = segurosForm.getValores()[i];
						porcTotal += object;
					}
					if (porcTotal < 100.0) {
						mensajes("error.seguros.porcentajeMenor", request);
						return agregar(mapping, segurosForm, request, response);
					}
				}

				Double porcTotal2 = 0.0;
				if (segurosForm.getCtaTisTipoSeguro().getTisId().equals(2)) {
					porcTotal2 = 100.0;
				} else {
					int j = 0;
					for (Iterator iterator = lstBen.iterator(); iterator
							.hasNext();) {
						CtaBenBeneficiarios beneficiarios = (CtaBenBeneficiarios) iterator
								.next();

						for (int i = 0; i < segurosForm.getPosiciones().length; i++) {
							if (beneficiarios.getBenId() == segurosForm
									.getPosiciones()[i]) {
								porcTotal2 += segurosForm.getValores()[j];
							}
						}
						j++;
					}
				}
				if (porcTotal2 != 100) {
					mensajes("error.seguros.porcentajeEquivocado", request);
					return agregar(mapping, segurosForm, request, response);
				}
			} else {
				mensajes("error.seguros.beneficiarios", request);
				return agregar(mapping, segurosForm, request, response);
			}
		}
		int band = 0;
		CtaSegSeguros seguros = segurosDAO.findById(segurosForm.getSegId());
		if (!segurosForm.getSegSaldoIni().equals(seguros.getSegSaldoIni())
				|| !segurosForm.getSegMonto().equals(seguros.getSegMonto())) {
			CtaMxsMovimientoSegurosDAO mxsDao = new CtaMxsMovimientoSegurosDAO(getSessionHibernate(request));
			if (mxsDao
					.findByProperty("ctaSegSeguros.segId", seguros.getSegId())
					.size() < 1) {
				seguros.setSegSaldoIni(segurosForm.getSegSaldoIni());
				seguros.setSegSaldoActual(seguros.getSegSaldoIni());
				seguros.setSegMonto(segurosForm.getSegMonto());
				band = 1;
			} else {
				mensajes("error.seguros.yaHayMovimientos", request);
				return agregar(mapping, segurosForm, request, response);
			}
		}

		Transaction tx = segurosDAO.getSession().beginTransaction();
		// try{
		// CtaTisTipoSeguroDAO tipoSeguroDAO = new CtaTisTipoSeguroDAO(getSessionHibernate(request));

		// CtrEstEstadoDAO estadoDAO = new CtrEstEstadoDAO(getSessionHibernate(request));
		/*
		 * if(segurosForm.getNoBasico()){
		 * seguros.setSegMonto(segurosForm.getSegMonto2()); }
		 */
		seguros.setSegCarnet(segurosForm.getSegCarnet());
		seguros.setSegCertificado(segurosForm.getSegCertificado());

		if (band == 0) {
			if (!segurosForm.getSegCuota().equals(seguros.getSegCuota())) {
				Double antiguaCuota = seguros.getSegCuota();
				Double nuevaCuota = segurosForm.getSegCuota();
				Double incr_dcr = antiguaCuota - nuevaCuota; 

				CtaCasCuentaAsociadoDAO casDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
				CtaCasCuentaAsociado casSeg = casDAO.findbySegId(seguros
						.getSegId());
				Date fechaAperturaSeg = casSeg.getCasFechaApertura();
				Date fechaActual = new Date();
				Date fechaVencPol = seguros.getCtaTisTipoSeguro()
						.getTisFinPoliza();

				SimpleDateFormat sdfm = new SimpleDateFormat("MM");
				SimpleDateFormat sdfy = new SimpleDateFormat("yyyy");

				Integer anioAp = new Integer(sdfy.format(fechaAperturaSeg));
				Integer anioAc = new Integer(sdfy.format(fechaActual));
				Integer mesAp = new Integer(sdfm.format(fechaAperturaSeg));
				Integer mesAc = new Integer(sdfm.format(fechaActual));
				Integer anioFechVen = new Integer(sdfy.format(fechaVencPol));
				Integer mesFechVen = new Integer(sdfm.format(fechaVencPol));

				int mesesAntesCambio = ((anioAc - anioAp) * 12) - mesAp + mesAc;
				Double saldoAntesDeCambio = mesesAntesCambio
						* antiguaCuota;
				System.out.println(saldoAntesDeCambio);

				int mesesDespuesCambio = ((anioFechVen - anioAc) * 12) - mesAc
						+ mesFechVen;
				Double saldoDespuesDeCambio = mesesDespuesCambio
						* nuevaCuota;
				System.out.println(saldoDespuesDeCambio);

				Double nuevoSaldoAnual = saldoAntesDeCambio
						+ saldoDespuesDeCambio;

				//Saber las cuotas adelantadas o atrasadas
				Double cuotasAdelAtras = 0.0;
				cuotasAdelAtras = (mesesAntesCambio - (Math.floor((seguros.getSegSaldoIni() - seguros.getSegSaldoActual())/seguros.getSegCuota()))) * seguros.getSegCuota();
				System.out.println("cuotasAdelAtras = "+cuotasAdelAtras);
				//Actualizo el saldo anual
				seguros.setSegSaldoIni(nuevoSaldoAnual);
				
				//Hago el movimiento por cambio de cuota
				CtaMxsMovimientoSegurosDAO mxsDAO = new CtaMxsMovimientoSegurosDAO(getSessionHibernate(request));
				CtaMxsMovimientoSeguros mxs = new CtaMxsMovimientoSeguros();

				CtaTtrTipoTransaccionDAO ttrDAO = new CtaTtrTipoTransaccionDAO(getSessionHibernate(request));				
				CtaTtrTipoTransaccion ttrACap = ttrDAO.findById(48);//Abono por correccion de Capital 14
				CtaTtrTipoTransaccion ttrCCap = ttrDAO.findById(49);//Cargo por correccion de capital 24
				
				CtaTxaTransaccionxcuentaAsociadoDAO txaDAO = new CtaTxaTransaccionxcuentaAsociadoDAO(getSessionHibernate(request));
				CtaTxaTransaccionxcuentaAsociado txa = new CtaTxaTransaccionxcuentaAsociado();
				txa.setCtaCasCuentaAsociado(casSeg);
				txa.setTxaFecha(new Date());
				txa.setTxaComprobante(null);
				txa.setAudFechaCreacion(new Date());
				txa.setAudFechaModificacion(new Date());
				txa.setAudUsuarioCreacion(segurosForm.getUsuarioConectado().getNombreUsuario());
				txa.setAudUsuarioModificacion(segurosForm.getUsuarioConectado().getNombreUsuario());
					
				Double txaMonto = saldoDespuesDeCambio - seguros.getSegSaldoActual();
				System.out.println("txaMonto = "+txaMonto);
				
				txaMonto = txaMonto + cuotasAdelAtras;
				if(txaMonto < 0) txaMonto = txaMonto*-1;
					
				txa.setTxaMonto(txaMonto);
				
				mxs.setCtaSegSeguros(seguros);
				mxs.setCtaTxaTransaccionxcuentaAsociado(txa);
				mxs.setMxsFecha(new Date());
				
								
				mxs.setAudFechaCreacion(new Date());
				mxs.setAudFechaModificacion(new Date());
				mxs.setAudUsuarioCreacion(segurosForm.getUsuarioConectado().getNombreUsuario());
				mxs.setAudUsuarioModificacion(segurosForm.getUsuarioConectado().getNombreUsuario());
								
				if (incr_dcr > 0) {// Es un abono por corrección
					System.out.println("La cuota disminuyó");
					
					mxs.setMxsMonto(txaMonto);
					mxs.setMxsSaldo(seguros.getSegSaldoActual() - txaMonto);
					txa.setCtaTtrTipoTransaccion(ttrACap);
					seguros.setSegSaldoActual(saldoDespuesDeCambio + cuotasAdelAtras);
					
					String parametros = "1;4;"+seguros.getCtaTisTipoSeguro().getTisId()+";"+ttrACap.getTtrId()+";0;-1";
					PartidaAutomatica partidaAutomatica = new PartidaAutomatica();
					partidaAutomatica.crearPartidaAutomatica(
							parametros,
							txa.getTxaMonto(),
							segurosForm.getUsuarioConectado().getNombreUsuario(),1,null,null,null,request);	
					
				} else {// Cargo por corrección
					System.out.println("La cuota aumentó");
					
					mxs.setMxsMonto(txaMonto);					
					mxs.setMxsSaldo(seguros.getSegSaldoActual() + txaMonto);
					txa.setCtaTtrTipoTransaccion(ttrCCap);
					seguros.setSegSaldoActual(saldoDespuesDeCambio + cuotasAdelAtras);
					
					String parametros = "1;4;"+casSeg.getCtaSegSeguros().getCtaTisTipoSeguro().getTisId()+";"+ttrCCap.getTtrId()+";0;-1";
					PartidaAutomatica partidaAutomatica = new PartidaAutomatica();
					partidaAutomatica.crearPartidaAutomatica(
							parametros,
							txa.getTxaMonto(),
							segurosForm.getUsuarioConectado().getNombreUsuario(),1,null,null,null,request);						
				}
				
				txaDAO.save(txa);	
				
				mxsDAO.save(mxs);
			
			}
		}
		seguros.setSegCuota(segurosForm.getSegCuota());
		seguros.setCtaTinTasaInteres(null);
		segurosDAO.merge(seguros);
		/*
		 * }catch(Exception e){ tx.rollback(); e.printStackTrace(); }finally{
		 * tx.commit(); segurosDAO.getSession().flush();
		 * segurosDAO.getSession().clear();
		 */
		// CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
		// CtaAscAsociado asociado =
		// asociadoDAO.findById(segurosForm.getAscId());
		CtaCasCuentaAsociadoDAO cuentaAsociadoDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
		CtaCasCuentaAsociado cuentaAsociado = cuentaAsociadoDAO
				.findbySegId(seguros.getSegId());

		CtaBxcBeneficiariosCuentaDAO beneficiariosCuentaDAO = new CtaBxcBeneficiariosCuentaDAO(getSessionHibernate(request));

		int pos = 0;
		for (Iterator iterator = lstBen.iterator(); iterator.hasNext();) {
			CtaBenBeneficiarios beneficiarios = (CtaBenBeneficiarios) iterator
					.next();
			if (encuentraPosicion(segurosForm.getPosiciones(), beneficiarios
					.getBenId())) {
				CtaBxcBeneficiariosCuenta beneficiariosCuenta = new CtaBxcBeneficiariosCuenta();
				if (seguros.getCtaTisTipoSeguro().getTisId() != 2) {
					Float porcent = segurosForm.getValores()[pos].floatValue();
					beneficiariosCuenta.setBxcPorcentaje(porcent);
				} else {
					float porcent = 0;
					beneficiariosCuenta.setBxcPorcentaje(porcent);
				}
				beneficiariosCuenta.setCtaBenBeneficiarios(beneficiarios);
				beneficiariosCuenta.setCtaCasCuentaAsociado(cuentaAsociado);

				int idBenxCuenta = beneficiariosCuentaDAO
						.findByCuentaYBeneficiario(beneficiariosCuenta);
				if (idBenxCuenta == -1) {
					beneficiariosCuentaDAO.save(beneficiariosCuenta);
				} else {
					beneficiariosCuenta.setBxcId(idBenxCuenta);
					beneficiariosCuentaDAO.merge(beneficiariosCuenta);
				}
				tx.commit();
			} else {
				CtaBxcBeneficiariosCuenta beneficiariosCuenta = new CtaBxcBeneficiariosCuenta();
				beneficiariosCuenta.setCtaBenBeneficiarios(beneficiarios);
				beneficiariosCuenta.setCtaCasCuentaAsociado(cuentaAsociado);
				int idBenxCuenta = beneficiariosCuentaDAO
						.findByCuentaYBeneficiario(beneficiariosCuenta);
				if (idBenxCuenta != -1) {
					CtaBxcBeneficiariosCuenta beneficiariosCuentaAEliminar = beneficiariosCuentaDAO
							.findById(idBenxCuenta);
					beneficiariosCuentaDAO.delete(beneficiariosCuentaAEliminar);
					tx.commit();
				}
			}
			pos++;
		}
		// }
		return cancelar2(mapping, form, request, response);
	}
	
	public ActionForward cancelar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String asociadoId = request.getSession().getAttribute("asociadoId")
				.toString();
		CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
		CtaAscAsociado asociado = asociadoDAO.findById(asociadoId);
		CuentaAsociadoForm cuentaAsociadoForm = new CuentaAsociadoForm();
		cuentaAsociadoForm.setAscId(asociado.getAscId());
		cuentaAsociadoForm.setAscCodigo(asociado.getAscCodigo());
		cuentaAsociadoForm.setTipoCuentaMadre("Ap");
		request.setAttribute("form", cuentaAsociadoForm);
		return mapping.findForward("regresar");
	}

	public ActionForward cancelar2(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String asociadoId = request.getSession().getAttribute("asociadoId")
				.toString();
		CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
		CtaAscAsociado asociado = asociadoDAO.findById(asociadoId);
		CuentaAsociadoForm cuentaAsociadoForm = new CuentaAsociadoForm();
		cuentaAsociadoForm.setAscId(asociado.getAscId());
		cuentaAsociadoForm.setAscCodigo(asociado.getAscCodigo());
		cuentaAsociadoForm.setTipoCuentaMadre("Se");
		request.setAttribute("form", cuentaAsociadoForm);
		cuentaAsociadoForm = new CuentaAsociadoForm();
		return mapping.findForward("regresar");
	}

	public ActionForward cargarPoliza(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		SegurosForm segurosForm = (SegurosForm) form;

		CtaTisTipoSeguroDAO tipoSeguroDAO = new CtaTisTipoSeguroDAO(getSessionHibernate(request));
		CtaTisTipoSeguro tipoSeguro = tipoSeguroDAO.findById(segurosForm
				.getTipo());

		try {
			String texto = "";
			texto += "<input type=\"text\" name=\"poliza\" size=\"15\" maxlength=\"15\" styleClass=\"obligatorio\" value=\""
					+ tipoSeguro.getTisPoliza()
					+ "\" id=\"polizaId\" readonly=\"true\" />";
			response.getWriter().write(texto);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (RuntimeException e) {
			log.error("Error runtime", e);
		} catch (IOException e) {
			log.error(e);
		}
		return null;
	}

	public ActionForward cargarVencimiento(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		SegurosForm segurosForm = (SegurosForm) form;

		CtaTisTipoSeguroDAO tipoSeguroDAO = new CtaTisTipoSeguroDAO(getSessionHibernate(request));
		CtaTisTipoSeguro tipoSeguro = tipoSeguroDAO.findById(segurosForm
				.getTipo());

		SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
		// String formato = "dd-MM-yyyy";

		try {
			String texto = "";
			texto += "<input type=\"text\" name=\"vencimiento\" size=\"15\" maxlength=\"15\" styleClass=\"obligatorio\" value=\""
					+ sdf.format(tipoSeguro.getTisFinPoliza())
					+ "\" id=\"vencimientoId\" readonly=\"true\" />";
			response.getWriter().write(texto);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (RuntimeException e) {
			log.error("Error runtime", e);
		} catch (IOException e) {
			log.error(e);
		}
		return null;
	}

	// cargarMontoAsegurado
	public ActionForward cargarMontoAsegurado(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		SegurosForm segurosForm = (SegurosForm) form;

		CtaTisTipoSeguroDAO tipoSeguroDAO = new CtaTisTipoSeguroDAO(getSessionHibernate(request));
		CtaTisTipoSeguro tipoSeguro = tipoSeguroDAO.findById(segurosForm
				.getTipo());

		try {
			String texto = "";
			if (tipoSeguro.getTisId() != 1 && tipoSeguro.getTisId() != 2) {
				texto += "<input type=\"text\" name=\"segMonto2\" size=\"15\" maxlength=\"15\""
						+ " styleClass=\"obligatorio\" value=\"\" id=\"segMonto2Id\" />";
				texto += "<input type=\"hidden\" name=\"noBasico\" value=\"true\"";
			} else {
				texto += "<input type=\"text\" name=\"segMonto\" size=\"15\" maxlength=\"15\" "
						+ "styleClass=\"obligatorio\" value=\""
						+ tipoSeguro.getTisMontoBasico()
						+ "\" id=\"segMontoId\" readonly=\"true\" />";
				texto += "<input type=\"hidden\" name=\"noBasico\" value=\"false\"";
			}
			response.getWriter().write(texto);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (RuntimeException e) {
			log.error("Error runtime", e);
		} catch (IOException e) {
			log.error(e);
		}
		return null;
	}

	public ActionForward agregarBen(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		SegurosForm segurosForm = (SegurosForm) form;
		if (vacios(segurosForm, request, response)) {
			return agregar(mapping, form, request, response);
		}
		CtaAscAsociado asociado = new CtaAscAsociado();
		CtaAscAsociadoDAO ascDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
		asociado = ascDAO.findById(segurosForm.getAscId());
		segurosForm.getBeneficiariosH().setCtaAscAsociado(asociado);
		CtaBenBeneficiariosDAO beneficiariosDAO = new CtaBenBeneficiariosDAO(getSessionHibernate(request));
		SecParParentescoDAO parentescoDAO = new SecParParentescoDAO(getSessionHibernate(request));
		segurosForm.getBeneficiariosH().setSecParParentesco(
				parentescoDAO.findById(segurosForm.getBeneficiariosH()
						.getSecParParentesco().getParId()));
		segurosForm.getBeneficiariosH().setBenEstado("A");
		Transaction tx = beneficiariosDAO.getSession().beginTransaction();
		try {
			if (beneficiariosDAO
					.findByCriteria(segurosForm.getBeneficiariosH()).isEmpty()) {
				beneficiariosDAO.save(segurosForm.getBeneficiariosH());

			} else {
				mensajes("errors.benNombreRepetido", request);
				return agregar(mapping, form, request, response);
			}

		} catch (Exception e) {
			tx.rollback();
			e.printStackTrace();
		} finally {
			tx.commit();
			beneficiariosDAO.getSession().flush();
			beneficiariosDAO.getSession().clear();
			
		}
		CtaBenBeneficiarios beneficiarios = new CtaBenBeneficiarios();
		segurosForm.setBeneficiariosH(beneficiarios);
		return agregar(mapping, segurosForm, request, response);
	}

	public ActionForward agregar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		SegurosForm segurosForm = (SegurosForm) form;
		pos = 0;

		CtaSegSegurosDAO segurosDAO = new CtaSegSegurosDAO(getSessionHibernate(request));
		segurosForm.setSegurosH(segurosDAO.findById(segurosForm.getSegId()));

		segurosForm.setTisId2(segurosForm.getCtaTisTipoSeguro().getTisId());
		TIPO_SEGURO = segurosForm.getTisId2();

		CtaTisTipoSeguroDAO tipoSeguroDAO = new CtaTisTipoSeguroDAO(getSessionHibernate(request));
		List lst = tipoSeguroDAO.findAll();

		CtaTisTipoSeguro tipoSeguro = tipoSeguroDAO.findById(segurosForm
				.getCtaTisTipoSeguro().getTisId());

		segurosForm.setPoliza(tipoSeguro.getTisPoliza());

		SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
		segurosForm.setVencimiento(sdf.format(tipoSeguro.getTisFinPoliza()));

		CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
		CtaAscAsociado asociado = asociadoDAO.findById(segurosForm.getAscId());

		SecPerPersonaDAO personaDAO = new SecPerPersonaDAO(getSessionHibernate(request));
		SecPerPersona persona = personaDAO.findById(asociado.getSecPerPersona()
				.getPerId());

		SecParParentescoDAO parentescoDAO = new SecParParentescoDAO(getSessionHibernate(request));
		List lpar = parentescoDAO.findAll();

		CtaBenBeneficiariosDAO beneficiariosDAO = new CtaBenBeneficiariosDAO(getSessionHibernate(request));
		List lstBen = beneficiariosDAO.findByProperty("ctaAscAsociado.ascId",
				segurosForm.getAscId());

		segurosForm.setCodigoAsociado(asociado.getAscCodigo());
		segurosForm.setAscCodigoAsociado(asociado.getAscCodigoAsociado());
		segurosForm.setAsociado(persona.getPerPrimerApellido() + " "
				+ persona.getPerSegundoApellido() + ", "
				+ persona.getPerPrimerNombre() + " "
				+ persona.getPerSegundoNombre());

		// Obtenemos mes y mesesBetween
		SimpleDateFormat sdf2 = new SimpleDateFormat("MM");
		Date hoy = new Date();
		String mesActual = sdf2.format(hoy);
		Integer mesIntActual = Integer.parseInt(mesActual);
		Integer mesSeguro = -1;
		if (segurosForm.getSegReferencia() != null
				&& !segurosForm.getSegReferencia().substring(0, 1).equals("D")) {
			mesSeguro = Integer.parseInt(segurosForm.getSegReferencia());
		}
		Integer mesInt = -1;
		if (mesIntActual > mesSeguro) {
			mesInt = mesIntActual;
		} else {
			mesInt = mesSeguro;
		}

		String mesFin = sdf2.format(tipoSeguro.getTisFinPoliza());
		Integer mesFinInt = Integer.parseInt(mesFin);

		Integer mesesBetween = -1;
		if (mesFinInt > mesInt) {
			mesesBetween = mesFinInt - mesInt;
		} else {
			if (mesFinInt.equals(mesInt)) {
				mesesBetween = 12;
			} else {
				mesesBetween = (12 - mesFinInt) + mesInt;
			}
		}

		segurosForm.setMesesBetween(mesesBetween);
		segurosForm.setMes(Format.mesNumericAString(mesSeguro));

		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lstBen);

		// ---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
			// ---- exporta la tabla
			export(tableFacade);
			return null;
		} else {
			// ---- genera el html de la tabla para ser mostrada
			String html = html(tableFacade, request, segurosForm.getSegId());
			request.setAttribute("_lista2", html);
		}
		// ----- Variables de configuracion

		request.setAttribute("lstParentesco", lpar);
		request.setAttribute("lstTis", lst);
		request.setAttribute("form", segurosForm);
		request.setAttribute("edit", 1);
		request.setAttribute(Constantes.ACCION_KEY, "/seguros");
		return mapping.findForward("lista");
	}

	public ActionForward agregaNotas(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		SegurosForm segurosForm = (SegurosForm) form;
		CtaCasCuentaAsociadoDAO cuentaAsociadoDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
		CtaCasCuentaAsociado cuentaAsociado = cuentaAsociadoDAO
				.findbySegId(segurosForm.getSegId());
		request.setAttribute("cuentaAsc", cuentaAsociado.getCasCuenta());
		return mapping.findForward("notas");
	}

	public ActionForward regreso(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		SegurosForm segurosForm = (SegurosForm) form;

		String asc = request.getAttribute("ascId").toString();
		segurosForm.setAscId(asc);

		String seg = request.getAttribute("segId").toString();
		segurosForm.setSegId(seg);

		pos = 0;
		CtaSegSegurosDAO segurosDAO = new CtaSegSegurosDAO(getSessionHibernate(request));
		segurosForm.setSegurosH(segurosDAO.findById(segurosForm.getSegId()));

		segurosForm.setTisId2(segurosForm.getCtaTisTipoSeguro().getTisId());

		CtaTisTipoSeguroDAO tipoSeguroDAO = new CtaTisTipoSeguroDAO(getSessionHibernate(request));
		List lst = tipoSeguroDAO.findAll();

		CtaTisTipoSeguro tipoSeguro = tipoSeguroDAO.findById(segurosForm
				.getCtaTisTipoSeguro().getTisId());

		segurosForm.setPoliza(tipoSeguro.getTisPoliza());

		SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
		segurosForm.setVencimiento(sdf.format(tipoSeguro.getTisFinPoliza()));

		CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
		CtaAscAsociado asociado = asociadoDAO.findById(segurosForm.getAscId());

		SecPerPersonaDAO personaDAO = new SecPerPersonaDAO(getSessionHibernate(request));
		SecPerPersona persona = personaDAO.findById(asociado.getSecPerPersona()
				.getPerId());

		SecParParentescoDAO parentescoDAO = new SecParParentescoDAO(getSessionHibernate(request));
		List lpar = parentescoDAO.findAll();

		CtaBenBeneficiariosDAO beneficiariosDAO = new CtaBenBeneficiariosDAO(getSessionHibernate(request));
		List lstBen = beneficiariosDAO.findByProperty("ctaAscAsociado.ascId",
				segurosForm.getAscId());

		segurosForm.setCodigoAsociado(asociado.getAscCodigo());
		segurosForm.setAscCodigoAsociado(asociado.getAscCodigoAsociado());
		segurosForm.setAsociado(persona.getPerPrimerApellido() + " "
				+ persona.getPerSegundoApellido() + ", "
				+ persona.getPerPrimerNombre() + " "
				+ persona.getPerSegundoNombre());

		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lstBen);

		// ---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
			// ---- exporta la tabla
			export(tableFacade);
			return null;
		} else {
			// ---- genera el html de la tabla para ser mostrada
			String html = html(tableFacade, request, segurosForm.getSegId());
			request.setAttribute("_lista2", html);
		}
		// ----- Variables de configuracion

		request.setAttribute("lstParentesco", lpar);
		request.setAttribute("lstTis", lst);
		request.setAttribute("form", segurosForm);
		request.setAttribute("edit", 1);
		request.setAttribute(Constantes.ACCION_KEY, "/seguros");
		return mapping.findForward("lista");
	}

	// cargarCuota
	public ActionForward cargarCuota(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		SegurosForm segurosForm = (SegurosForm) form;

		CtaTisTipoSeguroDAO tipoSeguroDAO = new CtaTisTipoSeguroDAO(getSessionHibernate(request));
		CtaTisTipoSeguro tipoSeguro = tipoSeguroDAO.findById(segurosForm
				.getTipo());

		try {
			String texto = "";
			if (tipoSeguro.getTisId() != 1 && tipoSeguro.getTisId() != 2) {
				texto += "<input type=\"text\" name=\"segCuota\" size=\"15\" maxlength=\"15\""
						+ " styleClass=\"obligatorio\" value=\"\" id=\"segCuotaId\" />";
			} else {
				texto += "<input type=\"text\" name=\"segCuota\" size=\"15\" maxlength=\"15\" "
						+ "styleClass=\"obligatorio\" value=\""
						+ tipoSeguro.getTisCostoAnual()
						/ 12
						+ "\" id=\"segCuotaId\" readonly=\"true\" />";
			}
			response.getWriter().write(texto);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (RuntimeException e) {
			log.error("Error runtime", e);
		} catch (IOException e) {
			log.error(e);
		}
		return null;
	}

	public ActionForward cargarMeses(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		SegurosForm segurosForm = (SegurosForm) form;
		CtaTisTipoSeguroDAO tipoSeguroDAO = new CtaTisTipoSeguroDAO(getSessionHibernate(request));
		CtaTisTipoSeguro tipoSeguro = tipoSeguroDAO.findById(segurosForm
				.getTipo());
		SimpleDateFormat sdf = new SimpleDateFormat("MM");

		Date hoy = new Date();
		String mesActual = sdf.format(hoy);
		Integer mesInt = Integer.parseInt(mesActual);

		String mesFin = sdf.format(tipoSeguro.getTisFinPoliza());
		Integer mesFinInt = Integer.parseInt(mesFin);

		Integer mesesBetween = -1;
		if (mesFinInt > mesInt) {
			mesesBetween = mesFinInt - mesInt;
		} else {
			if (mesFinInt.equals(mesInt)) {
				mesesBetween = 12;
			} else {
				mesesBetween = (12 - mesFinInt) + mesInt;
			}
		}

		try {
			HtmlBuilder html = new HtmlBuilder();
			html.input().type("hidden").name("mesesBetween").id("mesesBetween")
					.value(mesesBetween.toString()).end();
			html.input().type("hidden").name("mesFin").id("mesFin").value(
					mesFin).end();
			html.select().name("meses").id("mesesId").onchange(
					"recalcularBetween();").close();
			html.option().value(mesInt.toString()).close().append(
					Format.mesNumericAString(mesInt)).optionEnd();
			if (mesInt < 12) {
				Integer mesNext = mesInt + 1;
				html.option().value(mesNext.toString()).close().append(
						Format.mesNumericAString(mesNext)).optionEnd();
			} else {
				Integer mesNext = 1;
				html.option().value(mesNext.toString()).close().append(
						Format.mesNumericAString(mesNext)).optionEnd();
			}
			html.selectEnd();
			String texto = "";
			texto = html.toString();
			response.getWriter().write(texto);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (RuntimeException e) {
			log.error("Error runtime", e);
		} catch (IOException e) {
			log.error(e);
		}
		return null;
	}

	private boolean vacios(SegurosForm segurosForm, HttpServletRequest request,
			HttpServletResponse response) {
		boolean booleano = false;
		ActionErrors errors = new ActionErrors();

		if (segurosForm.getBenPrimerNombre() == null
				|| segurosForm.getBenPrimerNombre().trim().equals("")) {
			mensajes2("errors.ben.benPrimerNombre.required", request, response,
					errors);
			booleano = true;
		}
		if (segurosForm.getBenPrimerApellido() == null
				|| segurosForm.getBenPrimerApellido().trim().equals("")) {
			mensajes2("errors.ben.benPrimerApellido.required", request,
					response, errors);
			booleano = true;
		}
		/*
		 * if(segurosForm.getBenFechaNacimiento()== null ||
		 * segurosForm.getBenFechaNacimiento().trim().equals("")){
		 * mensajes2("errors.ben.benFechaNacimiento.required", request,
		 * response, errors); booleano = true; }
		 */
		return booleano;
	}

	public void mensajes2(String msg, HttpServletRequest request,
			HttpServletResponse response, ActionErrors errors) {
		errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(msg));
		saveMessages(request, errors);
	}

	protected Map getKeyMethodMap() {
		// TODO Auto-generated method stub
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.seg.lista", "lista");
		map.put("cmd.seg.guardar", "guardar");
		map.put("cmd.seg.cancelar2", "cancelar2");
		map.put("cmd.seg.cargarPoliza", "cargarPoliza");
		map.put("cmd.seg.cargarVencimiento", "cargarVencimiento");
		map.put("cmd.seg.agregarBen", "agregarBen");
		map.put("cmd.seg.cargarMontoAsegurado", "cargarMontoAsegurado");
		map.put("cmd.seg.agregar", "agregar");
		map.put("cmd.seg.salvar", "salvar");
		map.put("cmd.seg.agregaNotas", "agregaNotas");
		map.put("cmd.seg.regreso", "regreso");
		map.put("cmd.seg.cargarCuota", "cargarCuota");
		map.put("cmd.seg.cargarMeses", "cargarMeses");
		return map;
	}
}