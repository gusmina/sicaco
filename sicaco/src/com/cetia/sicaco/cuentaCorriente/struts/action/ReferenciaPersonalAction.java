/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.cuentaCorriente.struts.action;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.hibernate.Transaction;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeImpl;
import org.jmesa.limit.ExportType;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.BasicCellEditor;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.html.HtmlBuilder;

import com.cetia.sicaco.cuentaCorriente.struts.form.PrestamoForm;
import com.cetia.sicaco.cuentaCorriente.struts.form.ReferenciaPersonalForm;
import com.cetia.sicaco.hibernate.CtaCasCuentaAsociado;
import com.cetia.sicaco.hibernate.CtaCasCuentaAsociadoDAO;
import com.cetia.sicaco.hibernate.CtaRpeReferenciasPersonales;
import com.cetia.sicaco.hibernate.CtaRpeReferenciasPersonalesDAO;
import com.cetia.sicaco.hibernate.SecIseInicioSesion;
import com.cetia.sicaco.hibernate.SecIseInicioSesionDAO;
import com.cetia.sicaco.hibernate.SecParParentescoDAO;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;

/** 
 * MyEclipse Struts
 * Creation date: 09-04-2008
 * 
 * XDoclet definition:
 * @struts.action path="/referenciaPersonal" name="referenciaPersonalForm" parameter="accion" scope="request"
 * @struts.action-forward name="lista" path="pagina-lista.cuentaCorriente.referenciaPersonal"
 */
public class ReferenciaPersonalAction extends DMLAction {

public static final String TABLA_ID = "ctaRpeReferenciasPersonales";
	
	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
 		ReferenciaPersonalForm referenciaPersonalForm = (ReferenciaPersonalForm)form;
 		CtaRpeReferenciasPersonalesDAO referenciasPersonalesDAO = new CtaRpeReferenciasPersonalesDAO(getSessionHibernate(request));
 		CtaCasCuentaAsociadoDAO cuentaAsociadoDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
 		SecParParentescoDAO parentescoDAO = new SecParParentescoDAO(getSessionHibernate(request));
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		CtaCasCuentaAsociado casCuenta = cuentaAsociadoDAO.findByPreId(referenciaPersonalForm.getPreId());
		referenciaPersonalForm.setPerId(casCuenta.getCtaAscAsociado().getSecPerPersona().getPerId());
		tableFacade.setItems(referenciasPersonalesDAO.findByProperty("ctaPrePrestamo.preId", referenciaPersonalForm.getPreId()));
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
        	//---- exporta la tabla
        //    export(tableFacade);
            return null; 
        } else {
        	String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
		request.setAttribute("prestamo", casCuenta.getCtaPrePrestamo());
		request.setAttribute("asociado", casCuenta.getCtaAscAsociado());
		request.setAttribute("parList", parentescoDAO.findAll());
		request.setAttribute("referenciaPersonalForm", form);
		request.setAttribute(Constantes.ACCION_KEY, "/referenciaPersonal");
		return mapping.findForward("lista");
	}
	
	private String html(final TableFacade tableFacade, final HttpServletRequest request) {
		tableFacade.setColumnProperties("rpeNombres","rpeTelefono","parId","rpeEstadoValidez");
		Table table = tableFacade.getTable();
		
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.rpe.caption");
		
		Row row = table.getRow();
		Column nombreColumna = row.getColumn("rpeNombres");
		nombreColumna.setTitleKey("tbl.rpe.nombres");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				CtaRpeReferenciasPersonales rpe = (CtaRpeReferenciasPersonales) item;
				ReferenciaPersonalForm form = (ReferenciaPersonalForm) request.getAttribute("referenciaPersonalForm");
				HtmlBuilder html = new HtmlBuilder();
				//---- Generar link para entrar a edicion
				String link = tableFacade.getWebContext().getContextPath();
				link += "/cuentaCorriente/referenciaPersonal.do?rpeId="+rpe.getRpeId()+"&accion=cargarDatos&mdf=true&estadoPrestamo="+form.getEstadoPrestamo();
				html.a().href().quote().append(link).quote().close();
				html.append(rpe.getRpeNombres()+" "+rpe.getRpeApellidos());
				html.aEnd();				
				return html.toString();
			}
		});
		
		nombreColumna = row.getColumn("rpeTelefono");
		nombreColumna.setTitleKey("tbl.rpe.telefonos");
		
		nombreColumna = row.getColumn("parId");
		nombreColumna.setTitleKey("tbl.rpe.parentesco");
		
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtaRpeReferenciasPersonales referenciasPersonales = (CtaRpeReferenciasPersonales) item;
				SecParParentescoDAO parentescoDAO = new SecParParentescoDAO(getSessionHibernate(request));
				value = parentescoDAO.findById(referenciasPersonales.getParId()).getParDescripcion();
				return value.toString();
			}
		});
		
		nombreColumna = row.getColumn("rpeEstadoValidez");
		nombreColumna.setTitleKey("tbl.rpe.estado");
		
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				String value;
				CtaRpeReferenciasPersonales rpe = (CtaRpeReferenciasPersonales) item;
				if(rpe.getRpeEstadoValidez().equals("V")){
					value = "Referencia Valida";
				}else{
					value = "Referencia Invalida";
				}
				return value;
			}
		});
		return tableFacade.render();
	}
	
	public ActionForward guardarRefPersonal(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String listaResponse = "";
		String listaErrores ="";
		ReferenciaPersonalForm rpeForm = (ReferenciaPersonalForm) form;
		ArrayList<String> errors = new ArrayList<String>();
		HashMap<Long, CtaRpeReferenciasPersonales> mapa = (HashMap<Long, CtaRpeReferenciasPersonales>)request.getSession().getAttribute("listaReferenciasPersonales");
		errors = validarRefPersonal(rpeForm.getReferenciasPersonalesH(), errors,mapa,request);
		if(!errors.isEmpty()){
			listaErrores=construirListaErrores(errors);
		}else{
			mapa.put(System.currentTimeMillis(),rpeForm.getReferenciasPersonalesH());
			request.getSession().setAttribute("listaReferenciasPersonales", mapa);
		}
		listaResponse =construirListaReferenciasPersonales(mapa,request);
		try {
			response.getWriter().write(listaErrores+listaResponse);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	}
	
	private ArrayList<String> validarRefPersonal(CtaRpeReferenciasPersonales referenciasPersonales,ArrayList<String> errors,HashMap<Long, CtaRpeReferenciasPersonales> mapa,HttpServletRequest request){
		if(referenciasPersonales.getRpeNombres().trim().equals("") || referenciasPersonales.getRpeNombres() == null){
			errors.add(getResources(request).getMessage("errors.rpe.rpeNombresRequired"));
		}
		if(referenciasPersonales.getRpeApellidos().trim().equals("") || referenciasPersonales.getRpeApellidos() == null){
			errors.add(getResources(request).getMessage("errors.rpe.rpeApellidosRequired"));
		}
		if(referenciasPersonales.getRpeDireccion().trim().equals("") || referenciasPersonales.getRpeDireccion() == null){
			errors.add(getResources(request).getMessage("errors.rpe.rpeDireccionRequired"));
		}
		if(referenciasPersonales.getRpeTelefono().trim().equals("") || referenciasPersonales.getRpeTelefono() == null){
			errors.add(getResources(request).getMessage("errors.rpe.rpeTelefonoRequired"));
		}
		Iterator<CtaRpeReferenciasPersonales> iterator =  mapa.values().iterator();
		while(iterator.hasNext()){
			CtaRpeReferenciasPersonales viejaRef = (CtaRpeReferenciasPersonales)iterator.next();
			if(referenciasPersonales.getRpeNombres().equals(viejaRef.getRpeNombres()) && referenciasPersonales.getRpeApellidos().equals(viejaRef.getRpeApellidos())){
				errors.add(getResources(request).getMessage("errors.rpe.rpeRepetido"));
				break;
			}
		}
		return errors;
	}
	
	public ActionForward eliminarRpe(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		ReferenciaPersonalForm rpeForm = (ReferenciaPersonalForm) form;
		HashMap<Long, CtaRpeReferenciasPersonales> mapa = (HashMap<Long, CtaRpeReferenciasPersonales>)request.getSession().getAttribute("listaReferenciasPersonales");
		if (rpeForm.getPosicionRpe() != null) {
			int size = rpeForm.getPosicionRpe().length;
			int i = 0;
			while (i < size) {
				mapa.remove(rpeForm.getPosicionRpe()[i]);
				i++;
			}
		}
		try {
			request.getSession().setAttribute("listaReferenciasPersonales",
					mapa);
			response.getWriter().write(
					construirListaReferenciasPersonales(mapa, request));
			response.getWriter().flush();
			response.getWriter().close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	}
	
	private String construirListaReferenciasPersonales(HashMap<Long, CtaRpeReferenciasPersonales> mapa,HttpServletRequest request){
		SecParParentescoDAO parentescoDAO = new SecParParentescoDAO(getSessionHibernate(request));
		String html = "<table class=\"tableone\" summary=\"\"><caption>"
				+ getResources(request).getMessage("lbl.rpeTbl.titulo")
				+ "</caption>";
		html = html
				+ "<thead><tr><th class=\"th1\" scope=\"col\">&nbsp;</th><th class=\"th1\" scope=\"col\">"
				+ getResources(request).getMessage("lbl.rpe.nombres")
				+ "</th><th class=\"th1\" scope=\"col\">"
				+ getResources(request).getMessage("lbl.rpe.apellidos")
				+ "</th><th class=\"th1\" scope=\"col\">"
				+ getResources(request).getMessage("lbl.rpe.parentesco")
				+ "</th></tr></thead><tbody><tr><td colspan=\"5\"><div class=\"innerb\"><table class=\"tabletwo\">";
		Iterator<Long> iterator = (mapa.keySet().iterator());
		long i;
		while (iterator.hasNext()) {
			i = iterator.next().longValue();
			CtaRpeReferenciasPersonales rf = (CtaRpeReferenciasPersonales) mapa.get(i);
			html = html
					+ "<tr><th class=\"td1\" scope=\"row\"><input type=\"checkbox\" name=\"posicionRpe\" class=\"posicionRpe\" value=\""
					+ i + "\"/></th>" + "<td class=\"td1\">"
					+ rf.getRpeNombres() + "</td><td class=\"td1\">"
					+ rf.getRpeApellidos() + "</td><td class=\"td1\">"
					+ parentescoDAO.findById(rf.getParId()).getParDescripcion()
					+ "</td></tr>";
		}
		html = html + "</table></div></td></tr></tbody></table>";
		return html;
	}

	private String construirListaErrores(ArrayList<String> errors){
		String errores = "<table align=\"center\"><tr><td colspan=\"2\"><span style=\"font-size: 14px;color: red;font-style: italic;\">Se han encontrado los siguientes errores:</span></td></tr>";
		Iterator<String> it = errors.iterator();
		while(it.hasNext()){
			errores=errores+"<tr><td><span style=\"font-size: 12px;color: red;font-style: italic;\">"+ 
			it.next()
			+"</span></td></tr>";
		}
		errores=errores+"</table>";
		return errores;
	}
	
	public ActionForward cargarRefPersonal(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
//		try {
//			Thread.currentThread().sleep(10);
//		} catch (InterruptedException e1) {
//			e1.printStackTrace();
//		}
		String listaResponse = "";
		ReferenciaPersonalForm rpeForm = (ReferenciaPersonalForm) form;
		HashMap<Long, CtaRpeReferenciasPersonales> mapa = (HashMap<Long, CtaRpeReferenciasPersonales>)request.getSession().getAttribute("listaReferenciasPersonales");
		CtaRpeReferenciasPersonalesDAO referenciasPersonalesDAO = new CtaRpeReferenciasPersonalesDAO(getSessionHibernate(request));
		try {
		List<CtaRpeReferenciasPersonales> lista = referenciasPersonalesDAO.findByProperty("ctaPrePrestamo.preId", rpeForm.getPreId());
		Iterator<CtaRpeReferenciasPersonales> iterator = lista.iterator();
		int add= 0;
			while(iterator.hasNext()) {
				CtaRpeReferenciasPersonales referenciasPersonales = (CtaRpeReferenciasPersonales) iterator.next();
				mapa.put(System.currentTimeMillis() + add, referenciasPersonales);
				add++;
			}
			listaResponse =construirListaReferenciasPersonales(mapa,request);
			String var = listaResponse;
			response.getWriter().write(var);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	}
	
	public ActionForward cargarDatos(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		CtaRpeReferenciasPersonalesDAO referenciasPersonalesDAO = new CtaRpeReferenciasPersonalesDAO(getSessionHibernate(request));
		ReferenciaPersonalForm rpeForm = (ReferenciaPersonalForm) form;
		rpeForm.setReferenciasPersonalesH(referenciasPersonalesDAO.findById(rpeForm.getRpeId()));
		return lista(mapping, form, request, response);
	}
	
	public ActionForward modificar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ActionErrors mensaje = new ActionErrors();
		CtaRpeReferenciasPersonalesDAO referenciasPersonalesDAO = new CtaRpeReferenciasPersonalesDAO(getSessionHibernate(request));
		ReferenciaPersonalForm rpeForm = (ReferenciaPersonalForm) form;
		Transaction tx =  referenciasPersonalesDAO.getSession().beginTransaction();
		try{
			CtaRpeReferenciasPersonales rpe = referenciasPersonalesDAO.findById(rpeForm.getRpeId());
			rpe.setRpeEstadoValidez(rpeForm.getRpeEstadoValidez());
			 referenciasPersonalesDAO.merge(rpe);
			 tx.commit();
			 mensaje.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("lbl.pre.modificacionExitoSol"));
				saveMessages(request, mensaje);
		}catch (Exception e) {
			tx.rollback();
			e.printStackTrace();
		}finally{
			referenciasPersonalesDAO.getSession().flush();
			referenciasPersonalesDAO.getSession().clear();
			
		}		
		return lista(mapping, form, request, response);
	}
	
	public ActionForward regresarToPrestamo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		SecIseInicioSesionDAO sesionDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
		PrestamoForm prestamoForm = new PrestamoForm();
		ReferenciaPersonalForm rpeForm = (ReferenciaPersonalForm) form;
		prestamoForm.setPreId(rpeForm.getPreId());
		SecIseInicioSesion sesion = sesionDAO.findById(rpeForm.getUsuarioConectado().getNombreUsuario());
		if((sesion.getSecRolRoles().getRolNombre().equals("COMITECRED") || sesion.getSecRolRoles().getRolNombre().equals("CONSADMIN")) && !sesion.getSecPerPersona().getPerId().equals(rpeForm.getPerId())){
			request.setAttribute("rol", "iddkfq");
		}
		request.setAttribute("prestamoForm", prestamoForm);
		return mapping.findForward("forwardToPrestamo");
	}
	
	public ActionForward regresarToPrestamoList(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		return mapping.findForward("toPrestamosList");
	}
	
	protected Map<String, String> getKeyMethodMap() {
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.rpe.lista","lista");
		map.put("cmd.rpe.cancelar","lista");
		map.put("cmd.rpe.guardar","guardarRefPersonal");
		map.put("cmd.rpe.eliminar","eliminarRpe");
		map.put("cmd.pre.cargarRefPersonal", "cargarRefPersonal");
		map.put("cmd.rpe.cargarDatos", "cargarDatos");
		map.put("cmd.rpe.regresar", "regresarToPrestamo");
		map.put("cmd.rpe.modificar", "modificar");	
		map.put("cmd.rpe.regresarToPrestamoList", "regresarToPrestamoList");	
		return map;
	}
}