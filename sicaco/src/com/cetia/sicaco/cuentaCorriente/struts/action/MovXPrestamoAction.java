/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.cuentaCorriente.struts.action;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.hibernate.Transaction;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeImpl;
import org.jmesa.limit.ExportType;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.BasicCellEditor;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.editor.DateCellEditor;

import com.cetia.sicaco.cuentaCorriente.struts.form.CuentaAsociadoForm;
import com.cetia.sicaco.cuentaCorriente.struts.form.MovXPrestamoForm;
import com.cetia.sicaco.cuentaCorriente.struts.form.SegurosForm;
import com.cetia.sicaco.cuentaCorriente.struts.form.TipoSeguroForm;
import com.cetia.sicaco.hibernate.CtaAscAsociado;
import com.cetia.sicaco.hibernate.CtaAscAsociadoDAO;
import com.cetia.sicaco.hibernate.CtaBenBeneficiarios;
import com.cetia.sicaco.hibernate.CtaBenBeneficiariosDAO;
import com.cetia.sicaco.hibernate.CtaMxpMovimientoPrestamo;
import com.cetia.sicaco.hibernate.CtaMxpMovimientoPrestamoDAO;
import com.cetia.sicaco.hibernate.CtaTisTipoSeguro;
import com.cetia.sicaco.hibernate.CtaTisTipoSeguroDAO;
import com.cetia.sicaco.hibernate.CtrParParametrosDAO;
import com.cetia.sicaco.hibernate.SecParParentescoDAO;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;
import com.mad.utilidades.ElapsedTime;
import com.mad.utilidades.Format;

/** 
 * MyEclipse Struts
 * Creation date: 09-16-2008
 * 
 * XDoclet definition:
 * @struts.action path="/movXPrestamo" name="movXPrestamoForm" input="redirectInvalidData" parameter="accion" scope="request"
 * @struts.action-forward name="lista" path="pagina-lista.cuentaCorriente.movXPrestamo"
 */
public class MovXPrestamoAction extends DMLAction {
	
	public String TABLA_ID = "ctaMxpMovimientoPrestamo";
	public int pos = 0;

	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		MovXPrestamoForm movXPrestamoForm = (MovXPrestamoForm)form;
		
		CtaMxpMovimientoPrestamoDAO movimientoPrestamoDAO = new CtaMxpMovimientoPrestamoDAO(getSessionHibernate(request));
		
		List lst = movimientoPrestamoDAO.findAllByPrestamo(movXPrestamoForm.getPrestamoId());
		
		
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);

		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
			//---- exporta la tabla
			export(tableFacade);
			return null; 
		} else {
			//---- genera el html de la tabla para ser mostrada
			String html = html(tableFacade, request);
			request.setAttribute("_lista", html);
		}
		//----- Variables de configuracion
		
		request.setAttribute("form", movXPrestamoForm);
		request.setAttribute("edit", 0);
		request.setAttribute(Constantes.ACCION_KEY, "/movXPrestamo");

		return mapping.findForward("lista");
	}
	
	//---- metodo que genera el html de la tabla del jmesa
	private String html(final TableFacade tableFacade, final HttpServletRequest request) {
        tableFacade.setColumnProperties("mxpFecha",
        		"ctaTxaTransaccionXCuentaAsociado.ctaTtrTipoTransaccion.ttrUso",
        		"ctaTxaTransaccionXCuentaAsociado.txaMonto",
        		"mxpId", "mxpSaldo", "mxpInteresAcumulado", "mxpInteresPendiente");
        /*mxpId, ctaPrePrestamo, ctaTxaTransaccionxcuentaAsociado,
				mxpFecha, mxpSaldoActual, mxpInteresPendiente, mxpMora*/
        
        Table table = tableFacade.getTable();
        //---- Titulo de la tabla
        table.setCaptionKey("tbl.mxp.caption");
       
        Row row = table.getRow();
        Column nombreColumna = row.getColumn("mxpSaldo");
        nombreColumna.setTitleKey("tbl.mxp.mxpSaldoActual");
        nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

            public Object getValue(Object item, String property, int rowcount) {
                Object value = new BasicCellEditor().getValue(item, property, rowcount);
                CtaMxpMovimientoPrestamo movimientoPrestamo = (CtaMxpMovimientoPrestamo)item;
                value = Format.formatDinero(movimientoPrestamo.getMxpSaldo()== null?0.0:movimientoPrestamo.getMxpSaldo());   
                return value;           
            }
        });
        
        nombreColumna = row.getColumn("mxpId");
        nombreColumna.setTitleKey("tbl.mxp.mxpSaldoAnterior");
        nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

            public Object getValue(Object item, String property, int rowcount) {
                Object value = new BasicCellEditor().getValue(item, property, rowcount);
                CtaMxpMovimientoPrestamo mxp = (CtaMxpMovimientoPrestamo)item;
                String tipoTrans = mxp.getCtaTxaTransaccionxcuentaAsociado().getCtaTtrTipoTransaccion().getTtrUso();
                String saldoAnterior;
                if(tipoTrans == null || tipoTrans.equals("")){
                	saldoAnterior = Format.formatDinero(mxp.getCtaPrePrestamo().getPreSaldoActualT());   
                }else{
                	if(tipoTrans.equals("A")){
                		saldoAnterior = Format.formatDinero(0.0);;
                    	CtaMxpMovimientoPrestamoDAO mxpDao = new CtaMxpMovimientoPrestamoDAO(getSessionHibernate(request));
                    	Integer primerMov = mxpDao.getIdPrimerMov(mxp.getCtaPrePrestamo().getPreId());
                    	if(!primerMov.equals(mxp.getMxpId())){
                    	
	                		saldoAnterior = Format.formatDinero(mxp.getMxpSaldo()/*getCtaPrePrestamo().getPreSaldoActualT()*/ 
	                				+ (mxp.getCtaTxaTransaccionxcuentaAsociado().getTxaMonto() 
	                						- mxp.getMxpInteresAcumulado()
	                						- mxp.getMxpInteresPendiente()));
                    	}
                	}else{
                		saldoAnterior = Format.formatDinero(0.0);
                    	CtaMxpMovimientoPrestamoDAO mxpDao = new CtaMxpMovimientoPrestamoDAO(getSessionHibernate(request));
                    	Integer primerMov = mxpDao.getIdPrimerMov(mxp.getCtaPrePrestamo().getPreId());
                    	if(!primerMov.equals(mxp.getMxpId())){
                    	
	                		saldoAnterior = Format.formatDinero(mxp.getMxpSaldo()/*getCtaPrePrestamo().getPreSaldoActualT()*/ 
	                				- (mxp.getCtaTxaTransaccionxcuentaAsociado().getTxaMonto()
	                				- mxp.getMxpInteresAcumulado()
	        						- mxp.getMxpInteresPendiente()));
                    	}
                	}
                }
                return saldoAnterior;           
            }
        });
        
        nombreColumna = row.getColumn("ctaTxaTransaccionXCuentaAsociado.ctaTtrTipoTransaccion.ttrUso");
        nombreColumna.setTitleKey("tbl.mxp.ttrUso");
        nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

            public Object getValue(Object item, String property, int rowcount) {
                CtaMxpMovimientoPrestamo mxp = (CtaMxpMovimientoPrestamo) item;
                String tipoTrans = mxp.getCtaTxaTransaccionxcuentaAsociado().getCtaTtrTipoTransaccion().getTtrUso();
                if(tipoTrans == null || tipoTrans.equals("")){
                	tipoTrans = "";
                }else{
                	if(tipoTrans.equals("A")){
                		tipoTrans = "Abono";
                	}else{
                		tipoTrans = "Cargo";
                	}
                }
                return tipoTrans;           
            }
        });
        
        
        //Monto del movimiento
        nombreColumna = row.getColumn("ctaTxaTransaccionXCuentaAsociado.txaMonto");
        nombreColumna.setTitleKey("tbl.mxp.txaMonto");
        nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

            public Object getValue(Object item, String property, int rowcount) {
                CtaMxpMovimientoPrestamo mxp = (CtaMxpMovimientoPrestamo) item;
                Double montoTrans = mxp.getCtaTxaTransaccionxcuentaAsociado().getTxaMonto();
                return montoTrans;           
            }
        });        
       
        nombreColumna = row.getColumn("mxpInteresPendiente");
        nombreColumna.setTitleKey("tbl.mxp.mxpInteresPendiente");
        nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

            public Object getValue(Object item, String property, int rowcount) {
                Object value = new BasicCellEditor().getValue(item, property, rowcount);
                CtaMxpMovimientoPrestamo movimientoPrestamo = (CtaMxpMovimientoPrestamo)item;
                
                value = Format.formatDinero(movimientoPrestamo.getMxpInteresPendiente());   
                return value;           
            }
        });
       
        nombreColumna = row.getColumn("mxpInteresAcumulado");
        nombreColumna.setTitleKey("tbl.mxp.mxpInteresAcumulado");
        nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

            public Object getValue(Object item, String property, int rowcount) {
                Object value = new BasicCellEditor().getValue(item, property, rowcount);
                CtaMxpMovimientoPrestamo movimientoPrestamo = (CtaMxpMovimientoPrestamo)item;
                
                value = Format.formatDinero(movimientoPrestamo.getMxpInteresAcumulado());   
                return value;           
            }
        });
       
        nombreColumna = row.getColumn("mxpFecha");
        nombreColumna.setTitleKey("tbl.mxp.mxpFecha");
        nombreColumna.getCellRenderer().setCellEditor(new DateCellEditor("dd-MMM-yyyy HH:mm:ss"));
       
        return tableFacade.render();
    }
   
    //---- metodo que genera los exports, el formato que tendran
     private void export(final TableFacade tableFacade) {
         tableFacade.setColumnProperties("benPrimerNombre", "secParParentesco.parDescripcion",
                    "benSexo","benFechaNacimiento");
         Table table = tableFacade.getTable();
         //---- Titulo de la tabla
        table.setCaptionKey("tbl.ben.caption");
       
        Row row = table.getRow();
        Column nombreColumna = row.getColumn("benPrimerNombre");
        nombreColumna.setTitleKey("tbl.ben.benNombre");
       
        nombreColumna = row.getColumn("secParParentesco.parDescripcion");
        nombreColumna.setTitleKey("tbl.ben.parentescoNombre");
       
        nombreColumna = row.getColumn("benSexo");
        nombreColumna.setTitleKey("tbl.ben.benSexo");
       
       
        nombreColumna = row.getColumn("benFechaNacimiento");
        nombreColumna.setTitleKey("tbl.ben.benFechaNacimiento");
           
        tableFacade.render();
    }

	public ActionForward buscar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		MovXPrestamoForm movXPrestamoForm = (MovXPrestamoForm)form;

		CtaMxpMovimientoPrestamoDAO movimientoPrestamoDAO = new CtaMxpMovimientoPrestamoDAO(getSessionHibernate(request));
		movXPrestamoForm.getCtaPrePrestamo().setPreId(movXPrestamoForm.getPrestamoId());
		List lst = movimientoPrestamoDAO.findByCriteria(movXPrestamoForm.getMovimientoPrestamoH());
		
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);

		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
			//---- exporta la tabla
			export(tableFacade);
			return null; 
		} else {
			//---- genera el html de la tabla para ser mostrada
			String html = html(tableFacade, request);
			request.setAttribute("_lista", html);
		}
		//----- Variables de configuracion
		
		request.setAttribute("form", movXPrestamoForm);
		request.setAttribute("edit", 0);
		request.setAttribute(Constantes.ACCION_KEY, "/movXPrestamo");
		return mapping.findForward("lista");
	}

	public ActionForward cargarDatos(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		TipoSeguroForm tipoSeguroForm = (TipoSeguroForm)form;
		CtaTisTipoSeguroDAO tipoSeguroDAO = new CtaTisTipoSeguroDAO(getSessionHibernate(request));
		tipoSeguroForm.setTipoSeguroH(tipoSeguroDAO.findById(tipoSeguroForm.getTisId()));
		
		List lst = tipoSeguroDAO.findAll();

		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);

		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
			//---- exporta la tabla
			export(tableFacade);
			return null; 
		} else {
			//---- genera el html de la tabla para ser mostrada
			String html = html(tableFacade, request);
			request.setAttribute(Constantes.LISTA_KEY, html);
		}
		//----- Variables de configuracion
		request.setAttribute("form", tipoSeguroForm);
		request.setAttribute("edit", 1);
		request.setAttribute(Constantes.ACCION_KEY, "/tipoSeguro");
		return mapping.findForward("lista");
	}

	public ActionForward redirectInvalidData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		ActionErrors errors = (ActionErrors)request.getSession().getAttribute(Constantes.ERRORS);
		saveMessages(request, errors);
		return lista(mapping, form, request, response);
	}

	public void mensajes(String msg, HttpServletRequest request){
		ActionErrors errors = new ActionErrors();
		errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(msg));
		saveMessages(request, errors);
	}
	
	public ActionForward eliminar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		TipoSeguroForm tipoSeguroForm = (TipoSeguroForm)form;
		CtaTisTipoSeguroDAO tipoSeguroDAO = new CtaTisTipoSeguroDAO(getSessionHibernate(request));

		Transaction tx = tipoSeguroDAO.getSession().beginTransaction();
		try{
			CtaTisTipoSeguro tipoSeguro = tipoSeguroDAO.findById(tipoSeguroForm.getTisId2());
			if(tipoSeguro.getCtaSegSeguroses().size() > 0){
				mensajes("errors.tis.tieneHijos",request);
				return lista(mapping, form, request, response);
			}else{
				tipoSeguroDAO.delete(tipoSeguro);
			}
		}catch(Exception e){
			tx.rollback();
			e.printStackTrace();
		}finally{
			tx.commit();
			tipoSeguroDAO.getSession().flush();
			tipoSeguroDAO.getSession().clear();
			
		}
		mensajes("msg.tis.eliminacionExitosa", request);
		return lista(mapping,new TipoSeguroForm(),request,response);
	} 
	
	public ActionForward salvar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		TipoSeguroForm tipoSeguroForm = (TipoSeguroForm)form;
		CtaTisTipoSeguroDAO tipoSeguroDAO = new CtaTisTipoSeguroDAO(getSessionHibernate(request));
		CtaTisTipoSeguro tipoSeguro = tipoSeguroDAO.findById(tipoSeguroForm.getTisId());
		Transaction tx = tipoSeguroDAO.getSession().beginTransaction();
		try{
			if(tipoSeguroForm.getTipoSeguroH().getTisNombre().equals(tipoSeguro.getTisNombre())){
				tipoSeguroForm.setCtaPlmPlanMeses(null);
				CtrParParametrosDAO parametrosDAO = new CtrParParametrosDAO(getSessionHibernate(request));
				
				tipoSeguroForm.setTisFinPoliza(
						ElapsedTime.obtenerFechaMeses(
								tipoSeguroForm.getTisInicioPoliza(),
								parametrosDAO.findById("ANHO_POLIZA").getParValorNumber().intValue()));
				tipoSeguroDAO.merge(tipoSeguroForm.getTipoSeguroH());
			}else{
				if(tipoSeguroDAO.findByTisNombre(tipoSeguroForm.getTipoSeguroH().getTisNombre()).isEmpty()){
					tipoSeguroForm.setCtaPlmPlanMeses(null);
					tipoSeguroDAO.merge(tipoSeguroForm.getTipoSeguroH());
				}else{
					mensajes("errors.tisNombreRepetido",request);
					return lista(mapping, form, request, response);
				}
			}
		}catch(Exception e){
			tx.rollback();
			e.printStackTrace();
		}finally{
			tx.commit();
			tipoSeguroDAO.getSession().flush();
			tipoSeguroDAO.getSession().clear();
			
		}
		mensajes("msg.tis.modificacionExitosa",request);
		return lista(mapping,new TipoSeguroForm(),request,response);
	} 
	
	public ActionForward cancelar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		String asociadoId = request.getSession().getAttribute("asociadoId").toString();
		CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
		CtaAscAsociado asociado = asociadoDAO.findById(asociadoId);
		CuentaAsociadoForm cuentaAsociadoForm = new CuentaAsociadoForm();
		cuentaAsociadoForm.setAscId(asociado.getAscId());
		cuentaAsociadoForm.setAscCodigo(asociado.getAscCodigo());
		cuentaAsociadoForm.setTipoCuentaMadre("Ap");
		request.setAttribute("form", cuentaAsociadoForm);
		return mapping.findForward("regresar");
	}
	
	public ActionForward cargarPoliza(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		SegurosForm segurosForm = (SegurosForm)form;
		
		CtaTisTipoSeguroDAO tipoSeguroDAO = new CtaTisTipoSeguroDAO(getSessionHibernate(request));
		CtaTisTipoSeguro tipoSeguro = tipoSeguroDAO.findById(segurosForm.getTipo());
		
		try{
			String texto = "";
			texto += "<input type=\"text\" name=\"poliza\" size=\"15\" maxlength=\"15\" styleClass=\"obligatorio\" value=\"" + tipoSeguro.getTisPoliza() + "\" id=\"polizaId\" readonly=\"true\" />";
			response.getWriter().write(texto);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (RuntimeException e) {
			log.error("Error runtime", e);
		} catch (IOException e) {
			log.error(e);
		}
		return null;
	}
	
	public ActionForward cargarVencimiento(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		SegurosForm segurosForm = (SegurosForm)form;
		
		CtaTisTipoSeguroDAO tipoSeguroDAO = new CtaTisTipoSeguroDAO(getSessionHibernate(request));
		CtaTisTipoSeguro tipoSeguro = tipoSeguroDAO.findById(segurosForm.getTipo());
		/*DateFormat dateFormat;
		dateFormat.parse("dd-MMM-yyyy");
		dateFormat.format(tipoSeguro.getTisFinPoliza());
		*/
		SimpleDateFormat sdf = new SimpleDateFormat();
		try{
			String texto = "";
			texto += "<input type=\"text\" name=\"vencimiento\" size=\"15\" maxlength=\"15\" styleClass=\"obligatorio\" value=\"" + tipoSeguro.getTisFinPoliza() + "\" id=\"vencimientoId\" readonly=\"true\" />";
			response.getWriter().write(texto);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (RuntimeException e) {
			log.error("Error runtime", e);
		} catch (IOException e) {
			log.error(e);
		}
		return null;
	}
	
	//cargarMontoAsegurado
	public ActionForward cargarMontoAsegurado(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		SegurosForm segurosForm = (SegurosForm)form;
		
		CtaTisTipoSeguroDAO tipoSeguroDAO = new CtaTisTipoSeguroDAO(getSessionHibernate(request));
		CtaTisTipoSeguro tipoSeguro = tipoSeguroDAO.findById(segurosForm.getTipo());
		
		try{
			String texto = "";
			texto += "<input type=\"text\" name=\"segMonto\" size=\"15\" maxlength=\"15\" styleClass=\"obligatorio\" value=\"" + tipoSeguro.getTisMontoBasico() + "\" id=\"segMontoId\" readonly=\"true\" />";
			response.getWriter().write(texto);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (RuntimeException e) {
			log.error("Error runtime", e);
		} catch (IOException e) {
			log.error(e);
		}
		return null;
	}
	
	public ActionForward agregarBen(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		SegurosForm segurosForm = (SegurosForm)form;
		CtaAscAsociado asociado = new CtaAscAsociado();
		CtaAscAsociadoDAO ascDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
		asociado = ascDAO.findById(segurosForm.getAscId());
		segurosForm.getBeneficiariosH().setCtaAscAsociado(asociado);
		CtaBenBeneficiariosDAO beneficiariosDAO = new CtaBenBeneficiariosDAO(getSessionHibernate(request));
		SecParParentescoDAO parentescoDAO = new SecParParentescoDAO(getSessionHibernate(request));
		segurosForm.getBeneficiariosH().setSecParParentesco(parentescoDAO.findById(segurosForm.getBeneficiariosH().getSecParParentesco().getParId()));
		segurosForm.getBeneficiariosH().setBenEstado("A");
		Transaction tx = beneficiariosDAO.getSession().beginTransaction();
		try{
			if(beneficiariosDAO.findByCriteria(segurosForm.getBeneficiariosH()).isEmpty()){
				beneficiariosDAO.save(segurosForm.getBeneficiariosH());
				
			}else{
				mensajes("errors.benNombreRepetido",request);
				return lista(mapping, form, request, response);
			}
			
		}catch(Exception e){
			tx.rollback();
			e.printStackTrace();
		}finally{
			tx.commit();
			beneficiariosDAO.getSession().flush();
			beneficiariosDAO.getSession().clear();
			
		}
		CtaBenBeneficiarios beneficiarios = new CtaBenBeneficiarios();
		segurosForm.setBeneficiariosH(beneficiarios);
		return lista(mapping,segurosForm,request,response);
	}
	
	
	protected Map getKeyMethodMap() {
		// TODO Auto-generated method stub
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.mxp.lista", "lista");
		map.put("cmd.mxp.buscar", "buscar");
		map.put("cmd.seg.guardar", "guardar");
		map.put("cmd.seg.cancelar", "cancelar");
		map.put("cmd.seg.cargarPoliza", "cargarPoliza");
		map.put("cmd.seg.cargarVencimiento", "cargarVencimiento");
		map.put("cmd.seg.agregarBen", "agregarBen");
		map.put("cmd.seg.cargarMontoAsegurado", "cargarMontoAsegurado");
		return map;
	}
}