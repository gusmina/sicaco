/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.cuentaCorriente.struts.action;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.hibernate.Transaction;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeImpl;
import org.jmesa.limit.ExportType;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.BasicCellEditor;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.html.HtmlBuilder;

import com.cetia.sicaco.cuentaCorriente.struts.form.DescuentosExternosForm;
import com.cetia.sicaco.cuentaCorriente.struts.form.GarantiaPrestamoForm;
import com.cetia.sicaco.cuentaCorriente.struts.form.PrestamoForm;
import com.cetia.sicaco.hibernate.CtaCasCuentaAsociado;
import com.cetia.sicaco.hibernate.CtaCasCuentaAsociadoDAO;
import com.cetia.sicaco.hibernate.CtaGarGarantia;
import com.cetia.sicaco.hibernate.CtaGarGarantiaDAO;
import com.cetia.sicaco.hibernate.CtaTgaTipoGarantiaDAO;
import com.cetia.sicaco.hibernate.CtrParParametrosDAO;
import com.cetia.sicaco.hibernate.SecIseInicioSesion;
import com.cetia.sicaco.hibernate.SecIseInicioSesionDAO;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;
import com.mad.utilidades.Format;

/** 
 * MyEclipse Struts
 * Creation date: 09-18-2008
 * 
 * XDoclet definition:
 * @struts.action path="/garantiaPrestamo" name="garantiaPrestamoForm" parameter="accion" scope="request"
 * @struts.action-forward name="lista" path="pagina-lista.cuentaCorriente.garantiaDML"
 */
public class GarantiaPrestamoAction extends DMLAction {
	
	public static final String TABLA_ID = "ctaGarGarantia";
	public static final String PRE_ID = "ctaPrePrestamo.preId";

	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		CtaGarGarantiaDAO garantiaDAO = new CtaGarGarantiaDAO(getSessionHibernate(request));
		CtaTgaTipoGarantiaDAO tipoGarantiaDAO = new CtaTgaTipoGarantiaDAO(getSessionHibernate(request));
		CtaCasCuentaAsociadoDAO cuentaAsociadoDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
		GarantiaPrestamoForm garantiaPrestamoForm = (GarantiaPrestamoForm) form;
		CtaCasCuentaAsociado casCuenta = cuentaAsociadoDAO.findByPreId(garantiaPrestamoForm.getPreId());
		garantiaPrestamoForm.setPerId(casCuenta.getCtaAscAsociado().getSecPerPersona().getPerId());
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(garantiaDAO.findByProperty(PRE_ID, garantiaPrestamoForm.getPreId()));
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
        	//---- exporta la tabla
        //    export(tableFacade);
            return null; 
        } else {
        	String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
		request.setAttribute("prestamo", casCuenta.getCtaPrePrestamo());
		request.setAttribute("asociado", casCuenta.getCtaAscAsociado());
		request.setAttribute("garantiaPrestamoForm", form);
		request.setAttribute("tipoGarantias",tipoGarantiaDAO.findAll());
		request.setAttribute(Constantes.ACCION_KEY, "/garantiaPrestamo");
		return mapping.findForward("lista");
	}
	
	private String html(final TableFacade tableFacade, final HttpServletRequest request) {
		tableFacade.setColumnProperties("garNombreInmueble","ctaTgaTipoGarantia.tgaNombre","garValor","garInspeccion");
		Table table = tableFacade.getTable();
		
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.gar.caption");
		
		Row row = table.getRow();
		Column nombreColumna = row.getColumn("garNombreInmueble");
		nombreColumna.setTitleKey("tbl.gar.nombre");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){
		
		public Object getValue(Object item, String property, int rowcount) {
			Object value = new BasicCellEditor().getValue(item, property, rowcount);
			CtaGarGarantia garantia = (CtaGarGarantia)item;
			GarantiaPrestamoForm garForm = (GarantiaPrestamoForm) request.getAttribute("garantiaPrestamoForm");
			HtmlBuilder html = new HtmlBuilder();
			String link = tableFacade.getWebContext().getContextPath();
			link += "/cuentaCorriente/garantiaPrestamo.do?garId="+garantia.getGarId()+
					"&accion=cargarDatos&mdf=true&preId="+garantia.getCtaPrePrestamo().getPreId()+"&estadoPrestamo="+garForm.getEstadoPrestamo();
			html.a().href().quote().append(link).quote().close();
			html.append(value);
			html.aEnd();				
			return html.toString();			
		}
		
	});
		nombreColumna = row.getColumn("ctaTgaTipoGarantia.tgaNombre");
		nombreColumna.setTitleKey("tbl.gar.tipoGarantia");
		
		nombreColumna = row.getColumn("garValor");
		nombreColumna.setTitleKey("tbl.gar.valorGarantia");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){
			
			public Object getValue(Object item, String property, int rowcount) {
				CtaGarGarantia garantia = (CtaGarGarantia)item;
				return Format.formatDinero(garantia.getGarValor());
			}
			
		});
		
		nombreColumna = row.getColumn("garInspeccion");
		nombreColumna.setTitleKey("tbl.gar.Inspeccion");
		
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				String value="No";
				CtaGarGarantia garantia = (CtaGarGarantia)item;
				if(garantia.getGarInspeccion().equals("S")) value ="Si";
				return value;
			}
		});
		
		return tableFacade.render();
	}
	
	public ActionForward guardar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String listaResponse = "";
		String listaErrores ="";
		GarantiaPrestamoForm garantiaForm = (GarantiaPrestamoForm) form;
		ArrayList<String> errors = new ArrayList<String>();
		HashMap<Long, CtaGarGarantia> mapa = (HashMap<Long, CtaGarGarantia>)request.getSession().getAttribute("listaGarantias");
		errors = validarSolicitudGarantia(garantiaForm, errors,request);
		if(!errors.isEmpty()){
			listaErrores=construirListaErrores(errors);
		}else{
			mapa.put(System.currentTimeMillis(),garantiaForm.getGarantiaH());
			request.getSession().setAttribute("listaGarantias", mapa);
		}
		listaResponse =construirListaGarantias(mapa,request);
		try {
			response.getWriter().write(listaErrores+listaResponse);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	/*	CtrParParametrosDAO parametrosDAO = new CtrParParametrosDAO(); 
		CtaGarGarantiaDAO garantiaDAO = new CtaGarGarantiaDAO();
		CtaPrePrestamoDAO prestamoDAO = new CtaPrePrestamoDAO();
		GarantiaPrestamoForm garantiaPrestamoForm = (GarantiaPrestamoForm) form;
		Transaction tx = garantiaDAO.getSession().beginTransaction();
		ActionErrors errors = new ActionErrors();
		if(garantiaPrestamoForm.getGarantiaH().getGarValor() <= 0){
			errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("error.gar,valorInvalido"));
		}
		if(garantiaDAO.findByProperty(PRE_ID, garantiaPrestamoForm.getPreId()).size() > parametrosDAO.findById("MAXIMO_GAR").getParValorNumber()){
			errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("error.gar.cantidadMaximaGarantiasSuperadas"));
		}
		if(!errors.isEmpty()){
			saveMessages(request, errors);
		} else {
			try {
				garantiaPrestamoForm.getGarantiaH().setGarInspeccion("N");//se asume por defecto que las garantias no estan inspeccionadas
				garantiaPrestamoForm.getGarantiaH().setCtaPrePrestamo(prestamoDAO.findById(garantiaPrestamoForm.getPreId()));
				garantiaDAO.save(garantiaPrestamoForm.getGarantiaH());
				tx.commit();
			} catch (Exception e) {
				tx.rollback();
				e.printStackTrace();
			} finally {
				garantiaPrestamoForm.setGarantiaH(new CtaGarGarantia());
				garantiaDAO.getSession().flush();
				garantiaDAO.getSession().clear();
				garantiaDAO.getSession().close();
			}
		}
		return lista(mapping,form, request, response);*/
	}
	
	public ActionForward modificar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ActionErrors mensaje = new ActionErrors();
		CtaGarGarantiaDAO garantiaDAO = new CtaGarGarantiaDAO(getSessionHibernate(request));
		GarantiaPrestamoForm garantiaPrestamoForm = (GarantiaPrestamoForm) form;
		Transaction tx = garantiaDAO.getSession().beginTransaction();
		try{
			CtaGarGarantia garantia = garantiaDAO.findById(garantiaPrestamoForm.getGarId());
			garantia.setGarInspeccion(garantiaPrestamoForm.getGarInspeccion());
			garantia.setGarValor((garantiaPrestamoForm.getGarValor()>=0?garantiaPrestamoForm.getGarValor():garantia.getGarValor()));
			garantiaDAO.merge(garantia);
			tx.commit();
			mensaje.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("lbl.pre.modificacionExitoSol"));
			saveMessages(request, mensaje);
		}catch (Exception e) {
			tx.rollback();
			e.printStackTrace();
		}finally{
			garantiaDAO.getSession().flush();
			garantiaDAO.getSession().clear();
			
		}
		return lista(mapping, garantiaPrestamoForm, request, response);
	}
	
	public ActionForward eliminar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		GarantiaPrestamoForm garantiaForm = (GarantiaPrestamoForm)form;
		HashMap<Long, CtaGarGarantia> mapa = (HashMap<Long, CtaGarGarantia>)request.getSession().getAttribute("listaGarantias");
		if (garantiaForm.getPosicionGxp() != null) {
			int size = garantiaForm.getPosicionGxp().length;
			int i = 0;
			while (i < size) {
				mapa.remove(garantiaForm.getPosicionGxp()[i]);
				i++;
			}
		}
		try {
			request.getSession().setAttribute("listaGarantias", mapa);
			response.getWriter().write(construirListaGarantias(mapa, request));
			response.getWriter().flush();
			response.getWriter().close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		/*CtaGarGarantiaDAO garantiaDAO = new CtaGarGarantiaDAO();
		GarantiaPrestamoForm garantiaPrestamoForm = (GarantiaPrestamoForm) form;
		Transaction tx = garantiaDAO.getSession().beginTransaction();
		try{
			garantiaDAO.delete(garantiaDAO.findById(garantiaPrestamoForm.getGarantiaH().getGarId()));
			tx.commit();
		}catch (Exception e) {
			tx.rollback();
			e.printStackTrace();
		}finally{
			garantiaDAO.getSession().flush();
			garantiaDAO.getSession().clear();
			
		}
		return lista(mapping, garantiaPrestamoForm, request, response);*/
		return null;
	}
	
	public ActionForward cargarDatos(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		CtaGarGarantiaDAO garantiaDAO = new CtaGarGarantiaDAO(getSessionHibernate(request));
		GarantiaPrestamoForm garantiaPrestamoForm = (GarantiaPrestamoForm) form;
		garantiaPrestamoForm.setGarantiaH(garantiaDAO.findById(garantiaPrestamoForm.getGarId()));
		return lista(mapping,garantiaPrestamoForm, request, response);
	}

	public ActionForward redirectInvalidData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		ActionErrors errors = (ActionErrors)request.getSession().getAttribute(Constantes.ERRORS);
		saveMessages(request, errors);
		return lista(mapping, form, request, response);
	}
	
	public ActionForward forwardToDescuentos(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ActionForward target = null;
		CtrParParametrosDAO parametrosDAO = new  CtrParParametrosDAO(getSessionHibernate(request));
		CtaGarGarantiaDAO garantiaDAO = new CtaGarGarantiaDAO(getSessionHibernate(request));
		GarantiaPrestamoForm garantiaPrestamoForm = (GarantiaPrestamoForm) form;
		DescuentosExternosForm descuentosExternosForm = new DescuentosExternosForm();
		ActionErrors errors = new ActionErrors();
		if(garantiaDAO.findByProperty(PRE_ID, garantiaPrestamoForm.getPreId()).size() < parametrosDAO.findById("MINIMO_GAR").getParValorNumber()){
			errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("error.gar.cantidadMinimoGarantias"));
		}
		if(!errors.isEmpty()){
			saveMessages(request, errors);
			target= lista(mapping, garantiaPrestamoForm, request, response);
		}else{
			descuentosExternosForm.setPreId(descuentosExternosForm.getPreId());
			request.setAttribute("form",descuentosExternosForm);
			target=mapping.findForward("forwardToDescuentosExternos");
		}
		return target;
	}
	
	private String construirListaErrores(ArrayList<String> errors){
		String errores = "<table align=\"center\"><tr><td colspan=\"2\"><span style=\"font-size: 14px;color: red;font-style: italic;\">Se han encontrado los siguientes errores:</span></td></tr>";
		Iterator<String> it = errors.iterator();
		while(it.hasNext()){
			errores=errores+"<tr><td><span style=\"font-size: 12px;color: red;font-style: italic;\">"+ 
			it.next()
			+"</span></td></tr>";
		}
		errores=errores+"</table>";
		return errores;
	}
	
	private ArrayList<String> validarSolicitudGarantia(GarantiaPrestamoForm garantiaForm,ArrayList<String> errors , HttpServletRequest request){
		HashMap<Long, CtaGarGarantia> mapa = (HashMap<Long, CtaGarGarantia>)request.getSession().getAttribute("listaFiadores");
		if(garantiaForm.getGarNombreInmueble() == null || garantiaForm.getGarNombreInmueble().trim().equals("")){
			errors.add(getResources(request).getMessage("errors.gar.nombreInmuebleRequired"));
		}
		if(garantiaForm.getGarDescripcionInmueble() == null || garantiaForm.getGarDescripcionInmueble().trim().equals("")){
			errors.add(getResources(request).getMessage("errors.gar.descripcionInmuebleRequired"));
		}
		if(garantiaForm.getGarUbicacion()== null || garantiaForm.getGarUbicacion().trim().equals("")){
			errors.add(getResources(request).getMessage("errors.gar.ubicacionInmuebleRequiered"));
		}
		if(garantiaForm.getGarValor()== null || garantiaForm.getGarValor() <= 0){
			errors.add(getResources(request).getMessage("error.gar,valorInvalido"));
		}
		return errors;
	}
	
	private String construirListaGarantias(HashMap<Long,CtaGarGarantia> mapa,HttpServletRequest request){
		String html = "<table class=\"tableone\" summary=\"\"><caption>"
				+ getResources(request).getMessage("lbl.garTbl.titulo")
				+ "</caption>";
		html = html
				+ "<thead><tr><th class=\"th1\" scope=\"col\">&nbsp;</th><th class=\"th1\" scope=\"col\">"
				+ getResources(request).getMessage("lbl.gar.nombreGarantia")
				+ "</th><th class=\"th1\" scope=\"col\">"
				+ getResources(request).getMessage("lbl.gar.valorGarantia")
				+ "</th><th class=\"th1\" scope=\"col\">"
				+ getResources(request).getMessage("lbl.gar.inspeccionadaGarantia")
				+ "</th></tr></thead><tbody><tr><td colspan=\"5\"><div class=\"innerb\"><table class=\"tabletwo\">";
		long i;
		Iterator<Long> iterator = mapa.keySet().iterator();

		while (iterator.hasNext()) {
			i = iterator.next().longValue();
			CtaGarGarantia gxp = mapa.get(i);
			html = html
					+ "<tr><th class=\"td1\" scope=\"row\"><input type=\"checkbox\" name=\"posicionGxp\" class=\"posicionGxp\" value=\""
					+ i + "\"/></th>" + "<td class=\"td1\">";
						html = html + gxp.getGarNombreInmueble() + "</td><td class=\"td1\">"
						+ gxp.getGarValor() + "</td><td class=\"td1\">";
						if(gxp.getGarInspeccion().equals("S")){
							html= html+"Si";
						}else{
							html= html+"No";
						}
					html = html+ "</td></tr>";
		}
		html = html + "</table></div></td></tr></tbody></table>";
		return html;
	}
	
	public ActionForward regresarToPrestamo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		SecIseInicioSesionDAO sesionDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
		PrestamoForm prestamoForm = new PrestamoForm();
		GarantiaPrestamoForm garForm = (GarantiaPrestamoForm) form;
		prestamoForm.setPreId(garForm.getPreId());
		SecIseInicioSesion sesion = sesionDAO.findById(garForm.getUsuarioConectado().getNombreUsuario());
		if((sesion.getSecRolRoles().getRolNombre().equals("COMITECRED") || sesion.getSecRolRoles().getRolNombre().equals("CONSADMIN")) && !sesion.getSecPerPersona().getPerId().equals(garForm.getPerId())){
			request.setAttribute("rol", "iddkfq");
		}
		request.setAttribute("form", prestamoForm);
		return mapping.findForward("forwardToPrestamo");
	}
	
	public ActionForward cargarGarantias(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
//		try {
//			Thread.currentThread().sleep(10);
//		} catch (InterruptedException e1) {
//			e1.printStackTrace();
//		}
		String listaResponse = "";
		GarantiaPrestamoForm garantiaPrestamoForm = (GarantiaPrestamoForm) form;
		HashMap<Long, CtaGarGarantia> mapa = (HashMap<Long, CtaGarGarantia>)request.getSession().getAttribute("listaGarantias");
		CtaGarGarantiaDAO garantiaDAO = new CtaGarGarantiaDAO(getSessionHibernate(request));
		List<CtaGarGarantia> lista = garantiaDAO.findByProperty("ctaPrePrestamo.preId", garantiaPrestamoForm.getPreId());
		Iterator<CtaGarGarantia> iterator = lista.iterator();
		int add = 0;
		while(iterator.hasNext()) {
			CtaGarGarantia garantia =  iterator.next();
			mapa.put(System.currentTimeMillis() + add, garantia);
			add++;
		}
		listaResponse = construirListaGarantias(mapa, request);
		try {
			String var = listaResponse;
			response.getWriter().write(var);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	}

	public ActionForward regresarToPrestamoList(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		return mapping.findForward("toPrestamosList");
	}
	
	protected Map<String, String> getKeyMethodMap() {
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.gar.lista","lista");
		map.put("cmd.gar.guardar","guardar");
		map.put("cmd.gar.eliminar","eliminar");
		map.put("cmd.gar.cargarDatos","cargarDatos");
		map.put("cmd.gar.actualizar","modificar");
		map.put("cmd.gar.redirectInvalidData","redirectInvalidData");
		map.put("cmd.gar.forwardToDescuentosExt","forwardToDescuentos");
		map.put("cmd.gar.regresar","regresarToPrestamo");
		map.put("cmd.gar.cargarGarantias","cargarGarantias");
		map.put("cmd.gar.regresarToPrestamoList", "regresarToPrestamoList");	
		return map;
	}
}