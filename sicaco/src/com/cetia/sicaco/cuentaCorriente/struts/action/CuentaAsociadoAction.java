/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.cuentaCorriente.struts.action;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeImpl;
import org.jmesa.limit.ExportType;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.BasicCellEditor;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.html.HtmlBuilder;

import com.cetia.sicaco.cuentaCorriente.struts.form.CuentaAsociadoForm;
import com.cetia.sicaco.hibernate.CtaAscAsociado;
import com.cetia.sicaco.hibernate.CtaAscAsociadoDAO;
import com.cetia.sicaco.hibernate.CtaCahCuentaAhorro;
import com.cetia.sicaco.hibernate.CtaCahCuentaAhorroDAO;
import com.cetia.sicaco.hibernate.CtaCasCuentaAsociado;
import com.cetia.sicaco.hibernate.CtaCasCuentaAsociadoDAO;
import com.cetia.sicaco.hibernate.CtaMxaMovimientoAhorro;
import com.cetia.sicaco.hibernate.CtaMxaMovimientoAhorroDAO;
import com.cetia.sicaco.hibernate.CtaTahTipoAhorro;
import com.cetia.sicaco.hibernate.CtaTahTipoAhorroDAO;
import com.cetia.sicaco.hibernate.CtrParParametros;
import com.cetia.sicaco.hibernate.CtrParParametrosDAO;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;
import com.mad.utilidades.ElapsedTime;
import com.mad.utilidades.Format;
import com.mad.utilidades.IntereseYMora;

/** 
 * MyEclipse Struts
 * Creation date: 08-14-2008
 * 
 * XDoclet definition:
 * @struts.action path="/cuentaAsociado" name="cuentaAsociadoForm" input="RedirectInvalidData" parameter="accion" scope="request" validate="true"
 * @struts.action-forward name="lista" path="/cuentaCorriente/busquedaCuentasDML.jsp"
 * @struts.action-forward name="redirectInvalidData" path="RedirectInvalidData" redirect="true"
 */
public class CuentaAsociadoAction extends DMLAction {
	
	public String TABLA_ID = "ctaCasCuentaAsociado";
	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		CuentaAsociadoForm  cuentaAsociadoForm= (CuentaAsociadoForm) form;
		if(cuentaAsociadoForm.getAscCodigoAsociado() == null 
				|| cuentaAsociadoForm.getAscCodigoAsociado().equals("")
				|| cuentaAsociadoForm.getTipoCuentaMadre() == null 
				|| cuentaAsociadoForm.getTipoCuentaMadre().trim().equals("")){
			cuentaAsociadoForm = (CuentaAsociadoForm) request.getAttribute("form");
		}
		CtaCasCuentaAsociadoDAO ctaCasCuentaAsociadoDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
		CtaAscAsociadoDAO asocDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
		CtaAscAsociado asociado = asocDAO.findById(cuentaAsociadoForm.getAscId());
		cuentaAsociadoForm.setCtaAscAsociado(asociado);
		List lst = null;
		if(cuentaAsociadoForm.getCasFechaApertura()==null){
			cuentaAsociadoForm.setCasFechaApertura("");
		}
		lst = ctaCasCuentaAsociadoDAO.findByCriteria(cuentaAsociadoForm);
		String tipo = cuentaAsociadoForm.getTipoCuentaMadre();
		TableFacade tableFacade = null;
		tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);
		
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade,cuentaAsociadoForm.getTipoCuentaMadre());
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request,cuentaAsociadoForm.getTipoCuentaMadre());
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
		request.setAttribute("asociadoNombre",cuentaAsociadoForm.getCtaAscAsociado());
		request.setAttribute("form", cuentaAsociadoForm);
		request.setAttribute(Constantes.ACCION_KEY, "/cuentaAsociado");
		request.getSession().setAttribute("asociadoId", cuentaAsociadoForm.getAscId());
		return mapping.findForward("lista");
	}
	
	
	//---- metodo que genera el html de la tabla del jmesa
	private String html(final TableFacade tableFacade, final HttpServletRequest request, String tipo) {
				
		if(tipo.equalsIgnoreCase("Ap")){
			tableFacade.setColumnProperties("ctaCahCuentaAhorro.cahId", "casFechaApertura","ctaCahCuentaAhorro.cahSaldoActual",
					"ctaCahCuentaAhorro.cahCuota");
			Table table = tableFacade.getTable();
			Row row = table.getRow();
			Column nombreColumna = null;
			//---- Titulo de la tabla
			table.setCaptionKey("tbl.cas.caption.aportaciones");
						
			nombreColumna = row.getColumn("ctaCahCuentaAhorro.cahId");
			nombreColumna.setTitleKey("tbl.cas.casReferencia");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

				public Object getValue(Object item, String property, int rowcount) {
					Object value = new BasicCellEditor().getValue(item, property, rowcount);
					CtaCasCuentaAsociado caAsoc = (CtaCasCuentaAsociado)item;
					CtaCasCuentaAsociadoDAO cuentaDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
					caAsoc = cuentaDAO.findById(caAsoc.getCasCuenta());
					String codCuenta = caAsoc.getCtaCahCuentaAhorro().getCahId();
					HtmlBuilder html = new HtmlBuilder();
					value = codCuenta;
					String link = tableFacade.getWebContext().getContextPath();
					link += "/cuentaCorriente/cuentaAportacion.do?cahId="+value+
							"&ascId="+caAsoc.getCtaAscAsociado().getAscId()+"&tipoMadre=Ap"+
							"&accion=cargarDatos&mdf=true";
					html.a().href().quote().append(link).quote().close();
					html.append(value);
					html.aEnd();				
					return html.toString();		
				}
				
			});
			
			nombreColumna = row.getColumn("casFechaApertura");
			nombreColumna.setTitleKey("tbl.cas.fechaUltimoMov");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

				public Object getValue(Object item, String property, int rowcount) {
					Object value = new BasicCellEditor().getValue(item, property, rowcount);
					CtaCasCuentaAsociado cuentaAsoc = (CtaCasCuentaAsociado)item;
					CtaCasCuentaAsociadoDAO cuentaAsocDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
					Date obj = cuentaAsocDAO.findFechaTransaction(cuentaAsoc.getCasCuenta());
					String txaFecha ="";
					if(obj!=null){
						SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
						txaFecha = sdf.format(obj);
					}
					value = txaFecha;
					return value;		
				}
				
			});
			
			nombreColumna = row.getColumn("ctaCahCuentaAhorro.cahSaldoActual");
			nombreColumna.setTitleKey("tbl.cas.SaldoActual");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

				public Object getValue(Object item, String property, int rowcount) {
					Object value = new BasicCellEditor().getValue(item, property, rowcount);
					CtaCasCuentaAsociado cuentaAsoc = (CtaCasCuentaAsociado)item;
					return Format.formatDinero(cuentaAsoc.getCtaCahCuentaAhorro().getCahSaldoActual());		
				}
				
			});
			
			nombreColumna = row.getColumn("ctaCahCuentaAhorro.cahCuota");
			nombreColumna.setTitleKey("tbl.cas.beneficiarios");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

				public Object getValue(Object item, String property, int rowcount) {
					CtaCasCuentaAsociado cuAsoc = (CtaCasCuentaAsociado)item;
					HtmlBuilder html = new HtmlBuilder();
					String value = "Beneficiarios";
					String link = tableFacade.getWebContext().getContextPath();
					link += "/cuentaCorriente/agregaBen.do?accion=lista&cuentaX="+cuAsoc.getCasCuenta();
					html.a().href().quote().append(link).quote().append("class=\"linkBeneficiarios\"").title(value).close();
					html.aEnd();				
					return html.toString();		
				}
				
			});
			
		}else if(tipo.equalsIgnoreCase("Ah")){
			tableFacade.setColumnProperties("ctaCahCuentaAhorro.cahId", "ctaCahCuentaAhorro.ctaTahTipoAhorro.tahNombre",
									"casFechaApertura","ctaCahCuentaAhorro.cahSaldoActual", "casPrincipal",
									"casFechaCierre","ctaCahCuentaAhorro.cahCuota");
			Table table = tableFacade.getTable();
			Row row = table.getRow();
			Column nombreColumna = null;
			//---- Titulo de la tabla
			table.setCaptionKey("tbl.cas.caption.ahorro");
						
			nombreColumna = row.getColumn("ctaCahCuentaAhorro.cahId");
			nombreColumna.setTitleKey("tbl.cas.casReferencia");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

				public Object getValue(Object item, String property, int rowcount) {
					Object value = new BasicCellEditor().getValue(item, property, rowcount);
					CtaCasCuentaAsociado cuAsoc = (CtaCasCuentaAsociado)item;
					CtaCasCuentaAsociadoDAO cuentaDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
					cuAsoc = cuentaDAO.findById(cuAsoc.getCasCuenta());
					HtmlBuilder html = new HtmlBuilder();
					value = cuAsoc.getCtaCahCuentaAhorro().getCahId();
					String link = tableFacade.getWebContext().getContextPath();
					link += "/cuentaCorriente/cuentaAhorro.do?cahId="+value+
							"&ascId="+cuAsoc.getCtaAscAsociado().getAscId()+"&tipoMadre=Ah"+
							"&accion=cargarDatos&mdf=true";
					html.a().href().quote().append(link).quote().close();
					html.append(value);
					html.aEnd();				
					return html.toString();		
				}
				
			});
			
			nombreColumna = row.getColumn("ctaCahCuentaAhorro.ctaTahTipoAhorro.tahNombre");
			nombreColumna.setTitleKey("tbl.cas.tipoCuentaAhorro");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

				public Object getValue(Object item, String property, int rowcount) {
					Object value = new BasicCellEditor().getValue(item, property, rowcount);
					CtaCasCuentaAsociado cuentaAsoc = (CtaCasCuentaAsociado)item;
					/* arreglo temporal */
					if(cuentaAsoc.getCtaCahCuentaAhorro().getCtaTahTipoAhorro() == null){
						value = "Ahorro Descuento";
					}
					return value;		
				}
				
			});
			
			nombreColumna = row.getColumn("casFechaApertura");
			nombreColumna.setTitleKey("tbl.cas.fechaUltimoMov");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

				public Object getValue(Object item, String property, int rowcount) {
					Object value = new BasicCellEditor().getValue(item, property, rowcount);
					CtaCasCuentaAsociado cuentaAsoc = (CtaCasCuentaAsociado)item;
					CtaCasCuentaAsociadoDAO cuentaAsocDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
					Date obj = cuentaAsocDAO.findFechaTransaction(cuentaAsoc.getCasCuenta());
					String txaFecha ="";
					if(obj!=null){
						SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
						txaFecha = sdf.format(obj);
					}
					value = txaFecha;
					return value;		
				}
				
			});
			
			nombreColumna = row.getColumn("ctaCahCuentaAhorro.cahSaldoActual");
			nombreColumna.setTitleKey("tbl.cas.SaldoActual");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

				public Object getValue(Object item, String property, int rowcount) {
					Object value = new BasicCellEditor().getValue(item, property, rowcount);
					CtaCasCuentaAsociado cuentaAsoc = (CtaCasCuentaAsociado)item;
					return Format.formatDinero(cuentaAsoc.getCtaCahCuentaAhorro().getCahSaldoActual());		
				}
				
			});
			
			nombreColumna = row.getColumn("casPrincipal");
			nombreColumna.setTitleKey("tbl.cas.interesAcumulado");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){
				public Object getValue(Object item, String property, int rowcount) {
					Object value = new BasicCellEditor().getValue(item, property, rowcount);
					CtaCasCuentaAsociado cuAsoc = (CtaCasCuentaAsociado)item;
					CtaCasCuentaAsociadoDAO cuentaDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
					//cuAsoc = cuentaDAO.findById(cuAsoc.getCasCuenta());
					CtaCahCuentaAhorroDAO cuAhorroDAO = new CtaCahCuentaAhorroDAO(getSessionHibernate(request));
					CtaCahCuentaAhorro cuentaAhorro = new CtaCahCuentaAhorro();
					CtaMxaMovimientoAhorroDAO movimAhorroDAO = new CtaMxaMovimientoAhorroDAO(getSessionHibernate(request));
					CtaMxaMovimientoAhorro movAhorro = new CtaMxaMovimientoAhorro();
					Double totalInteres = 0.0;
					/*Double interesGenerado = 0.0;
					cuentaAhorro = cuAhorroDAO.findById(cuAsoc.getCtaCahCuentaAhorro().getCahId());
					if(cuentaAhorro.getCahInteresAcumulado()!=null){
						totalInteres += cuentaAhorro.getCahInteresAcumulado();
					}
					movAhorro=(CtaMxaMovimientoAhorro)movimAhorroDAO.findUltimoMovimientoAhorro(cuentaAhorro.getCahId());
					//si no hay ultimo movimiento
					CtrParParametrosDAO parametrosDAO = new CtrParParametrosDAO();
					Date fechaSinMov = parametrosDAO.findById("INICIO_ACUMULACION_INTERESES").getParValorDate();
					Date fechaUltimoMov;
					if(movAhorro == null){
						fechaUltimoMov = fechaSinMov; 
					}else{
						fechaUltimoMov = movAhorro.getMxaFecha();
					}
					//if(movAhorro!=null){
						ElapsedTime elapsed = new ElapsedTime();
						GregorianCalendar greCalendarI = new GregorianCalendar();
						GregorianCalendar greCalendarF = new GregorianCalendar();
						SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
						try {
							//greCalendarI = ElapsedTime.dTGC(sdf.parse(sdf.format(movAhorro.getMxaFecha())));
							greCalendarI = ElapsedTime.dTGC(sdf.parse(sdf.format(fechaUltimoMov)));
						} catch (ParseException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						greCalendarF = ElapsedTime.dTGC(new Date());
						greCalendarF.set(Calendar.MILLISECOND, 0);
						greCalendarF.set(Calendar.SECOND, 0);
						greCalendarF.set(Calendar.MINUTE, 0);
						greCalendarF.set(Calendar.HOUR_OF_DAY, 0);
						
						greCalendarI.set(Calendar.MILLISECOND, 0);
						greCalendarI.set(Calendar.SECOND, 0);
						greCalendarI.set(Calendar.MINUTE, 0);
						greCalendarI.set(Calendar.HOUR_OF_DAY, 0);
						
						CtrParParametrosDAO parametroDAO = new CtrParParametrosDAO();
						CtrParParametros parametroAnio = parametroDAO.findById("ANHO_CALENDARIO");
						int numDiasTranscurridos = elapsed.getDays(greCalendarI,greCalendarF);
						Double interes = cuentaAhorro.getCtaTahTipoAhorro().getCtaTinTasaInteres().getTinTasa()/12;
						Double saldoActual = cuentaAhorro.getCahSaldoActual();
						interesGenerado = (saldoActual*interes)*numDiasTranscurridos/parametroAnio.getParValorNumber();
					//}
					totalInteres += interesGenerado;
					*/
					CuentaAsociadoAction cuentaAsociadoAction = new CuentaAsociadoAction();
					totalInteres = cuentaAsociadoAction.getTotalInteresesAhorro(cuAsoc.getCtaCahCuentaAhorro().getCahId(),request);
					value = totalInteres;
									
					return Format.formatDinero(value);		
				}
				
			});
			
			nombreColumna = row.getColumn("casFechaCierre");
			nombreColumna.setTitleKey("tbl.cas.acciones");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

				public Object getValue(Object item, String property, int rowcount) {
					Object value = new BasicCellEditor().getValue(item, property, rowcount);
					CtaCasCuentaAsociado cuAsoc = (CtaCasCuentaAsociado)item;
					CtaCasCuentaAsociadoDAO cuentaDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
					cuAsoc = cuentaDAO.findById(cuAsoc.getCasCuenta());
					HtmlBuilder html = new HtmlBuilder();
					value = "Cerrar";
					String link = tableFacade.getWebContext().getContextPath();
					link += "/cuentaCorriente/cuentaAhorro.do?cahId="+cuAsoc.getCtaCahCuentaAhorro().getCahId()+
							"&ascId="+cuAsoc.getCtaAscAsociado().getAscId()+
							"&accion=cierreCuentaDatos";
					html.a().href().quote().append(link).quote().close();
					html.append(value);
					html.aEnd();				
					return html.toString();		
				}
				
			});
			
			nombreColumna = row.getColumn("ctaCahCuentaAhorro.cahCuota");
			nombreColumna.setTitleKey("tbl.cas.beneficiarios");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

				public Object getValue(Object item, String property, int rowcount) {
					CtaCasCuentaAsociado cuAsoc = (CtaCasCuentaAsociado)item;
					HtmlBuilder html = new HtmlBuilder();
					String value = "Beneficiarios";
					String link = tableFacade.getWebContext().getContextPath();
					link += "/cuentaCorriente/agregaBen.do?accion=lista&cuentaX="+cuAsoc.getCasCuenta();
					html.a().href().quote().append(link).quote().append("class=\"linkBeneficiarios\"").title(value).close();
					html.aEnd();				
					return html.toString();		
				}
				
			});
			
		}else if(tipo.equalsIgnoreCase("Se")){
			tableFacade.setColumnProperties("ctaSegSeguros.segId", "ctaSegSeguros.ctaTisTipoSeguro.tisNombre",
									"ctaSegSeguros.segSaldoActual","ctaSegSeguros.segMonto");
			Table table = tableFacade.getTable();
			
			Row row = table.getRow();
			Column nombreColumna = null;
			//---- Titulo de la tabla
			table.setCaptionKey("tbl.cas.caption.seguro");
					
			nombreColumna = row.getColumn("ctaSegSeguros.segId");
			nombreColumna.setTitleKey("tbl.cas.casReferencia");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){
			
				public Object getValue(Object item, String property, int rowcount) {
					Object value = new BasicCellEditor().getValue(item, property, rowcount);
					CtaCasCuentaAsociado cuAsoc = (CtaCasCuentaAsociado)item;
					HtmlBuilder html = new HtmlBuilder();
					CtaCasCuentaAsociadoDAO cuentaDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
					cuAsoc = cuentaDAO.findById(cuAsoc.getCasCuenta());
					value = cuAsoc.getCtaSegSeguros().getSegId();
					String link = tableFacade.getWebContext().getContextPath();
					link += "/cuentaCorriente/seguros.do?segId="+value+
							"&ascId="+cuAsoc.getCtaAscAsociado().getAscId()+
							"&accion=agregar";
					html.a().href().quote().append(link).quote().close();
					html.append(value);
					html.aEnd();				
					return html.toString();		
				}
			
			});
			
			nombreColumna = row.getColumn("ctaSegSeguros.ctaTisTipoSeguro.tisNombre");
			nombreColumna.setTitleKey("tbl.cas.tipoSeguro");
			
			nombreColumna = row.getColumn("ctaSegSeguros.segSaldoActual");
			nombreColumna.setTitleKey("tbl.cas.SaldoActual");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

				public Object getValue(Object item, String property, int rowcount) {
					Object value = new BasicCellEditor().getValue(item, property, rowcount);
					CtaCasCuentaAsociado cuentaAsoc = (CtaCasCuentaAsociado)item;
					return Format.formatDinero(cuentaAsoc.getCtaSegSeguros().getSegSaldoActual());		
				}
				
			});
			
			nombreColumna = row.getColumn("ctaSegSeguros.segMonto");
			nombreColumna.setTitleKey("tbl.cas.casMontoAsegurado");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

				public Object getValue(Object item, String property, int rowcount) {
					Object value = new BasicCellEditor().getValue(item, property, rowcount);
					CtaCasCuentaAsociado cuentaAsoc = (CtaCasCuentaAsociado)item;
					return Format.formatDinero(cuentaAsoc.getCtaSegSeguros().getSegMonto());		
				}
				
			});
		}
		return tableFacade.render();
	}
	
	
	//---- metodo que genera los exports, el formato que tendran
	 private void export(final TableFacade tableFacade, String tipo) {
		 
		 if(tipo.equals("Ap")){
			tableFacade.setColumnProperties("ctaCahCuentaAhorro.cahId", "casFechaApertura",
											"ctaCahCuentaAhorro.cahSaldoActual");
			Table table = tableFacade.getTable();
			table.setCaptionKey("tbl.tah.caption.aportaciones");
			
			Row row = table.getRow();
			Column nombreColumna = row.getColumn("ctaCahCuentaAhorro.cahId");
			nombreColumna.setTitleKey("tbl.cas.casReferencia");
			
			nombreColumna = row.getColumn("casFechaApertura");
			nombreColumna.setTitleKey("tbl.cas.fechaUltimoMov");
			
			nombreColumna = row.getColumn("ctaCahCuentaAhorro.cahSaldoActual");
			nombreColumna.setTitleKey("tbl.cas.SaldoActual");
			
				
		 }else if(tipo.equals("Ah")){
			 tableFacade.setColumnProperties("ctaCahCuentaAhorro.cahId", "ctaCahCuentaAhorro.ctaTahTipoAhorro.tahNombre",
						"casFechaApertura","casCuenta","ctaCahCuentaAhorro.cahSaldoActual");
			 Table table = tableFacade.getTable();

			table.setCaptionKey("tbl.tah.caption.ahorro");
			
			Row row = table.getRow();
			Column nombreColumna = row.getColumn("ctaCahCuentaAhorro.cahId");
			nombreColumna.setTitleKey("tbl.cas.casReferencia");
			
			nombreColumna = row.getColumn("ctaCahCuentaAhorro.ctaTahTipoAhorro.tahNombre");
			nombreColumna.setTitleKey("tbl.cas.tipoCuentaAhorro");
			
			nombreColumna = row.getColumn("casFechaApertura");
			nombreColumna.setTitleKey("tbl.cas.fechaUltimoMov");
			
			nombreColumna = row.getColumn("casCuenta");
			nombreColumna.setTitleKey("tbl.cas.casTipoMovimiento");
			
			nombreColumna = row.getColumn("ctaCahCuentaAhorro.cahSaldoActual");
			nombreColumna.setTitleKey("tbl.cas.SaldoActual");
		 }else if(tipo.equals("Pr")){
			 tableFacade.setColumnProperties("ctaPrePrestamo.preId", "ctaPrePrestamo.ctaTprTipoPrestamo.tprNombre",
						"casFechaApertura","casCuenta","ctaPrePrestamo.preSaldoActualT","ctaCahCuentaAhorro.chaId","casPrincipal");
				Table table = tableFacade.getTable();
				Row row = table.getRow();
				
				Column nombreColumna = row.getColumn("ctaPrePrestamo.preId");
				nombreColumna.setTitleKey("tbl.cas.casReferencia");
				
				nombreColumna = row.getColumn("ctaPrePrestamo.ctaTprTipoPrestamo.tprNombre");
				nombreColumna.setTitleKey("tbl.cas.tipoCuentaPrestamo");
				
				nombreColumna = row.getColumn("casFechaApertura");
				nombreColumna.setTitleKey("tbl.cas.fechaUltimoMov");
				
				nombreColumna = row.getColumn("casCuenta");
				nombreColumna.setTitleKey("tbl.cas.casTipoMovimiento");
				
				nombreColumna = row.getColumn("ctaPrePrestamo.preSaldoActualT");
				nombreColumna.setTitleKey("tbl.cas.SaldoActual");
				
				
				nombreColumna = row.getColumn("ctaCahCuentaAhorro.chaId");
				nombreColumna.setTitleKey("tbl.cas.casInteresPendiente");
								
				nombreColumna = row.getColumn("casPrincipal");
				nombreColumna.setTitleKey("tbl.cas.casMoraPendiente");
		 }else if(tipo.equals("Se")){
			 tableFacade.setColumnProperties("ctaSegSeguros.segId", "ctaSegSeguros.ctaTseTipoSeguro.tseNombre",
						"casFechaApertura","ctaSegSeguros.segSaldoActual","ctaSegSeguros.segMonto");
			Table table = tableFacade.getTable();
			
			Row row = table.getRow();
			Column nombreColumna = null;
			//---- Titulo de la tabla
			table.setCaptionKey("tbl.cas.caption.seguro");
			
			nombreColumna = row.getColumn("ctaSegSeguros.segId");
			nombreColumna.setTitleKey("tbl.cas.casReferencia");
			
			nombreColumna = row.getColumn("ctaSegSeguros.ctaTseTipoSeguro.tseNombre");
			nombreColumna.setTitleKey("tbl.cas.tipoSeguro");
			
			nombreColumna = row.getColumn("casFechaApertura");
			nombreColumna.setTitleKey("tbl.cas.fechaUltimoMov");
						
			nombreColumna = row.getColumn("ctaSegSeguros.segSaldoActual");
			nombreColumna.setTitleKey("tbl.cas.SaldoActual");
			
			nombreColumna = row.getColumn("ctaSegSeguros.segMonto");
			nombreColumna.setTitleKey("tbl.cas.casMontoAsegurado");
		 }
		
		tableFacade.render();
	}
	
		 public ActionForward cargarDatos(ActionMapping mapping, ActionForm form,
					HttpServletRequest request, HttpServletResponse response) {
			 CtaAscAsociadoDAO asocDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
			 CuentaAsociadoForm CForm = (CuentaAsociadoForm)form;
			 CForm.setCtaAscAsociado(asocDAO.findById(CForm.getAscId()));
			 request.setAttribute("asociadoNombre",CForm.getCtaAscAsociado());
			 request.setAttribute("nuevaCuenta", 0);
			 request.setAttribute("nuevoAhorro", 0);
			 CForm.setCtaAscAsociado(asocDAO.findById(CForm.getCtaAscAsociado().getAscId()));
			 return lista(mapping, CForm, request, response);
		 }
		 
		 public ActionForward buscar(ActionMapping mapping, ActionForm form,
					HttpServletRequest request, HttpServletResponse response) {
				CuentaAsociadoForm cuentaAsociadoForm = (CuentaAsociadoForm) form;
		 		CtaCasCuentaAsociadoDAO ctaCasCuentaAsociadoDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
		 		List lst = null;
		 		lst = ctaCasCuentaAsociadoDAO.findByCriteria(cuentaAsociadoForm);
		 		String tipo = cuentaAsociadoForm.getTipoCuentaMadre();
		 		CtaAscAsociadoDAO asocDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
				
		 		TableFacade tableFacade = null;
				tableFacade = new TableFacadeImpl(TABLA_ID, request);
				tableFacade.setItems(lst);
				//---- Genera los tipos de formas con que se podran exportar los datos
				tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
				tableFacade.setStateAttr("restore");
				Limit limit = tableFacade.getLimit();
				if (limit.isExported()) {
		        	//---- exporta la tabla
		        //    export(tableFacade);
		            return null; 
		        } else {
		        	String html = html(tableFacade, request,cuentaAsociadoForm.getTipoCuentaMadre());
		            request.setAttribute(Constantes.LISTA_KEY, html);
		        }
		        //----- Variables de configuracion
				cuentaAsociadoForm.setCtaAscAsociado(asocDAO.findById(cuentaAsociadoForm.getAscId()));
				request.setAttribute("asociadoNombre",cuentaAsociadoForm.getCtaAscAsociado());
				request.setAttribute("form", cuentaAsociadoForm);
				request.setAttribute(Constantes.ACCION_KEY, "/cuentaAsociado");
				return mapping.findForward("lista");
			}
	 
		public ActionForward redirectInvalidData(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response){
			CuentaAsociadoForm CForm = (CuentaAsociadoForm)form;
			CtaAscAsociadoDAO asocDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
			CForm.setCtaAscAsociado(asocDAO.findById(CForm.getAscId()));
			request.setAttribute("asociadoNombre",CForm.getCtaAscAsociado());
			ActionErrors errors = (ActionErrors)request.getSession().getAttribute(Constantes.ERRORS);
			saveMessages(request, errors);
			return lista(mapping, form, request, response);
		}
		
		public void mensajes(String msg, HttpServletRequest request){
			ActionErrors errors = new ActionErrors();
	        errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(msg));
	        saveMessages(request, errors);
		}
		
		public ActionForward forwardToBusquedaAsociados(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response){
			return mapping.findForward("busquedaAsociados");
		}
		
		public ActionForward nuevaCuenta(ActionMapping mapping, ActionForm form,
		
				HttpServletRequest request, HttpServletResponse response){
			String target = "";
			CuentaAsociadoForm cuentaAsociadoForm = (CuentaAsociadoForm)form;
			if(cuentaAsociadoForm.getTipoCuentaMadre().equals("Ap")){
				request.setAttribute("nuevaCuenta", 1);
				target="nuevaAportacion";
			}
			if(cuentaAsociadoForm.getTipoCuentaMadre().equals("Ah")){
				request.setAttribute("nuevoAhorro", 1);
				target="nuevoAhorro";
			}
			if(cuentaAsociadoForm.getTipoCuentaMadre().equals("Pr")){
				target="nuevoPrestamo";
			}
			if(cuentaAsociadoForm.getTipoCuentaMadre().equals("Se")){
				//request.setAttribute("accion", "nuevoSeguro");
				target="nuevoSeguro";			
			}
			return mapping.findForward(target);
		}
	
	public Double getTotalInteresesAhorro(String cahId, HttpServletRequest request){
		Double totalInteres = 0.0;
		Double interesGenerado = 0.0;
		CtaMxaMovimientoAhorroDAO movimAhorroDAO = new CtaMxaMovimientoAhorroDAO(getSessionHibernate(request));
		CtaMxaMovimientoAhorro movAhorro = new CtaMxaMovimientoAhorro();
		CtaCahCuentaAhorroDAO cuAhorroDAO = new CtaCahCuentaAhorroDAO(getSessionHibernate(request));
		CtaCahCuentaAhorro cuentaAhorro = cuAhorroDAO.findById(cahId);
		
		if(cuentaAhorro.getCahInteresAcumulado()!=null){
			totalInteres += cuentaAhorro.getCahInteresAcumulado();
		}
		movAhorro=(CtaMxaMovimientoAhorro)movimAhorroDAO.findUltimoMovimientoAhorro(cuentaAhorro.getCahId());
		//si no hay ultimo movimiento
		CtrParParametrosDAO parametrosDAO = new CtrParParametrosDAO(getSessionHibernate(request));
		Date fechaSinMov = parametrosDAO.findById("INICIO_ACUMULACION_INTERESES").getParValorDate();
		Date fechaUltimoMov;
		if(movAhorro == null){
			fechaUltimoMov = fechaSinMov; 
		}else{
			fechaUltimoMov = movAhorro.getMxaFecha();
		}
		IntereseYMora iYm = new IntereseYMora();
		Date fechaX = iYm.noTime(fechaUltimoMov);
		if(!fechaX.equals(iYm.noTime(new Date()))){

			//if(movAhorro!=null){
				ElapsedTime elapsed = new ElapsedTime();
				GregorianCalendar greCalendarI = new GregorianCalendar();
				GregorianCalendar greCalendarF = new GregorianCalendar();
				SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
				try {
					//greCalendarI = ElapsedTime.dTGC(sdf.parse(sdf.format(movAhorro.getMxaFecha())));
					greCalendarI = ElapsedTime.dTGC(sdf.parse(sdf.format(fechaUltimoMov)));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				greCalendarF = ElapsedTime.dTGC(new Date());
				greCalendarF.set(Calendar.MILLISECOND, 0);
				greCalendarF.set(Calendar.SECOND, 0);
				greCalendarF.set(Calendar.MINUTE, 0);
				greCalendarF.set(Calendar.HOUR_OF_DAY, 0);
				
				greCalendarI.set(Calendar.MILLISECOND, 0);
				greCalendarI.set(Calendar.SECOND, 0);
				greCalendarI.set(Calendar.MINUTE, 0);
				greCalendarI.set(Calendar.HOUR_OF_DAY, 0);
				
				CtrParParametrosDAO parametroDAO = new CtrParParametrosDAO(getSessionHibernate(request));
				CtrParParametros parametroAnio = parametroDAO.findById("ANHO_CALENDARIO");
				//int numDiasTranscurridos = elapsed.getDays(greCalendarI,greCalendarF);
				int numDiasTranscurridos = diferenciaEnDias(fechaUltimoMov,new Date()); 
				CtaTahTipoAhorro tah = new CtaTahTipoAhorro();
				CtaTahTipoAhorroDAO tahDAO = new CtaTahTipoAhorroDAO(getSessionHibernate(request));
				tah = tahDAO.findById(cuentaAhorro.getCtaTahTipoAhorro().getTahId());
				Double interes = tah.getCtaTinTasaInteres().getTinTasa()/100;
				Double saldoActual = cuentaAhorro.getCahSaldoActual();
				interesGenerado = (saldoActual*interes)*numDiasTranscurridos/parametroAnio.getParValorNumber();
			//}
		}
		totalInteres += interesGenerado;
		return totalInteres;
	}
	
	public Double getTotalInteresesAhorroP(String cahId, HttpServletRequest request, Date movimiento){
		Double totalInteres = 0.0;
		Double interesGenerado = 0.0;
		CtaMxaMovimientoAhorroDAO movimAhorroDAO = new CtaMxaMovimientoAhorroDAO(getSessionHibernate(request));
		CtaMxaMovimientoAhorro movAhorro = new CtaMxaMovimientoAhorro();
		CtaCahCuentaAhorroDAO cuAhorroDAO = new CtaCahCuentaAhorroDAO(getSessionHibernate(request));
		CtaCahCuentaAhorro cuentaAhorro = cuAhorroDAO.findById(cahId);
		
		if(cuentaAhorro.getCahInteresAcumulado()!=null){
			totalInteres += cuentaAhorro.getCahInteresAcumulado();
		}
		movAhorro=(CtaMxaMovimientoAhorro)movimAhorroDAO.findUltimoMovimientoAhorro(cuentaAhorro.getCahId());
		//si no hay ultimo movimiento
		CtrParParametrosDAO parametrosDAO = new CtrParParametrosDAO(getSessionHibernate(request));
		Date fechaSinMov = parametrosDAO.findById("INICIO_ACUMULACION_INTERESES").getParValorDate();
		Date fechaUltimoMov;
		if(movAhorro == null){
			fechaUltimoMov = fechaSinMov; 
		}else{
			fechaUltimoMov = movAhorro.getMxaFecha();
		}
		IntereseYMora iYm = new IntereseYMora();
		Date fechaX = iYm.noTime(fechaUltimoMov);
		if(!fechaX.equals(iYm.noTime(movimiento))){

			//if(movAhorro!=null){
				ElapsedTime elapsed = new ElapsedTime();
				GregorianCalendar greCalendarI = new GregorianCalendar();
				GregorianCalendar greCalendarF = new GregorianCalendar();
				SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
				try {
					//greCalendarI = ElapsedTime.dTGC(sdf.parse(sdf.format(movAhorro.getMxaFecha())));
					greCalendarI = ElapsedTime.dTGC(sdf.parse(sdf.format(fechaUltimoMov)));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				greCalendarF = ElapsedTime.dTGC(movimiento);
				greCalendarF.set(Calendar.MILLISECOND, 0);
				greCalendarF.set(Calendar.SECOND, 0);
				greCalendarF.set(Calendar.MINUTE, 0);
				greCalendarF.set(Calendar.HOUR_OF_DAY, 0);
				
				greCalendarI.set(Calendar.MILLISECOND, 0);
				greCalendarI.set(Calendar.SECOND, 0);
				greCalendarI.set(Calendar.MINUTE, 0);
				greCalendarI.set(Calendar.HOUR_OF_DAY, 0);
				
				CtrParParametrosDAO parametroDAO = new CtrParParametrosDAO(getSessionHibernate(request));
				CtrParParametros parametroAnio = parametroDAO.findById("ANHO_CALENDARIO");
				//int numDiasTranscurridos = elapsed.getDays(greCalendarI,greCalendarF);
				int numDiasTranscurridos = diferenciaEnDias(fechaUltimoMov,new Date()); 
				CtaTahTipoAhorro tah = new CtaTahTipoAhorro();
				CtaTahTipoAhorroDAO tahDAO = new CtaTahTipoAhorroDAO(getSessionHibernate(request));
				tah = tahDAO.findById(cuentaAhorro.getCtaTahTipoAhorro().getTahId());
				Double interes = tah.getCtaTinTasaInteres().getTinTasa()/100;
				Double saldoActual = cuentaAhorro.getCahSaldoActual();
				interesGenerado = (saldoActual*interes)*numDiasTranscurridos/parametroAnio.getParValorNumber();
			//}
		}
		totalInteres += interesGenerado;
		return totalInteres;
	}
	
	
	public static int diferenciaEnDias(Date fechainicial, Date fechafinal) {
		DateFormat df = DateFormat.getDateInstance(DateFormat.MEDIUM);
		String fi = df.format(fechainicial);
		try {
			fechainicial = df.parse(fi);
		} catch (ParseException ex) {
		}
		String fechafinalstring = df.format(fechafinal);
		try {
			fechafinal = df.parse(fechafinalstring);
		} catch (ParseException ex) {

		}
		long fechainicialms = fechainicial.getTime();
		long fechafinalms = fechafinal.getTime();
		long diferencia = fechafinalms - fechainicialms;
		double dias = Math.floor(diferencia / (1000 * 60 * 60 * 24));
		return ((int) dias);
	}
	
	
	protected Map getKeyMethodMap() {
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.cas.lista", "lista");
		map.put("cmd.cas.buscar", "buscar");
		map.put("cmd.cas.nuevaCuenta", "nuevaCuenta");
		map.put("cmd.cas.toBusquedaAsociados", "forwardToBusquedaAsociados");
		map.put("cmd.cas.cargarDatos", "cargarDatos");
		map.put("cmd.cas.redirectInvalidData", "redirectInvalidData");
		return map;
	}
}