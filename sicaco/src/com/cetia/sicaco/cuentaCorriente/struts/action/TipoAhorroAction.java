/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.cuentaCorriente.struts.action;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.hibernate.Transaction;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeImpl;
import org.jmesa.limit.ExportType;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.BasicCellEditor;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.html.HtmlBuilder;

import com.cetia.sicaco.cuentaCorriente.struts.form.TipoAhorroForm;
import com.cetia.sicaco.hibernate.CtaCahCuentaAhorroDAO;
import com.cetia.sicaco.hibernate.CtaCasCuentaAsociado;
import com.cetia.sicaco.hibernate.CtaCasCuentaAsociadoDAO;
import com.cetia.sicaco.hibernate.CtaLahLineaAhorroDAO;
import com.cetia.sicaco.hibernate.CtaMxaMovimientoAhorro;
import com.cetia.sicaco.hibernate.CtaMxaMovimientoAhorroDAO;
import com.cetia.sicaco.hibernate.CtaPlmPlanMesesDAO;
import com.cetia.sicaco.hibernate.CtaTahTipoAhorro;
import com.cetia.sicaco.hibernate.CtaTahTipoAhorroDAO;
import com.cetia.sicaco.hibernate.CtaTinTasaInteresDAO;
import com.cetia.sicaco.hibernate.CtaTtrTipoTransaccion;
import com.cetia.sicaco.hibernate.CtaTxaTransaccionxcuentaAsociado;
import com.cetia.sicaco.hibernate.CtaTxaTransaccionxcuentaAsociadoDAO;
import com.cetia.sicaco.reporte.struts.form.ReportesForm;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;
import com.mad.utilidades.ElapsedTime;

/** 
 * MyEclipse Struts
 * Creation date: 08-08-2008
 * 
 * XDoclet definition:
 * @struts.action path="/tipoAhorro" name="tipoAhorroForm" input="redirectInvalidData" parameter="accion" scope="request" validate="true"
 * @struts.action-forward name="lista" path="plantilla-lista/"
 * @struts.action-forward name="redirectInvalidData" path="redirectInvalidData" redirect="true"
 */
public class TipoAhorroAction extends DMLAction {

	public String TABLA_ID = "ctaTahTipoAhorro";
	private String LIST_PLAN_MES="lstPlmPlanMes";
	private String LIST_LINEA_AHORRO = "lstLahLineaAhorro";
	private String LIST_TASA_INTERES = "lstTinTasaInteres";
	
	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		TipoAhorroForm tipoAhorroForm = (TipoAhorroForm) form;
		CtaTahTipoAhorroDAO ctaTahTipoAhorroDAO = new CtaTahTipoAhorroDAO(getSessionHibernate(request));
		CtaPlmPlanMesesDAO ctaPlmPlanMesesDAO = new CtaPlmPlanMesesDAO(getSessionHibernate(request));
		CtaLahLineaAhorroDAO ctaLahLineaAhorroDAO = new CtaLahLineaAhorroDAO(getSessionHibernate(request));
		CtaTinTasaInteresDAO ctaTinTasaInteresDAO = new CtaTinTasaInteresDAO(getSessionHibernate(request));
		
		List lst = ctaTahTipoAhorroDAO.findAll();
		List lstPlmPlanMes = ctaPlmPlanMesesDAO.findAllWithName();
		List lstLahLineaAhorro = ctaLahLineaAhorroDAO.findAll();
		List lstTinTasaInteres = ctaTinTasaInteresDAO.findAllWithName();
		
		
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);
		
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
		request.setAttribute(LIST_PLAN_MES, lstPlmPlanMes);
		request.setAttribute(LIST_TASA_INTERES, lstTinTasaInteres);
		request.setAttribute(LIST_LINEA_AHORRO, lstLahLineaAhorro);
		request.setAttribute("form", tipoAhorroForm);
		request.setAttribute(Constantes.ACCION_KEY, "/tipoAhorro");
		return mapping.findForward("lista");
	}
	
	//---- metodo que genera el html de la tabla del jmesa
	private String html(final TableFacade tableFacade, final HttpServletRequest request) {
		tableFacade.setColumnProperties("tahNombre", "ctaLahLineaAhorro.lahNombre",
										"ctaPlmPlanMeses.plmNombre","tahId");
		Table table = tableFacade.getTable();
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.tah.caption");
		
		Row row = table.getRow();
		Column nombreColumna = row.getColumn("tahNombre");
		nombreColumna.setTitleKey("tbl.tah.tahNombre");
		
		nombreColumna = row.getColumn("ctaLahLineaAhorro.lahNombre");
		nombreColumna.setTitleKey("tbl.tah.lahNombreLinea");
		
		nombreColumna = row.getColumn("ctaPlmPlanMeses.plmNombre");
		nombreColumna.setTitleKey("tbl.tah.plmNombreMes");
				
		nombreColumna = row.getColumn("tahId");
		nombreColumna.setTitleKey("tbl.tah.acciones");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtaTahTipoAhorro tipoAhorro = (CtaTahTipoAhorro)item;
				CtaTahTipoAhorroDAO ctaTahTipoAhorroDAO = new CtaTahTipoAhorroDAO(getSessionHibernate(request));
				tipoAhorro = ctaTahTipoAhorroDAO.findById(tipoAhorro.getTahId());
				HtmlBuilder html = new HtmlBuilder();
				value = "Editar";
				String link = tableFacade.getWebContext().getContextPath();
				link += "/cuentaCorriente/tipoAhorro.do?tahId="+tipoAhorro.getTahId()+
						"&accion=cargarDatos&mdf=true";
				html.a().href().quote().append(link).quote().append("class=\"linkEditar\"").title(value.toString()).close();
				//html.a().href().quote().append(link).quote().close();
			///	html.append(value);
				html.aEnd();				
				return html.toString();		
			}
			
		});
		
		return tableFacade.render();
	}
	
	//---- metodo que genera los exports, el formato que tendran
	 private void export(final TableFacade tableFacade) {
		 tableFacade.setColumnProperties("tahNombre", "ctaLahLineaAhorro.lahNombre",
					"ctaPlmPlanMeses.plmNombre","tahId");
		 Table table = tableFacade.getTable();
		 //---- Titulo de la tabla
		table.setCaptionKey("tbl.tah.caption");
		
		Row row = table.getRow();
		Column nombreColumna = row.getColumn("tahNombre");
		nombreColumna.setTitleKey("tbl.tah.tahNombre");
		
		nombreColumna = row.getColumn("ctaLahLineaAhorro.lahNombre");
		nombreColumna.setTitleKey("tbl.tah.lahNombreLinea");
		
		nombreColumna = row.getColumn("ctaPlmPlanMeses.plmNombre");
		nombreColumna.setTitleKey("tbl.tah.plmNombreMes");
			
		tableFacade.render();
	}
	
	 public ActionForward guardar(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {
			TipoAhorroForm tipoAhorroForm = (TipoAhorroForm)form;
			CtaTahTipoAhorroDAO tipoAhorroDAO = new CtaTahTipoAhorroDAO(getSessionHibernate(request));
			Transaction tx = tipoAhorroDAO.getSession().beginTransaction();
			try{
				if(!tipoAhorroForm.isMdf()){//ingresando un nuevo registro
					if(tipoAhorroDAO.findByTahNombre(tipoAhorroForm.getCtaTahTipoAhorroH().getTahNombre()).isEmpty()){
						if(tipoAhorroForm.getCtaPlmPlanMeses()== null || tipoAhorroForm.getCtaPlmPlanMeses().getPlmId()==null || tipoAhorroForm.getCtaPlmPlanMeses().getPlmId()== -1){
							tipoAhorroForm.setCtaPlmPlanMeses(null);
						}else{
							CtaPlmPlanMesesDAO planDAO = new CtaPlmPlanMesesDAO(getSessionHibernate(request));
							tipoAhorroForm.setCtaPlmPlanMeses(planDAO.findById(tipoAhorroForm.getCtaPlmPlanMeses().getPlmId()));
							//setearemos la fecha de fin
							ElapsedTime elap = new ElapsedTime();
							SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
							Date fechaCierre = new Date();
							fechaCierre = elap.obtenerFechaMeses(sdf.format(fechaCierre), tipoAhorroForm.getCtaPlmPlanMeses().getPlmDuracion());
							tipoAhorroForm.getCtaTahTipoAhorroH().setTahFechaFin(fechaCierre);
						}
						tipoAhorroForm.getCtaTahTipoAhorroH().setTahId(tipoAhorroDAO.nextId());
						tipoAhorroDAO.save(tipoAhorroForm.getCtaTahTipoAhorroH());
					}else{
						mensajes("errors.tahNombreRepetido",request);
						return lista(mapping, form, request, response);
					}
				}else{//modificando una tasa de interes en el tipo de ahorro, haremos movimiento.
					CtaTahTipoAhorro tipoAhorroIni = tipoAhorroDAO.findById(tipoAhorroForm.getTahId());
					if(tipoAhorroDAO.findByUpdatedName(tipoAhorroForm.getTahId(),tipoAhorroForm.getTahNombre()).isEmpty()){
						if(tipoAhorroIni.getCtaTinTasaInteres().getTinId()!= tipoAhorroForm.getCtaTinTasaInteres().getTinId()){
							//entonces debemos generar movimiento con tasa anterior, para registrar movimiento
							CtaCasCuentaAsociadoDAO cuentasDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
							CtaTxaTransaccionxcuentaAsociadoDAO txaDAO = new CtaTxaTransaccionxcuentaAsociadoDAO(getSessionHibernate(request));
							CtaMxaMovimientoAhorroDAO mxaDAO = new CtaMxaMovimientoAhorroDAO(getSessionHibernate(request));
							CtaCahCuentaAhorroDAO cahDAO = new CtaCahCuentaAhorroDAO(getSessionHibernate(request));
							
							
							Date fechaTrans = new Date();
							CtaTtrTipoTransaccion ttr = new CtaTtrTipoTransaccion();
							ttr.setTtrId(40);
							
							CuentaAhorroAction ahorroAction = new CuentaAhorroAction();
							//CuentaAhorroForm ahorroForm = new CuentaAhorroForm();
							
							//llamamos a la funcion que recoge a todas las cuentas que poseen este tipo de ahorro
							ArrayList<CtaCasCuentaAsociado> list = (ArrayList<CtaCasCuentaAsociado>)cuentasDAO.findAllCasCuentaByTipoCuenta(tipoAhorroIni.getTahId());
							Iterator<CtaCasCuentaAsociado> i = list.listIterator();
							while(i.hasNext()){
								
								CtaCasCuentaAsociado cas = i.next();
								CtaMxaMovimientoAhorro mxa = new CtaMxaMovimientoAhorro();
								CtaTxaTransaccionxcuentaAsociado txa = new CtaTxaTransaccionxcuentaAsociado();
								txa.setAudFechaCreacion(fechaTrans);
								txa.setAudFechaModificacion(fechaTrans);
								txa.setAudUsuarioCreacion(tipoAhorroForm.getUsuarioConectado().getNombreUsuario());
								txa.setAudUsuarioModificacion(tipoAhorroForm.getUsuarioConectado().getNombreUsuario());
								
								txa.setCtaCasCuentaAsociado(cas);
								txa.setCtaNotNotas(null);
								txa.setCtaTtrTipoTransaccion(ttr);
								txa.setTxaComprobante(null);
								txa.setTxaFecha(fechaTrans);
								txa.setTxaMonto(0.0);
								
								txaDAO.save(txa);
								
								CtaMxaMovimientoAhorro ultimoMov = mxaDAO.findUltimoMovimientoAhorroO(cas.getCtaCahCuentaAhorro().getCahId());
								mxa.setAudFechaCreacion(fechaTrans);
								mxa.setAudFechaModificacion(fechaTrans);
								mxa.setAudUsuarioCreacion(tipoAhorroForm.getUsuarioConectado().getNombreUsuario());
								mxa.setAudUsuarioModificacion(tipoAhorroForm.getUsuarioConectado().getNombreUsuario());
								
								mxa.setCtaCahCuentaAhorro(cas.getCtaCahCuentaAhorro());
								mxa.setCtaTxaTransaccionxcuentaAsociado(txa);
								mxa.setMxaFecha(fechaTrans);
								mxa.setMxaInteresTran(0.0);
								mxa.setMxaMonto(0.0);
								if(ultimoMov==null) mxa.setMxaSaldo(0.0);
								else mxa.setMxaSaldo(ultimoMov.getMxaSaldo());
								
								mxaDAO.save(mxa);
								//ahorroForm.setCtaCahCuentaAhorroH(cas.getCtaCahCuentaAhorro());
								Double interesActual = cas.getCtaCahCuentaAhorro().getCahInteresAcumulado();
								Double interesTrans = ahorroAction.calculoInteresTransaccion(cas.getCtaCahCuentaAhorro().getCahId(), fechaTrans,request);
								cas.getCtaCahCuentaAhorro().setCahInteresAcumulado(interesActual + interesTrans);
								cahDAO.merge(cas.getCtaCahCuentaAhorro());
							}
						}
						if(tipoAhorroForm.getCtaPlmPlanMeses()== null 
								|| tipoAhorroForm.getCtaPlmPlanMeses().getPlmId() == null
								|| tipoAhorroForm.getCtaPlmPlanMeses().getPlmId()==-1){
							tipoAhorroForm.setCtaPlmPlanMeses(null);
						}else{
							CtaPlmPlanMesesDAO planDAO = new CtaPlmPlanMesesDAO(getSessionHibernate(request));
							tipoAhorroForm.setCtaPlmPlanMeses(planDAO.findById(tipoAhorroForm.getCtaPlmPlanMeses().getPlmId()));
							tipoAhorroForm.setTahFechaFin("");
						}
						tipoAhorroDAO.merge(tipoAhorroForm.getCtaTahTipoAhorroH());
					}else{
						mensajes("errors.tahNombreRepetido",request);
						return lista(mapping, form, request, response);
					}
				}
				
			}catch(Exception e){
				tx.rollback();
				e.printStackTrace();
			}finally{
				tx.commit();
				tipoAhorroDAO.getSession().flush();
				tipoAhorroDAO.getSession().clear();
				
			}
			return lista(mapping,new TipoAhorroForm(),request,response);
		} 
	 
	 public ActionForward cargarDatos(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {
		 CtaTahTipoAhorroDAO tipoAhorroDAO = new CtaTahTipoAhorroDAO(getSessionHibernate(request));
		 CtaTahTipoAhorro tipoAhorro = new CtaTahTipoAhorro();
		 TipoAhorroForm tipoAhorroForm = (TipoAhorroForm)form;
		 tipoAhorro = tipoAhorroDAO.findById(tipoAhorroForm.getTahId());
		 tipoAhorroForm.setCtaTahTipoAhorroH(tipoAhorro);
		 return lista(mapping, tipoAhorroForm, request, response);
	 }
	 
	 
		public ActionForward redirectInvalidData(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response){
			ActionErrors errors = (ActionErrors)request.getSession().getAttribute(Constantes.ERRORS);
			saveMessages(request, errors);
			return lista(mapping, form, request, response);
		}
		
		public void mensajes(String msg, HttpServletRequest request){
			ActionErrors errors = new ActionErrors();
	        errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(msg));
	        saveMessages(request, errors);
		}
	

		
		public ActionForward cargarTipoAhorros(ActionMapping mapping,
				ActionForm form, HttpServletRequest request,
				HttpServletResponse response) {
			CtaTahTipoAhorroDAO tipoAhorroDAO  = new CtaTahTipoAhorroDAO(getSessionHibernate(request));
			
			try {
				String listaResponse = "";
				Integer Id = new Integer(request.getParameter("tahId")); 
				listaResponse = construirListaAhorros(tipoAhorroDAO.findByLinea(Id));
				response.setCharacterEncoding("UTF-8");
				response.getWriter().write(listaResponse);
				response.getWriter().flush();
				response.getWriter().close();
			} catch (RuntimeException e) {
				log.error("Error runtime", e);
			} catch (IOException e) {
				log.error(e);
			}
			return null;
		}
		
		
		private String construirListaAhorros(List listaAhorros) {
			String resp = "";
			if (listaAhorros == null || listaAhorros.isEmpty()) {
				resp="<select name=\"tahId\" id=\"tipoAhorroId\" style=\"width: 160px;\"> " +
							"<option value=\"-1\">- - Todos los tipos - -</option>" +
					"</select>";
			} else {
				resp = "<select id=\"tahId\" name=\"tahId\"  style=\"width: 160px;\">";
				resp+="<option value=\"-1\">- - Todos los tipos - -</option>";
				for (Iterator<CtaTahTipoAhorro> iterator = listaAhorros.iterator(); iterator
						.hasNext();) {
					CtaTahTipoAhorro tah = iterator.next();
					resp += "<option value=\"" + tah.getTahId() + "\">"
							+ tah.getTahNombre() + "</option>";
				}
				resp += "</select>";
			}
			return resp;
		}

		
		
	protected Map getKeyMethodMap() {
		// TODO Auto-generated method stub
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.tah.lista", "lista");
		map.put("cmd.tah.guardar", "guardar");
		map.put("cmd.tah.cargarDatos", "cargarDatos");
		map.put("cmd.tah.redirectInvalidData", "redirectInvalidData");
		map.put("cmd.cah.cargarTipoAhorros", "cargarTipoAhorros");//added 29 apr
		return map;
	}
}