/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.cuentaCorriente.struts.action;

import java.io.IOException;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.hibernate.Transaction;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeImpl;
import org.jmesa.limit.ExportType;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.BasicCellEditor;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.html.HtmlBuilder;

import com.cetia.sicaco.cuentaCorriente.struts.form.TipoPrestamoForm;
import com.cetia.sicaco.hibernate.CtaCasCuentaAsociado;
import com.cetia.sicaco.hibernate.CtaCasCuentaAsociadoDAO;
import com.cetia.sicaco.hibernate.CtaLprLineaPrestamoDAO;
import com.cetia.sicaco.hibernate.CtaMxpMovimientoPrestamo;
import com.cetia.sicaco.hibernate.CtaMxpMovimientoPrestamoDAO;
import com.cetia.sicaco.hibernate.CtaPlmPlanMeses;
import com.cetia.sicaco.hibernate.CtaPlmPlanMesesDAO;
import com.cetia.sicaco.hibernate.CtaPrePrestamo;
import com.cetia.sicaco.hibernate.CtaPrePrestamoDAO;
import com.cetia.sicaco.hibernate.CtaTinTasaInteres;
import com.cetia.sicaco.hibernate.CtaTinTasaInteresDAO;
import com.cetia.sicaco.hibernate.CtaTprTipoPrestamo;
import com.cetia.sicaco.hibernate.CtaTprTipoPrestamoDAO;
import com.cetia.sicaco.hibernate.CtaTtrTipoTransaccion;
import com.cetia.sicaco.hibernate.CtaTtrTipoTransaccionDAO;
import com.cetia.sicaco.hibernate.CtaTxaTransaccionxcuentaAsociado;
import com.cetia.sicaco.hibernate.CtaTxaTransaccionxcuentaAsociadoDAO;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;
import com.mad.utilidades.Calculadora;
import com.mad.utilidades.ElapsedTime;
import com.mad.utilidades.IntereseYMora;

/** 
 * MyEclipse Struts
 * Creation date: 08-17-2008
 * 
 * XDoclet definition:
 * @struts.action path="/tipoPrestamo" name="tipoPrestamoForm" input="redirectInvalidData" parameter="accion" scope="request" validate="true"
 * @struts.action-forward name="lista" path="pagina-lista/cuentaCorriente/tipoPrestamo.do"
 * @struts.action-forward name="redirectInvalidData" path="redirectInvalidData" redirect="true"
 */
public class TipoPrestamoAction extends DMLAction {

	public String TABLA_ID = "ctaTprTipoPrestamo";
	private String LIST_PLAN_MES="lstPlmPlanMes";
	private String LIST_LINEA_PRESTAMO = "lstLprLineaPrestamo";
	private String LIST_TASA_INTERES = "lstTinTasaInteres";
	
	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		TipoPrestamoForm tipoPrestamoForm = (TipoPrestamoForm) form;
		CtaTprTipoPrestamoDAO ctaTprTipoPrestamoDAO = new CtaTprTipoPrestamoDAO(getSessionHibernate(request));
		if(tipoPrestamoForm.getTprId()!=null && tipoPrestamoForm.getTprId() != 0
				&& tipoPrestamoForm.isMdf()){
			CtaTprTipoPrestamo tpr = ctaTprTipoPrestamoDAO.findById(tipoPrestamoForm.getTprId());
			tipoPrestamoForm.setTprNombre(tpr.getTprNombre());
			tipoPrestamoForm.setTprDescripcion(tpr.getTprDescripcion());
		}
		CtaPlmPlanMesesDAO ctaPlmPlanMesesDAO = new CtaPlmPlanMesesDAO(getSessionHibernate(request));
		CtaLprLineaPrestamoDAO ctaLprLineaPrestamoDAO = new CtaLprLineaPrestamoDAO(getSessionHibernate(request));
		CtaTinTasaInteresDAO ctaTinTasaInteresDAO = new CtaTinTasaInteresDAO(getSessionHibernate(request));
		
		List lst = ctaTprTipoPrestamoDAO.findAll();
		List lstPlmPlanMes = ctaPlmPlanMesesDAO.findAllWithName();
		List lstLprLineaPrestamo = ctaLprLineaPrestamoDAO.findAll();
		List lstTinTasaInteres = ctaTinTasaInteresDAO.findAllWithName();
		
		
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);
		
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
		request.setAttribute(LIST_PLAN_MES, lstPlmPlanMes);
		request.setAttribute(LIST_TASA_INTERES, lstTinTasaInteres);
		request.setAttribute(LIST_LINEA_PRESTAMO, lstLprLineaPrestamo);
		request.setAttribute("form", tipoPrestamoForm);
		request.setAttribute(Constantes.ACCION_KEY, "/tipoPrestamo");
		return mapping.findForward("lista");
	}
	
	//---- metodo que genera el html de la tabla del jmesa
	private String html(final TableFacade tableFacade, final HttpServletRequest request) {
		tableFacade.setColumnProperties("tprNombre", "ctaLprLineaPrestamo.lprNombre",
										"ctaPlmPlanMeses.plmNombre","tprId");
		Table table = tableFacade.getTable();
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.tpr.caption");
		
		Row row = table.getRow();
		Column nombreColumna = row.getColumn("tprNombre");
		nombreColumna.setTitleKey("tbl.tpr.tprNombre");
		
		nombreColumna = row.getColumn("ctaLprLineaPrestamo.lprNombre");
		nombreColumna.setTitleKey("tbl.tpr.lprNombreLinea");
		
		nombreColumna = row.getColumn("ctaPlmPlanMeses.plmNombre");
		nombreColumna.setTitleKey("tbl.tpr.plmNombreMes");
				
		nombreColumna = row.getColumn("tprId");
		nombreColumna.setTitleKey("tbl.tpr.acciones");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtaTprTipoPrestamo tipoPrestamo = (CtaTprTipoPrestamo)item;
				CtaTprTipoPrestamoDAO ctaTprTipoPrestamoDAO = new CtaTprTipoPrestamoDAO(getSessionHibernate(request));
				tipoPrestamo = ctaTprTipoPrestamoDAO.findById(tipoPrestamo.getTprId());
				HtmlBuilder html = new HtmlBuilder();
				value = "Editar";
				String link = tableFacade.getWebContext().getContextPath();
				link += "/cuentaCorriente/tipoPrestamo.do?tprId="+tipoPrestamo.getTprId()+
				"&ctaPlmPlanMeses.plmId="+tipoPrestamo.getCtaPlmPlanMeses().getPlmId()+
				"&ctaTinTasaInteres.tinId="+tipoPrestamo.getCtaTinTasaInteres().getTinId()+
				"&ctaLprLineaPrestamo.lprId="+tipoPrestamo.getCtaLprLineaPrestamo().getLprId()+
				"&accion=cargarDatos&mdf=true";
				html.a().href().quote().append(link).quote().append("class=\"linkEditar\"").title(value.toString()).close();
				//html.append(value);
				html.aEnd();				
				return html.toString();		
			}
			
		});
		
		return tableFacade.render();
	}
	
	//---- metodo que genera los exports, el formato que tendran
	 private void export(final TableFacade tableFacade) {
		 tableFacade.setColumnProperties("tprNombre", "ctaLprLineaPrestamo.lprNombre",
					"ctaPlmPlanMeses.plmNombre","tprId");
		 Table table = tableFacade.getTable();
		 //---- Titulo de la tabla
		table.setCaptionKey("tbl.tpr.caption");
		
		Row row = table.getRow();
		Column nombreColumna = row.getColumn("tprNombre");
		nombreColumna.setTitleKey("tbl.tpr.tprNombre");
		
		nombreColumna = row.getColumn("ctaLprLineaPrestamo.lprNombre");
		nombreColumna.setTitleKey("tbl.tpr.lprNombreLinea");
		
		nombreColumna = row.getColumn("ctaPlmPlanMeses.plmNombre");
		nombreColumna.setTitleKey("tbl.tpr.plmNombreMes");
			
		tableFacade.render();
	}
	
	 public ActionForward guardar(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {
			TipoPrestamoForm tipoPrestamoForm = (TipoPrestamoForm)form;
			CtaTprTipoPrestamoDAO tipoPrestamoDAO = new CtaTprTipoPrestamoDAO(getSessionHibernate(request));
			Transaction tx = tipoPrestamoDAO.getSession().beginTransaction();
			Integer tipoPre = -1;
			try{
				if(!tipoPrestamoForm.isMdf()){//ingresando un nuevo registro
					if(tipoPrestamoDAO.findByNameLinea(tipoPrestamoForm.getTprNombre(),tipoPrestamoForm.getCtaLprLineaPrestamo().getLprId()).isEmpty()){
						tipoPrestamoForm.getCtatPrestamoH().setTprId(tipoPrestamoDAO.nextId());
						tipoPrestamoDAO.save(tipoPrestamoForm.getCtatPrestamoH());
					}else{
						mensajes("errors.tprNombreRepetido",request);
						return lista(mapping, form, request, response);
					}
				}else{//modificando un registro
					CtaTprTipoPrestamo tprOriginal = tipoPrestamoDAO.findById(tipoPrestamoForm.getTprId());
					if(tipoPrestamoDAO.findByUpdatedName(tipoPrestamoForm.getTprId(),tipoPrestamoForm.getTprNombre(),tipoPrestamoForm.getCtaLprLineaPrestamo().getLprId()).isEmpty()){
						if(!tipoPrestamoForm.getCtaTinTasaInteres().getTinId().equals(tprOriginal.getCtaTinTasaInteres().getTinId())){
							tipoPre = tprOriginal.getTprId();
							actualizarInteresCambioTasa(tipoPre, tipoPrestamoForm.getUsuarioConectado().getNombreUsuario(),
									tipoPrestamoForm.getCtaTinTasaInteres().getTinId(),request);
						}
						tipoPrestamoDAO.merge(tipoPrestamoForm.getCtatPrestamoH());
					}else{
						mensajes("errors.tprNombreRepetido",request);
						return lista(mapping, form, request, response);
					}
				}
				
			}catch(Exception e){
				tx.rollback();
				e.printStackTrace();
			}finally{
				tx.commit();
				tipoPrestamoDAO.getSession().flush();
				tipoPrestamoDAO.getSession().clear();
				//if(tipoPre != -1){
				//	actualizarInteresCambioTasa(tipoPre, tipoPrestamoForm.getUsuarioConectado().getNombreUsuario());
				//}
				
			}
			return lista(mapping,new TipoPrestamoForm(),request,response);
		} 
	 
	 private void actualizarInteresCambioTasa(Integer tipoPre, String usuario, Integer tasaNueva,HttpServletRequest request) {
		CtaCasCuentaAsociadoDAO casDao = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
		
		//TtrId para cambio de tasa de prestamos: 39
		CtaTtrTipoTransaccionDAO ttrDao = new CtaTtrTipoTransaccionDAO(getSessionHibernate(request));
		CtaTtrTipoTransaccion ttr = ttrDao.findById(39);
		
		List casPrestamos = casDao.findByTprActivos(tipoPre);

		for (Iterator iterator = casPrestamos.iterator(); iterator.hasNext();) {
			CtaCasCuentaAsociado casPre = (CtaCasCuentaAsociado) iterator.next();
			
			//Obteniendo prestamo
			CtaPrePrestamoDAO prestamoDAO = new CtaPrePrestamoDAO(getSessionHibernate(request));
			CtaPrePrestamo prestamo = prestamoDAO.findById(casPre.getCtaPrePrestamo().getPreId());
			if(prestamo.getPreCredito()==null || !(prestamo.getPreCredito().equals("O")
					|| prestamo.getPreCredito().equals("F") || prestamo.getPreCredito().equals("A"))){
				//Se realiza transaccion
				CtaTxaTransaccionxcuentaAsociadoDAO txaDao = new CtaTxaTransaccionxcuentaAsociadoDAO(getSessionHibernate(request));
				CtaTxaTransaccionxcuentaAsociado txa = new CtaTxaTransaccionxcuentaAsociado();
				txa.setAudFechaCreacion(new Date());
				txa.setAudFechaModificacion(new Date());
				txa.setAudUsuarioCreacion(usuario);
				txa.setAudUsuarioModificacion(usuario);
				txa.setCtaCasCuentaAsociado(casPre);
				txa.setCtaNotNotas(null);
				txa.setCtaTtrTipoTransaccion(ttr);
				txa.setTxaFecha(new Date());
				txa.setTxaMonto(0.0);
				txa.setTxaNota(ttr.getTtrNombre());
				txaDao.save(txa);
				
				CtaMxpMovimientoPrestamoDAO mxpDao = new CtaMxpMovimientoPrestamoDAO(getSessionHibernate(request));
				//movimiento anterior
				CtaMxpMovimientoPrestamo mxpAnt = new CtaMxpMovimientoPrestamo();
				if(mxpDao.findUltimoMovimiento(prestamo.getPreId())!= null){
					mxpAnt = mxpDao.findUltimoMovimiento(prestamo.getPreId());
				}
				
				CtaMxpMovimientoPrestamo mxp = new CtaMxpMovimientoPrestamo();
				mxp.setAudFechaCreacion(new Date());
				mxp.setAudFechaModificacion(new Date());
				mxp.setAudUsuarioCreacion(usuario);
				mxp.setAudUsuarioModificacion(usuario);
				mxp.setCtaPrePrestamo(prestamo);
				mxp.setCtaTxaTransaccionxcuentaAsociado(txa);
				mxp.setMxpFecha(new Date());
				mxp.setMxpInteresAcumulado(0.0);
				mxp.setMxpInteresPendiente(0.0);
				mxp.setMxpMora(0.0);
				if(mxpAnt.getMxpId() == null){
					mxp.setMxpSaldoActual(prestamo.getPreMontoSolicitado() - prestamo.getPreSaldoActualT());
				}else{
					mxp.setMxpSaldoActual(mxpAnt.getMxpSaldoActual());
				}
				mxpDao.save(mxp);
				
				IntereseYMora iYm = new IntereseYMora();
				iYm = iYm.actualizaInteres(mxpAnt, prestamo, casPre, new Date(),request);
				prestamo.setPreAcumMov(iYm.getAcumulado());
				prestamo.setPrePendMov(iYm.getPendiente());
				prestamoDAO.merge(prestamo);
				
				Transaction tx = prestamoDAO.getSession().beginTransaction();
				tx.commit();
				
				//Actualizar cuotas del prestamo por cambio de tasa
				actualizarCuotasPrestamo(prestamo, tasaNueva,request);
				mxpDao.getSession().flush();
				mxpDao.getSession().clear();
			}
		}
		
	}

	private void actualizarCuotasPrestamo(CtaPrePrestamo prestamo,
			Integer tasaNueva,HttpServletRequest request) {
		CtaTinTasaInteresDAO tinDao = new CtaTinTasaInteresDAO(getSessionHibernate(request));
		CtaTinTasaInteres tin = tinDao.findById(tasaNueva);
		
		CtaCasCuentaAsociadoDAO casDao = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
		CtaCasCuentaAsociado cas = casDao.findByPreId(prestamo.getPreId());
		
		ElapsedTime et = new ElapsedTime();
		IntereseYMora iYm = new IntereseYMora();
		int mesesPlazo = et.getMonths(ElapsedTime.dTGC(iYm.noTime(new Date())), ElapsedTime.dTGC(cas.getCasFechaCierre()));
		/*log.error("/*********************************");
		log.error("Vieja Cuota - $" + prestamo.getPreCuota());
		log.error("Saldo actual T - $" + prestamo.getPreSaldoActualT());
		log.error("Tasa nueva - " + tin.getTinTasa() + "%");
		log.error("Meses plazo - " + mesesPlazo);*/
		prestamo.setPreCuota(Calculadora.calcularCuotaDouble(prestamo.getPreSaldoActualT(), tin.getTinTasa(), mesesPlazo));
		//log.error("Nueva Cuota - $" + prestamo.getPreCuota());
		CtaPrePrestamoDAO prestamoDAO = new CtaPrePrestamoDAO(getSessionHibernate(request));
		prestamoDAO.merge(prestamo);
		Transaction tx = prestamoDAO.getSession().beginTransaction();
		tx.commit();
		prestamoDAO.getSession().flush();
		prestamoDAO.getSession().clear();
	}

	public ActionForward cargarDatos(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {
		 
		 return lista(mapping, form, request, response);
	 }
	 
	public ActionForward redirectInvalidData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		ActionErrors errors = (ActionErrors)request.getSession().getAttribute(Constantes.ERRORS);
		saveMessages(request, errors);
		return lista(mapping, form, request, response);
	}
		
	public void mensajes(String msg, HttpServletRequest request){
		ActionErrors errors = new ActionErrors();
        errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(msg));
        saveMessages(request, errors);
	}
	
	public ActionForward cargarListaTiposPrestamo(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		TipoPrestamoForm tipoPrestamoForm = (TipoPrestamoForm) form;
		CtaTprTipoPrestamoDAO tipoPrestamoDAO = new CtaTprTipoPrestamoDAO(getSessionHibernate(request));
		try{
			String listaResponse = "";
			listaResponse = construirListaTipos(tipoPrestamoDAO.findByLineaSinCeros(tipoPrestamoForm.getLprId()));
			response.getWriter().write(listaResponse);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (RuntimeException e) {
			log.error("Error runtime", e);
		} catch (IOException e) {
			log.error(e);
		}
		return null;
	}
	public ActionForward cargarListaPlazosLineaPrestamo(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		TipoPrestamoForm tipoPrestamoForm = (TipoPrestamoForm) form;		
		CtaTprTipoPrestamoDAO tipoPrestamoDAO = new CtaTprTipoPrestamoDAO(getSessionHibernate(request));
		try{
			String listaResponse = "";
			listaResponse = construirListaPlazos(tipoPrestamoDAO.findPlazosByLinea(tipoPrestamoForm.getLprId()),request,tipoPrestamoForm.getLprId(),tipoPrestamoForm.getCtaPlmPlanMeses().getPlmId());
			response.getWriter().write(listaResponse);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (RuntimeException e) {
			log.error("Error runtime", e);
		} catch (IOException e) {
			log.error(e);
		}
		return null;
	}
	public ActionForward cargarListaTasasPlazosLineaPrestamo(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		TipoPrestamoForm tipoPrestamoForm = (TipoPrestamoForm) form;
		CtaTprTipoPrestamoDAO tipoPrestamoDAO = new CtaTprTipoPrestamoDAO(getSessionHibernate(request));
		try{
			String listaResponse = "";
			listaResponse = construirListaTasas(tipoPrestamoDAO.findTasaByLineaAndPlazo(tipoPrestamoForm.getLprId(),tipoPrestamoForm.getPlmId()));
			response.getWriter().write(listaResponse);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (RuntimeException e) {
			log.error("Error runtime", e);
		} catch (IOException e) {
			log.error(e);
		}
		return null;
	}	
	
	public ActionForward cargarListaTasasPlazosLineaPrestamoAux(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		TipoPrestamoForm tipoPrestamoForm = (TipoPrestamoForm) form;
		CtaTprTipoPrestamoDAO tipoPrestamoDAO = new CtaTprTipoPrestamoDAO(getSessionHibernate(request));
		try{
			String listaResponse = "";
			listaResponse = construirListaTasas(null);
			response.getWriter().write(listaResponse);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (RuntimeException e) {
			log.error("Error runtime", e);
		} catch (IOException e) {
			log.error(e);
		}
		return null;
	}
	
	private String construirListaTipos(List<CtaTprTipoPrestamo> listaTipos) {
		String resp = "";
		if(listaTipos == null || listaTipos.isEmpty()){
			resp+= "<span style=\"font-size: 10px;color: red;font-style: italic;\">"
			+ "No se encontro ningun tipo de prestamo asociado a la linea seleccionada<br> o la linea de prestamo seleccionada solo tiene tipos de prestamo con plan de meses 0.</span>";
		}else{
			resp = "<select id=\"tprId\" class=\"obligatorio\" name=\"ctaTprTipoPrestamo.tprId\">";
			for (Iterator<CtaTprTipoPrestamo> iterator = listaTipos.iterator(); iterator.hasNext();) {
				CtaTprTipoPrestamo tipo = iterator.next();
				resp += "<option value=\""+tipo.getTprId()+"\">"+tipo.getTprNombre()+"</option>";
			}
			resp+="</select>";
		}
		return resp;
	}
	
	private String construirListaPlazos(List<CtaPlmPlanMeses> listaPlazos,HttpServletRequest request,Integer lprId,Integer plmId) {
		String resp = "";
		if(listaPlazos == null || listaPlazos.isEmpty()){
			resp+= "<span style=\"font-size: 10px;color: red;font-style: italic;\">"
			+ "No se encontr&oacute; ning&uacute;n plazo asociado a la l&iacute;nea seleccionada<br> o la l&iacute;nea de pr&eacute;stamo seleccionada solo tiene tipos de pr&eacute;stamo con plan de meses 0.</span>";
		}else{
			resp = "<select id=\"plmId\" class=\"obligatorio\" name=\"plmId\" onchange=\"ajaxCallSincrono('"+request.getContextPath()+"/cuentaCorriente/tipoPrestamo.do','accion=cargarListaTasasPlazosLineaPrestamo&lprId="+lprId+"&plmId='+$('#plmId').val(),'tasaInteresDiv');\" >";
			resp += "<option value=\"-1\">--Seleccione un plazo--</option>";
			for (Iterator<CtaPlmPlanMeses> iterator = listaPlazos.iterator(); iterator.hasNext();) {
				CtaPlmPlanMeses tipo = iterator.next();
				resp += "<option value=\""+tipo.getPlmId()+"\">"+tipo.getPlmNombre()+"("+tipo.getPlmDuracion()+")"+"</option>";
			}
			resp+="</select>";
		}
		return resp;
	}
	
	private String construirListaTasas(List<CtaTinTasaInteres> listaPlazos) {
		String resp = "";
		if(listaPlazos == null || listaPlazos.isEmpty()){
			resp+= "<select id=\"tinPlazoId\" class=\"obligatorio\" name=\"tinPlazoId\"><option value=\"-1\">--Seleccione una tasa--</option></select>";
		}else{
			resp = "<select id=\"tinPlazoId\" class=\"obligatorio\" name=\"tinPlazoId\">";
			for (Iterator<CtaTinTasaInteres> iterator = listaPlazos.iterator(); iterator.hasNext();) {
				CtaTinTasaInteres tipo = iterator.next();
				resp += "<option value=\""+tipo.getTinId()+"\">"+tipo.getTinNombre()+" - "+tipo.getTinTasa()+"%"+"</option>";
			}
			resp+="</select>";
		}
		return resp;
	}	
	
	protected Map getKeyMethodMap() {
		// TODO Auto-generated method stub
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.tpr.lista", "lista");
		map.put("cmd.tpr.guardar", "guardar");
		map.put("cmd.tpr.cargarDatos", "cargarDatos");
		map.put("cmd.tpr.redirectInvalidData", "redirectInvalidData");
		map.put("cmd.tpr.cargarListaTiposPrestamo", "cargarListaTiposPrestamo");
		map.put("cmd.tpr.cargarListaPlazosLineaPrestamo", "cargarListaPlazosLineaPrestamo");
		map.put("cmd.tpr.cargarListaTasasPlazosLineaPrestamo", "cargarListaTasasPlazosLineaPrestamo");
		map.put("cmd.tpr.cargarListaTasasPlazosLineaPrestamoAux", "cargarListaTasasPlazosLineaPrestamoAux");
		return map;
	}
}