/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.cuentaCorriente.struts.action;

import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.hibernate.Transaction;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeFactory;
import org.jmesa.facade.TableFacadeImpl;
import org.jmesa.limit.ExportType;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.BasicCellEditor;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.editor.DateCellEditor;
import org.jmesa.view.html.HtmlBuilder;

import com.cetia.sicaco.asociados.struts.form.AsociadoForm;
import com.cetia.sicaco.cuentaCorriente.struts.form.BeneficiariosForm;
import com.cetia.sicaco.cuentaCorriente.struts.form.CuentaAsociadoForm;
import com.cetia.sicaco.hibernate.CtaAscAsociado;
import com.cetia.sicaco.hibernate.CtaAscAsociadoDAO;
import com.cetia.sicaco.hibernate.CtaBenBeneficiarios;
import com.cetia.sicaco.hibernate.CtaBenBeneficiariosDAO;
import com.cetia.sicaco.hibernate.CtaBxcBeneficiariosCuenta;
import com.cetia.sicaco.hibernate.CtaBxcBeneficiariosCuentaDAO;
import com.cetia.sicaco.hibernate.CtaCasCuentaAsociado;
import com.cetia.sicaco.hibernate.CtaCasCuentaAsociadoDAO;
import com.cetia.sicaco.hibernate.SecParParentescoDAO;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;
import com.mad.utilidades.ElapsedTime;

/** 
 * MyEclipse Struts
 * Creation date: 08-20-2008
 * 
 * XDoclet definition:
 * @struts.action path="/beneficiarios" name="beneficiariosForm" input="redirectInvalidData" parameter="accion" scope="request" validate="true"
 * @struts.action-forward name="lista" path="pagina-lista.cuentaCorriente.beneficiarios"
 * @struts.action-forward name="redirectInvalidData" path="cuentaCorriente/beneficiarios.do?accion=redirectInvalidData" redirect="true"
 */
public class BeneficiariosAction extends DMLAction {

	public String TABLA_ID = "ctaBenBeneficiarios";
	private String LIST_PARENTESCO="lstParentesco";
	
	
	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		BeneficiariosForm beneficiariosForm = (BeneficiariosForm) form;
		CtaBenBeneficiariosDAO ctaBenBeneficiariosDAO = new CtaBenBeneficiariosDAO(getSessionHibernate(request));
		SecParParentescoDAO secParentescoDAO = new SecParParentescoDAO(getSessionHibernate(request));
		CtaAscAsociadoDAO asocDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
		if(beneficiariosForm.getAscId() == null || beneficiariosForm.getAscId().equals("")){
			beneficiariosForm.setCtaAscAsociado(asocDAO.findById(request.getSession().getAttribute("asociadoIdAportacion").toString()));
		}else{
			beneficiariosForm.setCtaAscAsociado(asocDAO.findById(beneficiariosForm.getAscId()));
		}
		
		TableFacade tableFacade = TableFacadeFactory.createTableFacade(TABLA_ID, request);
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		int totalRows = ctaBenBeneficiariosDAO.getTotalRowCountByAsociadoYEstado(beneficiariosForm.getAscId(),"A");
		tableFacade.setTotalRows(totalRows);
		int rowStart = limit.getRowSelect().getRowStart();
		int rowEnd = limit.getRowSelect().getRowEnd();
		List<CtaBenBeneficiarios> lst = ctaBenBeneficiariosDAO.findByAsociadoYEstado(beneficiariosForm.getAscId(),"A",rowStart, rowEnd);
		tableFacade.setItems(lst);
		List lstParentesco = secParentescoDAO.findAll();
		if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
		CtaCasCuentaAsociado cuentaAs = new CtaCasCuentaAsociado();
		if(beneficiariosForm.getCuentaX()!=-1){
			request.setAttribute("porcent", "1");
		}else{
			request.setAttribute("porcent", "0");
		}
        //----- Variables de configuracion
		request.setAttribute("asociadoNombre",beneficiariosForm.getCtaAscAsociado());
		request.setAttribute(LIST_PARENTESCO, lstParentesco);
		request.setAttribute("form", beneficiariosForm);
		request.setAttribute(Constantes.ACCION_KEY, "/beneficiarios");
		return mapping.findForward("lista");
	}
	
	//---- metodo que genera el html de la tabla del jmesa
	private String html(final TableFacade tableFacade, final HttpServletRequest request) {
		tableFacade.setColumnProperties("benPrimerNombre", "secParParentesco.parDescripcion",
										"benSexo","benHijo","benFechaNacimiento");
		Table table = tableFacade.getTable();
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.ben.caption");
		
		Row row = table.getRow();
		
		Column nombreColumna = row.getColumn("benPrimerNombre");
		nombreColumna.setTitleKey("tbl.ben.benNombre");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtaBenBeneficiarios beneficiarios = (CtaBenBeneficiarios)item;
				CtaBenBeneficiariosDAO ctaBenBeneficiariosDAO = new CtaBenBeneficiariosDAO(getSessionHibernate(request));
				beneficiarios = ctaBenBeneficiariosDAO.findById(beneficiarios.getBenId());
				String nombre = beneficiarios.getBenPrimerApellido() + ", " + beneficiarios.getBenPrimerNombre(); 
				value = nombre;
				HtmlBuilder html = new HtmlBuilder();
				String link = tableFacade.getWebContext().getContextPath();
				BeneficiariosForm beneficiariosForm = (BeneficiariosForm)request.getAttribute("beneficiariosForm");
				link += "/cuentaCorriente/beneficiarios.do?benId="+beneficiarios.getBenId()+
				"&accion=cargarDatos&mdf=true"+"&cuentaX=" + beneficiariosForm.getCuentaX();
				/*if(beneficiariosForm.getCuentaX()!=-1){
					link += "&cuentaX=" + beneficiariosForm.getCuentaX();
				}*/
				if(beneficiariosForm.getCuentaX()!=-1){
					request.setAttribute("porcent", "1");
				}else{
					request.setAttribute("porcent", "0");
				}
				html.a().href().quote().append(link).quote().close();
				html.append(value);
				html.aEnd();				
				return html.toString();			
			}
			
		});
		
		nombreColumna = row.getColumn("secParParentesco.parDescripcion");
		nombreColumna.setTitleKey("tbl.ben.parentescoNombre");
		
		nombreColumna = row.getColumn("benSexo");
		nombreColumna.setTitleKey("tbl.ben.benSexo");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtaBenBeneficiarios beneficiarios = (CtaBenBeneficiarios)item;
				String sexo;
				if(beneficiarios.getBenSexo() == null){
					sexo = "No aplica";
				}else{
					if(beneficiarios.getBenSexo().equals("F")){
						sexo = "Femenino"; 
					}else{
						sexo="Masculino";
					}
				}
				value = sexo;	
				return value;			
			}
		});
		
		nombreColumna = row.getColumn("benHijo");
		nombreColumna.setTitleKey("tbl.ben.edad");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtaBenBeneficiarios beneficiarios = (CtaBenBeneficiarios)item;
				
				int edad;
				ElapsedTime elapsedTime = new ElapsedTime();
				if(beneficiarios.getBenFechaNacimiento() != null){
					GregorianCalendar g1 = new GregorianCalendar();
					GregorianCalendar g2 = new GregorianCalendar();
					g1 = ElapsedTime.dTGC(beneficiarios.getBenFechaNacimiento());
					g2 = ElapsedTime.dTGC(new Date());
					edad = elapsedTime.getYears(g1, g2);
				}else{
					edad = 0;
				}
				return edad;			
			}
		});
		
		nombreColumna = row.getColumn("benFechaNacimiento");
		BeneficiariosForm beneficiariosForm = (BeneficiariosForm)request.getAttribute("beneficiariosForm");
		if(beneficiariosForm.getCuentaX()== -1){//request.getAttribute("porcent").toString().equals("0")
			nombreColumna.setTitleKey("tbl.ben.benFechaNacimiento");
			nombreColumna.getCellRenderer().setCellEditor(new DateCellEditor("dd-MMM-yyyy"));
			
		}else if(beneficiariosForm.getCuentaX()!= -1){//request.getAttribute("porcent").toString().equals("1")
			nombreColumna.setTitleKey("tbl.ben.benPorcentaje");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){
				public Object getValue(Object item, String property, int rowcount) {
					Object value = new BasicCellEditor().getValue(item, property, rowcount);
					CtaBenBeneficiarios beneficiarios = (CtaBenBeneficiarios)item;
					BeneficiariosForm beneficiariosForm = (BeneficiariosForm)request.getAttribute("beneficiariosForm");
					CtaBxcBeneficiariosCuentaDAO bxcBeneficiariosCuentaDAO = new CtaBxcBeneficiariosCuentaDAO(getSessionHibernate(request));
					String porcentaje = bxcBeneficiariosCuentaDAO.
								findPorcentajeByCuentaYBeneficiario(beneficiarios.getBenId(),
										beneficiariosForm.getCuentaX());
					value=porcentaje;
					if(porcentaje!=""){
						value = porcentaje + "%";
					}	
					return value;			
				}
			});
		}
		return tableFacade.render();
	}
	
	//---- metodo que genera los exports, el formato que tendran
	 private void export(final TableFacade tableFacade) {
		 tableFacade.setColumnProperties("benPrimerNombre", "secParParentesco.parDescripcion",
					"benSexo","benFechaNacimiento");
		 Table table = tableFacade.getTable();
		 //---- Titulo de la tabla
		table.setCaptionKey("tbl.ben.caption");
		
		Row row = table.getRow();
		Column nombreColumna = row.getColumn("benPrimerNombre");
		nombreColumna.setTitleKey("tbl.ben.benNombre");
		
		nombreColumna = row.getColumn("secParParentesco.parDescripcion");
		nombreColumna.setTitleKey("tbl.ben.parentescoNombre");
		
		nombreColumna = row.getColumn("benSexo");
		nombreColumna.setTitleKey("tbl.ben.benSexo");
		
		nombreColumna = row.getColumn("benFechaNacimiento");
		nombreColumna.setTitleKey("tbl.ben.benFechaNacimiento");
			
		tableFacade.render();
	}
	
	 public ActionForward eliminar(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {
			BeneficiariosForm beneficiariosForm= (BeneficiariosForm) form;
			CtaBenBeneficiariosDAO beneDAO = new CtaBenBeneficiariosDAO(getSessionHibernate(request));
			CtaBenBeneficiarios beneficiario = beneDAO.findById(beneficiariosForm.getBenId());
			CtaBxcBeneficiariosCuentaDAO benexCuentaDAO = new CtaBxcBeneficiariosCuentaDAO(getSessionHibernate(request));
			String codigoAsoc = beneficiariosForm.getAscId();
			Transaction tx = beneDAO.getSession().beginTransaction();
			try{
				if(benexCuentaDAO.findByProperty("ctaBenBeneficiarios.benId", beneficiariosForm.getBenId()).isEmpty()){
					beneDAO.delete(beneficiario);
					
					ActionMessages messages = new ActionMessages();
					messages.add("", new ActionMessage("msg.bene.exitoE"));
					saveMessages(request, messages);
				}else{
					mensajes("errors.benBeneficiarioPoseeCuenta",request);
					return lista(mapping, form, request, response);
				}
			}catch(Exception e){
				tx.rollback();
				e.printStackTrace();
			}finally{
				tx.commit();
				beneDAO.getSession().flush();
				beneDAO.getSession().clear();
			}
			BeneficiariosForm bForm = new BeneficiariosForm();
			bForm.setAscId(codigoAsoc);
			bForm.setMdf(beneficiariosForm.isMdf());
			bForm.setCuentaX(beneficiariosForm.getCuentaX());
			if(bForm.getCuentaX()!=-1){
				request.setAttribute("porcent", "1");
			}else{
				request.setAttribute("porcent", "0");
			}
			
			return lista(mapping, bForm, request, response);
		}
	 
	 public ActionForward guardar(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {
			BeneficiariosForm beneficiariosForm = (BeneficiariosForm)form;
			BeneficiariosForm bForm = new BeneficiariosForm();
			CtaAscAsociado asociado = new CtaAscAsociado();
			CtaAscAsociadoDAO ascDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
			String codigoAsoc = beneficiariosForm.getCtaBenBeneficiariosH().getCtaAscAsociado().getAscId();
			asociado = ascDAO.findById(codigoAsoc);
			beneficiariosForm.getCtaBenBeneficiariosH().setCtaAscAsociado(asociado);

			CtaBenBeneficiariosDAO beneficiariosDAO = new CtaBenBeneficiariosDAO(getSessionHibernate(request));
			SecParParentescoDAO parentesco = new SecParParentescoDAO(getSessionHibernate(request));
			
			if(vacios(beneficiariosForm,request,response)){
				return lista(mapping, beneficiariosForm, request, response);
			}
			Transaction tx = beneficiariosDAO.getSession().beginTransaction();
			try{
				if(!beneficiariosForm.isMdf()){//ingresando un nuevo registro
					//if(beneficiariosDAO.findByBenNombre(beneficiariosForm.getBenPrimerNombre(),beneficiariosForm.getBenSegundoNombre(),
														//beneficiariosForm.getAscId()).isEmpty()){
						beneficiariosForm.setBenEstado("A");
						CtaBenBeneficiarios ctaBenBeneficiarios = beneficiariosForm.getCtaBenBeneficiariosH();
						ctaBenBeneficiarios.setBenNombreCompleto(ctaBenBeneficiarios.getBenPrimerNombre()+" "+ctaBenBeneficiarios.getBenSegundoNombre()+" "+ctaBenBeneficiarios.getBenPrimerApellido()+" "+ctaBenBeneficiarios.getBenSegundoApellido()+" "+ctaBenBeneficiarios.getBenApellidoCasada());
						beneficiariosDAO.save(ctaBenBeneficiarios);
					/*}else{
						mensajes("errors.benNombreRepetido",request);
						return lista(mapping, form, request, response);
					}*/
				}else{//modificando un registro
					
					//if(beneficiariosDAO.findByUpdatedName(beneficiariosForm.getBenId(),beneficiariosForm.getBenPrimerNombre(),
						//								  beneficiariosForm.getBenSegundoNombre()).isEmpty()){
						beneficiariosForm.setMdf(false);
						beneficiariosForm.setBenEstado("A");/***********/
						CtaBenBeneficiarios ctaBenBeneficiarios = beneficiariosForm.getCtaBenBeneficiariosH();
						ctaBenBeneficiarios.setBenNombreCompleto(ctaBenBeneficiarios.getBenPrimerNombre()+" "+ctaBenBeneficiarios.getBenSegundoNombre()+" "+ctaBenBeneficiarios.getBenPrimerApellido()+" "+ctaBenBeneficiarios.getBenSegundoApellido()+" "+ctaBenBeneficiarios.getBenApellidoCasada());						
						beneficiariosDAO.merge(ctaBenBeneficiarios);
						
						
				/*	}else{
						mensajes("errors.benNombreRepetido",request);
						return lista(mapping, form, request, response);
					}*/
				}
				if(beneficiariosForm.getCuentaX()!=-1){
					CtaBxcBeneficiariosCuentaDAO benexCuDAO = new CtaBxcBeneficiariosCuentaDAO(getSessionHibernate(request));
					if(beneficiariosForm.getPorcentaje()>0){
						CtaBxcBeneficiariosCuenta benexCu = new CtaBxcBeneficiariosCuenta();
						CtaCasCuentaAsociadoDAO cuentaAsDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
						float totalAcumulado = benexCuDAO.porcentajeAcum(beneficiariosForm.getCuentaX()) + 
								beneficiariosForm.getPorcentaje();
						if(totalAcumulado<=100){
							benexCu.setBxcPorcentaje(beneficiariosForm.getPorcentaje());
							benexCu.setCtaBenBeneficiarios(beneficiariosForm.getCtaBenBeneficiariosH());
							benexCu.setCtaCasCuentaAsociado(
								cuentaAsDAO.findById(beneficiariosForm.getCuentaX()));
							benexCuDAO.save(benexCu);
						}else{
							mensajes("errors.benHaSobrepasadoCienPorciento",request);
							return lista(mapping, form, request, response);
						}
					}
	
				}
				
				bForm.setAscId(codigoAsoc);
				bForm.setMdf(beneficiariosForm.isMdf());
				bForm.setCuentaX(beneficiariosForm.getCuentaX());
				if(bForm.getCuentaX()!=-1){
					request.setAttribute("porcent", "1");
				}else{
					request.setAttribute("porcent", "0");
				}
				
			}catch(Exception e){
				tx.rollback();
				e.printStackTrace();
			}finally{
				tx.commit();
				beneficiariosDAO.getSession().flush();
				beneficiariosDAO.getSession().clear();
				
			}
			
			return lista(mapping,bForm,request,response);
		} 
	 
	 
	 private boolean vacios(BeneficiariosForm beneficiariosForm,
			 HttpServletRequest request, HttpServletResponse response) {
		boolean booleano = false;
		ActionErrors errors = new ActionErrors();
		
		if(beneficiariosForm.getBenPrimerNombre()== null || beneficiariosForm.getBenPrimerNombre().trim().equals("")){
			mensajes2("errors.ben.benPrimerNombre.required", beneficiariosForm, request, response, errors);
			booleano = true;
		}
		if(beneficiariosForm.getBenPrimerApellido()== null || beneficiariosForm.getBenPrimerApellido().trim().equals("")){
			mensajes2("errors.ben.benPrimerApellido.required", beneficiariosForm, request, response, errors);
			booleano = true;
		}
		/*if(beneficiariosForm.getBenFechaNacimiento()== null || beneficiariosForm.getBenFechaNacimiento().trim().equals("")){
			mensajes2("errors.ben.benFechaNacimiento.required", beneficiariosForm, request, response, errors);
			booleano = true;
		}*/
		return booleano;
	}
	 
	 public void mensajes2(String msg,BeneficiariosForm form,
				HttpServletRequest request, HttpServletResponse response,
				ActionErrors errors){
			errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(msg));
	        saveMessages(request, errors);
		}

	public ActionForward cargarDatos(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {
		 CtaBenBeneficiariosDAO beneDAO = new CtaBenBeneficiariosDAO(getSessionHibernate(request));
		 CtaAscAsociadoDAO asocDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
		 BeneficiariosForm beneForm = (BeneficiariosForm)form;
		 long cuenta = beneForm.getCuentaX();
		 CtaBxcBeneficiariosCuentaDAO bxcBeneficiariosCuentaDAO = new CtaBxcBeneficiariosCuentaDAO(getSessionHibernate(request));
		 String porcentaje = bxcBeneficiariosCuentaDAO.
						findPorcentajeByCuentaYBeneficiario(beneForm.getBenId(),beneForm.getCuentaX());
		 beneForm.setCtaBenBeneficiariosH(beneDAO.findById(beneForm.getBenId()));
		 beneForm.getCtaBenBeneficiariosH().setCtaAscAsociado(asocDAO.findById(beneForm.getAscId()));
		 /*beneForm.setCuentaX(beneficiariosForm.getCuentaX());*/
			if(beneForm.getCuentaX()!=-1){
				request.setAttribute("porcent", "1");
				beneForm.setPorcentaje((porcentaje.length()==0?0:new Float(porcentaje)));
			}else{
				request.setAttribute("porcent", "0");
			}
			
		 return lista(mapping, beneForm, request, response);//mandar nuevo form
	 }
	 
	 
		public ActionForward redirectInvalidData(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response){
			ActionErrors errors = (ActionErrors)request.getSession().getAttribute(Constantes.ERRORS);
			saveMessages(request, errors);
			return lista(mapping, form, request, response);
		}
		
		public ActionForward forwardToAsociado(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response){
			BeneficiariosForm beForm = (BeneficiariosForm)form;
			String asociadoId = beForm.getAscId();
			CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
			CtaAscAsociado asociado = asociadoDAO.findById(asociadoId);
			AsociadoForm aFom = new AsociadoForm();
			request.setAttribute("form", aFom);
			request.setAttribute("porcent", "0");
			request.setAttribute(Constantes.ACCION_KEY, "/beneficiarios");
			return mapping.findForward("regresarA");
			
		}
		
		public ActionForward forwardToCuentasAsociado(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response){
			BeneficiariosForm beForm = (BeneficiariosForm)form;
			String asociadoId = beForm.getAscId();
			CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
			CtaAscAsociado asociado = asociadoDAO.findById(asociadoId);
			CuentaAsociadoForm cuentaAsociadoForm = new CuentaAsociadoForm();
			cuentaAsociadoForm.setAscId(asociado.getAscId());
			cuentaAsociadoForm.setAscCodigo(asociado.getAscCodigo());
			cuentaAsociadoForm.setTipoCuentaMadre("Ap");
			request.setAttribute("form", cuentaAsociadoForm);
			request.setAttribute("porcent", "1");
			return mapping.findForward("regresar");
			
		}
		
		public void mensajes(String msg, HttpServletRequest request){
			ActionErrors errors = new ActionErrors();
	        errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(msg));
	        saveMessages(request, errors);
		}
		
		public ActionForward cargarBeneficiariosCuenta(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response){
			BeneficiariosForm beneficiariosForm = (BeneficiariosForm) form;
			CtaBxcBeneficiariosCuentaDAO beneficiariosCuentaDAO = new CtaBxcBeneficiariosCuentaDAO(getSessionHibernate(request));
			SecParParentescoDAO secParentescoDAO = new SecParParentescoDAO(getSessionHibernate(request));
			CtaCasCuentaAsociadoDAO cuentaAsociadoDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
			CtaCasCuentaAsociado cuenta = cuentaAsociadoDAO.findById(beneficiariosForm.getCuentaX());
			TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
			tableFacade.setItems(beneficiariosCuentaDAO.findByCuenta(beneficiariosForm.getCuentaX()));
			//---- Genera los tipos de formas con que se podran exportar los datos
			tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
			tableFacade.setStateAttr("restore");
			Limit limit = tableFacade.getLimit();
			if (limit.isExported()) {
	        	//---- exporta la tabla
	        //    export(tableFacade);
	            return null; 
	        } else {
	        	String html = html(tableFacade, request);
	            request.setAttribute(Constantes.LISTA_KEY, html);
	        }
			List lstParentesco = secParentescoDAO.findAll();
			if(beneficiariosForm.getCuentaX()!=-1){
				request.setAttribute("porcent", "1");
			}else{
				request.setAttribute("porcent", "0");
			}
			request.setAttribute("asociadoNombre",cuenta.getCtaAscAsociado());
			request.setAttribute("cuenta", cuenta.getCtaCahCuentaAhorro());
			request.setAttribute(LIST_PARENTESCO, lstParentesco);
			request.setAttribute("form", beneficiariosForm);
			request.setAttribute(Constantes.ACCION_KEY, "/beneficiarios");
			return mapping.findForward("lista");
		}
		
	protected Map getKeyMethodMap() {
		// TODO Auto-generated method stub
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.ben.lista", "lista");
		map.put("cmd.ben.guardar", "guardar");
		map.put("cmd.ben.cargarDatos", "cargarDatos");
		map.put("cmd.ben.eliminar", "eliminar");
		map.put("cmd.ben.toAsociadosBenefactor", "forwardToAsociado");
		map.put("cmd.ben.toCuentasAsociado", "forwardToCuentasAsociado");
		map.put("cmd.ben.redirectInvalidData", "redirectInvalidData");
		map.put("cmd.ben.cargarBeneficiariosCuenta", "cargarBeneficiariosCuenta");
		return map;
	}
}