/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.cuentaCorriente.struts.action;

import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.hibernate.Transaction;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeImpl;
import org.jmesa.limit.ExportType;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.BasicCellEditor;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.editor.DateCellEditor;
import org.jmesa.view.html.HtmlBuilder;

import com.cetia.sicaco.cuentaCorriente.struts.form.AgregaBenForm;
import com.cetia.sicaco.cuentaCorriente.struts.form.CuentaAsociadoForm;
import com.cetia.sicaco.hibernate.CtaAscAsociado;
import com.cetia.sicaco.hibernate.CtaAscAsociadoDAO;
import com.cetia.sicaco.hibernate.CtaBenBeneficiarios;
import com.cetia.sicaco.hibernate.CtaBenBeneficiariosDAO;
import com.cetia.sicaco.hibernate.CtaBxcBeneficiariosCuenta;
import com.cetia.sicaco.hibernate.CtaBxcBeneficiariosCuentaDAO;
import com.cetia.sicaco.hibernate.CtaCasCuentaAsociado;
import com.cetia.sicaco.hibernate.CtaCasCuentaAsociadoDAO;
import com.cetia.sicaco.hibernate.SecParParentescoDAO;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;

/** 
 * MyEclipse Struts
 * Creation date: 02-02-2009
 * 
 * XDoclet definition:
 * @struts.action path="/agregaBen" name="agregaBenForm" input="redirectInvalidData" parameter="accion" scope="request" validate="true"
 * @struts.action-forward name="lista" path="pagina-lista.cuentaCorriente.agregaBen"
 */
public class AgregaBenAction extends DMLAction {
	/*
	 * Generated Methods
	 */

	public String TABLA_ID = "ctaBenBeneficiarios";
	public int pos = 0;
	
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		AgregaBenForm agregaBenForm = (AgregaBenForm) form;// TODO Auto-generated method stub
		/*if(agregaBenForm.getCuentaX()==null || agregaBenForm.getCuentaX() == 0){
			agregaBenForm.setCuentaX((Long)request.getAttribute("cueId"));
		}*/
		CtaCasCuentaAsociadoDAO casDao = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
		CtaCasCuentaAsociado cas = casDao.findById(agregaBenForm.getCuentaX());
		request.setAttribute("cuenta", cas);
		
		CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
		CtaAscAsociado asociado = asociadoDAO.findById(cas.getCtaAscAsociado().getAscId());
		request.setAttribute("asociadoNombre", asociado);

		agregaBenForm.setAscId(asociado.getAscId());
		
		SecParParentescoDAO parentescoDAO = new  SecParParentescoDAO(getSessionHibernate(request));
		List lpar = parentescoDAO.findAll();
		
		CtaBenBeneficiariosDAO beneficiariosDAO = new CtaBenBeneficiariosDAO(getSessionHibernate(request));
		List lstBen = beneficiariosDAO.findByProperty("ctaAscAsociado.ascId", asociado.getAscId());
		
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lstBen);

		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
			//---- exporta la tabla
			export(tableFacade);
			return null; 
		} else {
			//---- genera el html de la tabla para ser mostrada
			String html = html(tableFacade, request, agregaBenForm.getCuentaX());
			request.setAttribute("_lista2", html);
		}
		//----- Variables de configuracion
		
		request.setAttribute("lstParentesco", lpar);
		request.setAttribute("form", agregaBenForm);
		request.setAttribute("edit", 0);
		request.setAttribute(Constantes.ACCION_KEY, "/agregaBen");
		return mapping.findForward("lista");
	}
	
	//---- metodo que genera el html de la tabla del jmesa
	private String html(final TableFacade tableFacade, final HttpServletRequest request, final Long cuenta) {
        tableFacade.setColumnProperties("benPrimerNombre", "secParParentesco.parDescripcion",
                                        "benSexo","benFechaNacimiento","benHijo","benId");
        Table table = tableFacade.getTable();
        //---- Titulo de la tabla
        table.setCaptionKey("tbl.ben.caption");
       
        Row row = table.getRow();
        Column nombreColumna = row.getColumn("benPrimerNombre");
        nombreColumna.setTitleKey("tbl.ben.benNombre");
        nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

            public Object getValue(Object item, String property, int rowcount) {
                Object value = new BasicCellEditor().getValue(item, property, rowcount);
                CtaBenBeneficiarios beneficiarios = (CtaBenBeneficiarios)item;
                CtaBenBeneficiariosDAO ctaBenBeneficiariosDAO = new CtaBenBeneficiariosDAO(getSessionHibernate(request));
                beneficiarios = ctaBenBeneficiariosDAO.findById(beneficiarios.getBenId());
                String nombre = beneficiarios.getBenPrimerApellido() + ", " + beneficiarios.getBenPrimerNombre();
                value = nombre;
                return value;           
            }
           
        });
       
        nombreColumna = row.getColumn("secParParentesco.parDescripcion");
        nombreColumna.setTitleKey("tbl.ben.parentescoNombre");
       
        nombreColumna = row.getColumn("benSexo");
        nombreColumna.setTitleKey("tbl.ben.benSexo");
        nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

            public Object getValue(Object item, String property, int rowcount) {
                Object value = new BasicCellEditor().getValue(item, property, rowcount);
                CtaBenBeneficiarios beneficiarios = (CtaBenBeneficiarios)item;
                String sexo;
                if(beneficiarios.getBenSexo() == null){
                	sexo = "No aplica";
                }else{
                	if(beneficiarios.getBenSexo().equals("F")){
	                    sexo = "Femenino";
	                }else{
	                    sexo="Masculino";
	                }
                }
                value = sexo;   
                return value;           
            }
        });
       
        nombreColumna = row.getColumn("benFechaNacimiento");
        nombreColumna.setTitleKey("tbl.ben.benFechaNacimiento");
        nombreColumna.getCellRenderer().setCellEditor(new DateCellEditor("dd-MMM-yyyy"));
       
        nombreColumna = row.getColumn("benHijo");
        nombreColumna.setTitleKey("tbl.ben.porcentajes");
        nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

            public Object getValue(Object item, String property, int rowcount) {
                Object value = new BasicCellEditor().getValue(item, property, rowcount);
                CtaBenBeneficiarios beneficiarios = (CtaBenBeneficiarios)item;
                CtaBenBeneficiariosDAO ctaBenBeneficiariosDAO = new CtaBenBeneficiariosDAO(getSessionHibernate(request));
                beneficiarios = ctaBenBeneficiariosDAO.findById(beneficiarios.getBenId());
                String nombre = beneficiarios.getBenPrimerApellido() + ", " + beneficiarios.getBenPrimerNombre();
                value = nombre;
                CtaBxcBeneficiariosCuentaDAO bxcDAO = new CtaBxcBeneficiariosCuentaDAO(getSessionHibernate(request));
                HtmlBuilder html = new HtmlBuilder();
                List lbxc = bxcDAO.findByCuenta2(cuenta);
                int cont = 0;
                for (Iterator iterator = lbxc.iterator(); iterator.hasNext();) {
					CtaBxcBeneficiariosCuenta bxc = (CtaBxcBeneficiariosCuenta) iterator.next();
					if(bxc.getCtaBenBeneficiarios().getBenId().equals(beneficiarios.getBenId())){
						html.input().type("text").name("valores").value(""+bxc.getBxcPorcentaje()+"").size("10").id("porcentajeId"+pos);
						html.close();
						cont = 1;
					}
				}
                if(cont==0){
                	html.input().type("text").name("valores").size("10").id("porcentajeId"+pos);
					html.close();
                }
				pos++;
								
				return html.toString();
            }
           
        });
        
        nombreColumna = row.getColumn("benId");
        nombreColumna.setTitleKey("tbl.ben.check");
        nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

            public Object getValue(Object item, String property, int rowcount) {
                Object value = new BasicCellEditor().getValue(item, property, rowcount);
                CtaBenBeneficiarios beneficiarios = (CtaBenBeneficiarios)item;
                CtaBenBeneficiariosDAO ctaBenBeneficiariosDAO = new CtaBenBeneficiariosDAO(getSessionHibernate(request));
                beneficiarios = ctaBenBeneficiariosDAO.findById(beneficiarios.getBenId());
                String nombre = beneficiarios.getBenPrimerApellido() + ", " + beneficiarios.getBenPrimerNombre();
                value = nombre;
                HtmlBuilder html = new HtmlBuilder();
                CtaBxcBeneficiariosCuentaDAO bxcDAO = new CtaBxcBeneficiariosCuentaDAO(getSessionHibernate(request));
                List lbxc = bxcDAO.findByCuenta2(cuenta);
                int cont = 0;
                for (Iterator iterator = lbxc.iterator(); iterator.hasNext();) {
					CtaBxcBeneficiariosCuenta bxc = (CtaBxcBeneficiariosCuenta) iterator.next();
					if(bxc.getCtaBenBeneficiarios().getBenId().equals(beneficiarios.getBenId())){
						html.input().type("checkbox").name("posiciones").value(""+beneficiarios.getBenId()).checked().close();
						cont = 1;
					}
                }
                if(cont == 0){
                	html.input().type("checkbox").name("posiciones").value(""+beneficiarios.getBenId()).close();
                }
				pos=pos+1;
				return html.toString();
            }
           
        });
        
        return tableFacade.render();
    }
   
    //---- metodo que genera los exports, el formato que tendran
     private void export(final TableFacade tableFacade) {
         tableFacade.setColumnProperties("benPrimerNombre", "secParParentesco.parDescripcion",
                    "benSexo","benFechaNacimiento");
         Table table = tableFacade.getTable();
         //---- Titulo de la tabla
        table.setCaptionKey("tbl.ben.caption");
       
        Row row = table.getRow();
        Column nombreColumna = row.getColumn("benPrimerNombre");
        nombreColumna.setTitleKey("tbl.ben.benNombre");
       
        nombreColumna = row.getColumn("secParParentesco.parDescripcion");
        nombreColumna.setTitleKey("tbl.ben.parentescoNombre");
       
        nombreColumna = row.getColumn("benSexo");
        nombreColumna.setTitleKey("tbl.ben.benSexo");
       
       
        nombreColumna = row.getColumn("benFechaNacimiento");
        nombreColumna.setTitleKey("tbl.ben.benFechaNacimiento");
           
        tableFacade.render();
    }
	
	public ActionForward regresar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		AgregaBenForm agregaBenForm = (AgregaBenForm)form;
		//String asociadoId = request.getSession().getAttribute("asociadoId").toString();
		CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
		CtaAscAsociado asociado = asociadoDAO.findById(agregaBenForm.getAscId());
		CuentaAsociadoForm cuentaAsociadoForm = new CuentaAsociadoForm();
		cuentaAsociadoForm.setAscId(asociado.getAscId());
		cuentaAsociadoForm.setAscCodigo(asociado.getAscCodigo());
		
		CtaCasCuentaAsociadoDAO casDao = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
		CtaCasCuentaAsociado cas = casDao.findById(agregaBenForm.getCuentaX());
		if(cas.getCtaCahCuentaAhorro().getCahId().startsWith("A")){
			cuentaAsociadoForm.setTipoCuentaMadre("Ap");
		}else{
			cuentaAsociadoForm.setTipoCuentaMadre("Ah");
		}
		request.setAttribute("form", cuentaAsociadoForm);
		cuentaAsociadoForm = new CuentaAsociadoForm();
		return mapping.findForward("regresar");
	}
	
	public ActionForward agregar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		AgregaBenForm agregaBenForm = (AgregaBenForm)form;
		CtaAscAsociado asociado = new CtaAscAsociado();
		CtaAscAsociadoDAO ascDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
		asociado = ascDAO.findById(agregaBenForm.getAscId());
		agregaBenForm.getBeneficiariosH().setCtaAscAsociado(asociado);
		CtaBenBeneficiariosDAO beneficiariosDAO = new CtaBenBeneficiariosDAO(getSessionHibernate(request));
		SecParParentescoDAO parentescoDAO = new SecParParentescoDAO(getSessionHibernate(request));
		agregaBenForm.getBeneficiariosH().setSecParParentesco(parentescoDAO.findById(agregaBenForm.getBeneficiariosH().getSecParParentesco().getParId()));
		agregaBenForm.getBeneficiariosH().setBenEstado("A");
		if(vacios(agregaBenForm,request,response)){
			return lista(mapping, agregaBenForm, request, response);
		}
		Transaction tx = beneficiariosDAO.getSession().beginTransaction();
		try{
			//if(beneficiariosDAO.findByCriteria(agregaBenForm.getBeneficiariosH()).isEmpty()){
				beneficiariosDAO.save(agregaBenForm.getBeneficiariosH());
				
			//}else{
				/*mensajes("errors.benNombreRepetido",request);
				return lista(mapping, form, request, response);*/
			//}
			
		}catch(Exception e){
			tx.rollback();
			e.printStackTrace();
		}finally{
			tx.commit();
			beneficiariosDAO.getSession().flush();
			beneficiariosDAO.getSession().clear();
			
		}
		CtaBenBeneficiarios beneficiarios = new CtaBenBeneficiarios();
		agregaBenForm.setBeneficiariosH(beneficiarios);
		return lista(mapping,agregaBenForm,request,response);
	}
	
	public void mensajes(String msg, HttpServletRequest request){
		ActionErrors errors = new ActionErrors();
		errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(msg));
		saveMessages(request, errors);
	}
	
	public ActionForward salvar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		AgregaBenForm agregaBenForm = (AgregaBenForm)form;
		
		CtaBenBeneficiariosDAO beneficiariosDAO = new CtaBenBeneficiariosDAO(getSessionHibernate(request));
		List lstBen = beneficiariosDAO.findByProperty("ctaAscAsociado.ascId", agregaBenForm.getAscId());
		
		if(agregaBenForm.getPosiciones() != null && agregaBenForm.getPosiciones().length > 0){
			Double porcTotal = 0.0;
			for(int i=0;i < agregaBenForm.getValores().length;i++){
				Double object = agregaBenForm.getValores()[i];
				porcTotal += object;
			}
			if(porcTotal < 100.0){
				mensajes("error.seguros.porcentajeMenor", request);
				return lista(mapping, agregaBenForm, request, response);
			}
			
			Double porcTotal2 = 0.0;
			int j = 0;
			for (Iterator iterator = lstBen.iterator(); iterator.hasNext();) {
				CtaBenBeneficiarios beneficiarios = (CtaBenBeneficiarios) iterator.next();
				
				for (int i = 0; i < agregaBenForm.getPosiciones().length; i++) {
					if(beneficiarios.getBenId() == agregaBenForm.getPosiciones()[i]){
						porcTotal2 += agregaBenForm.getValores()[j];
					}
				}
				j++;
			}
			if(porcTotal2 != 100){
				mensajes("error.seguros.porcentajeEquivocado", request);
				return lista(mapping, agregaBenForm, request, response);
			}
		}else{
			mensajes("error.seguros.beneficiarios", request);
			return lista(mapping, agregaBenForm, request, response);
		}
		
		CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
		CtaAscAsociado asociado = asociadoDAO.findById(agregaBenForm.getAscId());
		
		CtaCasCuentaAsociadoDAO cuentaAsociadoDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
		CtaCasCuentaAsociado cuentaAsociado = cuentaAsociadoDAO.findById(agregaBenForm.getCuentaX());
		
		CtaBxcBeneficiariosCuentaDAO beneficiariosCuentaDAO = new CtaBxcBeneficiariosCuentaDAO(getSessionHibernate(request));
		Transaction tx = beneficiariosCuentaDAO.getSession().beginTransaction();
		int pos = 0;
		for (Iterator iterator = lstBen.iterator(); iterator.hasNext();) {
			CtaBenBeneficiarios beneficiarios = (CtaBenBeneficiarios) iterator.next();
			if(encuentraPosicion(agregaBenForm.getPosiciones(),beneficiarios.getBenId())){
				CtaBxcBeneficiariosCuenta beneficiariosCuenta = new CtaBxcBeneficiariosCuenta();
				Float porcent = agregaBenForm.getValores()[pos].floatValue();
				beneficiariosCuenta.setBxcPorcentaje(porcent);
				beneficiariosCuenta.setCtaBenBeneficiarios(beneficiarios);
				beneficiariosCuenta.setCtaCasCuentaAsociado(cuentaAsociado);
				
				int idBenxCuenta = beneficiariosCuentaDAO.findByCuentaYBeneficiario(beneficiariosCuenta);
				if(idBenxCuenta == -1){
					beneficiariosCuentaDAO.save(beneficiariosCuenta);
				}else{
					beneficiariosCuenta.setBxcId(idBenxCuenta);
					beneficiariosCuentaDAO.merge(beneficiariosCuenta);
				}
				
				tx.commit();
			}else{
				CtaBxcBeneficiariosCuenta beneficiariosCuenta = new CtaBxcBeneficiariosCuenta();
				beneficiariosCuenta.setCtaBenBeneficiarios(beneficiarios);
				beneficiariosCuenta.setCtaCasCuentaAsociado(cuentaAsociado);
				int idBenxCuenta = beneficiariosCuentaDAO.findByCuentaYBeneficiario(beneficiariosCuenta);
				if(idBenxCuenta !=-1){
					CtaBxcBeneficiariosCuenta beneficiariosCuentaAEliminar = beneficiariosCuentaDAO.findById(idBenxCuenta);
					beneficiariosCuentaDAO.delete(beneficiariosCuentaAEliminar);
					tx.commit();
				}
			}
			pos++;
		}
		mensajes("msg.agregaBen.modificacionPorcentajes", request);
		return lista(mapping,form,request,response);
	} 
	
	private boolean encuentraPosicion(int[] posiciones, Integer benId) {
		for(int i=0; i<posiciones.length;i++){
			if(posiciones[i] == benId){
				return true;
			}
		}
		return false;
	}

	 private boolean vacios(AgregaBenForm beneficiariosForm,
			 HttpServletRequest request, HttpServletResponse response) {
		boolean booleano = false;
		ActionErrors errors = new ActionErrors();
		
		if(beneficiariosForm.getBenPrimerNombre()== null || beneficiariosForm.getBenPrimerNombre().trim().equals("")){
			mensajes2("errors.ben.benPrimerNombre.required", beneficiariosForm, request, response, errors);
			booleano = true;
		}
		if(beneficiariosForm.getBenPrimerApellido()== null || beneficiariosForm.getBenPrimerApellido().trim().equals("")){
			mensajes2("errors.ben.benPrimerApellido.required", beneficiariosForm, request, response, errors);
			booleano = true;
		}
		/*if(beneficiariosForm.getBenFechaNacimiento()== null || beneficiariosForm.getBenFechaNacimiento().trim().equals("")){
			mensajes2("errors.ben.benFechaNacimiento.required", beneficiariosForm, request, response, errors);
			booleano = true;
		}*/
		return booleano;
	}
	 
	 public void mensajes2(String msg,AgregaBenForm form,
				HttpServletRequest request, HttpServletResponse response,
				ActionErrors errors){
			errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(msg));
	        saveMessages(request, errors);
		}
	
	@Override
	protected Map getKeyMethodMap() {
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.agregaBen.lista", "lista");
		map.put("cmd.agregaBen.agregar", "agregar");
		map.put("cmd.agregaBen.salvar", "salvar");
		map.put("cmd.agregaBen.regresar", "regresar");
		return map;
	}
}