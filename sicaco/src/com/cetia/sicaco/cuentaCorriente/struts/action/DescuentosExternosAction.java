/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.cuentaCorriente.struts.action;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.hibernate.Transaction;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeImpl;
import org.jmesa.limit.ExportType;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.BasicCellEditor;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.editor.NumberCellEditor;
import org.jmesa.view.html.HtmlBuilder;

import com.cetia.sicaco.cuentaCorriente.struts.form.CuentaAsociadoForm;
import com.cetia.sicaco.cuentaCorriente.struts.form.DescuentosExternosForm;
import com.cetia.sicaco.cuentaCorriente.struts.form.PrestamoForm;
import com.cetia.sicaco.hibernate.CtaAscAsociado;
import com.cetia.sicaco.hibernate.CtaAscAsociadoDAO;
import com.cetia.sicaco.hibernate.CtaCasCuentaAsociado;
import com.cetia.sicaco.hibernate.CtaCasCuentaAsociadoDAO;
import com.cetia.sicaco.hibernate.CtaDexDescuentosExternos;
import com.cetia.sicaco.hibernate.CtaDexDescuentosExternosDAO;
import com.cetia.sicaco.hibernate.SecIseInicioSesion;
import com.cetia.sicaco.hibernate.SecIseInicioSesionDAO;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;

/**
 * MyEclipse Struts Creation date: 08-16-2008
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/descuentosExternos" name="descuentosExternosForm"
 *                input="verLista" parameter="accion" scope="request"
 *                validate="true"
 * @struts.action-forward name="verLista"
 *                        path="pagina.cuentaCorriente.descuentosExternos"
 */
public class DescuentosExternosAction extends DMLAction {

	private static final String TABLA_ID = "ctaDexDescuentosExternos";
	public static final String PRE_ID = "ctaPrePrestamo.preId";
		
	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		CtaDexDescuentosExternosDAO descuentosExternosDAO = new CtaDexDescuentosExternosDAO(getSessionHibernate(request));
		CtaCasCuentaAsociadoDAO cuentaAsociadoDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
		DescuentosExternosForm externosForm = (DescuentosExternosForm) form;
		CtaCasCuentaAsociado casCuenta = cuentaAsociadoDAO.findByPreId(externosForm.getPreId());
		externosForm.setPerId(casCuenta.getCtaAscAsociado().getSecPerPersona().getPerId());
	//	request.setAttribute("ascId",externosForm.getAscId());
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(descuentosExternosDAO.findByProperty(PRE_ID, externosForm.getPreId()));
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
        	//---- exporta la tabla
        //    export(tableFacade);
            return null; 
        } else {
        	String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
		request.setAttribute("prestamo", casCuenta.getCtaPrePrestamo());
		request.setAttribute("asociado", casCuenta.getCtaAscAsociado());
		request.setAttribute("form", form);
		request.setAttribute(Constantes.ACCION_KEY, "/descuentosExternos");
		return mapping.findForward("lista");
	}

	private String html(final TableFacade tableFacade, final HttpServletRequest request) {
		tableFacade.setColumnProperties("dexNombreDescuento","dexMonto" );
		Table table = tableFacade.getTable();
		// ---- Titulo de la tabla
		table.setCaptionKey("tbl.cuentaCorriente.descuentosExternos.caption");

		Row row = table.getRow();
		Column nombreColumna = row.getColumn("dexNombreDescuento");
		nombreColumna.setTitleKey("tbl.cuentaCorriente.descuentosExternos.dexNombreDescuento");

		nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtaDexDescuentosExternos descuento = (CtaDexDescuentosExternos) item;
				HtmlBuilder html = new HtmlBuilder();
				
				// ---- Generar link para entrar a edicion
				String link = tableFacade.getWebContext().getContextPath();
				link += "/cuentaCorriente/descuentosExternos.do?dexId="
						+ descuento.getDexId()+"&preId="+descuento.getCtaPrePrestamo().getPreId()+ "&accion=cargarDatos&mdf=true";
				html.a().href().quote().append(link).quote().close();
				html.append(value);
				html.aEnd();
				return html.toString();
			}
		});

		nombreColumna = row.getColumn("dexMonto");
		nombreColumna.getCellRenderer().setCellEditor(new NumberCellEditor("'$'#,###,###.00"));
		nombreColumna.setTitleKey("tbl.cuentaCorriente.descuentosExternos.dexMonto");
		
		return tableFacade.render();
	}
	
	public ActionForward guardar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String listaResponse = "";
		String listaErrores ="";
		ArrayList<String> errors = new ArrayList<String>();
		DescuentosExternosForm dexForm = (DescuentosExternosForm) form;
		HashMap<Long, CtaDexDescuentosExternos> mapa = (HashMap<Long, CtaDexDescuentosExternos>)request.getSession().getAttribute("listaDescuentos");
		errors = validarSolicitudDex(dexForm, errors,request);
		if(!errors.isEmpty()){
			listaErrores=construirListaErrores(errors);
		}else{
			 dexForm .getDescuentosExternosH().setCtaLprLineaPrestamo(null);
			 mapa.put(System.currentTimeMillis(),dexForm.getDescuentosExternosH());
			 request.getSession().setAttribute("listaDescuentos", mapa);
		}
		listaResponse =construirListaDescuentos(mapa,request);
		try {
			response.getWriter().write(listaErrores+listaResponse);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	}
	
	private String construirListaDescuentos(HashMap<Long, CtaDexDescuentosExternos> mapa,HttpServletRequest request){
		String html = "<table class=\"tableone\" summary=\"\"><caption>"
				+ getResources(request).getMessage("lbl.dexTbl.titulo")
				+ "</caption>";
		html = html
				+ "<thead><tr><th class=\"th1\" scope=\"col\">&nbsp;</th><th class=\"th1\" scope=\"col\">"
				+ getResources(request).getMessage("lbl.descuentosExternos.dexNombreDescuento")
				+ "</th><th class=\"th1\" scope=\"col\">"
				+ getResources(request).getMessage("lbl.descuentosExternos.dexMonto")
				+ "</th></tr></thead><tbody><tr><td colspan=\"5\"><div class=\"innerb\"><table class=\"tabletwo\">";
		long i;
		Iterator<Long> iterator = mapa.keySet().iterator();

		while (iterator.hasNext()) {
			i = iterator.next().longValue();
			CtaDexDescuentosExternos dex = mapa.get(i);
			html = html
					+ "<tr><th class=\"td1\" scope=\"row\"><input type=\"checkbox\" name=\"posicionDex\" class=\"posicionDex\" value=\""
					+ i + "\"/></th>" + "<td class=\"td1\">";
						html = html +  dex.getDexNombreDescuento() +"</td><td class=\"td1\">"
						+ dex.getDexMonto()+ "</td></tr>";
		}
		html = html + "</table></div></td></tr></tbody></table>";
		return html;
	}
	
	private ArrayList<String> validarSolicitudDex(DescuentosExternosForm form,ArrayList<String> errors , HttpServletRequest request){
		if(form.getDexNombreDescuento().trim().equals("") || form.getDexNombreDescuento() == null){
			errors.add(getResources(request).getMessage("errors.dex.nombreDescuentoRequired"));
		}
		if(form.getDexMonto() <= 0.0){
			errors.add(getResources(request).getMessage("error.dex,valorInvalido"));
		}
		return errors;
	}
	
	public ActionForward modificar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		CtaDexDescuentosExternosDAO descuentosExternosDAO = new CtaDexDescuentosExternosDAO(getSessionHibernate(request));
		DescuentosExternosForm descuentosExternosForm = (DescuentosExternosForm) form;
		Transaction tx =descuentosExternosDAO.getSession().beginTransaction();
		ActionErrors errors = new ActionErrors();
		if(descuentosExternosForm.getDexMonto() <= 0){
			errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("error.dex,valorInvalido"));
		}
		if(!errors.isEmpty()){
			saveMessages(request, errors);
		} else {
				try{
					descuentosExternosForm.getDescuentosExternosH().setCtaLprLineaPrestamo(null);
					descuentosExternosForm.getDescuentosExternosH().getCtaPrePrestamo().setPreId(descuentosExternosForm.getPreId());
					descuentosExternosDAO.merge(descuentosExternosForm.getDescuentosExternosH());
					tx.commit();
					descuentosExternosForm.setMdf(false);
					descuentosExternosForm.setDescuentosExternosH(new CtaDexDescuentosExternos());
				}catch (Exception e) {
					tx.rollback();
					e.printStackTrace();
				}finally{
					descuentosExternosDAO.getSession().flush();
					descuentosExternosDAO.getSession().clear();
					
				}
		}
		return lista(mapping, descuentosExternosForm, request, response);
	}
	
	public ActionForward eliminar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		DescuentosExternosForm dexForm = (DescuentosExternosForm) form;
		HashMap<Long, CtaDexDescuentosExternos> mapa = (HashMap<Long, CtaDexDescuentosExternos>)request.getSession().getAttribute("listaDescuentos");
		if (dexForm.getPosicionDex() != null) {
			int size = dexForm.getPosicionDex().length;
			int i = 0;
			while (i < size) {
				mapa.remove(dexForm.getPosicionDex()[i]);
				i++;
			}
		}
		try {
			request.getSession().setAttribute("listaDescuentos", mapa);
			response.getWriter().write(construirListaDescuentos(mapa, request));
			response.getWriter().flush();
			response.getWriter().close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	/*	CtaDexDescuentosExternosDAO descuentosExternosDAO = new CtaDexDescuentosExternosDAO();
		DescuentosExternosForm descuentosExternosForm = (DescuentosExternosForm) form;
		Transaction tx =descuentosExternosDAO.getSession().beginTransaction();
		try{
			descuentosExternosDAO.delete(descuentosExternosDAO.findById(descuentosExternosForm.getDescuentosExternosH().getDexId()));
			tx.commit();
		}catch (Exception e) {
			tx.rollback();
			e.printStackTrace();
		}finally{
			descuentosExternosDAO.getSession().flush();
			descuentosExternosDAO.getSession().clear();
			
		}
		descuentosExternosForm.setDescuentosExternosH(new CtaDexDescuentosExternos());
		return lista(mapping, descuentosExternosForm, request, response);*/
	}
	
	public ActionForward cargarDatos(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {		
		CtaDexDescuentosExternosDAO descuentosExternosDAO = new CtaDexDescuentosExternosDAO(getSessionHibernate(request));
		DescuentosExternosForm descuentosExternosForm = (DescuentosExternosForm) form;
		descuentosExternosForm.setDescuentosExternosH(descuentosExternosDAO.findById(descuentosExternosForm.getDexId()));
		return lista(mapping, descuentosExternosForm, request, response);
	}

	public ActionForward redirectInvalidData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		ActionErrors errors = (ActionErrors)request.getSession().getAttribute(Constantes.ERRORS);
		saveMessages(request, errors);
		return lista(mapping, form, request, response);
	}
	
	public ActionForward finalizar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		DescuentosExternosForm descuentosExternosForm = (DescuentosExternosForm) form;
		CuentaAsociadoForm cuentaAsociadoForm = new CuentaAsociadoForm();
		CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
		CtaAscAsociado asociado = asociadoDAO.findById(descuentosExternosForm.getAscId());
		cuentaAsociadoForm.setAscId(asociado.getAscId());
		cuentaAsociadoForm.setAscCodigo(asociado.getAscCodigo());
		cuentaAsociadoForm.setTipoCuentaMadre("Pr");
		request.setAttribute("form", cuentaAsociadoForm);
		return mapping.findForward("forwardToCuentas");
	}

	private String construirListaErrores(ArrayList<String> errors){
		String errores = "<table align=\"center\"><tr><td colspan=\"2\"><span style=\"font-size: 12px;color: red;font-style: italic;\">Se han encontrado los siguientes errores:</span></td></tr>";
		Iterator<String> it = errors.iterator();
		while(it.hasNext()){
			errores=errores+"<tr><td><span style=\"font-size: 10px;color: red;font-style: italic;\">"+ 
			it.next()
			+"</span></td></tr>";
		}
		errores=errores+"</table>";
		return errores;
	}
	
	public ActionForward regresarToPrestamo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		PrestamoForm prestamoForm = new PrestamoForm();
		SecIseInicioSesionDAO sesionDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
		DescuentosExternosForm dexForm = (DescuentosExternosForm) form;
		prestamoForm.setPreId(dexForm.getPreId());
		SecIseInicioSesion sesion = sesionDAO.findById(dexForm.getUsuarioConectado().getNombreUsuario());
		if((sesion.getSecRolRoles().getRolNombre().equals("COMITECRED") || sesion.getSecRolRoles().getRolNombre().equals("CONSADMIN")) && !sesion.getSecPerPersona().getPerId().equals(dexForm.getPerId())){
			request.setAttribute("rol", "iddkfq");
		}
		request.setAttribute("form", prestamoForm);
		return mapping.findForward("forwardToPrestamo");
	}
	
	public ActionForward cargarDescuentos(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String listaResponse = "";
		String listaErrores ="";
		DescuentosExternosForm descuentosExternosForm = (DescuentosExternosForm) form;
		HashMap<Long, CtaDexDescuentosExternos> mapa = (HashMap<Long, CtaDexDescuentosExternos>)request.getSession().getAttribute("listaDescuentos");
		/*CtaDexDescuentosExternosDAO descuentosExternosDAO = new CtaDexDescuentosExternosDAO();
		List perList = descuentosExternosDAO.findByProperty("ctaPrePrestamo.preId", descuentosExternosForm.getPreId());*/
		CtaCasCuentaAsociadoDAO casCuentaAsociadoDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
	/*	CtaCasCuentaAsociado cas = casCuentaAsociadoDAO.findByPreId(descuentosExternosForm.getPreId());
		cas = casCuentaAsociadoDAO.findMostRecent(cas.getCtaAscAsociado().getAscId());*/
		CtaCasCuentaAsociado cas = casCuentaAsociadoDAO.findMostRecentPrestamo(descuentosExternosForm.getAscId());
		if(cas!=null){
		Set perList = cas.getCtaPrePrestamo().getCtaDexDescuentosExternoses();
		for (Iterator iterator = perList.iterator(); iterator.hasNext();) {
			CtaDexDescuentosExternos descuentosExternos = (CtaDexDescuentosExternos) iterator.next();
			mapa.put(System.currentTimeMillis(), descuentosExternos);
		}}
		listaResponse = construirListaDescuentos(mapa, request);
		try {
			String var = listaResponse;
			response.getWriter().write(var);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	}
	
	public ActionForward cargarDescuentos2(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
//		try {
//			Thread.currentThread().sleep(10);
//		} catch (InterruptedException e1) {
//			e1.printStackTrace();
//		}
		String listaResponse = "";
		String listaErrores ="";
		DescuentosExternosForm descuentosExternosForm = (DescuentosExternosForm) form;
		HashMap<Long, CtaDexDescuentosExternos> mapa = (HashMap<Long, CtaDexDescuentosExternos>)request.getSession().getAttribute("listaDescuentos");
		CtaCasCuentaAsociadoDAO casCuentaAsociadoDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
		CtaCasCuentaAsociado cas = casCuentaAsociadoDAO.findByPreId(descuentosExternosForm.getPreId());
		if(cas!=null){
		Set perList = cas.getCtaPrePrestamo().getCtaDexDescuentosExternoses();
		int add = 0;
		for (Iterator iterator = perList.iterator(); iterator.hasNext();) {
			CtaDexDescuentosExternos descuentosExternos = (CtaDexDescuentosExternos) iterator.next();
			mapa.put(System.currentTimeMillis() + add, descuentosExternos);
			add++;
		}}
		listaResponse = construirListaDescuentos(mapa, request);
		try {
			String var = listaResponse;
			response.getWriter().write(var);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	}
	
	public ActionForward regresarToPrestamoList(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		return mapping.findForward("toPrestamosList");
	}
	
	protected Map<String, String> getKeyMethodMap() {
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.descuentosExternos.lista", "lista");
		map.put("cmd.descuentosExternos.guardar", "guardar");
		map.put("cmd.descuentosExternos.modificar", "modificar");
		map.put("cmd.descuentosExternos.eliminar", "eliminar");
		map.put("cmd.descuentosExternos.finalizar", "finalizar");
		map.put("cmd.descuentosExternos.redirectInvalidData","redirectInvalidData");
		map.put("cmd.descuentosExternos.cargarDatos","cargarDatos");
		map.put("cmd.dex.regresar", "regresarToPrestamo");
		map.put("cmd.descuentosExternos.cargarDescuentos", "cargarDescuentos");
		map.put("cmd.descuentosExternos.cargarDescuentos2", "cargarDescuentos2");
		map.put("cmd.descuentosExternos.regresarToPrestamoList", "regresarToPrestamoList");	
		return map;
	}

}