/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.contabilidad.struts.action;
import java.io.IOException;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.hibernate.Transaction;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeImpl;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.html.HtmlBuilder;

import com.cetia.sicaco.contabilidad.struts.form.RelacionModuloContaForm;
import com.cetia.sicaco.hibernate.ConCueCuentaDAO;
import com.cetia.sicaco.hibernate.ConMxcModuloxCuentacontable;
import com.cetia.sicaco.hibernate.ConMxcModuloxCuentacontableDAO;
import com.cetia.sicaco.hibernate.CtaEtrEmpresaTrabajo;
import com.cetia.sicaco.hibernate.CtaEtrEmpresaTrabajoDAO;
import com.cetia.sicaco.hibernate.CtaLprLineaPrestamo;
import com.cetia.sicaco.hibernate.CtaLprLineaPrestamoDAO;
import com.cetia.sicaco.hibernate.CtaTahTipoAhorro;
import com.cetia.sicaco.hibernate.CtaTahTipoAhorroDAO;
import com.cetia.sicaco.hibernate.CtaTcuTipoCuenta;
import com.cetia.sicaco.hibernate.CtaTcuTipoCuentaDAO;
import com.cetia.sicaco.hibernate.CtaTisTipoSeguro;
import com.cetia.sicaco.hibernate.CtaTisTipoSeguroDAO;
import com.cetia.sicaco.hibernate.CtaTtrTipoTransaccion;
import com.cetia.sicaco.hibernate.CtaTtrTipoTransaccionDAO;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;

/** 
 * MyEclipse Struts
 * Creation date: 11-25-2008
 * 
 * XDoclet definition:
 * @struts.action path="/relacionCuentaCorriente" name="relacionCuentaCorriente" parameter="accion" scope="request"
 * @struts.action-forward name="accion" path="pagina-lista.contabilidad.unionCuentaCorriente"
 */

/**
 * LOS PARAMETROS PARA UNION DE CUENTA CORRIENTE SE RIGEN POR EL SIGUIENTE ORDEN
 * PARAMETRO[0] = MODULO AL QUE PERTENECE (CUENTA CORRIENTE = 1)
 * PARAMETRO[1]=TIPO DE CUENTA, (APORTACION - 1 ,AHORRO - 2,PRESTAMOS - 3,SEGUROS - 4 ,BANCARIA - 5)
 * PARAMETRO[2]=IDENTIFICADOR DEL TIPO DE CUENTA QUE SE RELACIONARA(AHORRO NAVIDEÃ‘O,SEGURO DE VIDA, SI ES APORTACION -> 0)
 * PARAMETRO[3]=IDENTIFICADOR DEL TIPO DE TRANSACCION AL QUE SE ASOCIARA LA CUENTA, Y QUE SE UTILIZARA COMO CONCEPTO.
 * PARAMETRO[4]=SE UTILIZA PARA SABER SI LA CUENTA ESTA RELACIONANDO INTERESES(1)  O SI NO LO HACE(0).
 * PARAMETRO[5]=IDENTIFICADOR DE LA EMPRESA SI EN EL TIPO DE TRANSACCION SE SELECCIONA "DESCUENTO EN PLANILLA", DE LO CONTRARIO TENDRA -> -1.
 *  
 *  
 * */


public class RelacionCuentaCorrienteAction extends DMLAction {
	
	private static final String TABLA_ID="conMxcModuloxCuentaContable";
	
	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		RelacionModuloContaForm relacionForm = (RelacionModuloContaForm) form;
		ConMxcModuloxCuentacontableDAO moduloxCuentacontableDAO  =new ConMxcModuloxCuentacontableDAO(getSessionHibernate(request));
		ConCueCuentaDAO cuentaDAO = new ConCueCuentaDAO(getSessionHibernate(request));
 		CtaTtrTipoTransaccionDAO tipoTransaccionDAO = new CtaTtrTipoTransaccionDAO(getSessionHibernate(request));
 		
 		CtaEtrEmpresaTrabajoDAO empresaTrabajoDAO = new CtaEtrEmpresaTrabajoDAO(getSessionHibernate(request));
 		List empList = empresaTrabajoDAO.findAll();
 		
 		List cpaList = moduloxCuentacontableDAO.findByModulo(1);
		List ttrList = tipoTransaccionDAO.findAll();//sacamos todas las transacciones no asociadas
		List cueList = cuentaDAO.findByCuePosteable(0);
		
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(cpaList);
		//---- Genera los tipos de formas con que se podran exportar los datos
		//tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
        	//---- exporta la tabla
          //  export(tableFacade);
            return null; 
        } else {
        	String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
		relacionForm.setParametro(1,"0");
		relacionForm.setParametro(3,"0");
		relacionForm.getConCueCuenta().setCueId(-1);
		relacionForm.setCxcCargoAbono((byte)-1);
		request.setAttribute("cuentasContables", cueList);
		request.setAttribute("ttrList", ttrList);
		request.setAttribute("form", form);
		request.setAttribute("empList", empList);
		request.setAttribute(Constantes.ACCION_KEY, "/relacionCuentaCorriente");
		return mapping.findForward("lista");
	}
	
	
	private String html(final TableFacade tableFacade, final HttpServletRequest request) {
		tableFacade.setColumnProperties("cueId","cxcParametrosUnion","cxcId","cxcCargoAbono","cxaConceptoExtra");
		Table table = tableFacade.getTable();
		
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.cxc.caption");
		
		Row row = table.getRow();
		Column nombreColumna = row.getColumn("cueId");
		nombreColumna.setTitleKey("tbl.cxc.cuentaContable");
		
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				ConMxcModuloxCuentacontable cmx = (ConMxcModuloxCuentacontable) item;
				String value = null;					
				if(cmx.getConCpaConceptoPartida()!=null){
					if(cmx.getConCpaConceptoPartida().getCtaTtrTipoTransaccion()!= null){
						//concepto en base al tipo de transaccion
						String [] args = cmx.getCxcParametrosUnion().split(";");
						CtaTtrTipoTransaccionDAO tipoTransaccionDAO = new CtaTtrTipoTransaccionDAO(getSessionHibernate(request));
						value = tipoTransaccionDAO.findById(Integer.parseInt(args[3])).getTtrNombre();
					}else{
						value = cmx.getConCpaConceptoPartida().getCpaConcepto();
					}
				}else   value = cmx.getCxaConceptoExtra();
				return cmx.getConCueCuenta().getCueCodigoCuenta() + " / " + value;
			}
		});
		
		nombreColumna = row.getColumn("cxcParametrosUnion");
		nombreColumna.setTitleKey("tbl.cxc.tipoCuentaCorriente");
		
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){
			public Object getValue(Object item, String property, int rowcount) {
				String value = null;
			ConMxcModuloxCuentacontable modulo = (ConMxcModuloxCuentacontable) item;
			CtaEtrEmpresaTrabajoDAO empresaTrabajoDAO = new CtaEtrEmpresaTrabajoDAO(getSessionHibernate(request));
			String [] args = modulo.getCxcParametrosUnion().split(";");
			if(Integer.parseInt(args[1]) == 1)//aportacion 
				value = "Aportacion";
			if(Integer.parseInt(args[1]) == 2){//ahorro
				CtaTahTipoAhorroDAO tipoAhorroDAO = new CtaTahTipoAhorroDAO(getSessionHibernate(request));
				value = tipoAhorroDAO.findById(Integer.parseInt(args[2])).getTahNombre();
			}
			if(Integer.parseInt(args[1]) == 3){//prestamo
				CtaLprLineaPrestamoDAO lineaPrestamoDAO = new CtaLprLineaPrestamoDAO(getSessionHibernate(request));
				value = lineaPrestamoDAO.findById(Integer.parseInt(args[2])).getLprNombre();
			}
			if(Integer.parseInt(args[1]) == 4){//seguro
				CtaTisTipoSeguroDAO tipoSeguroDAO = new CtaTisTipoSeguroDAO(getSessionHibernate(request));
				value = tipoSeguroDAO.findById(Integer.parseInt(args[2])).getTisNombre();
			}
			value += " / " + (args[4].equals("1")?"Si / ":"No / ");
			if(!args[5].equals("-1")){//si han seleccionado empresa
				CtaEtrEmpresaTrabajo empresaTrabajo = empresaTrabajoDAO.findById(new Integer(args[5]));
				if(empresaTrabajo!=null){
					value += empresaTrabajo.getEtrNombre();
				}else{
				    value += "- No Aplica -";
				}
			}else{
				value += "- No Aplica -";
			}
			return value;
			}
		});	
		
		
		nombreColumna = row.getColumn("cxcId");
		nombreColumna.setTitleKey("tbl.cxc.tipoTransaccion");
		
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){
			public Object getValue(Object item, String property, int rowcount) {
				ConMxcModuloxCuentacontable modulo = (ConMxcModuloxCuentacontable) item;
				String [] args = modulo.getCxcParametrosUnion().split(";");
			String value = null;
			CtaTtrTipoTransaccionDAO tipoTransaccionDAO = new CtaTtrTipoTransaccionDAO(getSessionHibernate(request));
			value = tipoTransaccionDAO.findById(Integer.parseInt(args[3])).getTtrNombre();
			return value;
			}
		});
		
		nombreColumna = row.getColumn("cxcCargoAbono");
		nombreColumna.setTitleKey("tbl.cxc.cargoAbono");
		
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
			String value = null;
			ConMxcModuloxCuentacontable modulo = (ConMxcModuloxCuentacontable) item;
			if(modulo.getCxcCargoAbono() == 1) value = "Cargo";
			else value = "Abono";
			return value;
			}
		});
		
		nombreColumna = row.getColumn("cxaConceptoExtra");
		nombreColumna.setTitleKey("tbl.cxc.opcion");
		
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				HtmlBuilder html = new HtmlBuilder();
				ConMxcModuloxCuentacontable modulo = (ConMxcModuloxCuentacontable) item;
				//---- Generar link para entrar a edicion
				/*String link = tableFacade.getWebContext().getContextPath();
				link += "/contabilidad/relacionCuentaCorriente.do?cxcId="+modulo.getCxcId()+"&accion=eliminar";
				html.a().href().quote().append(link).quote().append("class=\"linkEliminar\"").title("Eliminar").close();
				//html.append("Eliminar");
				html.aEnd();				
				return html.toString();	*/
				String eliminar = "Eliminar";
				html.a().onclick("handlerDeleteButton('"+ modulo.getCxcId() +"');").append("class=\"linkEliminar\"").style("cursor: pointer;").title(eliminar).id("deleteButtonId").close();
				html.aEnd();
				return html.toString();
			}
		});
		return tableFacade.render();
	}

	public ActionForward findData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		RelacionModuloContaForm moduloContaForm = (RelacionModuloContaForm) form;
		List lista = null;
		String listaResponse = "";
		int tipo  = 0;
		int val = Integer.parseInt(moduloContaForm.getParametro(1));
		switch (val) {
		case 2: CtaTahTipoAhorroDAO tipoAhorroDAO = new CtaTahTipoAhorroDAO(getSessionHibernate(request));
					lista = tipoAhorroDAO.findTiposVigentes(new Date());
					tipo = 2;
					break;
		case 3:CtaLprLineaPrestamoDAO lineaPrestamoDAO = new CtaLprLineaPrestamoDAO(getSessionHibernate(request));
					lista = lineaPrestamoDAO.findAll();
					tipo = 3;
					break;
		case 4: CtaTisTipoSeguroDAO tipoSeguroDAO = new CtaTisTipoSeguroDAO(getSessionHibernate(request));
					lista = tipoSeguroDAO.findAll();
					tipo = 4;
					break;
		case 5: CtaTcuTipoCuentaDAO tipoCuentaDAO = new CtaTcuTipoCuentaDAO(getSessionHibernate(request));
					lista = tipoCuentaDAO.findAll();
					tipo=5;
		default:
			break;
		}
		try {
			 	listaResponse= construirLista(lista,request,tipo);
				response.getWriter().write(listaResponse);
				response.getWriter().flush();
				response.getWriter().close();
			} catch (RuntimeException e) {
				log.error("Error runtime", e);
			} catch (IOException e) {
				log.error(e);
			}
	return null;
	}
	
	private String construirLista(List lista,HttpServletRequest request,int tipo){
		String html = "";
		if(lista != null){
		switch (tipo) {
		case 2: 		html = "<table align=\"center\"><tr><td><label class=\"obligatorio\">"+getResources(request).getMessage("lbl.mxcc.tipoAhorro")
							+"</label></td><td><select class=\"obligatorio\" name=\"parametro[2]\">";
							Iterator<CtaTahTipoAhorro> it = lista.iterator();
							while(it.hasNext()){
								CtaTahTipoAhorro tipoAhorro = (CtaTahTipoAhorro) it.next();
								html += "<option value=\""+ tipoAhorro.getTahId()+"\">"+tipoAhorro.getTahNombre()+"</option>";
							}
							html+= "</select></td></tr><tr><td><label class=\"obligatorio\">"
								+getResources(request).getMessage("lbl.mxcc.relacInte")+
							"</label</td><td><select name=\"parametro[4]\" class=\"obligatorio\"  id=\"inter\" ><option value=\"1\">Si</option><option value=\"0\" selected=\"true\">No</option></select>";
							break;
		case 3: 		html = "<table align=\"center\"><tr><td><label class=\"obligatorio\">"+getResources(request).getMessage("lbl.mxcc.lineaPrestamo")
								+"</label></td><td><select class=\"obligatorio\"  name=\"parametro[2]\">";
								Iterator<CtaLprLineaPrestamo> it2 = lista.iterator();
								while(it2.hasNext()){
										CtaLprLineaPrestamo lineaPrestamo = (CtaLprLineaPrestamo) it2.next();
										html += "<option value=\""+ lineaPrestamo.getLprId()+"\">"+lineaPrestamo.getLprNombre()+"</option>";
								}
								html+= "</select></td></tr>"
								+"<tr><td><label class=\"obligatorio\">"
									+getResources(request).getMessage("lbl.mxcc.relacInte")+
								"</label</td><td><select name=\"parametro[4]\" class=\"obligatorio\"  id=\"inter\" ><option value=\"1\">Si</option><option value=\"0\" selected=\"true\">No</option></select>";
								break;
		case 4: 		html = "<table align=\"center\"><tr><td><label class=\"obligatorio\">"+getResources(request).getMessage("lbl.mxcc.tipoSeguro")
		+"</label></td><td><select class=\"obligatorio\" name=\"parametro[2]\">";
		Iterator<CtaTisTipoSeguro> it3 = lista.iterator();
		while(it3.hasNext()){
				CtaTisTipoSeguro tis = (CtaTisTipoSeguro) it3.next();
				html += "<option value=\""+ tis.getTisId()+"\">"+tis.getTisNombre()+"</option>";
		}
		html+="</select>";
		break;
		case 5: 		html = "<table align=\"center\"><tr><td><label class=\"obligatorio\">"+getResources(request).getMessage("lbl.mxcc.tipoBancaria")
		+"</label></td><td><select class=\"obligatorio\" name=\"parametro[2]\">";
		Iterator<CtaTcuTipoCuenta> it4 = lista.iterator();
		while(it4.hasNext()){
				CtaTcuTipoCuenta tcu = (CtaTcuTipoCuenta) it4.next();
				html += "<option value=\""+ tcu.getTcuId()+">"+tcu.getTcuNombre()+"</option>";
		}
		html+="</select>";
		break;
		default:
			break;
		}
		html+="</td></tr></table>";
		}
		return html;
	}
	
	public ActionForward guardar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ActionErrors errors = new ActionErrors();
		ConMxcModuloxCuentacontableDAO mxcModuloxCuentacontableDAO = new ConMxcModuloxCuentacontableDAO(getSessionHibernate(request));
		RelacionModuloContaForm relacionForm = (RelacionModuloContaForm) form;
		errors = validarGuardado(relacionForm);
		Transaction tx = mxcModuloxCuentacontableDAO.getSession().beginTransaction();
		String parametros = "1;"+relacionForm.getParametro(1)+";"+relacionForm.getParametro(2)+";"+relacionForm.getParametro(3)+";"+relacionForm.getParametro(4)+";"+relacionForm.getParametro(5);
		if(!mxcModuloxCuentacontableDAO.findByCuentaParametros(relacionForm.getConCueCuenta().getCueId(), parametros).isEmpty()){
			errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.mxcc.relacionRepetida"));
		}
		if(errors.isEmpty()){
			try{
				
			relacionForm.getModuloxCuentacontable().setCxcParametrosUnion(parametros);
			relacionForm.setCxcFechaRelacion(new Date());
			relacionForm.getModuloxCuentacontable().setConCpaConceptoPartida(null);
			//seteo de nombre de tipo de transaccion
			int idTtr = new Integer(relacionForm.getParametro(3));
			CtaTtrTipoTransaccionDAO ttrDAO = new CtaTtrTipoTransaccionDAO(getSessionHibernate(request));
			CtaTtrTipoTransaccion tipoTrans = ttrDAO.findById(idTtr);
			relacionForm.getModuloxCuentacontable().setCxaConceptoExtra(tipoTrans.getTtrNombre());
			mxcModuloxCuentacontableDAO.save(relacionForm.getModuloxCuentacontable());
			tx.commit();
		}catch (Exception e) {
			tx.rollback();
			e.printStackTrace();
		}finally{
			mxcModuloxCuentacontableDAO.getSession().flush();
			mxcModuloxCuentacontableDAO.getSession().clear();
			
			}
		}
		saveMessages(request, errors);
		return lista(mapping, form, request, response);
	}
	
	public ActionForward cancelar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		form = new RelacionModuloContaForm();
		return lista(mapping, form, request, response);
	}
	
	public ActionForward eliminar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ConMxcModuloxCuentacontableDAO mxcModuloxCuentacontableDAO = new ConMxcModuloxCuentacontableDAO(getSessionHibernate(request));
		RelacionModuloContaForm relacionForm = (RelacionModuloContaForm) form;
		Transaction tx = mxcModuloxCuentacontableDAO.getSession().beginTransaction();
		try{
			mxcModuloxCuentacontableDAO.delete(mxcModuloxCuentacontableDAO.findById(relacionForm.getCxcId()));
			tx.commit();
		}catch (Exception e) {
			tx.rollback();
			e.printStackTrace();
		}finally{
			mxcModuloxCuentacontableDAO.getSession().flush();
			mxcModuloxCuentacontableDAO.getSession().clear();
			
		}
		return lista(mapping, form, request, response);
	}
	
	private ActionErrors validarGuardado(RelacionModuloContaForm relacionForm){
		ActionErrors errors = new ActionErrors();
		if(relacionForm.getParametro(1).equals("0")){
			errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.mxcc.tipoCuentaCorrienteRequired"));
		}
		if(relacionForm.getParametro(3).equals("0")){
			errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.mxcc.tipoTransaccionRequired"));
		}
		if(relacionForm.getConCueCuenta().getCueId() == -1){
			errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.mxcc.cuentaContableRequired"));
		}
		if(relacionForm.getCxcCargoAbono() == -1){
			errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.mxcc.accionRequired"));
		}
		if( relacionForm.getParametro(2)==null || relacionForm.getParametro(2).length() == 0 ){//si es aportacion no hay interes, ni tipo de cuenta
			relacionForm.setParametro(2, "0");
			relacionForm.setParametro(4, "0");
		}
		return errors;
	}
	
	protected Map getKeyMethodMap() {
		Map<String, String> map = new HashMap<String, String>();
		map.put("cmd.mxcc.lista","lista");
		map.put("cmd.mxcc.guardar","guardar");
		map.put("cmd.mxcc.eliminar","eliminar");
		map.put("cmd.mxcc.cancelar","lista");
		map.put("cmd.mxcc.findData","findData");
		return map;
	}
}