/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.contabilidad.struts.action;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.export.JRPdfExporter;
import net.sf.jasperreports.engine.xml.JRXmlLoader;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.hibernate.Transaction;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeImpl;
import org.jmesa.limit.ExportType;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.BasicCellEditor;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.html.HtmlBuilder;
import com.cetia.sicaco.contabilidad.struts.form.PartidaContableForm;
import com.cetia.sicaco.hibernate.ConCpaConceptoPartida;
import com.cetia.sicaco.hibernate.ConCpaConceptoPartidaDAO;
import com.cetia.sicaco.hibernate.ConCueCuenta;
import com.cetia.sicaco.hibernate.ConCueCuentaDAO;
import com.cetia.sicaco.hibernate.ConDpaDetallePartida;
import com.cetia.sicaco.hibernate.ConDpaDetallePartidaDAO;
import com.cetia.sicaco.hibernate.ConPcoPartidaContable;
import com.cetia.sicaco.hibernate.ConPcoPartidaContableDAO;
import com.cetia.sicaco.hibernate.ConSacSaldosAnterioresCuenta;
import com.cetia.sicaco.hibernate.ConSacSaldosAnterioresCuentaDAO;
import com.cetia.sicaco.hibernate.ConTpaTipoPartidaDAO;
import com.cetia.sicaco.hibernate.CtaChkChequePrestamo;
import com.cetia.sicaco.hibernate.CtaChkChequePrestamoDAO;
import com.cetia.sicaco.hibernate.CtaTtrTipoTransaccionDAO;
import com.cetia.sicaco.hibernate.CtrCckControlCheques;
import com.cetia.sicaco.hibernate.CtrCckControlChequesDAO;
import com.cetia.sicaco.hibernate.CtrRckRepositorioCheques;
import com.cetia.sicaco.hibernate.CtrRckRepositorioChequesDAO;
import com.cetia.sicaco.hibernate.HibernateSessionFactory;
import com.cetia.sicaco.hibernate.PartidaContable;
import com.cetia.sicaco.hibernate.PartidaContableDAO;
import com.cetia.sicaco.hibernate.SecIseInicioSesion;
import com.cetia.sicaco.hibernate.SecIseInicioSesionDAO;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;
import com.mad.utilidades.ElapsedTime;
import com.mad.utilidades.Format;
/** 
 * MyEclipse Struts
 * Creation date: 11-20-2008
 * 
 * XDoclet definition:
 * @param <E>
 * @struts.action path="/partidaContable" name="partidaContableForm" parameter="accion" scope="request" validate="true"
 * @struts.action-forward name="lista" path="pagina-lista.contabilidad.partidaCotableDML"
 * @struts.action-forward name="redirectInvalidData" path="/invalidPartidaContable.do?accion=redirectInvalidData"
 */
public class PartidaContableAction<E> extends DMLAction {

	private String rutaReporte = "/listaReportes/partidaContable/";
	private String reporte = "partida_contable";
	
	public  String TABLA_DET_PARTIDA = "conDpaDetallePartida";
	private String LIST_TIPO_PARTIDA="conTpaTipoPartida";
	private String LIST_CONCEP_PARTIDA = "conCpaConceptoPartida";
	private String LIST_DETALLE_PARTIDA = "conCpaDetallePartida";
	private String LIST_CUENTAS_CONTABLES = "lstConCueCuenta";
	private String LIST_BANCOS = "ctrBanBancoList";
	
	@SuppressWarnings("unchecked")
	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		PartidaContableForm partidaContableForm = (PartidaContableForm) form;
		
		ConPcoPartidaContableDAO partidaContableDAO = new ConPcoPartidaContableDAO(getSessionHibernate(request));
		ConTpaTipoPartidaDAO conTpaTipoPartidaDAO = new ConTpaTipoPartidaDAO(getSessionHibernate(request));
		ConCpaConceptoPartidaDAO conceptoPartidaDAO = new ConCpaConceptoPartidaDAO(getSessionHibernate(request));
		ConCueCuentaDAO conCueCuentaDAO = new ConCueCuentaDAO(getSessionHibernate(request));
		
		
		Integer idForm = new Integer(0);
		idForm = (Integer)request.getSession().getAttribute("formDeRedireccion");
		if(idForm==0){//nueva partida idForm = viene de busqueda
			SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
			SimpleDateFormat sdf2 = new SimpleDateFormat("yyyy-MM-dd");
			Date fecha = new Date();
			if(partidaContableForm.getFecha()==null){
				partidaContableForm.setFecha(partidaContableForm.getPcoFechaIngresoPartida());
			}
			if(partidaContableForm.getFecha()!= null){
				try {
					fecha=sdf.parse(partidaContableForm.getFecha());
				} catch (ParseException e) {
					fecha = new Date();
				}
			}
			String fechaActual = sdf2.format(fecha);
			int codPaCo = partidaContableDAO.getLastComprobante(new Integer(fechaActual.substring(0,4)),new Integer(fechaActual.substring(5,7)));
			partidaContableForm.setPcoComprobantePartida(codPaCo + 1);
			partidaContableForm.setPcoEstado("P");
			if(partidaContableForm.getPcoFechaIngresoPartida()== null || partidaContableForm.getPcoFechaIngresoPartida().trim().equals(""))
				partidaContableForm.getConPcoPartidaContableH().setPcoFechaIngresoPartida(fecha);
			request.setAttribute("nuevoComprobante", 1);
			partidaContableForm.setMdf(false);
			
		}else{//idForm = viene de modificacion de la misma partida
			request.setAttribute("nuevoComprobante", 0);
			partidaContableForm.setMdf(true);
			
		}
		
		//detalle partida
		List<ConDpaDetallePartida> listaDetallePartida = new ArrayList<ConDpaDetallePartida>();
		List<ConDpaDetallePartida> listaDetParTemp = new ArrayList<ConDpaDetallePartida>();
		listaDetParTemp = (ArrayList<ConDpaDetallePartida>) request.getSession().getAttribute("listaDetallePartidas");
		if(listaDetParTemp!=null) listaDetallePartida = listaDetParTemp;
		
		//calculando diferencias entre debe y haber
		if(!listaDetallePartida.isEmpty()){
			Double debeT = new Double(0);
			Double haberT = new Double(0);
			debeT = calculandoDebeHaber(listaDetallePartida, 0);
			haberT = calculandoDebeHaber(listaDetallePartida, 1);
			partidaContableForm.setDpaTotalDebe(debeT);
			partidaContableForm.setDpaTotalHaber(haberT);
			partidaContableForm.setDpaDiferenciaDetalle(((debeT-haberT)<0)?(haberT-debeT):(debeT-haberT));
		}
		//Asignamos numero de cheque
		Object ob = request.getSession().getAttribute("numeroCheque");
		partidaContableForm.setChkCorrelativoCheque(
				new Integer((ob.equals(null))?"0":ob.toString()));
		
		//listas form
		List lstTpaTipoPartida = conTpaTipoPartidaDAO.findAll();
		List lstCpaConceptoPartida = conceptoPartidaDAO.findByCpaDescripcionConcepto(0);
		List lstCpaConceptoDetallePartida = conceptoPartidaDAO.findByCpaDescripcionConcepto(1);
		List lstConCueCuenta = conCueCuentaDAO.findByCuePosteable(0);
		
		//lista de repositorios para cheques
		String usuarioConectado = partidaContableForm.getUsuarioConectado().getNombreUsuario();
		SecIseInicioSesionDAO secIseInicioSesionDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
		SecIseInicioSesion secIseInicioSesion = secIseInicioSesionDAO.findById(usuarioConectado);
		Integer sucId = secIseInicioSesion.getSecPerPersona().getSecSucSucursal().getSucId();
		CtrRckRepositorioChequesDAO repositorioDAO = new CtrRckRepositorioChequesDAO(getSessionHibernate(request));
		List lstBancos = repositorioDAO.findRepositorioWithBanco(sucId);
		
		//seteamos detalle de partida en table facade
		TableFacade tableFacade = new TableFacadeImpl(TABLA_DET_PARTIDA, request);
		tableFacade.setItems(listaDetallePartida);
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        
		
		//----- Variables de configuracion
		request.getSession().setAttribute("listaDetallePartidas", listaDetallePartida);
		request.setAttribute("diferenciaDetalle",partidaContableForm.getDpaDiferenciaDetalle());
		request.setAttribute(LIST_TIPO_PARTIDA, lstTpaTipoPartida);
		request.setAttribute(LIST_CONCEP_PARTIDA, lstCpaConceptoPartida);
		request.setAttribute(LIST_DETALLE_PARTIDA, lstCpaConceptoDetallePartida);
		request.setAttribute(LIST_CUENTAS_CONTABLES,lstConCueCuenta);
		request.setAttribute(LIST_BANCOS,lstBancos);
		request.getSession().setAttribute("form", partidaContableForm);
		request.setAttribute("form", partidaContableForm);
		request.setAttribute(Constantes.ACCION_KEY, "/partidaContable");
		return mapping.findForward("lista");
	}
	
	public Double calculandoDebeHaber(List lista, int opcion){
		Double total = new Double(0);
		Iterator<ConDpaDetallePartida> iterador = (Iterator<ConDpaDetallePartida>) lista.listIterator(0);
		while(iterador.hasNext()){
			ConDpaDetallePartida detalleP = iterador.next();
			total += (opcion==0)?detalleP.getDpaValorDebe():detalleP.getDpaValorHaber();
		}
		return total;
	}
	
	
	//---- metodo que genera el html de la tabla del jmesa
	private String html(final TableFacade tableFacade, final HttpServletRequest request) {
		tableFacade.setColumnProperties("conCueCuenta.cueCodigoCuenta", "conCueCuenta.cueNombre",
				"pcoEstado","dpaValorDebe","dpaValorHaber");
		Table table = tableFacade.getTable();
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.dpa.caption");
				
		Row row = table.getRow();
		List columnms = row.getColumns();
		
		Column nombreColumna = row.getColumn("conCueCuenta.cueCodigoCuenta");
		nombreColumna.setTitleKey("tbl.dpa.cueCodigoCuenta");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){
			public Object getValue(Object item, String property, int rowcount) {
				ConDpaDetallePartida dpaDetallePartida = (ConDpaDetallePartida)item;
				int fila = rowcount; fila--;
				CtaChkChequePrestamo cheque = dpaDetallePartida.getConPcoPartidaContable().getCtaChkChequePrestamo();
				String codCue = dpaDetallePartida.getConCueCuenta().getCueCodigoCuenta();
				HtmlBuilder html = new HtmlBuilder();
				String link = tableFacade.getWebContext().getContextPath();
				link += "/contabilidad/partidaContable.do?dpaId="+dpaDetallePartida.getDpaId()+
						"&conCueCuenta.cueCodigoCuenta="+codCue+"&numeroRegistro="+fila+
						"&pcoId="+dpaDetallePartida.getConPcoPartidaContable().getPcoId()+"&accion=cargarDatosDetalle";
				if(cheque!=null && cheque.getChkFecha()!=null){
					SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
					link = link +"&chkEmitidoA="
						+cheque.getChkEmitidoA()+"&chkFecha="+sdf.format(cheque.getChkFecha())+"&chkLugar="+cheque.getChkLugar()+"&chkMontoEmitido="+cheque.getChkMontoEmitido()
						+"&chkCorrelativoCheque="+cheque.getChkCorrelativoCheque();
						/*if(cheque.getCtrBanBanco()==null) link += "-1";
						else{
							link += cheque.getCtrBanBanco().getBanId();
						}*/
				}
				html.a().href().quote().append(link).quote().close();
				html.append(codCue);
				html.aEnd();				
				return html.toString();		
			}
			
		});
		
		nombreColumna = row.getColumn("conCueCuenta.cueNombre");
		nombreColumna.setTitleKey("tbl.dpa.cueNombre");
		
		nombreColumna = row.getColumn("pcoEstado");
		nombreColumna.setTitleKey("tbl.dpa.cpaConcepto");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				ConCpaConceptoPartida conceptoPartida = null;
				ConDpaDetallePartida dpaDetallePartida = (ConDpaDetallePartida)item;
				List listaDetalles = (List) request.getSession().getAttribute("listaDetallePartidas");
				Iterator<ConDpaDetallePartida> iterador = listaDetalles.listIterator();
				while(iterador.hasNext()){
					ConDpaDetallePartida detallePartidaTemp = iterador.next();
					if(dpaDetallePartida.getConCueCuenta().getCueCodigoCuenta() == detallePartidaTemp.getConCueCuenta().getCueCodigoCuenta()){
						if(dpaDetallePartida.getDpaOtroConcepto()!=null && detallePartidaTemp.getDpaOtroConcepto()!=null){
							if(dpaDetallePartida.getDpaOtroConcepto().equals(detallePartidaTemp.getDpaOtroConcepto())){
								dpaDetallePartida = detallePartidaTemp;
							}
						}														
					}
				}
				ConCpaConceptoPartidaDAO conceptoPartidaDAO = new ConCpaConceptoPartidaDAO(getSessionHibernate(request));
				if(dpaDetallePartida.getDpaOtroConcepto()!=null) {
					value = dpaDetallePartida.getDpaOtroConcepto();
				}else{
					conceptoPartida = conceptoPartidaDAO.findById(dpaDetallePartida.getConCpaConceptoPartida().getCpaId());
				}
				if(conceptoPartida!=null){
					if(conceptoPartida.getCtaTtrTipoTransaccion()!=null){
						CtaTtrTipoTransaccionDAO ctaTtrTipoTransaccionDAO = new CtaTtrTipoTransaccionDAO(getSessionHibernate(request));
						value = ctaTtrTipoTransaccionDAO.findById(conceptoPartida.getCtaTtrTipoTransaccion().getTtrId()).getTtrNombre() + 
								"  " + value;
					}else value = conceptoPartida.getCpaConcepto() + " " + value;
				}
				return value;		
			}
			
		});
		
		nombreColumna = row.getColumn("dpaValorDebe");
		nombreColumna.setTitleKey("tbl.dpa.dpaValorDebe");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				ConDpaDetallePartida dpaDetallePartida = (ConDpaDetallePartida)item;
				ConDpaDetallePartidaDAO conDpaDetallePartidaDAO = new ConDpaDetallePartidaDAO(getSessionHibernate(request));
				if(dpaDetallePartida.getDpaValorDebe()==0){
							value = "$       -";
				}else		value = Format.formatDinero(dpaDetallePartida.getDpaValorDebe());
				return value;		
			}
			
		});
		
		nombreColumna = row.getColumn("dpaValorHaber");
		nombreColumna.setTitleKey("tbl.dpa.dpaValorHaber");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				ConDpaDetallePartida dpaDetallePartida = (ConDpaDetallePartida)item;
				ConDpaDetallePartidaDAO conDpaDetallePartidaDAO = new ConDpaDetallePartidaDAO(getSessionHibernate(request));
				//dpaDetallePartida = conDpaDetallePartidaDAO.findById(dpaDetallePartida.getDpaId());
				if(dpaDetallePartida.getDpaValorHaber()==0){
							value = "$       -";
				}else		value = Format.formatDinero(dpaDetallePartida.getDpaValorHaber());
				return value;		
			}
			
		});
		
		return tableFacade.render();
	}
	
	//---- metodo que genera los exports, el formato que tendran
	 private void export(final TableFacade tableFacade) {
		 tableFacade.setColumnProperties("conCueCuenta.cueCodigoCuenta", "conCueCuenta.cueNombre",
					"pcoEstado","dpaValorDebe","dpaValorHaber");
		 Table table = tableFacade.getTable();
		 //---- Titulo de la tabla
		table.setCaptionKey("tbl.dpa.caption");
		
		Row row = table.getRow();
		Column nombreColumna =  row.getColumn("conCueCuenta.cueCodigoCuenta");
		nombreColumna.setTitleKey("tbl.dpa.cueCodigoCuenta");
		
		nombreColumna = row.getColumn("conCueCuenta.cueNombre");
		nombreColumna.setTitleKey("tbl.dpa.cueNombre");
		
		nombreColumna = row.getColumn("pcoEstado");
		nombreColumna.setTitleKey("tbl.dpa.cpaConcepto");
		
		nombreColumna = row.getColumn("dpaValorDebe");
		nombreColumna.setTitleKey("tbl.dpa.dpaValorDebe");
		
		nombreColumna = row.getColumn("dpaValorHaber");
		nombreColumna.setTitleKey("tbl.dpa.dpaValorHaber");
		
		tableFacade.render();
	}
	
	 
	 public ActionErrors validacionPartidaA(ActionForm form,HttpServletRequest request){
		ActionErrors errors = new ActionErrors();
        PartidaContableForm partidaContableForm = (PartidaContableForm)form;
        ConPcoPartidaContableDAO partidaContableDAO = new ConPcoPartidaContableDAO(getSessionHibernate(request));
        
		//verificamos que la lista del detalle no sea nula
		 List listaDetallePartida = (List) request.getSession().getAttribute("listaDetallePartidas");
		 if(listaDetallePartida.isEmpty()){ 
			 errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.partidaConDetalleVacio"));
		 }else{
			Double debeT = new Double(0);
			Double haberT = new Double(0);
			debeT = calculandoDebeHaber(listaDetallePartida, 0);
			haberT = calculandoDebeHaber(listaDetallePartida, 1);
			partidaContableForm.setDpaTotalDebe(debeT);
			partidaContableForm.setDpaTotalHaber(haberT);
			partidaContableForm.setDpaDiferenciaDetalle(((debeT-haberT)<0)?(haberT-debeT):(debeT-haberT));
		 }
		 
		 //partida descuadrada
		
		 //verificacion de datos del concepto de partida
		 ConCpaConceptoPartidaDAO conceptoPartidaDAO = new ConCpaConceptoPartidaDAO(getSessionHibernate(request));
		 if(partidaContableForm.getCpaID() ==-1/*partidaContableForm.getConCpaConceptoPartida().getCpaId() == -1*/){
			 if(partidaContableForm.getPcoOtroConcepto()==null || partidaContableForm.getPcoOtroConcepto()=="")
				 errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.otroConceptoNuloInvalido"));
			 partidaContableForm.setConCpaConceptoPartida(null);
			 partidaContableForm.setConCpaConceptoPartidaD(null);
		 }
			
		 //verificamos datos del cheque
		
		//validando que fecha no sea mayor a actual
		GregorianCalendar greCalendarI = new GregorianCalendar();
		GregorianCalendar greCalendarF = new GregorianCalendar();
		greCalendarI.setGregorianChange(new Date());
		ElapsedTime elapsed = new ElapsedTime();
		greCalendarF.setGregorianChange(partidaContableForm.getConPcoPartidaContableH().getPcoFechaIngresoPartida());
		if(elapsed.fechaMenor(new Date(), partidaContableForm.getConPcoPartidaContableH().getPcoFechaIngresoPartida())){
			errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.dpaFechaSuperiorAActualInvalida"));
		}
		
		//verificamos que la fecha ingresada no sea menor que las fechas que tengas las ultimas partidas registradas
		Date fechaLastPartida = new Date();
		fechaLastPartida = partidaContableDAO.getLastFechaPartidaPorEstado("F");
		if(fechaLastPartida!=null){//verificar que la fecha de la ultima partida cerrada sea menor que la nueva fecha
			greCalendarI.setGregorianChange(fechaLastPartida);
			
			greCalendarF.set(Calendar.MILLISECOND, 0);
			greCalendarF.set(Calendar.SECOND, 0);
			greCalendarF.set(Calendar.MINUTE, 0);
			greCalendarF.set(Calendar.HOUR_OF_DAY, 0);
			
			greCalendarI.set(Calendar.MILLISECOND, 0);
			greCalendarI.set(Calendar.SECOND, 0);
			greCalendarI.set(Calendar.MINUTE, 0);
			greCalendarI.set(Calendar.HOUR_OF_DAY, 0);
			if(greCalendarF.before(greCalendarI)){
				errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.dpaFechaInferiorInvalida"));
			}
		}
		
		//verificamos que el mes no haya sido cerrado

		Integer totalCerradas = partidaContableDAO.getTotalCerradasMes(new Date());
		if(totalCerradas!=0) errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.partidaMesCerrado"));
		
		return errors;
	}
	
	
	
	public ActionErrors validacionPartida(ActionForm form,HttpServletRequest request){
		ActionErrors errors = new ActionErrors();
        PartidaContableForm partidaContableForm = (PartidaContableForm)form;
        ConPcoPartidaContableDAO partidaContableDAO = new ConPcoPartidaContableDAO(getSessionHibernate(request));
        
		//verificamos que la lista del detalle no sea nula
		 List listaDetallePartida = (List) request.getSession().getAttribute("listaDetallePartidas");
		 if(listaDetallePartida.isEmpty()){ 
			 errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.partidaConDetalleVacio"));
		 }else{
			Double debeT = new Double(0);
			Double haberT = new Double(0);
			debeT = calculandoDebeHaber(listaDetallePartida, 0);
			haberT = calculandoDebeHaber(listaDetallePartida, 1);
			partidaContableForm.setDpaTotalDebe(debeT);
			partidaContableForm.setDpaTotalHaber(haberT);
			partidaContableForm.setDpaDiferenciaDetalle(((debeT-haberT)<0)?(haberT-debeT):(debeT-haberT));
		 }
		 
		 //partida descuadrada
		 if(partidaContableForm.getDpaDiferenciaDetalle()!=0) errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.partidaNoCuadrada"));
		
		 //verificacion de datos del concepto de partida
		 ConCpaConceptoPartidaDAO conceptoPartidaDAO = new ConCpaConceptoPartidaDAO(getSessionHibernate(request));
		 if(partidaContableForm.getCpaID() ==-1/*partidaContableForm.getConCpaConceptoPartida().getCpaId() == -1*/){
			 if(partidaContableForm.getPcoOtroConcepto()==null || partidaContableForm.getPcoOtroConcepto()=="")
				 errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.otroConceptoNuloInvalido"));
			 partidaContableForm.setConCpaConceptoPartida(null);
			 partidaContableForm.setConCpaConceptoPartidaD(null);
		 }
			
		 //verificamos datos del cheque
		 if(partidaContableForm.getConTpaTipoPartida().getTpaId()== 2){//tipo partida cheque
				String numCh = request.getSession().getAttribute("numeroCheque").toString();
				if(numCh==null || numCh.equals("0")) errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.numeroChequeInvalido"));
				if(partidaContableForm.getChkEmitidoA()==null || partidaContableForm.getChkEmitidoA().trim().equals("")
						|| partidaContableForm.getChkLugar()==null || partidaContableForm.getChkLugar().trim().equals("")
						|| partidaContableForm.getChkFecha()==null || partidaContableForm.getChkFecha().trim().equals(""))
					errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.EmitidoAoLugaroFechaVacio"));
				if(partidaContableForm.getChkMontoEmitido()==null || partidaContableForm.getChkMontoEmitido()<=0)
					errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.montoInvalido"));
		}
		
		//validando que fecha no sea mayor a actual
		GregorianCalendar greCalendarI = new GregorianCalendar();
		GregorianCalendar greCalendarF = new GregorianCalendar();
		greCalendarI.setGregorianChange(new Date());
		ElapsedTime elapsed = new ElapsedTime();
		greCalendarF.setGregorianChange(partidaContableForm.getConPcoPartidaContableH().getPcoFechaIngresoPartida());
		if(elapsed.fechaMenor(new Date(), partidaContableForm.getConPcoPartidaContableH().getPcoFechaIngresoPartida())){
			errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.dpaFechaSuperiorAActualInvalida"));
		}
		
		//verificamos que la fecha ingresada no sea menor que las fechas que tengas las ultimas partidas registradas
		Date fechaLastPartida = new Date();
		fechaLastPartida = partidaContableDAO.getLastFechaPartidaPorEstado("F");
		if(fechaLastPartida!=null){//verificar que la fecha de la ultima partida cerrada sea menor que la nueva fecha
			greCalendarI.setGregorianChange(fechaLastPartida);
			
			greCalendarF.set(Calendar.MILLISECOND, 0);
			greCalendarF.set(Calendar.SECOND, 0);
			greCalendarF.set(Calendar.MINUTE, 0);
			greCalendarF.set(Calendar.HOUR_OF_DAY, 0);
			
			greCalendarI.set(Calendar.MILLISECOND, 0);
			greCalendarI.set(Calendar.SECOND, 0);
			greCalendarI.set(Calendar.MINUTE, 0);
			greCalendarI.set(Calendar.HOUR_OF_DAY, 0);
			if(greCalendarF.before(greCalendarI)){
				errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.dpaFechaInferiorInvalida"));
			}
		}
		
		//verificamos que el mes no haya sido cerrado
		Date d = partidaContableForm.getConPcoPartidaContableH().getPcoFechaIngresoPartida();
		Integer totalCerradas = partidaContableDAO.getTotalCerradasMes(d);
		if(totalCerradas!=0) errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.partidaMesCerrado"));
		
		return errors;
	}
	
	
	
	
	
	
	
	public void mensajes(String msg, HttpServletRequest request){
		ActionErrors errors = new ActionErrors();
        errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(msg));
        saveMessages(request, errors);
	}
	
	 public ActionForward guardarPartida(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {
			PartidaContableForm partidaContableForm = (PartidaContableForm)form;
			String usuarioConectado = partidaContableForm.getUsuarioConectado().getNombreUsuario();
			
			ConDpaDetallePartidaDAO conDpaDetallePartidaDAO = new ConDpaDetallePartidaDAO(getSessionHibernate(request));
			ConPcoPartidaContableDAO partidaContableDAO = new ConPcoPartidaContableDAO(getSessionHibernate(request));
			ConCpaConceptoPartidaDAO conceptoPartidaDAO = new ConCpaConceptoPartidaDAO(getSessionHibernate(request));
			ConCueCuentaDAO conCueCuentaDAO = new ConCueCuentaDAO(getSessionHibernate(request));
			
			Transaction tx = conDpaDetallePartidaDAO.getSession().beginTransaction();
			try{
				/** V A L I D A C I O N E S**/
				 ActionErrors errors = validacionPartida(partidaContableForm, request);
				 if(!errors.isEmpty()){
					 //hay errores
					 saveMessages(request, errors);
					 return lista(mapping, partidaContableForm, request, response);
				 }
				
				 if(partidaContableForm.getCpaID()!=-1){/***************/
					/*if(partidaContableForm.getConCpaConceptoPartida().getCpaId()!=null || partidaContableForm.getConCpaConceptoPartida().getCpaId() != -1)  
					*/ partidaContableForm.setConCpaConceptoPartida(conceptoPartidaDAO.findById(partidaContableForm.getCpaID())
						/*partidaContableForm.getConCpaConceptoPartida().getCpaId())*/);
				}else  partidaContableForm.getConPcoPartidaContableH().setConCpaConceptoPartida(null);
				
				/** I N G R E S O   D E   P A R T I D A**/				 
				partidaContableForm.setPcoEstado("P");
				partidaContableForm.setPcoChequePendiente(0);
				partidaContableForm.setPcoId(partidaContableDAO.nextId());
				
				if(partidaContableForm.getConTpaTipoPartida().getTpaId()== 2){//tipo partida cheque
					String numCh = request.getSession().getAttribute("numeroCheque").toString();
					//llenamos datos de cheque
					CtrRckRepositorioChequesDAO repositoChequesDAO = new CtrRckRepositorioChequesDAO(getSessionHibernate(request));
					CtaChkChequePrestamoDAO chequePDAO = new CtaChkChequePrestamoDAO(getSessionHibernate(request));
					
					CtaChkChequePrestamo chequeP = new CtaChkChequePrestamo();
					CtrRckRepositorioCheques repositorioCheques = new CtrRckRepositorioCheques();
					repositorioCheques = repositoChequesDAO.findById(partidaContableForm.getRckId());
					
					chequeP.setCtaPrePrestamo(null);
					chequeP.setChkCorrelativoCheque(partidaContableForm.getChkCorrelativoCheque());
					chequeP.setChkEmitidoA(partidaContableForm.getChkEmitidoA());
					chequeP.setChkFecha(partidaContableForm.getChkFechaD());
					chequeP.setChkLugar(partidaContableForm.getChkLugar());
					chequeP.setChkMontoEmitido(partidaContableForm.getChkMontoEmitido());
					
					if(partidaContableForm.getRepositorioCheques()==null || partidaContableForm.getRckId()==-1){
						chequeP.setCtrBanBanco(null);
					}else{
						
						CtrCckControlCheques controlCheques = new CtrCckControlCheques();
						CtrCckControlChequesDAO controlChequesDAO = new CtrCckControlChequesDAO(getSessionHibernate(request));
					
						controlCheques = controlChequesDAO.findById(repositorioCheques.getCtrCckControlCheques().getCckId());
						chequeP.setCtrBanBanco(controlCheques.getCtrBanBanco());
					}
					chequePDAO.save(chequeP);
					//tx.commit();
					
					//ACTUALIZAR CORRELATIVO DE CHEQUE
					repositorioCheques.setRckCorrActual(partidaContableForm.getChkCorrelativoCheque()+1);
					repositoChequesDAO.merge(repositorioCheques);
					
					tx.commit();
					
					partidaContableForm.setCtaChkChequePrestamo(chequeP);
					partidaContableForm.getConPcoPartidaContableH().setCtaChkChequePrestamo(chequeP);
				
				}else{
					partidaContableForm.getConPcoPartidaContableH().setCtaChkChequePrestamo(null);
				}
				//auditoria de partida
				partidaContableForm.setAudFechaCreacion(new Date());
				partidaContableForm.setAudFechaModificacion(new Date());
				partidaContableForm.setAudUsuarioCreacion(usuarioConectado);
				partidaContableForm.setAudUsuarioModificacion(usuarioConectado);
				partidaContableDAO.save(partidaContableForm.getConPcoPartidaContableH());
				tx.commit();
				
				
				/**I N G R E S O   D E  D E T A L L E   D E   P A R T I D A**/
				List listaDetallePartida = (List) request.getSession().getAttribute("listaDetallePartidas");
				Iterator<ConDpaDetallePartida> iterador = (Iterator<ConDpaDetallePartida>) listaDetallePartida.listIterator();
				
				Date fechaRegistro = partidaContableForm.getConPcoPartidaContableH().getPcoFechaIngresoPartida();
				SimpleDateFormat sdf = new SimpleDateFormat("MM-yyyy");
				String SFechaRegistro = sdf.format(fechaRegistro);
				ConSacSaldosAnterioresCuentaDAO saldosAnterioresDAO = new ConSacSaldosAnterioresCuentaDAO(getSessionHibernate(request));
				int mes = new Integer(SFechaRegistro.substring(0, 2));
				int anio = new Integer(SFechaRegistro.substring(3, 7));
				
				while(iterador.hasNext()){
					//FIXME verificar dpa_id
					ConDpaDetallePartida conDpaDetallePartida = (ConDpaDetallePartida)iterador.next();
					conDpaDetallePartida.setConPcoPartidaContable(partidaContableForm.getConPcoPartidaContableH());
					if(conDpaDetallePartida.getConCpaConceptoPartida()==null || conDpaDetallePartida.getConCpaConceptoPartida().getCpaId()== null ||conDpaDetallePartida.getConCpaConceptoPartida().getCpaId()==-1 ) conDpaDetallePartida.setConCpaConceptoPartida(null);
					conDpaDetallePartidaDAO.save(conDpaDetallePartida);
					
					actualizarSaldos(conCueCuentaDAO.findById(conDpaDetallePartida.getConCueCuenta().getCueId()),conDpaDetallePartida.getDpaValorDebe(),conDpaDetallePartida.getDpaValorHaber(),request);
				
					/**ACTUALIZACION EN TABLA DE SALDOS ANTERIORES SI LA FECHA DE INGRESO HACE REFERENCIA A UN MES ANTERIOR**/
					if(!saldosAnterioresDAO.hayCuentas(anio, mes,conDpaDetallePartida.getConCueCuenta().getCueId()).isEmpty()){
						//FIXME entonces actualizar con metodo saldos anteriores
						actualizarSaldosAnteriores(conCueCuentaDAO.findById(conDpaDetallePartida.getConCueCuenta().getCueId()),conDpaDetallePartida.getDpaValorDebe(),conDpaDetallePartida.getDpaValorHaber(),anio,mes,request);
					}
				}
				
				
				
				
				mensajes("errors.partidaRegistradaConExito",request);
			}catch(Exception e){
				tx.rollback();
				e.printStackTrace();
			}finally{
				//tx.commit();
				conDpaDetallePartidaDAO.getSession().flush();
				conDpaDetallePartidaDAO.getSession().clear();
				
			}
			request.getSession().setAttribute("listaDetallePartidas", new ArrayList<ConDpaDetallePartida>());
			PartidaContableForm partidaContableNueva = new PartidaContableForm();
			partidaContableNueva.getConPcoPartidaContableH().getConCpaConceptoPartida().setCpaId(-1);/******************/
			partidaContableNueva.setUsuarioConectado(partidaContableForm.getUsuarioConectado());
			return lista(mapping,partidaContableNueva,request,response);
		} 
	 
	 @SuppressWarnings("unchecked")
	 public ActionForward modificarPartida(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {		 	
			PartidaContableForm partidaContableForm = (PartidaContableForm)form;
			
			ConPcoPartidaContable partidaContableNueva = new ConPcoPartidaContable();
			String usuarioConectado = partidaContableForm.getUsuarioConectado().getNombreUsuario();
			int codPaCo;
			
			ConDpaDetallePartidaDAO conDpaDetallePartidaDAO = new ConDpaDetallePartidaDAO(getSessionHibernate(request));
			ConPcoPartidaContableDAO partidaContableDAO = new ConPcoPartidaContableDAO(getSessionHibernate(request));
			
			
			partidaContableNueva = partidaContableDAO.findById(partidaContableForm.getPcoId());
			Transaction tx = conDpaDetallePartidaDAO.getSession().beginTransaction();
			ActionErrors errors = new ActionErrors();
			try{
				/** V A L I D A C I O N E S**/
				if (!partidaContableForm.getPcoEstado().equals("A")){
					errors = validacionPartida(partidaContableForm, request);
				}else{
					errors = validacionPartidaA(partidaContableForm, request);
				}
				
				 if(!errors.isEmpty()){
					 //hay errores
					 saveMessages(request, errors);
					 return lista(mapping, partidaContableForm, request, response);
				 }
				 
				if(partidaContableForm.getCpaID()==-1/*null*/){/**********************************/
					partidaContableNueva.setConCpaConceptoPartida(null);
				}else{
					ConCpaConceptoPartidaDAO conceptoPartidaDAO = new ConCpaConceptoPartidaDAO(getSessionHibernate(request));
					partidaContableForm.setConCpaConceptoPartida(conceptoPartidaDAO.findById(partidaContableForm.getCpaID()));
					partidaContableNueva.setConCpaConceptoPartida(partidaContableForm.getConCpaConceptoPartida());
				}
				partidaContableNueva.setPcoOtroConcepto(partidaContableForm.getPcoOtroConcepto());
				partidaContableNueva.setPcoFechaIngresoPartida(partidaContableForm.getConPcoPartidaContableH().getPcoFechaIngresoPartida());
				if(partidaContableForm.getPcoEstado().equals("A"))
					partidaContableNueva.setPcoEstado(partidaContableForm.getPcoEstado());
				
				//validando numero de comprobante nuevo a asignar
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
				SimpleDateFormat sdf2 = new SimpleDateFormat("dd-MM-yyyy");
				Date fecsh = sdf2.parse( partidaContableForm.getPcoFechaIngresoPartida());
				String fechaActual =sdf.format(fecsh);
				Integer anio = new Integer(fechaActual.substring(0,4));
				Integer mes = new Integer(fechaActual.substring(5,7));
				codPaCo = partidaContableDAO.getLastComprobante(anio,mes);
				Integer nuevoNumComp = new Integer(partidaContableForm.getNuevoComprobante());
				if(nuevoNumComp > 0 && partidaContableForm.getPcoComprobantePartida()!=nuevoNumComp &&
						nuevoNumComp <= codPaCo){
					ConPcoPartidaContable partidaContableModificarCorrel = (ConPcoPartidaContable)partidaContableDAO.findByCompFecha(anio,mes,nuevoNumComp).get(0);
					partidaContableModificarCorrel.setPcoComprobantePartida(partidaContableForm.getPcoComprobantePartida());
					partidaContableForm.setPcoComprobantePartida(nuevoNumComp);
					partidaContableNueva.setPcoComprobantePartida(nuevoNumComp);
					//partidaContableModificarCorrel.setAudFechaCreacionPartida(audFechaCreacionPartida)
					partidaContableDAO.merge(partidaContableModificarCorrel);
					tx.commit();
				}
				
				//validando datos del cheque modificado
				if(partidaContableForm.getConTpaTipoPartida().getTpaId()== 2){
					partidaContableNueva.getCtaChkChequePrestamo().setChkCorrelativoCheque(partidaContableForm.getChkCorrelativoCheque());
					partidaContableNueva.getCtaChkChequePrestamo().setChkEmitidoA(partidaContableForm.getChkEmitidoA());
					partidaContableNueva.getCtaChkChequePrestamo().setChkFecha(partidaContableForm.getChkFechaD());
					partidaContableNueva.getCtaChkChequePrestamo().setChkLugar(partidaContableForm.getChkLugar());
					partidaContableNueva.getCtaChkChequePrestamo().setChkMontoEmitido(partidaContableForm.getChkMontoEmitido());
					
					CtaChkChequePrestamoDAO chequePDAO = new CtaChkChequePrestamoDAO(getSessionHibernate(request));
					chequePDAO.merge(partidaContableNueva.getCtaChkChequePrestamo());/************/
					tx.commit();
				}
				partidaContableNueva.setPcoChequeNegociable(partidaContableForm.getPcoChequeNegociable());
				partidaContableForm.setConPcoPartidaContableH(partidaContableNueva);
				partidaContableForm.setAudFechaModificacion(new Date());
				partidaContableForm.setAudUsuarioModificacion(usuarioConectado);
				partidaContableDAO.merge(partidaContableForm.getConPcoPartidaContableH());
				tx.commit();
				
				
				Date fechaRegistro = partidaContableForm.getConPcoPartidaContableH().getPcoFechaIngresoPartida();
				SimpleDateFormat sdf1 = new SimpleDateFormat("MM-yyyy");
				String SFechaRegistro = sdf1.format(fechaRegistro);
				ConSacSaldosAnterioresCuentaDAO saldosAnterioresDAO = new ConSacSaldosAnterioresCuentaDAO(getSessionHibernate(request));
				int mes1 = new Integer(SFechaRegistro.substring(0, 2));
				int anio1 = new Integer(SFechaRegistro.substring(3, 7));
				
				
				if(partidaContableForm.getPcoEstado().equals("A")){//A = anulacion de partida
					//actualizaremos saldos
//					List lstAnterior = (ArrayList<ConDpaDetallePartida>) conDpaDetallePartidaDAO.findByCriteriaDetPartida(partidaContableForm.getPcoId());
//					lstAnterior.listIterator(0);
//					Iterator<ConDpaDetallePartida> iteradorA = lstAnterior.listIterator(0);
//					iteradorA = (Iterator<ConDpaDetallePartida>) lstAnterior.listIterator();
//					while(iteradorA.hasNext()){
//						ConDpaDetallePartida conDpaDetallePartidaA = (ConDpaDetallePartida)iteradorA.next();
//						actualizarSaldos(conDpaDetallePartidaA.getConCueCuenta(),conDpaDetallePartidaA.getDpaValorHaber(),conDpaDetallePartidaA.getDpaValorDebe(),request);
//						
//						/**ACTUALIZACION EN TABLA DE SALDOS ANTERIORES SI LA FECHA DE INGRESO HACE REFERENCIA A UN MES ANTERIOR**/
//						if(!saldosAnterioresDAO.hayCuentas(anio1, mes1,conDpaDetallePartidaA.getConCueCuenta().getCueId()).isEmpty()){
//							//FIXME entonces actualizar con metodo saldos anteriores
//							actualizarSaldosAnteriores(conDpaDetallePartidaA.getConCueCuenta(),conDpaDetallePartidaA.getDpaValorHaber(),conDpaDetallePartidaA.getDpaValorDebe(),anio1,mes1,request);
//						}
//					}
				//colocaremos los saldos a 0 por anulacion de la partida
					List listaDetallePartida = (List) request.getSession().getAttribute("listaDetallePartidas");
					Iterator<ConDpaDetallePartida> i = listaDetallePartida.iterator();
					List nuevaLista = new ArrayList<ConDpaDetallePartida>();
					
					while(i.hasNext()){
						ConDpaDetallePartida dpa =  i.next();
						dpa.setDpaValorHaber(0.00);
						dpa.setDpaValorDebe(0.00);
						nuevaLista.add(dpa);
						
					}
					request.getSession().setAttribute("listaDetallePartidas", nuevaLista);
				}					
					//guardar aqui el detalle de la partida
					List listaDetallePartida = (List) request.getSession().getAttribute("listaDetallePartidas");
					if(!listaDetallePartida.isEmpty()){//si  la lista no es vacia, debemos actualizar
						List lstAnterior = (ArrayList<ConDpaDetallePartida>) conDpaDetallePartidaDAO.findByCriteriaDetPartida(partidaContableForm.getPcoId());
						Iterator<ConDpaDetallePartida> iterador = (Iterator<ConDpaDetallePartida>) listaDetallePartida.listIterator();
						if(!listaDetallePartida.equals(lstAnterior)){
							if(lstAnterior.isEmpty())
								while(iterador.hasNext()){//ingresamos nuevo detalle de partida
									ConDpaDetallePartida conDpaDetallePartida = (ConDpaDetallePartida)iterador.next();
									conDpaDetallePartida.setConPcoPartidaContable(partidaContableForm.getConPcoPartidaContableH());
									
									if(conDpaDetallePartida.getConCpaConceptoPartida()!=null){
										if(conDpaDetallePartida.getConCpaConceptoPartida().getCpaId()==-1) 
											conDpaDetallePartida.setConCpaConceptoPartida(null);
									}
									conDpaDetallePartidaDAO.save(conDpaDetallePartida);
									actualizarSaldos(conDpaDetallePartida.getConCueCuenta(),conDpaDetallePartida.getDpaValorDebe(),conDpaDetallePartida.getDpaValorHaber(),request);
							
									/**ACTUALIZACION EN TABLA DE SALDOS ANTERIORES SI LA FECHA DE INGRESO HACE REFERENCIA A UN MES ANTERIOR**/
									if(!saldosAnterioresDAO.hayCuentas(anio1, mes1,conDpaDetallePartida.getConCueCuenta().getCueId()).isEmpty()){
										//FIXME entonces actualizar con metodo saldos anteriores
										actualizarSaldosAnteriores(conDpaDetallePartida.getConCueCuenta(),conDpaDetallePartida.getDpaValorDebe(),conDpaDetallePartida.getDpaValorHaber(),anio1,mes1,request);
									}								
							}else{
								int band;
								Iterator<ConDpaDetallePartida> iteradorA = lstAnterior.listIterator(0);
								while(iterador.hasNext()){//actualizamos datos existentes y agregamos los que no esten ingresados
									band=0;
									ConDpaDetallePartida conDpaDetallePartidaN = (ConDpaDetallePartida)iterador.next();
									lstAnterior.listIterator(0);
									iteradorA = (Iterator<ConDpaDetallePartida>) lstAnterior.listIterator();
									while(iteradorA.hasNext()){
										ConDpaDetallePartida conDpaDetallePartidaA = (ConDpaDetallePartida)iteradorA.next();
										if(conDpaDetallePartidaA.getDpaId()==conDpaDetallePartidaN.getDpaId()){
											//actualizamos saldos de cuentas hijas hasta padres, eliminando anteriores e ingresando news
											actualizarSaldos(conDpaDetallePartidaA.getConCueCuenta(),conDpaDetallePartidaA.getDpaValorHaber(),conDpaDetallePartidaA.getDpaValorDebe(),request);
											
											conDpaDetallePartidaN.setConPcoPartidaContable(partidaContableForm.getConPcoPartidaContableH());
											if(conDpaDetallePartidaN.getConCpaConceptoPartida()!=null){
												if(conDpaDetallePartidaN.getConCpaConceptoPartida().getCpaId()==-1) conDpaDetallePartidaN.setConCpaConceptoPartida(null);
											}										
											
											conDpaDetallePartidaDAO.merge(conDpaDetallePartidaN);
											actualizarSaldos(conDpaDetallePartidaN.getConCueCuenta(),conDpaDetallePartidaN.getDpaValorDebe(),conDpaDetallePartidaN.getDpaValorHaber(),request);
									
											/**ACTUALIZACION EN TABLA DE SALDOS ANTERIORES SI LA FECHA DE INGRESO HACE REFERENCIA A UN MES ANTERIOR**/
											if(!saldosAnterioresDAO.hayCuentas(anio1, mes1,conDpaDetallePartidaA.getConCueCuenta().getCueId()).isEmpty()){
												actualizarSaldosAnteriores(conDpaDetallePartidaA.getConCueCuenta(),conDpaDetallePartidaA.getDpaValorHaber(),conDpaDetallePartidaA.getDpaValorDebe(),anio1,mes1,request);
												actualizarSaldosAnteriores(conDpaDetallePartidaN.getConCueCuenta(),conDpaDetallePartidaN.getDpaValorDebe(),conDpaDetallePartidaN.getDpaValorHaber(),anio1,mes1,request);
											}
											
											band=1;
											iteradorA.remove();
											break;
										}
									}
									if(band==0){
										conDpaDetallePartidaN.setConPcoPartidaContable(partidaContableForm.getConPcoPartidaContableH());
										
										boolean b = conDpaDetallePartidaN.getConCpaConceptoPartida()!= null && 
													conDpaDetallePartidaN.getConCpaConceptoPartida().getCpaId()==-1;
										if(b){
											conDpaDetallePartidaN.setConCpaConceptoPartida(null);
										}
										conDpaDetallePartidaDAO.save(conDpaDetallePartidaN);
										actualizarSaldos(conDpaDetallePartidaN.getConCueCuenta(),conDpaDetallePartidaN.getDpaValorDebe(),
												conDpaDetallePartidaN.getDpaValorHaber(),request);
										
										/**ACTUALIZACION EN TABLA DE SALDOS ANTERIORES SI LA FECHA DE INGRESO HACE REFERENCIA A UN MES ANTERIOR**/
										if(!saldosAnterioresDAO.hayCuentas(anio1, mes1,conDpaDetallePartidaN.getConCueCuenta().getCueId()).isEmpty()){
											//FIXME entonces actualizar con metodo saldos anteriores
											actualizarSaldosAnteriores(conDpaDetallePartidaN.getConCueCuenta(),
													conDpaDetallePartidaN.getDpaValorDebe(),conDpaDetallePartidaN.getDpaValorHaber(),anio1,mes1,request);
										}
									}
								}
								
								if(!lstAnterior.isEmpty()){
									lstAnterior.listIterator(0);
									iteradorA = (Iterator<ConDpaDetallePartida>)lstAnterior.listIterator();
									while(iteradorA.hasNext())
										conDpaDetallePartidaDAO.delete(iteradorA.next());
								}
							}
						}
					}else	conDpaDetallePartidaDAO.deleteByPartidaContable(partidaContableForm.getPcoId());
				
				tx.commit();
				mensajes("errors.partidaModificadaConExito",request);
			}catch(Exception e){
				tx.rollback();
				e.printStackTrace();
			}finally{
				conDpaDetallePartidaDAO.getSession().flush();
				conDpaDetallePartidaDAO.getSession().clear();
				
			}
			conDpaDetallePartidaDAO.getSession().clear();
			
		 	
			request.setAttribute("partidaContableForm", new PartidaContableForm());
		 	request.setAttribute("form", new PartidaContableForm());
		 	request.getSession().setAttribute("regresoDePartida", 1);
			
			return mapping.findForward("regreso");//lista(mapping,new PartidaContableForm(),request,response);
		} 
	 
	 public int actualizarSaldos(ConCueCuenta conCueCuenta,double valorDebe, double valorHaber,HttpServletRequest request){
		 ConCueCuentaDAO conCueCuentaDAO = new ConCueCuentaDAO(getSessionHibernate(request));
		 conCueCuenta = conCueCuentaDAO.findById(conCueCuenta.getCueId());
		 try{
			 if(conCueCuenta.getConCueCuenta()==null){
				Double saldoActual = conCueCuenta.getCueSaldoActual();
				//preguntamos si es acreedora y si es retroactiva
				if(conCueCuenta.getCueTipoCuenta()!=1){// si no es retroactiva
					saldoActual= (conCueCuenta.getConTicTipoCuenta().getTicAcreeDeudo()==1)? saldoActual + valorDebe - valorHaber: saldoActual + valorHaber - valorDebe;
				}else{
					saldoActual= (conCueCuenta.getConTicTipoCuenta().getTicAcreeDeudo()==1)? saldoActual + valorHaber - valorDebe: saldoActual + valorDebe - valorHaber;
				}
				conCueCuenta.setCueSaldoActual(saldoActual);
				conCueCuentaDAO.merge(conCueCuenta);
				return 1;
			 }else{
			 	Double saldoActual = conCueCuenta.getCueSaldoActual();
			 	if(conCueCuenta.getCueTipoCuenta()!=1){// si no es retroactiva
					saldoActual= (conCueCuenta.getConTicTipoCuenta().getTicAcreeDeudo()==1)? saldoActual + valorDebe - valorHaber: saldoActual + valorHaber - valorDebe;
				}else{
					saldoActual= (conCueCuenta.getConTicTipoCuenta().getTicAcreeDeudo()==1)? saldoActual + valorHaber - valorDebe: saldoActual + valorDebe - valorHaber;
				}
			 	conCueCuenta.setCueSaldoActual(saldoActual);
				conCueCuentaDAO.merge(conCueCuenta);
				return 1 *actualizarSaldos(
						conCueCuentaDAO.findById(conCueCuenta.getConCueCuenta().getCueId()), valorDebe, valorHaber,request); 
			}
		 }catch(Exception e){
			 e.printStackTrace(); 
		 }
		return 0;//si algo falló
	 }
	 
	 public int actualizarSaldosAnteriores(ConCueCuenta conCueCuenta,double valorDebe, double valorHaber,int anio, int mes,HttpServletRequest request){
		 
		 System.out.println("Actualizando saldos anteriores");
		 
		 ConCueCuentaDAO conCueCuentaDAO = new ConCueCuentaDAO(getSessionHibernate(request));
		 
		 ConSacSaldosAnterioresCuentaDAO saldosAnterioresCuentaDAO = new ConSacSaldosAnterioresCuentaDAO(getSessionHibernate(request));
		 ConSacSaldosAnterioresCuenta saldosAnterioresCuenta = new ConSacSaldosAnterioresCuenta();
		
		 conCueCuenta = conCueCuentaDAO.findById(conCueCuenta.getCueId());
		 saldosAnterioresCuenta = (ConSacSaldosAnterioresCuenta)
		 							saldosAnterioresCuentaDAO.hayCuentas(anio, mes, conCueCuenta.getCueId()).get(0);
		
		 try{
			 if(conCueCuenta.getConCueCuenta()==null){
				Double saldoActual = saldosAnterioresCuenta.getSacSaldoALaFecha();
				//preguntamos si es acreedora y si es retroactiva
				if(conCueCuenta.getCueTipoCuenta()!=1){// si no es retroactiva
					saldoActual= (conCueCuenta.getConTicTipoCuenta().getTicAcreeDeudo()==1)? saldoActual + valorDebe - valorHaber: saldoActual + valorHaber - valorDebe;
				}else{
					saldoActual= (conCueCuenta.getConTicTipoCuenta().getTicAcreeDeudo()==1)? saldoActual + valorHaber - valorDebe: saldoActual + valorDebe - valorHaber;
				}
				
				saldosAnterioresCuenta.setSacSaldoALaFecha(saldoActual);
				saldosAnterioresCuentaDAO.merge(saldosAnterioresCuenta);
				return 1;
			 }else{
			 	Double saldoActual = saldosAnterioresCuenta.getSacSaldoALaFecha();
			 	if(conCueCuenta.getCueTipoCuenta()!=1){// si no es retroactiva
					saldoActual= (conCueCuenta.getConTicTipoCuenta().getTicAcreeDeudo()==1)? saldoActual + valorDebe - valorHaber: saldoActual + valorHaber - valorDebe;
				}else{
					saldoActual= (conCueCuenta.getConTicTipoCuenta().getTicAcreeDeudo()==1)? saldoActual + valorHaber - valorDebe: saldoActual + valorDebe - valorHaber;
				}
			 	saldosAnterioresCuenta.setSacSaldoALaFecha(saldoActual);
				saldosAnterioresCuentaDAO.merge(saldosAnterioresCuenta);
				return 1 *actualizarSaldosAnteriores(
						conCueCuentaDAO.findById(conCueCuenta.getConCueCuenta().getCueId()), valorDebe, valorHaber,anio,mes,request); 
			}
		 }catch(Exception e){
			 e.printStackTrace(); 
		 }
		return 0;//si algo fallo
	 }
	 
	 public ActionForward cargarDatosPartida(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {
		 //recibo de la busqueda de partidas el valor de pcoId y mdf=true
		 PartidaContableForm partidaContableForm = (PartidaContableForm)form;

		 ConDpaDetallePartidaDAO conDpaDetallePartidaDAO = new ConDpaDetallePartidaDAO(getSessionHibernate(request));
		 ConPcoPartidaContableDAO conpContableDAO = new ConPcoPartidaContableDAO(getSessionHibernate(request));
		 ConCpaConceptoPartidaDAO conceptoPartidaDAO = new ConCpaConceptoPartidaDAO(getSessionHibernate(request));
		 
		 ConCpaConceptoPartida conceptoTemp = new ConCpaConceptoPartida();
		 ConPcoPartidaContable conPcoPartidaContable = new ConPcoPartidaContable();
		 conPcoPartidaContable = conpContableDAO.findById(partidaContableForm.getPcoId());
		 
		 if(conPcoPartidaContable.getCtaChkChequePrestamo()!=null){
			//si es de tipo emision de cheque
			 SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
			CtaChkChequePrestamo chequePrest = conPcoPartidaContable.getCtaChkChequePrestamo();
			request.getSession().setAttribute("numeroCheque",chequePrest.getChkCorrelativoCheque());
			partidaContableForm.setChkCorrelativoCheque(chequePrest.getChkCorrelativoCheque());
			partidaContableForm.setChkEmitidoA(chequePrest.getChkEmitidoA());
			partidaContableForm.setChkFecha(sdf.format(chequePrest.getChkFecha()));
			partidaContableForm.setChkLugar(chequePrest.getChkLugar());
			partidaContableForm.setChkMontoEmitido(chequePrest.getChkMontoEmitido());
			//FIXME falta tomar de la razon del cheque el repositorio de la cuenta.
		 }else{
			 request.getSession().setAttribute("numeroCheque","0");
			 partidaContableForm.setChkCorrelativoCheque(0);
		 }
		 
		 //asignamos detalle en la lista
		 List listDetallePartida = (ArrayList<ConDpaDetallePartida>)conDpaDetallePartidaDAO.findByPartidaContable(partidaContableForm.getPcoId());
		 /*List listTemp = new ArrayList<ConDpaDetallePartida>();
		 
		 //setearemos los dpaId para que puedan ser manejados en la lista temporal
		 int index = 0;
		 for (Iterator iterator = listDetallePartida.iterator(); iterator
				.hasNext();) {
			ConDpaDetallePartida object = (ConDpaDetallePartida) iterator.next();
			object.setDpaId(index);
			index++;
			listTemp.add(object);
		}*/
		 request.getSession().setAttribute("listaDetallePartidas", listDetallePartida);
		 
		 //datos de la partida
		 if(conPcoPartidaContable.getConCpaConceptoPartida()!=null){
			 conPcoPartidaContable.setConCpaConceptoPartida(conceptoPartidaDAO.findById(conPcoPartidaContable.getConCpaConceptoPartida().getCpaId()));
		 	 partidaContableForm.setCpaID(conPcoPartidaContable.getConCpaConceptoPartida().getCpaId());
		 }else{
			/* conPcoPartidaContable.setConCpaConceptoPartida(conceptoTemp);
			/* conPcoPartidaContable.getConCpaConceptoPartida().setCpaId(-1);*/
			 partidaContableForm.setCpaID(-1);
		 }
		 partidaContableForm.setConPcoPartidaContableH(conPcoPartidaContable);

		 //datos del form partida contable
		 partidaContableForm.setBoolCargoAbono(true);
		 partidaContableForm.setFormDeRedireccion(1);
		 partidaContableForm.setNuevoComprobante(0);
		 partidaContableForm.setMdf(true);
		 
		 request.getSession().setAttribute("idPartidaContable", partidaContableForm.getPcoId());
		 request.getSession().setAttribute("form", partidaContableForm);
		 return lista(mapping, partidaContableForm, request, response);
	 }
	 
	 //imprimir
	 @SuppressWarnings("unchecked")
	public ActionForward imprimir(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {
		 
		HashMap<String, Object> pars = new HashMap<String, Object>();
		PartidaContableForm partidaForm = (PartidaContableForm)form;
		String pathReporte = getServlet().getServletContext().getRealPath(rutaReporte+reporte+".jrxml");
			pars.put("PCO_IDD", partidaForm.getPcoId());
			/*construir la tabla*/
			ConDpaDetallePartida detalleP = new ConDpaDetallePartida();
			ConDpaDetallePartidaDAO detalleDAO = new ConDpaDetallePartidaDAO(getSessionHibernate(request));
			Transaction tx = detalleDAO.getSession().beginTransaction();
			try{
				List listaDetalles = detalleDAO.findByPartidaContable(partidaForm.getPcoId(), partidaForm.getPcoEstado());
				Iterator<ConDpaDetallePartida> iteradorA = (Iterator<ConDpaDetallePartida>) listaDetalles.listIterator(0);
				PartidaContableDAO partiDAO  = new PartidaContableDAO(getSessionHibernate(request));
				/**/
				partiDAO.deleteAll();
				tx.commit();
				while(iteradorA.hasNext()){
					ConCueCuenta cuentaC = new ConCueCuenta();
					detalleP = iteradorA.next();
					cuentaC = detalleP.getConCueCuenta();
					/*funcion que llene tabla temporal*/
					llenarTablaPartida(cuentaC,detalleP.getDpaValorDebe(),detalleP.getDpaValorHaber(),partidaForm.getPcoId(),1,request);
				}
				

			}catch(Exception e ){
				tx.rollback();
				e.printStackTrace();
				
			}finally{
				tx.commit();
				
			}
			try{
				//Connection con = HibernateSessionFactory.getSession().connection();
				//Conexion jdbc normal
				String jdbcDriver = "com.mysql.jdbc.Driver";
				Class.forName(jdbcDriver);
				String url = HibernateSessionFactory.getConfiguration().getProperty("connection.url");
				String user = HibernateSessionFactory.getConfiguration().getProperty("connection.username");
				String pass = HibernateSessionFactory.getConfiguration().getProperty("connection.password");

				Connection con = DriverManager.getConnection(url, user, pass);
				
				
				FileInputStream input = new FileInputStream(new File(pathReporte));
				JasperDesign jd = JRXmlLoader.load(input);
				JasperReport jr = JasperCompileManager.compileReport(jd);
				JasperPrint jp = JasperFillManager.fillReport(jr,pars, con);
				response.setHeader("Cache-Control","private");
				response.setHeader("Pragma", "Cache");
				response.setContentType("application/pdf");
				response.setHeader("content-Disposition", "attachment;filename=" + reporte + new SimpleDateFormat("yyyy-MM-dd").format(new Date()) + ".pdf");
		        JRPdfExporter pdfExporter = new JRPdfExporter();
		        pdfExporter.setParameter(JRExporterParameter.JASPER_PRINT, jp);
		        pdfExporter.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());
		        pdfExporter.exportReport();
			}catch(Exception e){
				e.printStackTrace();
			}finally{
				
				detalleDAO.getSession().flush();
				detalleDAO.getSession().clear();
			}
		 return null;
	 }
	 
	 public int llenarTablaPartida(ConCueCuenta conCueCuenta,double valorDebe, 
			 double valorHaber, long pco_id, int dataOp,HttpServletRequest request){
		 ConCueCuentaDAO conCueCuentaDAO = new ConCueCuentaDAO(getSessionHibernate(request));
		 PartidaContableDAO partidaCDAO = new PartidaContableDAO(getSessionHibernate(request));
		 try{
			 String codigoCuenta = (valorDebe>0)?"D":"H";
			 codigoCuenta += conCueCuenta.getCueCodigoCuenta();
			 /*dataOp=0 indica que se quiere mostrar desde la posteable hasta  la cuenta padre(rubro) por cada registro
			  *dataOp=1 indica que se quiere mostrar desde la posteable hasta la cuenta de mayor(3)*/
			 if(conCueCuenta.getCueCodigoCuenta().length() == 3){//llegamos al nivel 3 paramos
				 PartidaContable partidaTabla = new PartidaContable();
				 partidaTabla.setCodigoCuenta(codigoCuenta);
				 partidaTabla.setParcial(0.0);
				 partidaTabla.setPcoId(pco_id);
				 partidaTabla.setNombreCuenta(conCueCuenta.getCueNombre());
				 if (partidaCDAO.findByCodigoCuenta("codigoCuenta",codigoCuenta).size() >0 ){
					//ya existe
					List lista = partidaCDAO.findByCodigoCuenta("codigoCuenta",codigoCuenta);
					partidaTabla = (PartidaContable)lista.get(0);
					Double parDebe= partidaTabla.getDebe();
					Double parHaber = partidaTabla.getHaber();
					partidaTabla.setDebe(parDebe + valorDebe);
					partidaTabla.setHaber(parHaber + valorHaber);
					partidaCDAO.merge(partidaTabla);
				 }else{
					 partidaTabla.setDebe(valorDebe);
					 partidaTabla.setHaber(valorHaber);
					 partidaCDAO.save(partidaTabla);
				 }
				return 1;
			 }else{
				 PartidaContable partidaTabla = new PartidaContable();
				 Double parcial = 0.0;
				 partidaTabla.setCodigoCuenta(codigoCuenta);
				 partidaTabla.setNombreCuenta(conCueCuenta.getCueNombre());
				 partidaTabla.setDebe(0.0);
				 partidaTabla.setHaber(0.0);
				 partidaTabla.setPcoId(pco_id);
				 if(conCueCuenta.getCuePosteable()!=0){
					 if (partidaCDAO.findByCodigoCuenta("codigoCuenta",codigoCuenta).size() > 0){
						 //ya existe
						List lista = partidaCDAO.findByCodigoCuenta("codigoCuenta",codigoCuenta);/*conCueCuenta.getCueCodigoCuenta(),(valorDebe>0)?2:3*/
						partidaTabla = (PartidaContable)lista.get(0);
						parcial= partidaTabla.getParcial();
						partidaTabla.setParcial(parcial + valorDebe+valorHaber);
						partidaCDAO.merge(partidaTabla);
					 }else{
						partidaTabla.setParcial( valorDebe + valorHaber);
						partidaCDAO.save(partidaTabla);
					 }
				 }else{
					partidaTabla.setParcial( valorDebe + valorHaber);
					partidaCDAO.save(partidaTabla);
				 }
				 
				return 1 *llenarTablaPartida(
						conCueCuentaDAO.findById(conCueCuenta.getConCueCuenta().getCueId()), valorDebe, valorHaber, pco_id,dataOp,request); 
			}
		 }catch(Exception e){
			 e.printStackTrace(); 
		 }
		return 0;//si algo falló
	 }
	 
	 public ActionForward cargarDatosDetalle(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {
		 
		 PartidaContableForm partidaContableForm = (PartidaContableForm)form;
		 ConDpaDetallePartida conDpaDetallePartida = new ConDpaDetallePartida();
		 ConDpaDetallePartida conDpaTemp = new ConDpaDetallePartida();
		 ConPcoPartidaContable conPcoPartidaContable = new ConPcoPartidaContable();
		 
		 ConCpaConceptoPartidaDAO conceptoDetalleDAO = new ConCpaConceptoPartidaDAO(getSessionHibernate(request));
		 /*Long dpaId = partidaContableForm.getDpaId(); 
		 partidaContableForm.setNumeroRegistro(dpaId.intValue());
		 
		 */
		 //buscamos detalle en la lista
		/** int numR = 0;**/
		 List listDetallePartida = (ArrayList<ConDpaDetallePartida>)request.getSession().getAttribute("listaDetallePartidas");
		 if(listDetallePartida!=null){
			 Iterator<ConDpaDetallePartida> iterador = listDetallePartida.listIterator(0);
			// String codCuenta = partidaContableForm.getConCueCuenta().getCueCodigoCuenta();
			 int index=0;
			 while(iterador.hasNext()){
				 conDpaTemp = iterador.next();
				// String codCuentaTemp = conDpaTemp.getConCueCuenta().getCueCodigoCuenta();
				 if(/*codCuentaTemp.equals(codCuenta)*//*conDpaTemp.getDpaId()==dpaId*/ index==partidaContableForm.getNumeroRegistro()
					){
					 conDpaDetallePartida = conDpaTemp;
					 break;
				 }
				 index++;
				 /**numR++;**/
			 }
		 }
		 //partidaContableForm.setNumeroRegistro(numR);/*numero de registro del detalle*/
		 if(conDpaDetallePartida.getConCpaConceptoPartida()!=null)
			 conDpaDetallePartida.setConCpaConceptoPartida(conceptoDetalleDAO.findById(conDpaDetallePartida.getConCpaConceptoPartida().getCpaId()));
		 if(conDpaDetallePartida.getDpaValorDebe()!=0)
			partidaContableForm.setBoolCargoAbono(true);
		 else partidaContableForm.setBoolCargoAbono(false);
		 partidaContableForm.setConDpaDetallePartidaH(conDpaDetallePartida);
		 
	   
		 partidaContableForm.setCuentaTemporal(conDpaDetallePartida);
		 conPcoPartidaContable = conDpaDetallePartida.getConPcoPartidaContable();
		 partidaContableForm.setConPcoPartidaContableH(conPcoPartidaContable);
		 request.getSession().setAttribute("cuentaTemp", conDpaDetallePartida);
		 request.getSession().setAttribute("idPartidaContable", partidaContableForm.getPcoId());
		 if(partidaContableForm.getChkCorrelativoCheque()!=0){
			 request.getSession().setAttribute("numeroCheque", partidaContableForm.getChkCorrelativoCheque());
		 }else{
			 request.getSession().setAttribute("numeroCheque", 0);
		 }
		 
		/* request.getSession().setAttribute("form", partidaContableForm);*/
		 return lista(mapping, partidaContableForm, request, response);
	 }
	 
	 public ActionForward agregarRegistro(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {
		 
		 PartidaContableForm partidaContableForm = (PartidaContableForm)form;
		 
		 ConDpaDetallePartida detalleForm = new ConDpaDetallePartida();
		 ConPcoPartidaContable partidaForm = new ConPcoPartidaContable();
		 detalleForm = partidaContableForm.getConDpaDetallePartidaH();
		 partidaForm = partidaContableForm.getConPcoPartidaContableH();
		 
		 ConTpaTipoPartidaDAO tipoPartidaDAO = new ConTpaTipoPartidaDAO(getSessionHibernate(request));
		 ConCpaConceptoPartidaDAO conceptoPartidaDAO = new ConCpaConceptoPartidaDAO(getSessionHibernate(request));
		 ConCueCuentaDAO cuentaDAO = new ConCueCuentaDAO(getSessionHibernate(request));
		 
		 		 
		/**validando entradas de cargo o abono, y concepto del detalle**/
		if(partidaContableForm.isBoolCargoAbono()){//true = cargo; false = abono
			detalleForm.setDpaValorHaber(0.0);
			if(detalleForm.getDpaValorDebe()<=new Double(0.0)){
				mensajes("errors.valorDebeInvalido",request);
				return lista(mapping, partidaContableForm, request, response);
			}
		}else{
			detalleForm.setDpaValorDebe(0.0);
			if(detalleForm.getDpaValorHaber()<=new Double(0.0)){
				mensajes("errors.valorHaberInvalido",request);
				return lista(mapping, partidaContableForm, request, response);
			}
		}
		
		if(detalleForm.getConCpaConceptoPartida().getCpaId()==-1 & 
				(detalleForm.getDpaOtroConcepto()==null || detalleForm.getDpaOtroConcepto().trim().equals(""))){
			 mensajes("errors.otroConceptoDNuloInvalido",request);
			 return lista(mapping, partidaContableForm, request, response);
		 }
		
		 
		/**setearemos los elementos de la partida y del detalle para luego meterlos a la lista de detalles**/
		 if(detalleForm.getConCueCuenta()!=null)
			 detalleForm.setConCueCuenta(cuentaDAO.findById(detalleForm.getConCueCuenta().getCueId()));
		 
		 if(detalleForm.getConCpaConceptoPartida()!=null & detalleForm.getConCpaConceptoPartida().getCpaId()!=-1)
			 detalleForm.setConCpaConceptoPartida(conceptoPartidaDAO.findById(detalleForm.getConCpaConceptoPartida().getCpaId()));
		  
		 if(partidaForm.getConTpaTipoPartida()!=null)
			 partidaForm.setConTpaTipoPartida(tipoPartidaDAO.findById(partidaForm.getConTpaTipoPartida().getTpaId()));
		 
		if(partidaForm.getConCpaConceptoPartida()!=null & partidaContableForm./*getConCpaConceptoPartida().*/getCpaID()!=-1){
			 partidaForm.setConCpaConceptoPartida(conceptoPartidaDAO.findById(partidaContableForm.getCpaID()));
		}else{
			partidaContableForm.setConCpaConceptoPartida(null);
		}
		
		CtaChkChequePrestamo chequePartida = new CtaChkChequePrestamo();
		Integer numeroCorrel = new Integer(request.getSession().getAttribute("numeroCheque").toString());
		chequePartida.setChkCorrelativoCheque(numeroCorrel);
		if(chequePartida.getChkCorrelativoCheque()>0){
			chequePartida.setChkEmitidoA(partidaContableForm.getChkEmitidoA());
			chequePartida.setChkFecha(partidaContableForm.getChkFechaD());
			chequePartida.setChkLugar(partidaContableForm.getChkLugar());
			chequePartida.setChkMontoEmitido(partidaContableForm.getChkMontoEmitido());
		}
		partidaForm.setCtaChkChequePrestamo(chequePartida);
		
		
		//verificando que el nuevo registro no este en la tabla de detalles, sino lo agregamos
		List listaDetallePartida = (List) request.getSession().getAttribute("listaDetallePartidas");
		int index = 0;
		Iterator<ConDpaDetallePartida> iterador=listaDetallePartida.listIterator();
		Object obj = request.getSession().getAttribute("cuentaTemp");
		ConDpaDetallePartida cuentaComparacion=new ConDpaDetallePartida();
		if(obj!=null) {
				cuentaComparacion = (ConDpaDetallePartida)obj;
				partidaContableForm.setCuentaTemporal(cuentaComparacion);
				Long dpaID = cuentaComparacion.getDpaId();
				detalleForm.setDpaId(dpaID);/**********/
				//partidaContableForm.setNumeroRegistro(dpaID.intValue());
				
		}/*else	cuentaComparacion = partidaContableForm.getConDpaDetallePartidaH();
		*/
		//seteamos al detalle su correspondiente padre pco
		detalleForm.setConPcoPartidaContable(partidaForm);
				
		if(partidaContableForm.getNumeroRegistro()==-1/*!listaDetallePartida.contains(detalleForm)*/){
			listaDetallePartida.add(detalleForm);
			//metodo ordenamiento insercion, separaremos listas
			List<ConDpaDetallePartida> listaDebe = new ArrayList<ConDpaDetallePartida>();
			List<ConDpaDetallePartida> listaHaber = new ArrayList<ConDpaDetallePartida>();
			
			//	separando detalles de debe y haber
			int id=0,ih=0;
			iterador = listaDetallePartida.listIterator();
			ConDpaDetallePartida dpaTemp = new ConDpaDetallePartida();
			
			while(iterador.hasNext()){				
				dpaTemp = iterador.next();
				if(dpaTemp.getDpaValorDebe()!=0){
					listaDebe.add(dpaTemp);			
					id++;
				}else{
					listaHaber.add(dpaTemp);				
					ih++;
				}
			}
			listaDebe = ordenamientoInsercion(listaDebe, id);
			listaHaber = ordenamientoInsercion(listaHaber, ih);
			listaDetallePartida.clear();
			listaDetallePartida.addAll(listaDebe);
			listaDetallePartida.addAll(listaHaber);
		}else{
			listaDetallePartida.set(partidaContableForm.getNumeroRegistro(),detalleForm);
		}
		
		//seteando index de orden
		while(iterador.hasNext()){
			ConDpaDetallePartida detallePartidaLista = iterador.next();
			detallePartidaLista.setConPcoPartidaContable(partidaForm);
			listaDetallePartida.set(index, detallePartidaLista);
			index ++;
		}
		
		
		//seteamos para que se limpie el campo y permita agregar otro nuevo o modificar uno existenta
		partidaContableForm.setNumeroRegistro(-1);
		
		//asignamos partida al form
		partidaContableForm.setConPcoPartidaContableH(partidaForm);
		partidaContableForm.setConDpaDetallePartidaH(new ConDpaDetallePartida());
		request.getSession().setAttribute("idPartidaContable", partidaContableForm.getPcoId());
		request.getSession().setAttribute("listaDetallePartidas", listaDetallePartida);
		return lista(mapping, partidaContableForm, request, response);
	 }
	 
	 public ActionForward eliminarDetPartida(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {
		 PartidaContableForm partidaContableForm = (PartidaContableForm)form;
		 ConPcoPartidaContableDAO conpContableDAO = new ConPcoPartidaContableDAO(getSessionHibernate(request));
		 ConTpaTipoPartidaDAO tipoPartidaDAO = new ConTpaTipoPartidaDAO(getSessionHibernate(request));
		 ConCpaConceptoPartidaDAO conceptoPartidaDAO = new ConCpaConceptoPartidaDAO(getSessionHibernate(request));
		 Transaction tx = conpContableDAO.getSession().beginTransaction();
			
		 try{
			 ConPcoPartidaContable conPcoPartidaContable = new ConPcoPartidaContable();
			 ConCueCuenta cuentaCont = new ConCueCuenta();
			 ConCueCuentaDAO cuentaContDAO = new ConCueCuentaDAO(getSessionHibernate(request));
			 
			 if(partidaContableForm.getConCueCuenta()!=null){
				 List listaDetallePartida = (List) request.getSession().getAttribute("listaDetallePartidas");
				 listaDetallePartida.listIterator(0);
				 Iterator<ConDpaDetallePartida> iterador = listaDetallePartida.listIterator(0);
				 ConDpaDetallePartida conDpaTemp = new ConDpaDetallePartida();
				 cuentaCont = cuentaContDAO.findById(partidaContableForm.getConDpaDetallePartidaH().getConCueCuenta().getCueId());
				 String codigoCuentaElim = cuentaCont.getCueCodigoCuenta();
				 int posReg = 0;
				 if(partidaContableForm.getNumeroRegistro()!=-1){
					 while(iterador.hasNext()){
						 conDpaTemp = iterador.next();
						 if(partidaContableForm.getNumeroRegistro()==posReg){
							 listaDetallePartida.remove(conDpaTemp);
							 break;
						 }
						 posReg++;
					 }
				 }else{
					 while(iterador.hasNext()){
						 conDpaTemp = iterador.next();
						 String codCuentaTemp = conDpaTemp.getConCueCuenta().getCueCodigoCuenta();
						 if(codCuentaTemp.equals(codigoCuentaElim)){
							 listaDetallePartida.remove(conDpaTemp);
							 break;
						 }
					 }
				 }
				
				 partidaContableForm.setNumeroRegistro(-1);//para indicar ninguna posicion en el arreglo
				 
				 ConPcoPartidaContable partidaForm = new ConPcoPartidaContable();
				 partidaForm = partidaContableForm.getConPcoPartidaContableH();
				 if(partidaForm.getConTpaTipoPartida()!=null)
					 partidaForm.setConTpaTipoPartida(tipoPartidaDAO.findById(partidaForm.getConTpaTipoPartida().getTpaId()));
				 if(partidaContableForm/*.getConCpaConceptoPartida()*/.getCpaID()!=-1 & partidaForm.getConCpaConceptoPartida()!=null )
					 partidaForm.setConCpaConceptoPartida(conceptoPartidaDAO.findById(partidaContableForm.getCpaID()));
				 //*********************partidaForm.setPcoNumeroCheque(request.getSession().getAttribute("numeroCheque").toString());
				 partidaContableForm.setConPcoPartidaContableH(partidaForm);
				 partidaContableForm.setConDpaDetallePartidaH(new ConDpaDetallePartida());
				 request.getSession().setAttribute("listaDetallePartidas", listaDetallePartida);
			 }
		 }catch(Exception e){
			 tx.rollback();
			e.printStackTrace();
		 }finally{
				tx.commit();
				conpContableDAO.getSession().flush();
				conpContableDAO.getSession().clear();
				
			}
		 
		return lista(mapping, partidaContableForm, request, response);
		
	 }
	 
	 public ActionForward cargarCorrelativoCheque(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response){
		 PartidaContableForm partidaContableForm = (PartidaContableForm)form;
		 try{
			/**Repositorio Cheques*/
			CtrRckRepositorioChequesDAO repositorioDAO  = new CtrRckRepositorioChequesDAO(getSessionHibernate(request));
			Integer correlativoActual = new Integer(repositorioDAO.findById(partidaContableForm.getRckId()).getRckCorrActual());
			CtaChkChequePrestamo chequeP = new CtaChkChequePrestamo();
			chequeP.setChkCorrelativoCheque(correlativoActual);
			partidaContableForm.setCtaChkChequePrestamo(chequeP);
			partidaContableForm.getConPcoPartidaContableH().setCtaChkChequePrestamo(chequeP);
			request.getSession().setAttribute("numeroCheque", correlativoActual);
			String htmlCodigo = "<label id=\"correlabel\"> Correlativo Cheque : ";
			htmlCodigo +=correlativoActual + "</label>";
			response.getWriter().write(htmlCodigo);
			response.getWriter().flush();
			response.getWriter().close();
		 }catch (RuntimeException e) {
				log.error("Error runtime", e);
		} catch (IOException e) {
				log.error(e);
		}
		return null;
	 }
	 
	 public List ordenamientoInsercion(List lista,int n){
		int i, j;
		ConDpaDetallePartida key;
		for(j=1; j<n ; j++){
			key = (ConDpaDetallePartida)lista.get(j);
			i = j - 1;
			
			ConCueCuenta cuentaKey = key.getConCueCuenta();
			String codigoCuentaK = cuentaKey.getCueCodigoCuenta();
			while(i>=0 ){
				ConCueCuenta cuentaI = ((ConDpaDetallePartida)lista.get(i)).getConCueCuenta();
				String codigoCuentaI =cuentaI.getCueCodigoCuenta();
				if(codigoCuentaI.compareTo(codigoCuentaK)>0){
					ConDpaDetallePartida temp = (ConDpaDetallePartida)lista.get(i);
					lista.set(i+1, temp);
					i--;
				}else break;
			}
			lista.set(i+1, key);
		}
		return lista;
	 } 
	 
	 public ActionForward redirectInvalidData(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response){
			ActionErrors errors = (ActionErrors)request.getSession().getAttribute(Constantes.ERRORS);
			saveMessages(request, errors);
			return mapping.findForward("lista");
	}
	 
	 public ActionForward regresarBusqueda(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response){
		 	ConDpaDetallePartidaDAO conDpaDetallePartidaDAO = new ConDpaDetallePartidaDAO(getSessionHibernate(request));
		 	conDpaDetallePartidaDAO.getSession().clear();
			
		 	
			request.setAttribute("partidaContableForm", new PartidaContableForm());
		 	request.setAttribute("form", new PartidaContableForm());
		 	request.getSession().setAttribute("regresoDePartida", 1);
			return mapping.findForward("regreso");
	}
	
	protected Map getKeyMethodMap() {
		// TODO Auto-generated method stub
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.pco.lista", "lista");
		map.put("cmd.pco.guardarPartida", "guardarPartida");
		map.put("cmd.pco.cargarCorrelativoCheque", "cargarCorrelativoCheque");
		map.put("cmd.pco.modificarPartida", "modificarPartida");
		map.put("cmd.pco.cargarDatosPartida", "cargarDatosPartida");
		map.put("cmd.pco.cargarDatosDetalle", "cargarDatosDetalle");
		map.put("cmd.pco.eliminarDetPartida", "eliminarDetPartida");
		map.put("cmd.pco.listaModificarPartida", "listaModificarPartida");
		map.put("cmd.pco.agregarRegistro", "agregarRegistro");//que agrega y modifica detalles de la partida
		map.put("cmd.pco.regresarBusqueda", "regresarBusqueda");
		map.put("cmd.pco.redirectInvalidData", "redirectInvalidData");
		map.put("cmd.pco.imprimir","imprimir");
		return map;
	}
	//contains(Object o) retorna boolean true si el objeto se encuentra	
	//listaDetallePartida.iterator().hasNext() retorna true si la lista aun tiene elementos
	//listaDetallePartida.iterator().next() retorna siguiente objeto, debe convertirse
	//listaDetallePartida.iterator().remove(); solo puede usarse para eliminar el objeto despues de haber hecho un next, ese elimina.
	//listaDetallePartida.add(object) agrega un elemento al final de la lista,retorna true si s agrego bien.
	//remueve la 1º aparicion del objeto especificado listaDetallePartida.remove(index) listaDetallePartida.remove(o) listaDetallePartida.removeAll(c)
	//listaDetallePartida.retainAll(collection c) retiene todos los objetos que esten contenidos en c, los que no, los elimina de la lista
	// lista.clear() remueve todos los elementos, lista.equals(list) si son iguales las listas retorna true
	//lista.get(int index), lista.set(int index, E element), lista.remove(index)
	
}