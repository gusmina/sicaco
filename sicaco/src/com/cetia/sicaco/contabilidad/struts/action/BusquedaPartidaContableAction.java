/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.contabilidad.struts.action;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeFactory;
import org.jmesa.limit.ExportType;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.editor.DateCellEditor;
import org.jmesa.view.html.HtmlBuilder;

import com.cetia.sicaco.contabilidad.struts.form.PartidaContableForm;
import com.cetia.sicaco.hibernate.ConCpaConceptoPartida;
import com.cetia.sicaco.hibernate.ConCpaConceptoPartidaDAO;
import com.cetia.sicaco.hibernate.ConDpaDetallePartida;
import com.cetia.sicaco.hibernate.ConPcoPartidaContable;
import com.cetia.sicaco.hibernate.ConPcoPartidaContableDAO;
import com.cetia.sicaco.hibernate.ConTpaTipoPartidaDAO;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;

/** 
 * MyEclipse Struts
 * Creation date: 11-27-2008
 * 
 * XDoclet definition:
 * @struts.action path="/busquedaPartida" name="partidaContableForm" parameter="accion" scope="request"
 */
public class BusquedaPartidaContableAction extends DMLAction {
	
	private static final String TABLA_ID = "conPcoPartidaContable";
	
	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		return buscar(mapping, form, request, response);
	}
	
	public ActionForward buscar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		PartidaContableForm partidaForm = (PartidaContableForm) form;
		if(request.getSession().getAttribute("regresoDePartida")!=null){
			partidaForm = new PartidaContableForm();
			partidaForm.setConCpaConceptoPartida(new ConCpaConceptoPartida());
			partidaForm.setConCpaConceptoPartidaD(new ConCpaConceptoPartida());
			request.getSession().removeAttribute("regresoDePartida");			
		}
		ConPcoPartidaContableDAO partidaContableDAO = new ConPcoPartidaContableDAO(getSessionHibernate(request));
		ConTpaTipoPartidaDAO conTpaTipoPartidaDAO = new ConTpaTipoPartidaDAO(getSessionHibernate(request));
		ConCpaConceptoPartidaDAO conceptoPartidaDAO = new ConCpaConceptoPartidaDAO(getSessionHibernate(request));
		TableFacade tableFacade = TableFacadeFactory.createTableFacade(TABLA_ID, request);
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		
		String menu = (String) request.getParameter("menu");
		
		int totalRows = partidaContableDAO.getTotalRowCountPartidasByCriteria(partidaForm.getConPcoPartidaContableH(), partidaForm.getFechaFin(),menu);
		tableFacade.setTotalRows(totalRows);
		int rowStart = limit.getRowSelect().getRowStart();
		int rowEnd = limit.getRowSelect().getRowEnd();
		List<ConPcoPartidaContable> lista = partidaContableDAO.findPartidasByCriteria(partidaForm.getConPcoPartidaContableH(), partidaForm.getFechaFin(), rowEnd, rowStart,menu);
		tableFacade.setItems(lista);
		/*List<ConPcoPartidaContable> lst = partidaContableDAO.findPartidasByCriteria(partidaForm.getConPcoPartidaContableH(), partidaForm.getFechaFin());
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();*/
		if (limit.isExported()) {
        	//---- exporta la tabla
           // export(tableFacade);
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
		request.setAttribute("tipos", conTpaTipoPartidaDAO.findAll());
		//request.setAttribute("conceptos", conceptoPartidaDAO.findAll());//Saca todos los conceptos
		request.setAttribute("conceptos", conceptoPartidaDAO.findByProperty("cpaDescripcionConcepto", 0));//Saca Ãºnicamente los conceptos de partida
		request.setAttribute(Constantes.ACCION_KEY, "/busquedaPartida");
		return mapping.findForward("lista");
	}
	
	//---- metodo que genera el html de la tabla del jmesa
	private String html(final TableFacade tableFacade, final HttpServletRequest request) {
		tableFacade.setColumnProperties("pcoComprobantePartida", "conTpaTipoPartida.tpaNombre","pcoModulo","pcoFechaIngresoPartida","pcoEstado","pcoId");
		Table table = tableFacade.getTable();
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.pco.caption");
				
		Row row = table.getRow();
		Column nombreColumna = row.getColumn("pcoComprobantePartida");
		nombreColumna.setTitleKey("tbl.pco.pcoComprobantePartida");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){
			public Object getValue(Object item, String property, int rowcount) {
				ConPcoPartidaContable partida = (ConPcoPartidaContable) item;
				PartidaContableForm parFrm = new PartidaContableForm();
				HtmlBuilder html = new HtmlBuilder();
				String link = tableFacade.getWebContext().getContextPath();
				parFrm.setFormDeRedireccion(1);
				parFrm.setConPcoPartidaContableH(partida);
				
				
				request.getSession().setAttribute("formDeRedireccion", new Integer(1));
				if(parFrm.getCtaChkChequePrestamo()!=null){
					request.getSession().setAttribute("numeroCheque", parFrm.getCtaChkChequePrestamo().getChkCorrelativoCheque());
				}else{
					request.getSession().setAttribute("numeroCheque", 0);
				}
				request.getSession().setAttribute("form", parFrm);
				link += "/contabilidad/partidaContable.do?pcoId="+partida.getPcoId()+"&accion=cargarDatosPartida&formDeRedireccion=1";
				html.a().href().quote().append(link).quote().close();
				html.append(partida.getPcoComprobantePartida());
				html.aEnd();				
				return html.toString();		
			}
			
		});
		
		nombreColumna = row.getColumn("conTpaTipoPartida.tpaNombre");
		nombreColumna.setTitleKey("tbl.pco.tipoPartida");
		
		nombreColumna = row.getColumn("pcoModulo");
		nombreColumna.setTitleKey("tbl.pco.moduloPartida");		
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				String val = "";
				ConPcoPartidaContable partida = (ConPcoPartidaContable) item;
				if(partida.getPcoModulo()!=null){
					switch (partida.getPcoModulo()) {
						case 1:val = "Cuenta Corriente";
									break;
						case 2:val = "Inventario";
									break;
						case 3:val = "Orden de Compra";
									break;
						case 4:val = "Orden de Pago";
									break;
						case 5:val = "Asociados(Cuota de Afiliacion)";
									break;
						case 6:val = "Distribucion de dividendos";
									break;
						case 7:val = "Liquidacion de Asociados(Saldo a Favor)";
									break;
						case 8:val = "Descuentos en Planilla (Retenciones de Mas)";
									break;
						case 9:val = "Multa de Ahorros";
									break;
						case 10:val = "Descuentos a socios retirados";
									break;	
					}
				}
				else val = "Partida Manual";
				return val;
			}
			
		});
		
		nombreColumna = row.getColumn("pcoFechaIngresoPartida");
		nombreColumna.setTitleKey("tbl.pco.fechaIngresoPartida");
		nombreColumna.getCellRenderer().setCellEditor(new DateCellEditor("dd-MMM-yyyy HH:mm"));
		
		nombreColumna = row.getColumn("pcoEstado");
		nombreColumna.setTitleKey("tbl.pco.pcoEstado");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				String val = null;
				ConPcoPartidaContable partida = (ConPcoPartidaContable) item;
				if(partida.getPcoEstado().toUpperCase().equals("F")) val = "Cerrada";
				else if(partida.getPcoEstado().toUpperCase().equals("A")) val = "Anulada";
				else val = "Pendiente";
				return val;
			}
			
		});
		
		nombreColumna = row.getColumn("pcoId");
		nombreColumna.setTitleKey("tbl.pco.acciones");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				ConPcoPartidaContable partida = (ConPcoPartidaContable) item;
				HtmlBuilder html = new HtmlBuilder();
				String link = tableFacade.getWebContext().getContextPath();
				link += "/contabilidad/partidaContable.do?pcoId="+partida.getPcoId()+"&accion=imprimir&pcoEstado="+partida.getPcoEstado();
				html.a().href().quote().append(link).quote().append("class=\"linkPrinter\"").title("Imprimir").close();
				//html.append("Imprimir");
				html.aEnd();				
				return html.toString();		
			}
			
		});
		
		return tableFacade.render();
	}
	
	public ActionForward forwardToNuevaPartida(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		PartidaContableForm partidaForm =(PartidaContableForm) form;
		request.getSession().setAttribute("numeroCheque", 0);
		request.setAttribute("form", partidaForm);
		request.getSession().setAttribute("idPartidaContable","0");
		List<ConDpaDetallePartida> list = new ArrayList<ConDpaDetallePartida>();
		request.getSession().setAttribute("listaDetallePartidas", list);
		request.getSession().setAttribute("formDeRedireccion", new Integer(0));
		request.setAttribute(Constantes.ACCION_KEY, "/partidaContable");
		ActionErrors errors = new ActionErrors();
		ConPcoPartidaContableDAO pcoDao = new ConPcoPartidaContableDAO(getSessionHibernate(request));
		
		SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
		SimpleDateFormat sdM = new SimpleDateFormat("MM");
		SimpleDateFormat sdA = new SimpleDateFormat("yyyy");
		Date fecha;
		try {
			fecha = sdf.parse(partidaForm.getFecha());
		} catch (ParseException e) {
			fecha = new Date();
		}
		String mes = sdM.format(fecha);
		String anio = sdA.format(fecha);
		if(pcoDao.obtenerEstado(new Integer(mes), new Integer(anio)).equals("F")){
			errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.cierre.cerrado"));
			saveMessages(request, errors);
			return buscar(mapping, form, request, response);
		}
		else
			return mapping.findForward("nuevaPartida");
	}
	
	
	protected Map getKeyMethodMap() {
		// TODO Auto-generated method stub
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.pco.listaB", "lista");
		map.put("cmd.pco.buscar", "buscar");
		map.put("cmd.pco.forwardToNuevaPartida", "forwardToNuevaPartida");
		return map;
	}
}