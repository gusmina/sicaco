/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.contabilidad.struts.action;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.jasperreports.engine.JRException;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.hibernate.Transaction;

import com.cetia.sicaco.contabilidad.struts.form.ImpresionChequesForm;
import com.cetia.sicaco.hibernate.ConPcoPartidaContable;
import com.cetia.sicaco.hibernate.ConPcoPartidaContableDAO;
import com.cetia.sicaco.hibernate.HibernateSessionFactory;
import com.cetia.sicaco.struts.DMLAction;
import com.mad.utilidades.ExportReport;
import com.mad.utilidades.ReportFile;
import com.mad.utilidades.compresion.ZipFile;

/**
 * MyEclipse Struts Creation date: 12-27-2008
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/impresionCheques" name="impresionChequesForm"
 *                input="pagina-dml.contabilidad.impresionCheque"
 *                parameter="accion" scope="request" validate="true"
 */
public class ImpresionChequesAction extends DMLAction {
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// ImpresionChequesForm impresionChequesForm = (ImpresionChequesForm)
		// form;
		ConPcoPartidaContableDAO pcoDao = new ConPcoPartidaContableDAO(getSessionHibernate(request));
		request.setAttribute("listaChequesPendientes", pcoDao
				.findPartidasChequesPendientes());
		return mapping.findForward("lista");
	}

	/**
	 * MÃ©todo encargado de imprimir los archivos de los cheques y luego
	 * convertirlos en un zip
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward imprimirCheques(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		ImpresionChequesForm impresionChequesForm = (ImpresionChequesForm) form;
		ConPcoPartidaContableDAO pcoDao = new ConPcoPartidaContableDAO(getSessionHibernate(request));
		ServletContext servletContext = getServlet().getServletContext();
		String pathReportes = servletContext
				.getRealPath("/reportesOtros/facturacion/emisionCheque/emisionCheque.jasper");
		String carpetaReportes = servletContext.getRealPath("/");
		String carpetaOriginal = carpetaReportes + "/cheques/";
		HashMap<String, Object> mapa = new HashMap<String, Object>();
		ReportFile rep = new ReportFile(pathReportes, mapa);
		rep.setPathJasper(pathReportes);
		ExportReport export = new ExportReport();
		Connection con = HibernateSessionFactory.getSession().connection();
		export.setReportFile(rep);

		// Creamos la carpeta temporal
		carpetaReportes = carpetaReportes + "/repcheq/"
				+ ((new SimpleDateFormat("yyyyMMddHHmmss")).format(new Date()))
				+ "/";
		File file = new File(carpetaReportes);
		file.mkdirs();
		
		//Transaccion
		Transaction trx = pcoDao.getSession().beginTransaction();
		// Iteramos sobre los cheques seleccionados
		if(impresionChequesForm.getIndicesSeleccionados()!=null){
			for (int i = 0; i < impresionChequesForm.getIndicesSeleccionados().length; i++) {
				Integer indice = impresionChequesForm.getIndicesSeleccionados()[i];
				Long idPco = impresionChequesForm.getPcoIds()[indice.intValue()];
				// Obtenemos la partida contable a actualizar
				ConPcoPartidaContable partida = pcoDao.findById(idPco);
				
				
				SimpleDateFormat diaDf = new SimpleDateFormat("dd");
				SimpleDateFormat mesDf = new SimpleDateFormat("MM");
				SimpleDateFormat anioDf = new SimpleDateFormat("yyyy");
				String mesLetras = "";
				switch (new Integer(mesDf.format(partida.getPcoFechaIngresoPartida()))) {
				case 1 : 
					mesLetras = "Enero";
					break;
				case 2 : 
					mesLetras = "Febrero";
					break;
				case 3 : 
					mesLetras = "Marzo";
					break;
				case 4 : 
					mesLetras = "Abril";
					break;
				case 5 : 
					mesLetras = "Mayo";
					break;
				case 6 : 
					mesLetras = "Junio";
					break;
				case 7 : 
					mesLetras = "Julio";
					break;
				case 8 : 
					mesLetras = "Agosto";
					break;
				case 9 : 
					mesLetras = "Septiembre";
					break;
				case 10 : 
					mesLetras = "Octubre";
					break;
				case 11 : 
					mesLetras = "Noviembre";
					break;
				case 12 : 
					mesLetras = "Diciembre";
					break;
				default:
					break;
				}
				String lugarFecha = partida.getCtaChkChequePrestamo()
				.getChkLugar().toUpperCase()
				+ "    " +diaDf.format(partida.getPcoFechaIngresoPartida())+" de "+mesLetras+" de " + anioDf.format(partida.getPcoFechaIngresoPartida());
				
				//Verificamos que el cheque este pendiente
				if (partida.getPcoChequePendiente().intValue()==0) {
					// Seteamos los parametros del reporte
					mapa.put("pcoId", partida.getPcoId());
					mapa.put("montoCheque", new Double(partida
							.getCtaChkChequePrestamo().getChkMontoEmitido()
							.doubleValue()));
					mapa.put("lugarFecha", lugarFecha);
					mapa.put("beneficiario", partida.getCtaChkChequePrestamo()
							.getChkEmitidoA().toUpperCase());
					try {
						// Imprimimos los reportes pendientes
						export.exportReportPDF(carpetaReportes
								+ "cheque_"
								+ partida.getCtaChkChequePrestamo()
										.getChkCorrelativoCheque() + ".pdf", con);
						partida.setPcoChequePendiente(new Integer(1));
						pcoDao.merge(partida);
					} catch (JRException e) {
						log.error("No se pudo imprimir el reporte " + i, e);
					}
				}
			}
	
			// Comprimimos el archivo y enviamos el response
			ZipFile zip = new ZipFile();
			File fileZip = new File(carpetaOriginal);
			if (!fileZip.exists()) {
				fileZip.mkdirs();
			}
			try {
				String cheques = carpetaOriginal
						+ "";
				String fileName = ((new SimpleDateFormat("yyyyMMddHHmmss"))
						.format(new Date())) + ".zip";
				File dirCheques = new File(cheques);
				if(!dirCheques.exists()) {
					dirCheques.mkdirs();
				}
				dirCheques = new File(cheques+fileName);
				zip.zip(cheques+fileName,carpetaReportes);
				zip.deleteDir(carpetaReportes);
				
				
				enviarFileResponse(response, fileName, dirCheques);
			} catch (FileNotFoundException e) {
				log.error("", e);
			} catch (IOException e) {
				log.error("", e);
			}
			//Hacemos commit para guardar todos los cambios
			trx.commit();			
		}else{
			//System.out.println("No hay cheques seleccionados");
		
			ActionErrors errors = new ActionErrors();
			errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("error.impche.noChequeSelec"));
			saveMessages(request, errors);
			
			return mapping.findForward("noChequeSelec");
		}

		return null;
	}

	public void enviarFileResponse(HttpServletResponse response,
			String fileName, File archivo) throws FileNotFoundException,
			IOException {
		//Cambiamos el response para que se puedan bajar los archivos
		response.setContentType("application/octet-stream");
		response.setHeader("content-Disposition", "attachment;filename="+fileName);
		response.setBufferSize((int)archivo.length());
		// Obtenemos el response para poder enviar el archivo
		FileInputStream stream = new FileInputStream(archivo);
		PrintWriter out = response.getWriter();
		int n = -1;
		while ((n = stream.read()) != -1) {
			out.write(n);
		}
		out.flush();
		out.close();
	}

	protected Map<String, String> getKeyMethodMap() {
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.impche.lista", "lista");
		map.put("cmd.impche.imprimir", "imprimirCheques");
		return map;
	}
}