/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.contabilidad.struts.action;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.hibernate.Transaction;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeImpl;
import org.jmesa.limit.ExportType;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.html.HtmlBuilder;

import com.cetia.sicaco.contabilidad.struts.form.ConceptoPartidaForm;
import com.cetia.sicaco.hibernate.ConCpaConceptoPartida;
import com.cetia.sicaco.hibernate.ConCpaConceptoPartidaDAO;
import com.cetia.sicaco.hibernate.CtaTtrTipoTransaccion;
import com.cetia.sicaco.hibernate.CtaTtrTipoTransaccionDAO;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;

/** 
 * MyEclipse Struts
 * Creation date: 11-25-2008
 * 
 * XDoclet definition:
 * @struts.action path="/conceptoPartida" name="conceptoPartidaForm" input="redirectInvalidData" parameter="accion" scope="request" validate="true"
 * @struts.action-forward name="lista" path="pagina-lista.contabilidad.conceptoPartida"
 */
public class ConceptoPartidaAction extends DMLAction {

private static final String TABLA_ID="conCpaConceptoPartida";
	
	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
 		ConCpaConceptoPartidaDAO conceptoPartidaDAO = new ConCpaConceptoPartidaDAO(getSessionHibernate(request));
 		CtaTtrTipoTransaccionDAO tipoTransaccionDAO = new CtaTtrTipoTransaccionDAO(getSessionHibernate(request));
		List cpaList = conceptoPartidaDAO.findAll();
		List ttrList = tipoTransaccionDAO.findAll();//sacamos todas las transacciones no asociadas
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(cpaList);
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
        	//---- exporta la tabla
        //    export(tableFacade);
            return null; 
        } else {
        	String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
		request.setAttribute("ttrList", ttrList);
		request.setAttribute("form", form);
		request.setAttribute(Constantes.ACCION_KEY, "/conceptoPartida");
		return mapping.findForward("lista");
	}
	
	private String html(final TableFacade tableFacade, final HttpServletRequest request) {
		tableFacade.setColumnProperties("cpaConcepto","cpaDescripcionConcepto");
		Table table = tableFacade.getTable();
		
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.cpa.caption");
		
		Row row = table.getRow();
		Column nombreColumna = row.getColumn("cpaConcepto");
		nombreColumna.setTitleKey("tbl.cpa.cpaConcepto");
		
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				String value = null;
				CtaTtrTipoTransaccionDAO tipoTransaccionDAO = new CtaTtrTipoTransaccionDAO(getSessionHibernate(request));
				ConCpaConceptoPartida conceptoPartida = (ConCpaConceptoPartida) item;
				HtmlBuilder html = new HtmlBuilder();
				//---- Generar link para entrar a edicion
				if(conceptoPartida.getCtaTtrTipoTransaccion() == null) value = conceptoPartida.getCpaConcepto();
				else value = conceptoPartida.getCtaTtrTipoTransaccion().getTtrNombre();
				String link = tableFacade.getWebContext().getContextPath();
				link += "/contabilidad/conceptoPartida.do?cpaId="+conceptoPartida.getCpaId()+"&accion=cargarDatos&mdf=true";
				html.a().href().quote().append(link).quote().close();
				html.append(value);
				html.aEnd();				
				return html.toString();	
			}
		});
		
		nombreColumna = row.getColumn("cpaDescripcionConcepto");
		nombreColumna.setTitleKey("tbl.cpaCpaDescripcionConcepto");
		
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
			String value = null;
			ConCpaConceptoPartida conceptoPartida = (ConCpaConceptoPartida) item;
		if(conceptoPartida.getCpaDescripcionConcepto()==1) value="Libro Auxiliar";
		else value = "Partida";
				return value;
			}
		});	
		
		return tableFacade.render();
	}
	
	public ActionForward guardar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ActionErrors errors = new ActionErrors();
		ConCpaConceptoPartidaDAO conceptoPartidaDAO = new ConCpaConceptoPartidaDAO(getSessionHibernate(request));
		ConceptoPartidaForm cpaForm = (ConceptoPartidaForm) form;
		if(cpaForm.getFuente() == 0){/*concepto en texto*/
			if(cpaForm.getCpaConcepto() == null || cpaForm.getCpaConcepto().trim().equals("")){
				errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.cpa.required"));
			}
			if(!conceptoPartidaDAO.findByCpaConcepto(cpaForm.getCpaConcepto(),cpaForm.getCpaDescripcionConcepto()).isEmpty()){
				errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.cpa.conceptoRepetido"));
			}
			cpaForm.getConceptoPartidaH().setCtaTtrTipoTransaccion(null);
		}else{/*concepto en base a ttrId*/
			if(!conceptoPartidaDAO.findByTipoTransaccion(cpaForm.getTtrId(),cpaForm.getCpaDescripcionConcepto()).isEmpty()){
				errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.cpa.conceptoRepetido"));
			}
			cpaForm.getConceptoPartidaH().setCpaConcepto("");
		}
		if(errors.isEmpty()){
			Transaction tx = conceptoPartidaDAO.getSession().beginTransaction();
			try{
				conceptoPartidaDAO.save(cpaForm.getConceptoPartidaH());
				tx.commit();
			}catch (Exception e) {
				tx.rollback();
				e.printStackTrace();
			}finally{
				conceptoPartidaDAO.getSession().flush();
				conceptoPartidaDAO.getSession().clear();
				
			}
		}else saveMessages(request, errors);
		ConCpaConceptoPartida concepto = new ConCpaConceptoPartida();
		ConceptoPartidaForm nuevoForm = new ConceptoPartidaForm();
		nuevoForm.setConceptoPartidaH(concepto);
		return lista(mapping, nuevoForm, request, response);
	}

	public ActionForward modificar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ConCpaConceptoPartidaDAO cpaDAO = new ConCpaConceptoPartidaDAO(getSessionHibernate(request));
		ConceptoPartidaForm cpaForm = (ConceptoPartidaForm) form;
		ConCpaConceptoPartida cpaConceptoP = new ConCpaConceptoPartida();
		cpaConceptoP = cpaForm.getConceptoPartidaH();
		Transaction tx = cpaDAO.getSession().beginTransaction();
		try{
			if(cpaForm.getFuente()==0){//concepto escrito
				if(cpaConceptoP.getCpaConcepto()==null | cpaConceptoP.getCpaConcepto().trim().equals("")){
					mensajes("errors.cpa.required", request);
					return lista(mapping, cpaForm, request, response);
				}
				if(!cpaDAO.findByUpdate(cpaConceptoP.getCpaId(), 0, -1, cpaConceptoP.getCpaConcepto()).isEmpty()){
					mensajes("errors.cpa.conceptoRepetido", request);
					return lista(mapping, cpaForm, request, response);
				}
				cpaConceptoP.setCtaTtrTipoTransaccion(null);
			}else{
				cpaConceptoP.setCpaConcepto("");
				if(!cpaDAO.findByUpdate(cpaConceptoP.getCpaId(), 1, cpaForm.getTtrId(),"").isEmpty()){
					mensajes("errors.cpa.conceptoRepetido", request);
					return lista(mapping, cpaForm, request, response);
				}
			}
			cpaDAO.merge(cpaForm.getConceptoPartidaH());
			tx.commit();
		}catch (Exception e) {
			tx.rollback();
			e.printStackTrace();
		}finally{
			cpaDAO.getSession().flush();
			cpaDAO.getSession().clear();
			
		}
		cpaForm.setMdf(false);
		return lista(mapping,cpaForm, request, response);
	}
	
	public void mensajes(String msg, HttpServletRequest request){
		ActionErrors errors = new ActionErrors();
		errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(msg));
		saveMessages(request, errors);
	}
	
	public ActionForward cargarDatos(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ConCpaConceptoPartidaDAO conceptoPartidaDAO = new  ConCpaConceptoPartidaDAO(getSessionHibernate(request));
		ConceptoPartidaForm cpaForm = (ConceptoPartidaForm) form;
		CtaTtrTipoTransaccion tipoTrans = new CtaTtrTipoTransaccion();
		CtaTtrTipoTransaccionDAO tipoTransDAO = new CtaTtrTipoTransaccionDAO(getSessionHibernate(request));
		
		cpaForm.setConceptoPartidaH(conceptoPartidaDAO.findById(cpaForm.getCpaId()));
		cpaForm.setConceptoPartidaH(conceptoPartidaDAO.findById(cpaForm.getCpaId()));
		if(cpaForm.getCtaTtrTipoTransaccion() == null){
			cpaForm.setFuente(0);

		}
		else {
			cpaForm.setFuente(1);
			cpaForm.setTtrId(cpaForm.getCtaTtrTipoTransaccion().getTtrId());
		}
		return lista(mapping, form, request, response);
	}
	
	public ActionForward redirectInvalidData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ActionErrors errors = (ActionErrors)request.getSession().getAttribute(Constantes.ERRORS);
		saveMessages(request, errors);
		return lista(mapping, form, request, response);
	}
	
	
	protected Map<String, String> getKeyMethodMap() {
		Map<String, String> map = new HashMap<String, String>();
		map.put("cmd.cpa.lista","lista");
		map.put("cmd.cpa.guardar","guardar");
		map.put("cmd.cpa.modificar","modificar");
		map.put("cmd.cpa.cargarDatos","cargarDatos");
		map.put("cmd.cpa.redirectInvalidData","redirectInvalidData");
		return map;
	}
	
	
}