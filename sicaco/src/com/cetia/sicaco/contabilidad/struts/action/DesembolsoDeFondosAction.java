/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.contabilidad.struts.action;

import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.hibernate.Transaction;

import com.cetia.sicaco.contabilidad.struts.form.DesembolsoDeFondosForm;
import com.cetia.sicaco.hibernate.ConCueCuenta;
import com.cetia.sicaco.hibernate.ConCueCuentaDAO;
import com.cetia.sicaco.hibernate.ConDdfDesembolsoDeFondos;
import com.cetia.sicaco.hibernate.ConDdfDesembolsoDeFondosDAO;
import com.cetia.sicaco.hibernate.CtrBanBancoDAO;
import com.cetia.sicaco.hibernate.HibernateSessionFactory;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;
import com.cetia.sicaco.struts.PartidaAutomatica;
import com.mad.utilidades.Cuenta;

/**
 * Mr. Struts Creation date: 11-17-2009
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/fondosOficina" name="fondosOficinaForm"
 *                parameter="accion" scope="request"
 * @struts.action-forward name="dml"
 *                        path="pagina-dml.contabilidad.fondosOficina"
 */
public class DesembolsoDeFondosAction extends DMLAction {

	public ActionForward dml(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		request.setAttribute(Constantes.ACCION_KEY, "/desembolsoDeFondos");
		ConCueCuentaDAO cuentaDAO = new ConCueCuentaDAO(getSessionHibernate(request));
		CtrBanBancoDAO bDAO= new CtrBanBancoDAO(getSessionHibernate(request));
		// cargando la lista de bancos disponibles:
		List bancos = cuentaDAO.getBancos();
		List bancosC =bDAO.findAll();
		
		request.setAttribute("bancosC", bancosC);
		request.setAttribute("bancos", bancos);
		// cargando el saldo disponible en la cuenta de "DEPOSITOS BANCARIOS EN TRANSITO":
		ConCueCuentaDAO cueDAO = new ConCueCuentaDAO(getSessionHibernate(request));
		ConCueCuenta fondosOf = (ConCueCuenta)cueDAO.findByCueCodigoCuenta("2140308").get(0);
		Double saldoOf = fondosOf.getCueSaldoActual()-calcularTotalDesembolso(request);
		DecimalFormat df = new DecimalFormat("0.00");
		String saldo = df.format(saldoOf);
		request.getSession().setAttribute("saldoOf", saldo);
		return mapping.findForward("dml");
	}

	public ActionForward aceptar(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {

		// Obtener los desembolsos y actualizo la cuenta de Depositos bancarios en transito 
		ConDdfDesembolsoDeFondosDAO ddfDao = new ConDdfDesembolsoDeFondosDAO(getSessionHibernate(request));
		ConCueCuentaDAO cueDAO = new ConCueCuentaDAO(getSessionHibernate(request));
		Transaction tx = cueDAO.getSession().beginTransaction();
		Transaction tddf = ddfDao.getSession().beginTransaction();
		DesembolsoDeFondosForm ddfForm = (DesembolsoDeFondosForm)form;
		List l = ddfDao.findAll();
		Iterator i = l.iterator();
		String usuario =ddfForm.getUsuarioConectado().getNombreUsuario();
		String concepto="";
		String tipo = "A";
		Double total =0.00;
			// Actualizar las cuentas de bancos
		while (i.hasNext()){
			ConDdfDesembolsoDeFondos ddf = (ConDdfDesembolsoDeFondos)i.next();
			ConCueCuenta banco = (ConCueCuenta) cueDAO.findByCueCodigoCuenta(ddf.getCodigoCuenta()).get(0);
			/*			banco.setAudFechaModificacion(new Date());
			Double saldoBan = banco.getCueSaldoActual()- (ddf.getAhorros()+ddf.getPrestamos()+ddf.getProveedores());
			banco.setCueSaldoActual(saldoBan);
			concepto = banco.getCueNombre();*/
			
			// Enviar el banco a conta
			Double  monto = ddf.getAhorros()+ddf.getPrestamos()+ddf.getProveedores();
			total+=monto;
			PartidaAutomatica partidaAutomatica =  new PartidaAutomatica();
			partidaAutomatica.crearPartidaAutomaticaCC2(banco.getCueId()
					.toString(),monto,tipo, usuario,concepto,request);
			cueDAO.merge(banco);
		}
			
		// Actualizar la cuenta de Depositos bancarios en transito  
		
		ConCueCuenta depositosBancarios = (ConCueCuenta) cueDAO.findByCueCodigoCuenta("2140308").get(0);
		depositosBancarios.setAudFechaModificacion(new Date());
/*		Double saldo = depositosBancarios.getCueSaldoActual() + total;
		depositosBancarios.setCueSaldoActual(saldo);
		cueDAO.merge(depositosBancarios);*/

		tx.commit();


		// Enviar a Contabilidad la cuenta depositos bancarios en transito;
		tipo="C";
		concepto=depositosBancarios.getCueNombre();
		PartidaAutomatica partidaAutomatica =  new PartidaAutomatica();
		partidaAutomatica.crearPartidaAutomaticaCC2(depositosBancarios.getCueId().toString(), total, tipo, usuario,concepto,request);
		//Exito
		mensajes("lbl.desembolsoDeFondos.exito",request);
		ddfDao.deleteAll();
		tddf.commit();

		
		ddfDao.getSession().flush();
		ddfDao.getSession().clear();
		
		cueDAO.getSession().flush();
		cueDAO.getSession().clear();
		
		return dml(mapping, new DesembolsoDeFondosForm(), request, response);
	}
	
	public Double calcularTotalDesembolso(HttpServletRequest request){
		Double total = 0.00;
		ConDdfDesembolsoDeFondosDAO ddfDao = new ConDdfDesembolsoDeFondosDAO(getSessionHibernate(request));
		DecimalFormat df = new DecimalFormat("0.00");
		List l = ddfDao.findAll();
		Iterator i = l.iterator();
		while (i.hasNext()){
			ConDdfDesembolsoDeFondos ddf = (ConDdfDesembolsoDeFondos)i.next();
			Double  monto = ddf.getAhorros()+ddf.getPrestamos()+ddf.getProveedores();
			total+=monto;
		}
		try {
			return df.parse(df.format(total.doubleValue())).doubleValue();
		} catch (ParseException e) {
			e.printStackTrace();
		} 
		return 0.00;
	}

	public ActionForward cancelar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		ConDdfDesembolsoDeFondosDAO ddfDao = new ConDdfDesembolsoDeFondosDAO(getSessionHibernate(request));
		Transaction tddf = ddfDao.getSession().beginTransaction();
		mensajes("lbl.desembolsoDeFondos.cancelar",request);
		ddfDao.deleteAll();
		tddf.commit();
		ddfDao.getSession().flush();
		ddfDao.getSession().clear();
		
		return dml(mapping, new DesembolsoDeFondosForm(), request, response);
			
			
	}
	
	public ActionForward actualizarPrestamos(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		DesembolsoDeFondosForm  df = (DesembolsoDeFondosForm)form;
		String banco = df.getIdBancoC();
		String sql = 
			"SELECT " +
				"ctr_ban_banco.`BAN_NOMBRE` AS banco, " +
				"ctr_ban_banco.`BAN_ID` AS banId, " +
				"cta_stb_sol_trans_banc.`stb_razon` AS razon, " +
				"SUM(cta_stb_sol_trans_banc.`stb_monto`) AS monto " +
				"FROM " +
				"`cta_cba_cuenta_bancaria` cta_cba_cuenta_bancaria INNER JOIN `cta_stb_sol_trans_banc` cta_stb_sol_trans_banc " +
				"ON cta_cba_cuenta_bancaria.`CBA_ID` = cta_stb_sol_trans_banc.`cba_id`     " +
				"INNER JOIN `ctr_ban_banco` ctr_ban_banco " +
				"ON cta_cba_cuenta_bancaria.`BAN_ID` = ctr_ban_banco.`BAN_ID` " +
				"WHERE " +
				"cta_stb_sol_trans_banc.`stb_razon` = 'Deposito Pago Prestamo Electronico' AND ctr_ban_banco.`BAN_ID`  = '"+banco+"' AND STB_ESTADO = 'E'" +
						"GROUP BY ctr_ban_banco.`BAN_ID` ";
		
		String jdbcDriver = "com.mysql.jdbc.Driver";
		String sql2 = "SELECT SUM(prestamos) as SumPrestamos " +
				"FROM con_ddf_desembolso_de_fondos c " +
				"Where ban_id = "+banco;
		
		Double saldo = 0.00;
		Double restar = 0.00;
		try {
			
			Class.forName(jdbcDriver);
			String url = HibernateSessionFactory.getConfiguration().getProperty("connection.url");
			String user = HibernateSessionFactory.getConfiguration().getProperty("connection.username");
			String pass = HibernateSessionFactory.getConfiguration().getProperty("connection.password");
			
			Connection con = DriverManager.getConnection(url, user, pass);
			Statement st = con.createStatement();
			ResultSet rs = st.executeQuery(sql);
			
			while(rs.next()){
				saldo = rs.getDouble("monto");				
			}
			ResultSet rs2 = st.executeQuery(sql2);
			
			while(rs2.next()){
				restar = rs2.getDouble("SumPrestamos");				
			}
			
			if(restar == null)restar = 0.00;
			if(saldo == null)saldo = 0.00;
			saldo=saldo-restar;
			String listaResponse=construirInput("prestamos", saldo);
			
			response.getWriter().write(listaResponse);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	public ActionForward actualizarAhorros(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		DesembolsoDeFondosForm  df = (DesembolsoDeFondosForm)form;
		String banco = df.getIdBancoC();
		String sql = 
			"SELECT " +
				"ctr_ban_banco.`BAN_NOMBRE` AS banco, " +
				"ctr_ban_banco.`BAN_ID` AS banId, " +
				"cta_stb_sol_trans_banc.`stb_razon` AS razon, " +
				"SUM(cta_stb_sol_trans_banc.`stb_monto`) AS monto " +
				"FROM " +
				"`cta_cba_cuenta_bancaria` cta_cba_cuenta_bancaria INNER JOIN `cta_stb_sol_trans_banc` cta_stb_sol_trans_banc " +
				"ON cta_cba_cuenta_bancaria.`CBA_ID` = cta_stb_sol_trans_banc.`cba_id`     " +
				"INNER JOIN `ctr_ban_banco` ctr_ban_banco " +
				"ON cta_cba_cuenta_bancaria.`BAN_ID` = ctr_ban_banco.`BAN_ID` " +
				"WHERE " +
				"cta_stb_sol_trans_banc.`stb_razon` = 'Deposito pago ahorros electronicos' AND ctr_ban_banco.`BAN_ID`  = '"+banco+"' AND STB_ESTADO = 'E'" +
				"GROUP BY ctr_ban_banco.`BAN_ID` ";;
		
		String jdbcDriver = "com.mysql.jdbc.Driver";
		String sql2 = "SELECT SUM(ahorros) as SumAhorros " +
				"FROM con_ddf_desembolso_de_fondos c " +
				"Where ban_id = "+banco;
		
		Double saldo = 0.00;
		Double restar = 0.00;
		try {
			
			Class.forName(jdbcDriver);
			String url = HibernateSessionFactory.getConfiguration().getProperty("connection.url");
			String user = HibernateSessionFactory.getConfiguration().getProperty("connection.username");
			String pass = HibernateSessionFactory.getConfiguration().getProperty("connection.password");
			
			Connection con = DriverManager.getConnection(url, user, pass);
			Statement st = con.createStatement();
			ResultSet rs = st.executeQuery(sql);
			
			while(rs.next()){
				saldo = rs.getDouble("monto");				
			}
			ResultSet rs2 = st.executeQuery(sql2);
			
			while(rs2.next()){
				restar = rs2.getDouble("SumAhorros");				
			}
			
			if(restar == null)restar = 0.00;
			if(saldo == null)saldo = 0.00;
			saldo=saldo-restar;
			String listaResponse=construirInput("ahorros", saldo);
			
			response.getWriter().write(listaResponse);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	public ActionForward actualizarProveedores(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {

		DesembolsoDeFondosForm  df = (DesembolsoDeFondosForm)form;
		String banco = df.getIdBancoC();
		String sql = 
					"SELECT " +
					"sum(stb_monto) as monto " +
					"FROM " +
					"`cta_stb_sol_trans_banc` cta_stb_sol_trans_banc " +
					"where " +
					"`BAN_ID`  = "+banco+" AND STB_ESTADO = 'E' " +
					"and cta_stb_sol_trans_banc.`PRO_ID` is not null";
				
		String jdbcDriver = "com.mysql.jdbc.Driver";
		String sql2 = 
				"SELECT SUM(proveedores) as SumProveedores " +
				"FROM con_ddf_desembolso_de_fondos c " +
				"Where ban_id = "+banco;
		
		Double saldo = 0.00;
		Double restar = 0.00;
		try {
			
			Class.forName(jdbcDriver);
			String url = HibernateSessionFactory.getConfiguration().getProperty("connection.url");
			String user = HibernateSessionFactory.getConfiguration().getProperty("connection.username");
			String pass = HibernateSessionFactory.getConfiguration().getProperty("connection.password");
			
			Connection con = DriverManager.getConnection(url, user, pass);
			Statement st = con.createStatement();
			ResultSet rs = st.executeQuery(sql);
			
			while(rs.next()){
				saldo = rs.getDouble("monto");				
			}
			ResultSet rs2 = st.executeQuery(sql2);
			
			while(rs2.next()){
				restar = rs2.getDouble("SumProveedores");				
			}
			
			if(restar == null)restar = 0.00;
			if(saldo == null)saldo = 0.00;
			saldo=saldo-restar;
			String listaResponse=construirInput("proveedores", saldo);
			
			response.getWriter().write(listaResponse);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	
	}
	
	public ActionForward actualizarSaldo(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		try {
			ConCueCuentaDAO cueDAO = new ConCueCuentaDAO(getSessionHibernate(request));
			ConCueCuenta fondosOf = (ConCueCuenta)cueDAO.findByCueCodigoCuenta("2140308").get(0);
			Double saldoOf = fondosOf.getCueSaldoActual()-calcularTotalDesembolso(request);
			DecimalFormat df = new DecimalFormat("0.00");
			String saldo = df.format(saldoOf);
			request.getSession().setAttribute("saldoOf", saldo);

			String listaResponse=construirInput("proveedores", saldoOf);
			
			response.getWriter().write(listaResponse);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	
	}
	
	
	public ActionForward actualizarCierre(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		return null;
	}

	public ActionForward cargarListaCuentas(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		ConCueCuentaDAO cuentaDAO = new ConCueCuentaDAO(getSessionHibernate(request));
		DesembolsoDeFondosForm fof = (DesembolsoDeFondosForm) form;
		try {
			String listaResponse = "";
			String tipo = fof.getBanId().toString().substring(0, 1);
			String bancoId = fof.getBanId().toString().substring(1);
			listaResponse = construirListaCuentas(cuentaDAO.getCuentasDeBanco(
					bancoId, tipo));
			response.getWriter().write(listaResponse);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (RuntimeException e) {
			log.error("Error runtime", e);
		} catch (IOException e) {
			log.error(e);
		}
		return null;
	}

	public ActionForward cargarSaldoCuenta(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		ConCueCuentaDAO cuentaDAO = new ConCueCuentaDAO(getSessionHibernate(request));
		DesembolsoDeFondosForm df = (DesembolsoDeFondosForm) form;
		try {
			String listaResponse = "";
			String cueId = df.getCueId();
			if(cueId.equals("-1")){
				listaResponse = construirInput("saldoCue" ,0.00);
			}else{
				ConCueCuenta cuenta =  (ConCueCuenta) cuentaDAO.findByCueCodigoCuenta(cueId).get(0);
				Double descontar = calcularDescuentoCuenta(cuenta.getCueCodigoCuenta(),request);
				listaResponse = construirInput("saldoCue" ,cuenta.getCueSaldoActual()+descontar);
			}
			response.getWriter().write(listaResponse);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	public Double calcularDescuentoCuenta (String cueCodigo,HttpServletRequest request){
		ConDdfDesembolsoDeFondosDAO dao = new ConDdfDesembolsoDeFondosDAO(getSessionHibernate(request));
		List esteBanco = dao.findByProperty("codigoCuenta", cueCodigo);
		Iterator i = esteBanco.iterator();
		Double total = 0.00;
		while(i.hasNext()){
			ConDdfDesembolsoDeFondos ddf = (ConDdfDesembolsoDeFondos)i.next();
			total+=ddf.getAhorros()+ddf.getPrestamos()+ddf.getProveedores();
		}
		return total;
	}
	
	private String construirInput(String id, Double value){
		DecimalFormat df = new DecimalFormat("0.00");
		
		String resp = "<input  id=\""+id+"\"  name=\""+id+"\" type=\"text\" readonly=\"readonly\" value=\""+df.format(value)+"\" style=\"width: 100px; \"/>";
		return resp;		
	}
	
	private String construirListaCuentas(List listaCuentas) {
		String resp = "";
		if (listaCuentas == null || listaCuentas.isEmpty()) {
			resp += "<span style=\"font-size: 10px;color: red;font-style: italic;\">"
					+ "    No se encontraron cuentas asociadas.</span>";
		} else {
			resp = "<select id=\"cuentaId\" name=\"cuentaId\"  style=\"width: 350px; font-family: 'Lucida Sans Unicode', 'Lucida Grande', Sans-Serif; font-size: 13px;\" onchange=\"cargaSaldo(this.value);\">";
			resp += "<option value=\"-1\">- - -Seleccione una cuenta- - -</option>";
			for (Iterator<Cuenta> iterator = listaCuentas.iterator(); iterator
					.hasNext();) {
				Cuenta cuenta = iterator.next();
				resp += "<option value=\"" + cuenta.getCodigo() + "\">"
						+ cuenta.getNombre() + "</option>";
			}
			resp += "</select>";
		}
		return resp;
	}

	public void mensajes(String msg, HttpServletRequest request) {
		ActionErrors errors = new ActionErrors();
		errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(msg));
		saveMessages(request, errors);
	}

	
	private String construirListaErrores2(ArrayList<String> errors) {
		String errores = "<label align=\"center\" style=\"color: red;text-transform: none\">Se han encontrado los siguientes errores:</label><br>";
		Iterator<String> it = errors.iterator();
		while (it.hasNext()) {
			errores = errores
					+ "<label style=\"color: red;text-transform: none\">- "
					+ it.next() + "</label><br>";
		}
		return errores;
	}

	
	private String construirListaErrores(ArrayList<String> errors) {
		String errores = "<div id = \"errores\" style=\"text-align:left; width: 48%; font-family:Arial, Helvetica, sans-serif; font-size:11px; color:#F16F6F; background-color: #ffe7e7; border: 1px solid; margin: 10px 0px; padding:5px 5px 5px 5px; background-repeat: no-repeat; background-position: 10px center\"><b>Se han encontrado los siguientes errores:</b></br><UL>";
		Iterator<String> it = errors.iterator();
		while (it.hasNext()) {
			errores = errores + "<li>" + it.next() + "</li>";
		}
		errores = errores
				+ "<UL> <div align=\"right\"> <input type=\"button\"  value=\"ok\" style = \"font-size: 11;\" onclick=\"$('#errores').fadeOut()\"/> </div>"
				+ "</div>";
		return errores;
	}

	
	private String construirListaDesembolsos(HttpServletRequest request){
		ConDdfDesembolsoDeFondosDAO dao = new ConDdfDesembolsoDeFondosDAO(getSessionHibernate(request));	
		List mapa = dao.findAll();
		DecimalFormat df = new DecimalFormat("0.00");
		
		String html = "<table id=\"hor-zebra\" style=\"width: 50%; margin: auto;\" align=\"center\">";
		html = html
				+ "<thead><tr><th scope=\"col\" class=\"th1\" style=\"text-align: left;\">&nbsp;</th>"
				+ "<th scope=\"col\" class=\"th1\" style=\"text-align: left;\" > Banco y cuenta bancaria </th>"
				+ "<th scope=\"col\" class=\"th1\" style=\"text-align: left;\" >Valor</th>"
				+ "</tr></thead><tbody>";
		int j = 1, size;
		size = mapa.size();
		if (size > 0) {
			Iterator iterator = mapa.iterator();
			String valor = "";
			while (iterator.hasNext()) {
				ConDdfDesembolsoDeFondos desembolso = (ConDdfDesembolsoDeFondos) iterator.next();
				valor = df.format(desembolso.getAhorros()+desembolso.getPrestamos()+desembolso.getProveedores());
				ConCueCuentaDAO cueDAO = new ConCueCuentaDAO(getSessionHibernate(request));
				ConCueCuenta cuenta = (ConCueCuenta) cueDAO.findByCueCodigoCuenta(desembolso.getCodigoCuenta()).get(0);
				String cuent = cuenta.getCueNombre(); 
				if (j % 2 == 0) {
					html = html + "<tr scope=\"row\">";
					html = html
							+ "<td><input type=\"checkbox\" name=\"posicionDesembolsos\" class=\"posicionDesembolsos\" value=\""
							+ desembolso.getId()
							+ "\"/></td>"
							+ "<td>"
							+ cuent
							+ "</td><td><input type=\"text\" name=\"montoRemesa\" value=\""
							+ valor
							+ "\" id=\""
							+ desembolso.getId()
							+ "\" style=\"border: none;background-color: ffffff;\" readonly=\"readonly\" class=\"input\"/></td></tr>";
				} else {
					html = html + "<tr class=\"odd\" scope=\"row\">";
					html = html
							+ "<td><input type=\"checkbox\" name=\"posicionDesembolsos\" class=\"posicionDesembolsos\" value=\""
							+ desembolso.getId()
							+ "\"/></td>"
							+ "<td>"
							+ cuent
							+ "</td><td><input type=\"text\" name=\"montoRemesa\" value=\""
							+ valor
							+ "\" id=\""
							+ desembolso.getId()
							+ "\" style=\"border: none;background-color: #e8edff;\" readonly=\"readonly\" class=\"input\"/></td></tr>";
				}
				j++;
			}
		} else {
			html = html
					+ "<tr class=\"odd\"><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>"
					+ "<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>";
		}
		html = html + "<tr class=\"foot\">" +
							"<td colspan=\"2\">" +
								"<em>Total a transferir:</em>" +
							"</td>" +
							"<td style=\"padding-bottom: 10px; text-align: center; font-size: 12px;\">" +
								"<div id=\"totalTransferir\">" +
									+calcularTotalDesembolso(request)+
								"</div>" +
							"</td>" +
						"</tr>" +
				"</tbody></table>";
		return html;
	}

	
	public ActionForward guardarDesembolso(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		DesembolsoDeFondosForm ddf = (DesembolsoDeFondosForm) form;
		String listaResponse = "";
		String listaErrores = "";
		DecimalFormat df = new DecimalFormat("0.00");
		ConDdfDesembolsoDeFondosDAO dao = new ConDdfDesembolsoDeFondosDAO(getSessionHibernate(request));
		Transaction t = dao.getSession().beginTransaction();
		ConDdfDesembolsoDeFondos desembolso = new ConDdfDesembolsoDeFondos();
		ArrayList<String> errors = new ArrayList<String>();
		try{
			Integer banId = new Integer(ddf.getIdBancoC());
			String cueId = ddf.getCueId();
			Double transferir = ddf.getTransferir();
			Double saldoCue = ddf.getSaldoCue();
			Double ahorros =0.00;
			Double prestamos= 0.00;
			Double proveedores = 0.00;
			
			if (ddf.isChkAhorros()){
				ahorros = ddf.getAhorros();
			}
			if (ddf.isChkPrestamos()){
				prestamos = ddf.getPrestamos();
			}
			if(ddf.isChkProveedores()){
				proveedores = ddf.getProveedores();
			}
			if (banId == 0){
				errors.add("Debe seleccionar un banco de procedencia de pago electronico");
			}
			if (cueId.equals("-1")){
				errors.add("Debe seleccionar una cuenta bancaria contable a afectar");
			}
			if(transferir == 0){
				errors.add("El valor a transferir debe ser mayor a cero");
			}
			if(!ddf.getBancoD().equalsIgnoreCase(ddf.getBancoF())){
				errors.add("Los nombres de los bancos no coinciden");
			}
			double total =ahorros+prestamos+proveedores;
			
			ConCueCuentaDAO cueDAO = new ConCueCuentaDAO(getSessionHibernate(request));
			ConCueCuenta depTran = (ConCueCuenta)cueDAO.findByCueCodigoCuenta("2140308").get(0);
			Double saldoOf = depTran.getCueSaldoActual()-calcularTotalDesembolso(request);
			saldoOf = Double.parseDouble(df.format(saldoOf));
			
			if(saldoOf  <  total){
				errors.add("El saldo en la cuenta "+depTran.getCueNombre()+" no es suficiente para cubrir el desembolso");
			}
			
			if (!errors.isEmpty()) {
				listaErrores = construirListaErrores(errors);
			} else {
	
				desembolso.setBanId(banId);
				desembolso.setAhorros(ahorros);
				desembolso.setPrestamos(prestamos);
				desembolso.setProveedores(proveedores);
				desembolso.setCodigoCuenta(ddf.getCueId());
				desembolso.setFecha(new Date());
				dao.save(desembolso);
				t.commit();
			}
			listaResponse = construirListaDesembolsos(request);
			response.getWriter().write(listaErrores + listaResponse);
			response.getWriter().flush();
			response.getWriter().close();
			
		}catch (Exception e) {
			t.rollback();
			e.printStackTrace();
		}
		return null;
	}

	public ActionForward eliminarDesembolso(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ConDdfDesembolsoDeFondosDAO dao = new ConDdfDesembolsoDeFondosDAO(getSessionHibernate(request));
		Transaction t = dao.getSession().beginTransaction();
		DesembolsoDeFondosForm ddf = (DesembolsoDeFondosForm) form;
		if (ddf.getPosicionDesembolsos() != null) {
			int size = ddf.getPosicionDesembolsos().length;
			int i = 0;
			while (i < size) {
				ConDdfDesembolsoDeFondos desembolso = dao.findById(ddf.getPosicionDesembolsos()[i]);
				dao.delete(desembolso);
				i++;
			}
		}
		try {
			t.commit();
			response.getWriter().write(construirListaDesembolsos(request));
			response.getWriter().flush();
			response.getWriter().close();			
		} catch (IOException e) {
			e.printStackTrace();
			t.rollback();
		}
		return null;
	}

	
	protected Map<String, String> getKeyMethodMap() {
		HashMap<String, String> map = new HashMap<String, String>();
		// desembolsoDeFondos
		map.put("cmd.fondosOficina.dml", "dml");
		map.put("cmd.desembolsoDeFondos.aceptar", "aceptar");
		map.put("cmd.fondosOficina.cancelar", "cancelar");
		map.put("cmd.fondosOficina.actualizarCierre", "actualizarCierre");
		map.put("cmd.fondosOficina.cargarListaCuentas", "cargarListaCuentas");
		map.put("cmd.desembolsoDeFondos.guardarDesembolso", "guardarDesembolso");
		map.put("cmd.desembolsoDeFondos.eliminarDesemboslo", "eliminarDesembolso");
		map.put("cmd.desembolsoDeFondos.actualizarPrestamos", "actualizarPrestamos");
		map.put("cmd.desembolsoDeFondos.actualizarAhorros", "actualizarAhorros");
		map.put("cmd.desembolsoDeFondos.actualizarProveedores", "actualizarProveedores");
		map.put("cmd.desembolsoDeFondos.cargarSaldoCuenta", "cargarSaldoCuenta");
		map.put("cmd.desembolsoDeFondos.actualizarSaldo", "actualizarSaldo");
		

		return map;
	}
}