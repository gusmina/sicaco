/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.seguridad.struts.action;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.hibernate.Transaction;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeFactory;
import org.jmesa.facade.TableFacadeImpl;
import org.jmesa.limit.ExportType;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.BasicCellEditor;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.html.HtmlBuilder;

import com.cetia.sicaco.hibernate.SecSucSucursal;
import com.cetia.sicaco.hibernate.SecSucSucursalDAO;
import com.cetia.sicaco.seguridad.struts.form.SucursalForm;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;

/** 
 * MyEclipse Struts
 * Creation date: 05-14-2008
 * 
 * XDoclet definition:
 * @struts.action path="/sucursal" name="sucursalForm" input="redirectInvalidData" parameter="accion" scope="request" validate="true"
 * @struts.action-forward name="lista" path="pagina-lista.seguridad.sucursal"
 */
public class SucursalAction extends DMLAction {
	/*
	 * Generated Methods
	 */

	public static final String TABLA_ID = "secSucSucursal";
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		SucursalForm sucursalForm = (SucursalForm)form;
		SecSucSucursalDAO sucursalDAO = new SecSucSucursalDAO(getSessionHibernate(request));
		List lst  = sucursalDAO.findAll();
		//paginacion roberto
		TableFacade tableFacade = TableFacadeFactory.createTableFacade(TABLA_ID ,request );
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		int totalRows = sucursalDAO.getTotalRowCount();
		tableFacade.setTotalRows(totalRows);
		int rowStart = limit.getRowSelect().getRowStart();
		int rowEnd = limit.getRowSelect().getRowEnd();
		lst = sucursalDAO.findAll(rowStart, rowEnd);
		tableFacade.setItems(lst);
		//fin paginacion roberto
		/*
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);//, ExportType.PDF);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		*/
		if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
		request.setAttribute(Constantes.ACCION_KEY, "/sucursal");
        request.setAttribute("filtro", "1");
		return mapping.findForward("lista");
		 
	}
	
	//---- Funcion que genera el html de la tabla del jmesa
	private String html(final TableFacade tableFacade, final HttpServletRequest request) {
		tableFacade.setColumnProperties("sucNombre","sucDireccion","sucEstado","sucId" );
		Table table = tableFacade.getTable();
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.suc.caption");
		
		Row row = table.getRow();
		Column nombreColumna = row.getColumn("sucNombre");
		nombreColumna.setTitleKey("tbl.suc.sucNombre");
		
		nombreColumna = row.getColumn("sucDireccion");
		nombreColumna.setTitleKey("tbl.suc.sucDireccion");
		
		nombreColumna = row.getColumn("sucEstado");
		nombreColumna.setTitleKey("tbl.suc.sucEstado");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				if(value.equals("A")) value = "activo";
				else value = "inactivo";
				return value;
			}
		});
		
		nombreColumna = row.getColumn("sucId");
		nombreColumna.setTitleKey("tbl.suc.eliminar");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				String value ;
				String clase = "class=\"linkActivar\"";
				SecSucSucursal sucursal = (SecSucSucursal)item;
				HtmlBuilder html = new HtmlBuilder();
				if(sucursal.getSucEstado().equals("A")){
					value="Inactivar";
					clase = "class=\"linkInActivar\"";
				}
				else value="Reactivar";
				String link = tableFacade.getWebContext().getContextPath();
				//html.a().onclick("handlerDeleteButton1('sucId="+ sucursal.getSucId()+ "');").id("deleteButtonId").href("#").close();
				html.a().onclick("handlerDeleteButton("+ sucursal.getSucId()+ ");").append(clase).title(value).id("deleteButtonId").href("#").close();
				//html.append(value);
				html.aEnd().ulEnd();
				
				HtmlBuilder html2 = new HtmlBuilder();
				value="Eliminar";
				html2.a().onclick("handlerDeleteButton2("+ sucursal.getSucId()+ ");").append("class=\"linkEliminar\"").title(value).id("deleteButtonId2").href("#").close();
				//html2.append(value);
				html2.aEnd().ulEnd();
								
				return html.toString() + " | " + html2.toString();
			}
		});
		
		return tableFacade.render();
	}
	
	//---- Funcion que genera los exports, el formato que tendran
	 private void export(final TableFacade tableFacade) {
		tableFacade.setColumnProperties("sucNombre","sucDireccion","sucEstado");
		Table table = tableFacade.getTable();
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.suc.caption");
		
		Row row = table.getRow();
		Column nombreColumna = row.getColumn("sucNombre");
		nombreColumna.setTitleKey("tbl.suc.sucNombre");
		
		nombreColumna = row.getColumn("sucDireccion");
		nombreColumna.setTitleKey("tbl.suc.sucDireccion.x");
		
		nombreColumna = row.getColumn("sucEstado");
		nombreColumna.setTitleKey("tbl.suc.sucEstado");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				if(value.equals("A")) value = "activo";
				else value = "inactivo";
				return value;
			}
		});
		
		tableFacade.render();
	}
	 
	public ActionForward guardar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		SucursalForm sucursalForm = (SucursalForm)form;
		SecSucSucursalDAO sucursalDAO = new SecSucSucursalDAO(getSessionHibernate(request));
		if(sucursalDAO.findBySucNombre(sucursalForm.getSucNombre()).size() > 0){
			ActionErrors errors = new ActionErrors();
			errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.suc.repedito"));
	        saveMessages(request, errors);
	        return lista(mapping, form, request, response);
		}
		Transaction tx = sucursalDAO.getSession().beginTransaction();
		try {
			sucursalForm.getSucursalH().setSucEstado("A");
			sucursalDAO.save(sucursalForm.getSucursalH());
			tx.commit();
		} catch (Exception e) {
			// TODO: handle exception
			tx.rollback();
			e.printStackTrace();
		}finally{
			sucursalDAO.getSession().flush();
			sucursalDAO.getSession().clear();
			
		}
		SucursalForm sucursalForm2 = new SucursalForm();
		return lista(mapping,sucursalForm2,request,response);
	}

	public ActionForward eliminar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		SucursalForm sucursalForm = (SucursalForm)form;
		SecSucSucursalDAO sucursalDAO = new SecSucSucursalDAO(getSessionHibernate(request));
		Transaction tx = sucursalDAO.getSession().beginTransaction();
		try {
			sucursalForm.setSucursalH(sucursalDAO.findById(sucursalForm.getSucId()));
			if(sucursalForm.getSucursalH().getSucEstado().equals("A")){
				sucursalForm.getSucursalH().setSucEstado("I");
			}else{
				sucursalForm.getSucursalH().setSucEstado("A");
			}
			sucursalDAO.merge(sucursalForm.getSucursalH());
			tx.commit();
		} catch (Exception e) {
			// TODO: handle exception
			tx.rollback();
			e.printStackTrace();
		}finally{
			sucursalDAO.getSession().flush();
			sucursalDAO.getSession().clear();
			
		}
		SucursalForm sucursalForm2 = new SucursalForm();
		return lista(mapping,sucursalForm2,request,response);
	}
	
	public ActionForward eliminar2(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		SucursalForm sucursalForm = (SucursalForm)form;
		SecSucSucursalDAO sucursalDAO = new SecSucSucursalDAO(getSessionHibernate(request));
		Transaction tx = sucursalDAO.getSession().beginTransaction();
		try {
			SecSucSucursal sucursal = sucursalDAO.findById(sucursalForm.getSucId());
			if(sucursal.getSecPerPersonas().size() > 0){
				ActionErrors errors = new ActionErrors();
				errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.suc.hijos"));
		        saveMessages(request, errors);
		        return lista(mapping, form, request, response);
			}
			sucursalDAO.delete(sucursal);
			tx.commit();
		} catch (Exception e) {
			// TODO: handle exception
			tx.rollback();
			e.printStackTrace();
		}finally{
			sucursalDAO.getSession().flush();
			sucursalDAO.getSession().clear();
			
		}
		SucursalForm sucursalForm2 = new SucursalForm();
		return lista(mapping,sucursalForm2,request,response);
	}
	
	public ActionForward redirectInvalidData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		ActionErrors errors = (ActionErrors)request.getSession().getAttribute(Constantes.ERRORS);
		SecSucSucursalDAO sucursalDAO = new SecSucSucursalDAO(getSessionHibernate(request));
		List lst = null;
		Transaction tx = sucursalDAO.getSession().beginTransaction();
		lst  = sucursalDAO.findAll();
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);//, ExportType.PDF);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
		request.setAttribute(Constantes.ACCION_KEY, "/sucursal");
        request.setAttribute("filtro", "1");
		saveMessages(request, errors);
		return mapping.findForward("lista");
	}
	
	
	protected Map getKeyMethodMap() {
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.suc.lista", "lista");
		map.put("cmd.suc.guardar", "guardar");
		map.put("cmd.suc.eliminar", "eliminar");
		map.put("cmd.suc.eliminar2", "eliminar2");
		map.put("cmd.suc.redirectInvalidData", "redirectInvalidData");
		return map;
	}
}