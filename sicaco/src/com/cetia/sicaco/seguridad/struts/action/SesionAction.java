/*
o e * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.seguridad.struts.action;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.hibernate.NonUniqueResultException;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeImpl;
import org.jmesa.limit.ExportType;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.BasicCellEditor;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.editor.DateCellEditor;
import org.jmesa.view.html.HtmlBuilder;

import com.cetia.sicaco.hibernate.CtrParParametrosDAO;
import com.cetia.sicaco.hibernate.PersonaTipoSesion;
import com.cetia.sicaco.hibernate.SecCelCorreoElectronicoDAO;
import com.cetia.sicaco.hibernate.SecIseInicioSesion;
import com.cetia.sicaco.hibernate.SecIseInicioSesionDAO;
import com.cetia.sicaco.hibernate.SecPerPersona;
import com.cetia.sicaco.hibernate.SecPerPersonaDAO;
import com.cetia.sicaco.hibernate.SecRolRoles;
import com.cetia.sicaco.hibernate.SecRolRolesDAO;
import com.cetia.sicaco.seguridad.struts.form.SesionForm;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;
import com.cetia.sicaco.struts.UsuarioConectado;
import com.mad.utilidades.EmptyArgumentsException;
import com.mad.utilidades.InvalidUserNameException;
import com.mad.utilidades.PasswordDeniedException;
import com.mad.utilidades.ThreadEmail;
import com.mad.utilidades.seguridad.Hasher;
import com.mad.utilidades.seguridad.PwdAleatorio;
import com.mad.utilidades.seguridad.TipoSesion;

/** 
 * MyEclipse Struts
 * Creation date: 02-19-2008
 * 
 * XDoclet definition:
 * @struts.action path="/sesion" name="sesionForm" input="pagina-lista.seguridad.sesion" parameter="accion" scope="request" validate="true"
 * @struts.action-forward name="lista" path="pagina-lista.seguridad.sesion"
 * @struts.action-forward name="dml" path="pagina-dml.seguridad.sesion"
 * @struts.action-forward name="error" path="pagina-lista.seguridad.sesion"
 */
public class SesionAction extends DMLAction {
	/*
	 * Generated Methods
	 */
	private final static String ROLES_LIST ="rolesList";
	private final static String TIPO_SESION_SAVE= "tipoSesionSave";
	private final static String PER_IDSESION_SAVE ="perIdSesionSave";
	private final static String TIPO_SESION_UPDATE= "tipoSesionSave";
	private final static String METHOD_NAME = "methodName";
	private final static String NOMBRE_USUARIO_UPDATE="nombreUsuarioSave";
	public static final String TABLA_ID = "secIseInicioSesion";
	
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	
	
	
	
	@SuppressWarnings("unchecked")
	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		List lst = null;
		SesionForm sesionForm = (SesionForm) form;
		//sesionForm=(sesionForm.getPerId()==null)?(PersonaTipoSesion)request.getSession().getAttribute("personaSesion"):sesionForm;
		Set<SecIseInicioSesion> setIseList = null;
		SecPerPersona secPerPersona = null;
		SecPerPersonaDAO secPerPersonaDAO = new SecPerPersonaDAO(getSessionHibernate(request));
		Transaction tx = secPerPersonaDAO.getSession().beginTransaction();
		try {
			secPerPersona  = secPerPersonaDAO.findById(sesionForm.getPerId());
			setIseList = (Set<SecIseInicioSesion>) secPerPersona.getSecIseInicioSesions();
			tx.commit();
		} catch (Exception e) {
			tx.rollback();
			e.printStackTrace();
		}finally{
			secPerPersonaDAO.getSession().flush();
			secPerPersonaDAO.getSession().clear();
			
		}
		SecRolRolesDAO rolesDAO = new SecRolRolesDAO(getSessionHibernate(request));
		lst = rolesDAO.findByRolTipoSesion('A');//listadoLogic(secPerPersona);
		sesionForm.setIseTipoSesion("A");
		/*Se establecen en sesion estas variables para q cuando se valide muestre listas id necesarios
		 * para poder realizar el mantenimiento*/
		request.getSession().setAttribute(PER_IDSESION_SAVE,sesionForm.getPerId());
		request.getSession().setAttribute(TIPO_SESION_SAVE,Constantes.TIPO_SESSION_CLIENTE);
		request.getSession().setAttribute(METHOD_NAME,"invalidSave");
		//Aqui empieza el c�digo para generar Tabla
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(setIseList);
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		
		Limit limit = tableFacade.getLimit();
        if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
        sesionForm.setSecPerPersona(secPerPersona);
        request.setAttribute(Constantes.PERSONA,secPerPersona);
        request.setAttribute("form",sesionForm);
        request.setAttribute(Constantes.ACCION_KEY, "/sesion");
        request.setAttribute(ROLES_LIST,lst);
        request.setAttribute("filtro",true);
        request.setAttribute("boton","0");
		return mapping.findForward("lista");
		
		 
	}
	
	/*@SuppressWarnings("unchecked")
	private List<SecRolRoles> listadoLogic(SecPerPersona persona){
		List<SecRolRoles> lstRoles = null;
		SecIseInicioSesion secIseInicioSesion = null;
		SecRolRolesDAO secRolesDAO = new SecRolRolesDAO(getSessionHibernate(request));
		SecIseInicioSesionDAO secInicioSesionDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
		Transaction tx = secInicioSesionDAO.getSession().beginTransaction();
		try {
			secIseInicioSesion = secInicioSesionDAO.findActiveSesionByPersona(persona);
			if(secIseInicioSesion == null){
				
				lstRoles = (List<SecRolRoles> )secRolesDAO.findByProperty("rolTipoSesion",Constantes.TIPO_SESSION_CLIENTE);
			}else{
				lstRoles = (List<SecRolRoles> )secRolesDAO.findByProperty("rolTipoSesion",secIseInicioSesion.getIseTipoSesion());
			}
			tx.commit();
		} catch (Exception e) {
			tx.rollback();
			e.printStackTrace();
		}finally{
			secInicioSesionDAO.getSession().flush();
			secInicioSesionDAO.getSession().clear();
			secInicioSesionDAO.getSession().close();
		}
		return lstRoles;
	}*/
	
	public ActionForward redirectInvalidData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
				/*String methodName = (String)request.getSession().getAttribute(METHOD_NAME);
				String forwardName = null;
				try {
					if(methodName!= null){
						Method method = this.getClass().getDeclaredMethod(methodName, 
								new Class[]{HttpServletRequest.class,HttpServletResponse.class,ActionForm.class});
						method.setAccessible(true);		
						forwardName = (String)method.invoke(this,new Object[]{request,response,form});
					}
				} catch (Throwable e) {
					e.printStackTrace();
				}
			return mapping.findForward(forwardName);*/
		ActionErrors errors = (ActionErrors)request.getSession().getAttribute(Constantes.ERRORS);
		saveMessages(request, errors);
		List lst = null;
		SesionForm sesionForm = (SesionForm) form;
		//sesionForm=(sesionForm.getPerId()==null)?(PersonaTipoSesion)request.getSession().getAttribute("personaSesion"):sesionForm;
		Set<SecIseInicioSesion> setIseList = null;
		SecPerPersona secPerPersona = null;
		SecPerPersonaDAO secPerPersonaDAO = new SecPerPersonaDAO(getSessionHibernate(request));
		Transaction tx = secPerPersonaDAO.getSession().beginTransaction();
		try {
			//FIXME Revisar el problema de la sesion
			secPerPersona  = secPerPersonaDAO.findById(sesionForm.getPerId());
			setIseList = (Set<SecIseInicioSesion>) secPerPersona.getSecIseInicioSesions();
			tx.commit();
		} catch (Exception e) {
			tx.rollback();
			e.printStackTrace();
		}finally{
			secPerPersonaDAO.getSession().flush();
			secPerPersonaDAO.getSession().clear();
			
		}
		SecRolRolesDAO rolesDAO = new SecRolRolesDAO(getSessionHibernate(request));
		lst = rolesDAO.findByRolTipoSesion('A');//listadoLogic(secPerPersona);
		sesionForm.setIseTipoSesion("A");
		/*Se establecen en sesion estas variables para q cuando se valide muestre listas id necesarios
		 * para poder realizar el mantenimiento*/
		request.getSession().setAttribute(PER_IDSESION_SAVE,sesionForm.getPerId());
		request.getSession().setAttribute(TIPO_SESION_SAVE,Constantes.TIPO_SESSION_CLIENTE);
		request.getSession().setAttribute(METHOD_NAME,"invalidSave");
		//Aqui empieza el c�digo para generar Tabla
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(setIseList);
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		
		Limit limit = tableFacade.getLimit();
        if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
        sesionForm.setSecPerPersona(secPerPersona);
        request.setAttribute(Constantes.PERSONA,secPerPersona);
        request.setAttribute("form",sesionForm);
        request.setAttribute(Constantes.ACCION_KEY, "/sesion");
        request.setAttribute(ROLES_LIST,lst);
        request.setAttribute("filtro",true);
        request.setAttribute("boton","0");
		return mapping.findForward("lista");
	}
	/*
	private String invalidSave(HttpServletRequest request,HttpServletResponse response,ActionForm form){
			List<SecRolRoles> lst = null;
			SesionForm sesionForm = new SesionForm();
			ActionErrors erros = (ActionErrors)request.getSession().getAttribute(ERRORS);
			String perId = (String)request.getSession().getAttribute(PER_IDSESION_SAVE);
			String tipoSesion = (String)request.getSession().getAttribute(TIPO_SESION_SAVE);
			request.getSession().removeAttribute(ERRORS);
			SecPerPersonaDAO secPerPersonaDAO = new SecPerPersonaDAO(getSessionHibernate(request));
			SecPerPersona secPerPersona = secPerPersonaDAO.findById(perId);
			SecRolRolesDAO secRolesDAO = new SecRolRolesDAO(getSessionHibernate(request));
			lst = secRolesDAO.findByProperty("rolTipoSesion",tipoSesion);
			
			TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
			tableFacade.setItems(secPerPersona.getSecIseInicioSesions());
			//---- Genera los tipos de formas con que se podran exportar los datos
			tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
			tableFacade.setStateAttr("restore");
			
			Limit limit = tableFacade.getLimit();
	        if (limit.isExported()) {
	        	//---- exporta la tabla
	            export(tableFacade);
	            return null; 
	        } else {
	        	//---- genera el html de la tabla para ser mostrada
	            String html = html(tableFacade, request);
	            request.setAttribute(Constantes.LISTA_KEY, html);
	        }
	        //----- Variables de configuracion
	        saveMessages(request, erros);
	        sesionForm.setSecPerPersona(secPerPersona);
	        request.setAttribute("form",sesionForm);
	        request.setAttribute(Constantes.ACCION_KEY, "/sesion");
	        request.setAttribute(ROLES_LIST,lst);
	        request.setAttribute("filtro",true);
	        request.setAttribute("boton","0");
	        return "lista";
				
	}
	*/
	
	/*
	private String invalidUpdate(HttpServletRequest request,HttpServletResponse response,ActionForm form){
				String userName = (String)request.getSession().getAttribute(NOMBRE_USUARIO_UPDATE);
				String tipoSesion = (String)request.getSession().getAttribute(TIPO_SESION_UPDATE);
				ActionErrors errors = (ActionErrors)request.getSession().getAttribute(ERRORS);
				request.getSession().removeAttribute(Constantes.ERRORS);
				SesionForm sesionForm = new SesionForm();
				sesionForm.setIseNombreUsuario(userName);
				sesionForm.setIseTipoSesion(tipoSesion);
				loadDmlListAndProperties(request, sesionForm);
				saveMessages(request, errors);
				request.setAttribute(Constantes.ACCION_KEY, "/sesionAccion");
			return "dml";
	}
	*/
	
	
	@SuppressWarnings("unchecked")
	public ActionForward listaPersonaSesion(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		
		PersonaTipoSesion personaSesion = (PersonaTipoSesion)request.getSession().getAttribute("personaSesion");
		List lst = null;
		//SecPerPersonaDAO secPerPersonaDAO = new SecPerPersonaDAO(getSessionHibernate(request));
		SecRolRolesDAO secRolesDAO = new SecRolRolesDAO(getSessionHibernate(request));
		lst  = secRolesDAO.findByProperty("rolTipoSesion",personaSesion.getTipoSesion());
		request.getSession().setAttribute(PER_IDSESION_SAVE,personaSesion.getPerId());
		request.getSession().setAttribute(TIPO_SESION_SAVE,personaSesion.getTipoSesion());
		request.getSession().setAttribute(METHOD_NAME,"invalidSave");
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(new ArrayList(0));
		//Aqui empieza el c�digo para generar Tabla
		
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
        if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
        SesionForm sesionForm = new SesionForm();
        sesionForm.setPerId(personaSesion.getPerId());
        request.setAttribute("form",sesionForm);
        request.setAttribute(Constantes.ACCION_KEY, "/sesion");
        request.setAttribute(ROLES_LIST,lst);
        request.setAttribute("filtro",true);
        request.setAttribute("boton","0");
		return mapping.findForward("lista");
	}
	
	
	
	
	//---- Funcion que genera el html de la tabla del jmesa
	private String html(final TableFacade tableFacade, final HttpServletRequest request) {
		tableFacade.setColumnProperties("iseNombreUsuario",
				"secRolRoles.rolNombre","iseUltimaSesion",//"iseFechaActivacion",
				"iseUltimaIp","iseVecesUtilizado","iseFechaInactivacion");
		Table table = tableFacade.getTable();
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.sesion.caption");
		
		Row row = table.getRow();
		Column nombreColumna = row.getColumn("secRolRoles.rolNombre");
		nombreColumna.setTitleKey("tbl.sesion.secRolRoles.rolNombre");
		
		nombreColumna = row.getColumn("iseNombreUsuario");
		nombreColumna.setTitleKey("tbl.sesion.iseNombreUsuario");
		
		//----- Implementamos la edicion de usuario
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				SecIseInicioSesion inicioSesion = (SecIseInicioSesion)item;
				HtmlBuilder html = new HtmlBuilder();
				
				//---- Generar link para entrar a edicion
				String link = tableFacade.getWebContext().getContextPath();
				link += "/seguridad/sesion.do?user="+inicioSesion.getIseNombreUsuario()+"&perId="+inicioSesion.getSecPerPersona().getPerId()+
				"&accion=forwardToEdicion&boton=1"+"&"+"iseTipoSesion="+inicioSesion.getIseTipoSesion();
				html.a().href().quote().append(link).quote().close();
				//---- Agregamos el link con el nombre = value
				html.append(value);
				html.aEnd();
				
				return html.toString();
			}
		});
		/*
		nombreColumna = row.getColumn("iseFechaActivacion");
		nombreColumna.setTitleKey("tbl.sesion.iseFechaActivacion");
		nombreColumna.getCellRenderer().setCellEditor(new DateCellEditor("dd-MMM-yyyy HH:mm"));
		*/
		nombreColumna = row.getColumn("iseUltimaSesion");
		nombreColumna.setTitleKey("tbl.sesion.iseUltimaSesion");
		nombreColumna.getCellRenderer().setCellEditor(new DateCellEditor("dd-MMM-yyyy HH:mm"));
		
		nombreColumna = row.getColumn("iseUltimaIp");
		nombreColumna.setTitleKey("tbl.sesion.iseUltimaIp");
		
		nombreColumna = row.getColumn("iseVecesUtilizado");
		nombreColumna.setTitleKey("tbl.sesion.iseVecesUtilizado");
		
		nombreColumna = row.getColumn("iseFechaInactivacion");
		nombreColumna.setTitleKey("tbl.sesion.iseFechaInactivacion");
		//nombreColumna.getCellRenderer().setCellEditor(new DateCellEditor("dd-MMM-yyyy HH:mm"));
		
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				SecIseInicioSesion inicioSesion = (SecIseInicioSesion)item;
				
				HtmlBuilder html = new HtmlBuilder();
				if(inicioSesion.getIseFechaInactivacion()==null || inicioSesion.getIseFechaInactivacion().toString().equals("")){
					value = "Activo";
				}else{
					value = "Inactivo";
				}
				//value = ((inicioSesion.getIseFechaActivacion()==null)?"":("Activo"));
				//value = value + ((inicioSesion.getIsePorqueInactivacion()==null)?"":(" "+inicioSesion.getIsePorqueInactivacion()));
				//---- Agregamos el link con el nombre = value
				html.append(value);
				return html.toString();
			}
		});
		
		return tableFacade.render();
	}
	
	//---- Funcion que genera los exports, el formato que tendran
	 private void export(final TableFacade tableFacade) {
		 tableFacade.setColumnProperties("iseNombreUsuario",
					"secRolRoles.rolNombre","iseUltimaSesion","iseFechaActivacion",
					"iseUltimaIp","iseVecesUtilizado","iseFechaInactivacion",
					"isePorqueInactivacion", "iseTipoSesion");
			Table table = tableFacade.getTable();
			//---- Titulo de la tabla
			table.setCaptionKey("tbl.sesion.caption.export");
			
			Row row = table.getRow();
			Column nombreColumna = row.getColumn("secRolRoles.rolNombre");
			nombreColumna.setTitleKey("tbl.sesion.secRolRoles.rolNombre");
			
			nombreColumna = row.getColumn("iseNombreUsuario");
			nombreColumna.setTitleKey("tbl.sesion.iseNombreUsuario");
			
			nombreColumna = row.getColumn("iseUltimaSesion");
			nombreColumna.setTitleKey("tbl.sesion.iseUltimaSesion.export");
			nombreColumna.getCellRenderer().setCellEditor(new DateCellEditor("dd-MMM-yyyy HH:mm"));
			
			nombreColumna = row.getColumn("iseUltimaIp");
			nombreColumna.setTitleKey("tbl.sesion.iseUltimaIp");
			
			nombreColumna = row.getColumn("iseVecesUtilizado");
			nombreColumna.setTitleKey("tbl.sesion.iseVecesUtilizado");
			
			nombreColumna = row.getColumn("iseFechaActivacion");
			nombreColumna.setTitleKey("tbl.sesion.iseFechaActivacion.export");
			nombreColumna.getCellRenderer().setCellEditor(new DateCellEditor("dd-MMM-yyyy HH:mm"));
			
			nombreColumna = row.getColumn("iseFechaInactivacion");
			nombreColumna.setTitleKey("tbl.sesion.iseFechaInactivacion.export");
			//nombreColumna.getCellRenderer().setCellEditor(new DateCellEditor("dd-MMM-yyyy HH:mm"));
			
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

				public Object getValue(Object item, String property, int rowcount) {
					Object value = new BasicCellEditor().getValue(item, property, rowcount);
					SecIseInicioSesion inicioSesion = (SecIseInicioSesion)item;
					
					HtmlBuilder html = new HtmlBuilder();
					if(inicioSesion.getIseFechaInactivacion()==null || inicioSesion.getIseFechaInactivacion().toString().equals("")){
						value = "Activo";
					}else{
						value = "Inactivo";
					}
					//value = ((inicioSesion.getIseFechaActivacion()==null)?"":("Activo"));
					//value = value + ((inicioSesion.getIsePorqueInactivacion()==null)?"":(" "+inicioSesion.getIsePorqueInactivacion()));
					//---- Agregamos el link con el nombre = value
					html.append(value);
					return html.toString();
				}
			});
			
			nombreColumna = row.getColumn("isePorqueInactivacion");
			nombreColumna.setTitleKey("tbl.sesion.isePorqueInactivacion.export");			
			
			tableFacade.render();
	 }
	
	//---- Accion de cancelar, que regresa a la pantalla basica de la lista 
 	public ActionForward cancelar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		return lista(mapping, form, request, response);
	}
	
 	//---- Accion que inicia la pantalla para agregar persona
	public ActionForward agregar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
	
		//----- Variables de configuracion
		SesionForm sesionForm = (SesionForm)form;
		request.setAttribute("form", sesionForm);
		//SecIseInicioSesion modelInicioSesion = sesionForm.getInicioSesionH();
		request.setAttribute(Constantes.ACCION_KEY, "/sesionAccion");
		request.setAttribute("filtro", "0");
		request.setAttribute("boton", "0");
		return mapping.findForward("dml");
	}
	
	@SuppressWarnings("unchecked")
	public ActionForward forwardToEdicion(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		SesionForm sesionForm = (SesionForm)form;
		if(sesionForm.getUser().equals("ADMIN")){
			return lista(mapping, form, request, response);
		}else{
			SecIseInicioSesionDAO inicioSesionDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
			sesionForm.setInicioSesionH(inicioSesionDAO.findById(sesionForm.getUser()));
			request.getSession().setAttribute(METHOD_NAME,"invalidUpdate");
			request.getSession().setAttribute(NOMBRE_USUARIO_UPDATE,sesionForm.getIseNombreUsuario());
			request.getSession().setAttribute(TIPO_SESION_UPDATE,sesionForm.getIseTipoSesion());
			//loadDmlListAndProperties(request,sesionForm);
			SecRolRolesDAO secRolRolesDAO = new SecRolRolesDAO(getSessionHibernate(request));
			List roles = secRolRolesDAO.findAll();
			sesionForm.setRol2(sesionForm.getInicioSesionH().getSecRolRoles().getRolNombre());
			request.setAttribute(ROLES_LIST, roles);
			request.setAttribute(Constantes.ACCION_KEY, "/sesion");
			request.setAttribute("form", sesionForm);
			return mapping.findForward("dml");
		}
	}
	
	@SuppressWarnings("unchecked")
	private void loadDmlListAndProperties(HttpServletRequest request,SesionForm sesionForm){
		SecIseInicioSesion modelIniSesion = null;
		List<SecRolRoles> lstRoles = null;
		SecIseInicioSesionDAO secIseInicioSesionDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
		SecRolRolesDAO secRolRolesDAO = new SecRolRolesDAO(getSessionHibernate(request));
		modelIniSesion = secIseInicioSesionDAO.findById(sesionForm.getIseNombreUsuario());
		lstRoles  = (List<SecRolRoles>)secRolRolesDAO.findByProperty("rolTipoSesion",sesionForm.getIseTipoSesion());
		SesionForm nSesionForm = new SesionForm();
		nSesionForm.setInicioSesionH(modelIniSesion);
		nSesionForm.setRol2(nSesionForm.getInicioSesionH().getSecRolRoles().getRolNombre());
		request.setAttribute("form",nSesionForm);
		request.setAttribute(ROLES_LIST,lstRoles);
	}
	
	//---- Accion asociada al link de edicion de la tabla, entra a pantalla de edicion
	public ActionForward editar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		SesionForm  sesionForm = (SesionForm) form;
		String idNombreUsuario = sesionForm.getIseNombreUsuario();
		//List<SecRolRoles> lstRoles = null;
		SecIseInicioSesion modelInicioSesionDB = null;
		SecIseInicioSesion modelInicioSesionDirty = sesionForm.getInicioSesionH();
		SecRolRoles modelRolesDB = null;
		SecIseInicioSesionDAO inicioSesionDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
		SecRolRolesDAO secRolRolesDAO = new SecRolRolesDAO(getSessionHibernate(request));
		/*la pagina tendria que enviarsele en una variable escondida el id del usuario a cual desea editar
		o eliminar*/
		Transaction tx = inicioSesionDAO.getSession().beginTransaction();
		try{
			modelRolesDB = secRolRolesDAO.findById(sesionForm.getRol2()); 
			modelInicioSesionDirty.setSecRolRoles(modelRolesDB);
			modelInicioSesionDB = inicioSesionDAO.findById(idNombreUsuario);
			modelInicioSesionDB.setSecRolRoles(modelRolesDB);
			inicioSesionDAO.getSession().merge(modelInicioSesionDB);
			//se deberian copiar las propiedades aca que no se desean para luego ejercutar el update
			//luego como se esta en una transaccion se copian las propiedades.
			tx.commit();
		}catch (Exception e) {
			tx.rollback();
			e.printStackTrace(); 
		}finally{
			inicioSesionDAO.getSession().flush();
			inicioSesionDAO.getSession().clear();
			
		}
		// se tienen que cargar los roles de acuerdo al tipo de sesion;
		loadDmlListAndProperties(request,(SesionForm)form);
		request.setAttribute(Constantes.ACCION_KEY, "/sesionAccion");
		//no tiene que existir un filtro para que muestre los botones de eliminar y editar
		return lista(mapping, form, request, response);
	}
	
	//---- Accion de guardar nueva persona, regresa a lista principal
	public ActionForward guardar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ActionErrors errors = new ActionErrors();
		SesionForm sesionForm = (SesionForm) form;
		CtrParParametrosDAO parametrosDAO = new CtrParParametrosDAO(getSessionHibernate(request));
		SecIseInicioSesion modelInicioSesion = sesionForm.getInicioSesionH();
		sesionForm.setIseNombreUsuario(sesionForm.getIseNombreUsuario().toUpperCase());
		PersonaTipoSesion personaSesion = (PersonaTipoSesion)request.getSession().getAttribute("personaSesion");
		SecRolRoles modelRoles = null;
		String password = null;
		SecPerPersona modelPerPersona = null;
		/*if(sesionForm.getIseNombreUsuario()==null || sesionForm.getIseNombreUsuario().trim().equals("")){
			errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.sesion.iseNombreUsuarioInvalido"));
			saveMessages(request, errors);	
			return lista(mapping, form, request, response);
		}*/
		if(sesionForm.getIseNombreUsuario()==null || sesionForm.getIseNombreUsuario().trim().equals("")){
			errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.sesion.iseNombreUsuarioInvalido"));
		}
		/*este listado se utiliza para obtener si existe un nombre de usuario
		  repetido en la base si es asi entonces tiene que enviarse un mensaje de error*/
		SecIseInicioSesion flagModel = null;
		SecPerPersona persona = new SecPerPersona();
		persona.setPerId(sesionForm.getPerId());
		if (personaSesion == null){
			SecIseInicioSesionDAO inicioSesionDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
			SecPerPersonaDAO personaDAO = new SecPerPersonaDAO(getSessionHibernate(request));
			SecRolRolesDAO rolesDAO = new SecRolRolesDAO(getSessionHibernate(request));
			
			//Transaction trx = inicioSesionDAO.getSession().beginTransaction();
			try {	
					 flagModel = inicioSesionDAO.findById(sesionForm.getIseNombreUsuario());
					 validateSesionLogic(flagModel);
					 flagModel = null;
					 //validateAcviteUser(inicioSesionDAO.findActiveSesionByPersonaList(persona));
					 modelPerPersona = personaDAO.findById(sesionForm.getPerId());
					 modelRoles  = rolesDAO.findById(sesionForm.getRol2());
					 modelInicioSesion.setSecPerPersona(modelPerPersona);
					 modelInicioSesion.setSecRolRoles(modelRoles);
					 modelInicioSesion.setIseTipoSesion(Constantes.TIPO_SESSION_ADIMINISTRADOR);
					 modelInicioSesion.setIseFechaActivacion(new Date());
					 modelInicioSesion.setIseVecesUtilizado(new Integer(0));
					 PwdAleatorio pwdAleatorio = new PwdAleatorio();
//					 Parametros parametros = (Parametros)request.getSession().getAttribute(Constantes.PARAMETROS_KEY);
//					 Integer parametro = parametrosDAO.findById("PASS_SIZE").getParValorNumber().intValue();
					 password = pwdAleatorio.getPasswordAleatorio(parametrosDAO.findById("PASS_SIZE").getParValorNumber().intValue());
					 modelInicioSesion.setIseContrasenia(Hasher.getHash(password.toUpperCase()));
					 System.out.println(password);
					 Session session = inicioSesionDAO.getSession();
					 session.save(modelInicioSesion);
					// SecPerPersonaDAO personaDAO = new SecPerPersonaDAO(getSessionHibernate(request));
					//	SecPerPersona modelPerPersona = personaDAO.findById(modelInicioSesionDB.getSecPerPersona().getPerId());
					//	ActionErrors errors = new ActionErrors();
					createNewThreadEmail(password, modelPerPersona, sesionForm.getUsuarioConectado(), errors,sesionForm.getIseNombreUsuario(),request);
					 /*PersonaTipo sesion se elimina como acaba de crearse a la nueva persona un nueva sesion
					  * no es necesario mantener a este objeto ya en la sesion*/
					// request.getSession().removeAttribute("personaSesion");
				Transaction trx1 = inicioSesionDAO.getSession().beginTransaction();
				trx1.commit();
//			}catch(NonUniqueResultException nure){
//				errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.sessionl.soloUnActivo"));
			}catch(InvalidUserNameException invalidEx){
				errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.sesion.iseNombreUsuario"));
				
			}catch (Exception e) {
				//trx.rollback();
				e.printStackTrace();
			}finally{
				//if(!trx.wasRolledBack())trx.rollback();
				inicioSesionDAO.getSession().flush();
				inicioSesionDAO.getSession().clear();
				
			}
		}else{
			SecIseInicioSesionDAO inicioSesionDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
			SecPerPersonaDAO personaDAO = new SecPerPersonaDAO(getSessionHibernate(request));
			SecRolRolesDAO rolesDAO = new SecRolRolesDAO(getSessionHibernate(request));
			Transaction trx = inicioSesionDAO.getSession().beginTransaction();
			try {	
					 flagModel = inicioSesionDAO.findById(sesionForm.getIseNombreUsuario());
				 	 validateSesionLogic(flagModel);
				 	 //validateAcviteUser(inicioSesionDAO.findActiveSesionByPersonaList(persona));
				 	 modelPerPersona = personaDAO.findById(personaSesion.getPerId());
					 modelRoles  = rolesDAO.findById(sesionForm.getRol2());
					 modelInicioSesion.setSecPerPersona(modelPerPersona);
					 modelInicioSesion.setSecRolRoles(modelRoles);
					 modelInicioSesion.setIseTipoSesion(personaSesion.getTipoSesion());
					 modelInicioSesion.setIseFechaActivacion(new Date());
					 modelInicioSesion.setIseVecesUtilizado(new Integer(0));
					 PwdAleatorio pwdAleatorio = new PwdAleatorio();
//					 Parametros parametros = (Parametros)request.getSession().getAttribute(Constantes.PARAMETROS_KEY);
//					 Integer parametro = (Integer)parametros.getParametros().get(Parametros.LONGITUD_CONTRASENIA);
					 password = pwdAleatorio.getPasswordAleatorio(parametrosDAO.findById("PASS_SIZE").getParValorNumber().intValue());
					 modelInicioSesion.setIseContrasenia(Hasher.getHash(password.toUpperCase()));
					 inicioSesionDAO.getSession().save(modelInicioSesion);
				trx.commit();
			}catch(NonUniqueResultException nure){
				errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.sessionl.soloUnActivo"));
			}catch(InvalidUserNameException invalidEx){
				errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.session.iseNombreUsuario"));
			}catch (Exception e) {
				trx.rollback();
				e.printStackTrace();
			}finally{
				if(!trx.wasRolledBack())trx.rollback();
				inicioSesionDAO.getSession().flush();
				inicioSesionDAO.getSession().clear();
				
			}
		}
		/*if (errors.isEmpty()) {
			createNewThreadEmail(password,modelPerPersona,(UsuarioConectado)request.getSession().getAttribute(Constantes.USUARIO_KEY),errors, sesionForm.getIseNombreUsuario());
		}*/
		saveMessages(request, errors);	
		return lista(mapping, form, request, response);
	}
	
	private void createNewThreadEmail(String password,
			SecPerPersona modelPerPersona, UsuarioConectado attribute,
			ActionErrors errors,String login,HttpServletRequest request) {
		String msg = null;
		String subject = null;
		int puerto = 0;
		String ipServidor = null;
		String correoAdmin = null;
		String correoCliente = null;
		
		if(password != null && modelPerPersona!=null && attribute != null &&  errors != null){
			CtrParParametrosDAO parametrosDAO = new CtrParParametrosDAO(getSessionHibernate(request));
			SecCelCorreoElectronicoDAO secCelCorreoElectronicoDAO = new SecCelCorreoElectronicoDAO(getSessionHibernate(request));
			//Transaction tx = parametrosDAO.getSession().beginTransaction();
			msg = parametrosDAO.findById("MAIL_MENSAJE").getParValorString();
			subject = parametrosDAO.findById("MAIL_SUBJECT").getParValorString();
			puerto =  parametrosDAO.findById("MAIL_PUERTO").getParValorNumber().intValue();
			ipServidor =  parametrosDAO.findById("MAIL_SERVIDOR").getParValorString();
			correoAdmin = secCelCorreoElectronicoDAO.findCorreoForConectedUser(attribute.getNombreUsuario());
			correoCliente = secCelCorreoElectronicoDAO.findCorreoByPerId(modelPerPersona.getPerId());
			msg = msg + "\nUsuario: " + login + "\nPassword: " + password;
			if(msg!=null && subject != null && puerto != 0 && ipServidor != null && correoAdmin!= null
					&& correoCliente!=null){
					 new ThreadEmail(
							 ipServidor,puerto,correoAdmin
							 ,new String[]{correoAdmin,correoCliente},msg,
							 subject,new StringBuilder().append(modelPerPersona.getPerPrimerNombre())
							 .append("-").append(modelPerPersona.getPerPrimerApellido()).toString()
							 ,"Administrador"
					).start();
				
			}else{
				errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.session.email"));
			}
		}else{
			errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.session.email"));
		}
	}

	private void validateSesionLogic(SecIseInicioSesion flagModel) throws Exception{
			if(flagModel != null)throw new InvalidUserNameException();
	}
	/*
	private void validateAcviteUser(List lst) throws Exception{
		if(lst.size() > 0){
			throw new NonUniqueResultException(lst.size());
		}
	}
	*/
	
	//---- Accion de guardar los cambios hecho de una edicion
	public ActionForward salvar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		SesionForm sesionForm = (SesionForm) form;
		SecIseInicioSesionDAO inicioSesionDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
		//---- Inicia transaccion
		Transaction trx = inicioSesionDAO.getSession().beginTransaction();
		
		//---- Merge indica un update en la tabla
		inicioSesionDAO.merge(sesionForm.getInicioSesionH());
		trx.commit();
		inicioSesionDAO.getSession().flush();
		inicioSesionDAO.getSession().clear();
		
		return lista(mapping, form, request, response);
	}
	
	//---- Elimina los datos seleccionados de la tabla
	public ActionForward eliminar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		SesionForm sesionForm = (SesionForm) form;
		SecIseInicioSesionDAO inicioSesionDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
		SecIseInicioSesion modelIseInicioSesion = null;
		//---- Inicia transaccion
		Transaction trx = inicioSesionDAO.getSession().beginTransaction();
		try {
			modelIseInicioSesion = inicioSesionDAO.findById(sesionForm.getIseNombreUsuario());
			modelIseInicioSesion.setIseFechaInactivacion(new java.util.Date());
			trx.commit();
		}catch (Exception e) {
			trx.rollback();
			e.printStackTrace();
		}finally{
			inicioSesionDAO.getSession().flush();
			inicioSesionDAO.getSession().clear();
			
		}
		//---- Delete indica un delete de la tabla
		return lista(mapping, form, request, response);
	}
	
	public ActionForward pwd(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		SesionForm  sesionForm = (SesionForm) form;
		SecIseInicioSesionDAO inicioSesionDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
		
		//---- Set de los datos de la persona seleccionada para la edicion
		sesionForm.setInicioSesionH(inicioSesionDAO.findById(sesionForm.getIseNombreUsuario()));
		sesionForm.getInicioSesionH().setIseContrasenia("");
		//---- Variables de configuracion
		request.setAttribute(Constantes.ACCION_KEY, "/sesionAccion");
		return mapping.findForward("pwd");
	}
	
	public ActionForward newPwd(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		boolean flag = true;
		String find="";
		SesionForm sesionForm = (SesionForm) form;
		SecIseInicioSesion  modelIseInicioSesion = null;
		SecIseInicioSesionDAO inicioSesionDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
		//---- Inicia transaccion
		Transaction trx = inicioSesionDAO.getSession().beginTransaction();
		try{
			modelIseInicioSesion = inicioSesionDAO.findById(sesionForm.getIseNombreUsuario());
			validatePassword(sesionForm,modelIseInicioSesion);
			modelIseInicioSesion.setIseContrasenia(Hasher.getHash(sesionForm.getContrasenaN().toUpperCase()));
			trx.commit();
			if(TipoSesion.isCliente(modelIseInicioSesion,request)) {
				find = "forwardToCliente";
			}else if(TipoSesion.isAdministrativo(modelIseInicioSesion,request)) {
				find = "entrar";
			}
		}catch(EmptyArgumentsException eaex){
			trx.rollback();
			ActionErrors errors = new ActionErrors();
			errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(eaex.getMessage()));	
			saveMessages(request, errors);
			flag = false;
			
		}catch(PasswordDeniedException pex){
			trx.rollback();
			ActionErrors errors = new ActionErrors();
			errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(pex.getMessage()));
			saveMessages(request, errors);
			flag = false;
		}catch (Exception e) {
			trx.rollback();
			e.printStackTrace();
		}finally{
			inicioSesionDAO.getSession().flush();
			inicioSesionDAO.getSession().clear();
			
		}
		
		return  (flag ? mapping.findForward(find): forwardToContrasenia(mapping,form,request,response));
	}
	
	public ActionForward cancelarContrasena(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		return mapping.findForward("entrar");
	}
	
	@SuppressWarnings("unused")
	private void validatePassword(SesionForm sesionForm,SecIseInicioSesion modelInicioSesion)throws Exception{
		if(sesionForm.getContrasenaA().trim().equals("") || sesionForm.getContrasenaN().trim().equals("") ||  sesionForm.getContrasenaV().trim().equals("")){
			throw new EmptyArgumentsException("error.contrasenna.empty.arguments");
		}	
		if(!sesionForm.getContrasenaN().equals(sesionForm.getContrasenaV())){
			throw new PasswordDeniedException("error.contrasenna");
		}
		if(!modelInicioSesion.getIseContrasenia().equals(Hasher.getHash(sesionForm.getContrasenaA().toUpperCase()))){
			throw new PasswordDeniedException("error.contrasenna.anterior");
		}
	}
	
	public ActionForward forwardToContrasenia(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		UsuarioConectado usuarioConectado = (UsuarioConectado)request.getSession().getAttribute(Constantes.USUARIO_KEY);
		request.setAttribute(Constantes.ACCION_KEY, "/sesion");
		request.setAttribute("iseNombreUsuario",usuarioConectado.getNombreUsuario());
		return mapping.findForward("pwd");
	}
	
	public ActionForward historial(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		return mapping.findForward("historial");
	}
	
	public ActionForward redirectLista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		return mapping.findForward("redirectLista");
	}
	
	public ActionForward nuevaPass(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		SesionForm  sesionForm = (SesionForm) form;
		CtrParParametrosDAO parametrosDAO = new CtrParParametrosDAO(getSessionHibernate(request));
		PwdAleatorio pwdAleatorio = new PwdAleatorio();
		
		String password = pwdAleatorio.getPasswordAleatorio(parametrosDAO.findById("PASS_SIZE").getParValorNumber().intValue());
		//System.out.println(password);
		SecIseInicioSesionDAO inicioSesionDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
		SecIseInicioSesion inicioSesion = inicioSesionDAO.findById(sesionForm.getIseNombreUsuario());
		Transaction tx = inicioSesionDAO.getSession().beginTransaction();
		inicioSesion.setIseContrasenia(Hasher.getHash(password.toUpperCase()));
		inicioSesionDAO.merge(inicioSesion);
		tx.commit();
		inicioSesionDAO.getSession().flush();
		inicioSesionDAO.getSession().clear();
		
		
		ActionErrors errors = new ActionErrors();
		createNewThreadEmail(password, inicioSesion.getSecPerPersona(), 
				sesionForm.getUsuarioConectado(), errors, sesionForm.getIseNombreUsuario(),request);
		return lista(mapping, form, request, response);
	}
	
	@SuppressWarnings("unchecked")
	public void ajaxRequestChangeSession(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		SesionForm  sesionForm = (SesionForm) form;
		SecIseInicioSesion modelSecIseInicioSesion = null;
		List<SecRolRoles> lstRoList = null;
		String htmlRespone;
		SecRolRolesDAO secRolRolesDAO = new SecRolRolesDAO(getSessionHibernate(request));
		SecIseInicioSesionDAO secInicioSesionDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
		Transaction tx = secInicioSesionDAO.getSession().beginTransaction();
		try {
			modelSecIseInicioSesion = secInicioSesionDAO.findById(sesionForm.getIseNombreUsuario());
			modelSecIseInicioSesion.setIseTipoSesion(
				(modelSecIseInicioSesion.getIseTipoSesion().equals("A") ? "C" : "A"
			));
			lstRoList = (List<SecRolRoles>)secRolRolesDAO.findByProperty("rolTipoSesion",modelSecIseInicioSesion.getIseTipoSesion());
			tx.commit();
		} catch (Exception e) {
			tx.rollback();
			e.printStackTrace();
		}finally{
			secInicioSesionDAO.getSession().flush();
			secInicioSesionDAO.getSession().clear();
		}
		if(lstRoList != null){
			HtmlBuilder html = new HtmlBuilder();
			html.select().name("rol").close();
				for(SecRolRoles rol : lstRoList){
					html.option().value(rol.getRolNombre()).close().
						append(rol.getRolNombre()).
					optionEnd();
				}
			html.selectEnd();
			htmlRespone = html.toString();
		}else{
			htmlRespone = "";
		}
		try {
			response.getWriter().print(htmlRespone);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
	}
		
	//---- Mapas usados para conectar las acciones
	protected Map<String, String> getKeyMethodMap() {
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.sesion.agregar", "guardar");
		map.put("cmd.sesion.mostrar","agregar");
		map.put("cmd.sesion.editar","editar");
		map.put("cmd.sesion.modificar","salvar");
		map.put("cmd.sesion.eliminar","eliminar");
		map.put("cmd.sesion.cancelar","cancelar");
		map.put("cmd.sesion.lista", "lista");
		map.put("cmd.sesion.axn2","editar");
		map.put("cmd.sesion.dml", "dml");
		map.put("cmd.sesion.pwd", "pwd");
		map.put("cmd.sesion.newPwd", "newPwd");
		map.put("cmd.sesion.forwardToEdicion","forwardToEdicion");
		map.put("cmd.sesion.forwardToContrasenia","forwardToContrasenia");
		map.put("cmd.sesion.ls.persona","listaPersonaSesion");
		map.put("cmd.sesion.redirectInvalidData","redirectInvalidData");
		map.put("cmd.sesion.redirectLista", "redirectLista");
		map.put("cmd.sesion.cancelarContrasena", "cancelarContrasena");
		map.put("cmd.sesion.generaPass", "nuevaPass");
		map.put("cmd.sesion.generaPass.ajaxRequestChangeSession","ajaxRequestChangeSession");
		return map;
	}
}