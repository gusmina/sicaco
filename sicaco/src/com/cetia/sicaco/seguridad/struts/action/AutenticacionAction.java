/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.seguridad.struts.action;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import net.sf.navigator.menu.MenuComponent;
import net.sf.navigator.menu.MenuRepository;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.hibernate.Transaction;

import com.cetia.sicaco.hibernate.CtrParParametros;
import com.cetia.sicaco.hibernate.CtrParParametrosDAO;
import com.cetia.sicaco.hibernate.InvPexProductosExistencia;
import com.cetia.sicaco.hibernate.InvPexProductosExistenciaDAO;
import com.cetia.sicaco.hibernate.InvSmeSaldoMensual;
import com.cetia.sicaco.hibernate.InvSmeSaldoMensualDAO;
import com.cetia.sicaco.hibernate.SecHseHistorialSesion;
import com.cetia.sicaco.hibernate.SecHseHistorialSesionDAO;
import com.cetia.sicaco.hibernate.SecIseInicioSesion;
import com.cetia.sicaco.hibernate.SecIseInicioSesionDAO;
import com.cetia.sicaco.hibernate.SecMopMenuOpcion;
import com.cetia.sicaco.hibernate.SecRopRolMenu;
import com.cetia.sicaco.hibernate.SecRopRolMenuDAO;
import com.cetia.sicaco.seguridad.struts.form.AutenticacionForm;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;
import com.cetia.sicaco.struts.Parametros;
import com.cetia.sicaco.struts.UsuarioConectado;
import com.mad.utilidades.ElapsedTime;
import com.mad.utilidades.seguridad.Hasher;
import com.mad.utilidades.seguridad.TipoSesion;

/** 
 * MyEclipse Struts
 * Creation date: 02-13-2008
 * 
 * XDoclet definition:
 * @struts.action path="/autenticacion" name="autenticacionForm" input="/form/autenticacion.jsp" scope="request" validate="true"
 */
public class AutenticacionAction extends DMLAction{
	
	//variable que se utiliza para saber a los cuantos meses la fecha del usuario caducara para renovacion
	//private final static int mesesLimites = 2;
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	
	
	public ActionForward cargar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		return mapping.findForward("cargar");
	}
	
	public ActionForward entrar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		AutenticacionForm autenticacionForm = (AutenticacionForm) form;
		String find = "entrar";
		SecIseInicioSesion usuario = autenticar(autenticacionForm, request);
		if(usuario!=null){
			salvarUsuario(autenticacionForm,usuario, request);
			UsuarioConectado usuarioConectado = (UsuarioConectado)request.getSession().getAttribute(Constantes.USUARIO_KEY);
			salvarHistorial(autenticacionForm,usuarioConectado
			,request);
			salvarParametros(request);
			actualizarSaldoMensualInventario(request);
			if(!updateInicioSesion(usuarioConectado,request) || !validarFechaLimite(usuarioConectado,request)){
				return mapping.findForward("forwardToContrasenia");
			}
			
			//------------------------------
			// Verificacion de los tipos de usuario
			// Agregado por Mauricio Jovel 29-JUL-2008
			//------------------------------
			if(TipoSesion.isCliente(usuario,request)) {
				find = "forwardToCliente";
			}else if(TipoSesion.isAdministrativo(usuario,request)) {
				find = "entrar";
			}else {
				ActionErrors errors = new ActionErrors();
				//TODO no olvidar pasar el nuevo mensaje al archivos de mensajes (ApplicationResources.properties)
				errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("error.autenticacion.fallido"));
				saveMessages(request, errors);
				find = "error";
			}
			//------------------------------
			// Fin verificacion de usuario cliente
			//------------------------------
			
		}else{
			ActionErrors errors = new ActionErrors();
			errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("error.autenticacion.tipoSesion"));
			saveMessages(request, errors);
			find = "error";
		}
		
		return mapping.findForward(find);
	}

	private boolean validarFechaLimite(UsuarioConectado usuarioConectado,HttpServletRequest request){
			CtrParParametrosDAO parametrosDAO = new CtrParParametrosDAO(getSessionHibernate(request));
			Date fechaActual = new Date();
			GregorianCalendar actualCalendar = new GregorianCalendar();
			actualCalendar.setTime(fechaActual);
			GregorianCalendar calendar = new GregorianCalendar();
			ElapsedTime elapsedTime = new ElapsedTime();
			SecIseInicioSesion modelInicioSesion = null;
			SecIseInicioSesionDAO secIseInicioSesionDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
			Transaction tx = secIseInicioSesionDAO.getSession().beginTransaction();
			try {
					modelInicioSesion = secIseInicioSesionDAO.findById(usuarioConectado.getNombreUsuario());
					tx.commit();
			}catch (Exception e) {
				// TODO: handle exception
				tx.rollback();
				e.printStackTrace();
			}finally{
				secIseInicioSesionDAO.getSession().flush();
				secIseInicioSesionDAO.getSession().clear();
				
			}
			calendar.setTime(modelInicioSesion.getIseUltimaSesion());
			return (elapsedTime.getDays(calendar,actualCalendar) == parametrosDAO.findById("DURACION_PASS").getParValorNumber().intValue()) ? false : true;
	}
	
	private void actualizarSaldoMensualInventario(HttpServletRequest request){
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM");
		Date fechaActual = new Date();
		String fa = sdf.format(fechaActual);
		String mesActual = fa.substring(5,7);
		String anhoActual = fa.substring(0,4);
		int ma = Integer.parseInt(mesActual);
		int aa = Integer.parseInt(anhoActual);
		
		InvSmeSaldoMensualDAO saldoMensualDAO = new InvSmeSaldoMensualDAO(getSessionHibernate(request));
		Transaction transaction = saldoMensualDAO.getSession().beginTransaction();
		
		int smeId = saldoMensualDAO.latest();
		if(smeId != -1){
			InvSmeSaldoMensual saldoMensual = saldoMensualDAO.findById(smeId);
			Date fechaComparacion = saldoMensual.getSmeFecha();
			String fc = sdf.format(fechaComparacion);
			String mesComparacion = fc.substring(5,7);
			String anhoComparacion = fc.substring(0,4);
			int mc = Integer.parseInt(mesComparacion);
			int ac = Integer.parseInt(anhoComparacion);
			
			if(aa == ac){
				if(mc < ma){
					InvPexProductosExistenciaDAO existenciaDAO = new InvPexProductosExistenciaDAO(getSessionHibernate(request));
					List lst = existenciaDAO.findAll();
					for (Iterator iterator = lst.iterator(); iterator.hasNext();) {
						InvPexProductosExistencia pex = (InvPexProductosExistencia) iterator.next();
						InvSmeSaldoMensual sme = new InvSmeSaldoMensual();
						sme.setInvArtArticulo(pex.getInvArtArticulo());
						sme.setSmeCantidad((double) pex.getPexCantidadProducto());
						sme.setSmeFecha(new Date());
						sme.setSmeSaldo(pex.getPexSaldo());
						sme.setSmeCostoArt(pex.getPexCostoProducto());
						saldoMensualDAO.save(sme);
						transaction.commit();
					}
				}
			}
		}else{
			InvPexProductosExistenciaDAO existenciaDAO = new InvPexProductosExistenciaDAO(getSessionHibernate(request));
			List lst = existenciaDAO.findAll();
			for (Iterator iterator = lst.iterator(); iterator.hasNext();) {
				InvPexProductosExistencia pex = (InvPexProductosExistencia) iterator.next();
				InvSmeSaldoMensual sme = new InvSmeSaldoMensual();
				sme.setInvArtArticulo(pex.getInvArtArticulo());
				sme.setSmeCantidad((double) pex.getPexCantidadProducto());
				sme.setSmeFecha(new Date());
				sme.setSmeSaldo(pex.getPexSaldo());
				sme.setSmeCostoArt(pex.getPexCostoProducto());				
				saldoMensualDAO.save(sme);
				transaction.commit();
			}
		}
		saldoMensualDAO.getSession().flush();
		saldoMensualDAO.getSession().clear();
		
	}
	
	private boolean updateInicioSesion(UsuarioConectado usuarioConectado,HttpServletRequest request){
			boolean flag = true;
			SecIseInicioSesion modelInicioSesion = null;
			SecIseInicioSesionDAO secIseInicioSesionDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
			Transaction tx = secIseInicioSesionDAO.getSession().beginTransaction();
			try {
				modelInicioSesion = secIseInicioSesionDAO.findById(usuarioConectado.getNombreUsuario());
					if (modelInicioSesion.getIseVecesUtilizado().intValue() == 0) {
						flag = false;
					}
					/*se actualiza el numero de veces conectado y tambien 
					 * se en el campo ultimaSesion la fecha actual como ultimaSesion*/
					modelInicioSesion.setIseVecesUtilizado((modelInicioSesion.getIseVecesUtilizado().intValue()) + 1);
					modelInicioSesion.setIseUltimaSesion(new java.util.Date());
					modelInicioSesion.setIseUltimaIp(usuarioConectado.getIp());
					tx.commit();
				} catch (Exception e) {
				// TODO: handle exception
				tx.rollback();
				e.printStackTrace();
			}finally{
				secIseInicioSesionDAO.getSession().flush();
				secIseInicioSesionDAO.getSession().clear();
				
			}
			return flag;
	}
	
	private void salvarParametros(HttpServletRequest request) {
		//Por el momento la carga es de parametros es de manera manual
		Parametros parametros = new Parametros();
		parametros.put(Parametros.LONGITUD_CONTRASENIA, new Integer(10));
		request.getSession().setAttribute(Constantes.PARAMETROS_KEY, parametros);
		//CtrParParametros parParametros = new CtrParParametros();
		CtrParParametrosDAO parametrosDAO = new CtrParParametrosDAO(getSessionHibernate(request));
		request.getSession().setAttribute("tamDui", parametrosDAO.findById("TAM_DUI").getParValorNumber().intValue());
	}

	private void salvarHistorial(AutenticacionForm form,UsuarioConectado usuarioConectado,HttpServletRequest request){
		//ActionForward actionForward = null; 
		SecHseHistorialSesion modelHistorialSesion = null;
		SecIseInicioSesion modelInicioSesion = null;
		SecIseInicioSesionDAO  secIseInicioSesionDAO = null; 
		SecHseHistorialSesionDAO secHseHistorialSesionDAO = null;
		
				log.debug("Generado Historial de Inicio de Sesion");
				secIseInicioSesionDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
				modelInicioSesion = secIseInicioSesionDAO.findById(form.getNombreUsuario());
				modelHistorialSesion = new SecHseHistorialSesion();
				fillHistorialModel(usuarioConectado,modelInicioSesion,modelHistorialSesion,request.getLocalAddr());
				secHseHistorialSesionDAO = new SecHseHistorialSesionDAO(getSessionHibernate(request));
				Transaction tx2 = secHseHistorialSesionDAO.getSession().beginTransaction();
					modelHistorialSesion.setHseId(secHseHistorialSesionDAO.nextId());
					secHseHistorialSesionDAO.save(modelHistorialSesion);
				tx2.commit();
				secHseHistorialSesionDAO.getSession().flush();
				secHseHistorialSesionDAO.getSession().clear();
				
				request.getSession().setAttribute(Constantes.HSEID,modelHistorialSesion.getHseId());
				log.debug("Guardando Historial para usuario "+ form.getNombreUsuario());
	}
	
	private void fillHistorialModel(UsuarioConectado usuarioConectado,SecIseInicioSesion modelInicioSesion,SecHseHistorialSesion modelHistorialSesion,String ip){
		modelHistorialSesion.setSecIseInicioSesion(modelInicioSesion);
		modelHistorialSesion.setHseIp(ip);
		modelHistorialSesion.setHseFechaAcceso(new Date());
		modelHistorialSesion.setAudFechaCreacion(new Date());
		modelHistorialSesion.setAudFechaModificacion(new Date());
		modelHistorialSesion.setAudUsuarioCreacion(usuarioConectado.getNombreUsuario());
		modelHistorialSesion.setAudUsuarioModificacion(usuarioConectado.getNombreUsuario());
	}
		
	protected SecIseInicioSesion autenticar(AutenticacionForm form,HttpServletRequest request){
		//boolean validado = false;
		SecIseInicioSesionDAO inicioSesionDAO=new SecIseInicioSesionDAO(getSessionHibernate(request));
		SecIseInicioSesion aut = inicioSesionDAO.findById(form.getNombreUsuario());
		String passwordForm = Hasher.getHash(form.getContrasenia().toUpperCase());
		aut = (aut!=null && aut.getIseContrasenia().equals(passwordForm) && aut.getIseFechaInactivacion()==null)?aut:null;
		//inicioSesionDAO.getSession().flush();
		inicioSesionDAO.getSession().clear();
		return aut;
	}
	
	protected void salvarUsuario(AutenticacionForm autenticacion,SecIseInicioSesion usuario,HttpServletRequest request){
		HttpSession session = request.getSession(true);
		UsuarioConectado usuarioConectado = new UsuarioConectado();
		Date hoy = new Date();
		SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-yyyy");
		usuarioConectado.setNombreUsuario(autenticacion.getNombreUsuario());
		usuarioConectado.setIp(request.getRemoteAddr());
		CtrParParametrosDAO parametrosDAO = new CtrParParametrosDAO(getSessionHibernate(request));
		CtrParParametros parMax = parametrosDAO.findById("DEFAULT_NUM_REGISTROS");
		usuarioConectado.setMax(parMax.getParValorNumber().intValue());
		session.setAttribute(Constantes.USUARIO_KEY, usuarioConectado);
		Object menu= cargarMenu(request, usuario);
		if(menu!=null)
			session.setAttribute(Constantes.MENU_KEY,menu );
		session.setAttribute(Constantes.FECHA_KEY, sdf.format(hoy));
	}
	
	@SuppressWarnings("unchecked")
	protected Object cargarMenu(HttpServletRequest request, SecIseInicioSesion usuario){
		MenuRepository repository = new MenuRepository();
		MenuRepository defaultRepository = (MenuRepository) getServlet().getServletContext().getAttribute(MenuRepository.MENU_REPOSITORY_KEY);
		repository.setDisplayers(defaultRepository.getDisplayers());
		
		SecRopRolMenuDAO menuDAO = new SecRopRolMenuDAO(getSessionHibernate(request));
		
		List lista = menuDAO.findByRol(usuario.getSecRolRoles().getRolNombre());
		
		if(lista.isEmpty())
			return null;
		for (Iterator menus = lista.iterator(); menus.hasNext();) {
			SecRopRolMenu menu2 = (SecRopRolMenu) menus.next();
			SecMopMenuOpcion menuOpcion = menu2.getId().getSecMopMenuOpcion();
			MenuComponent parentMenu=new MenuComponent();
			parentMenu.setAction(menuOpcion.getMopAction());
			//if(menuOpcion.getMopAction()!=null)System.out.println("menuOpcion.getMopAction()="+menuOpcion.getMopAction());
			parentMenu.setAltImage(menuOpcion.getMopAltimge());
			parentMenu.setDescription(menuOpcion.getMopDescription());
			parentMenu.setForward(menuOpcion.getMopForward());
			parentMenu.setHeight(menuOpcion.getMopHeight());
			parentMenu.setImage(menuOpcion.getMopImage());
			parentMenu.setLocation(menuOpcion.getMopLocation());
			parentMenu.setModule(menuOpcion.getMopModule());
			parentMenu.setName(menuOpcion.getMopName());
			parentMenu.setOnclick(menuOpcion.getMopOnclick());
			parentMenu.setOnmouseout(menuOpcion.getMopOnmouseout());
			parentMenu.setOnmouseover(menuOpcion.getMopOnmouseover());
			parentMenu.setTarget(menuOpcion.getMopTarget());
			parentMenu.setTitle(menuOpcion.getMopTitle());
			parentMenu.setToolTip(menuOpcion.getMopTooltip());
			parentMenu.setWidth(menuOpcion.getMopWidth());
			repository.addMenu(parentMenu);
			cargarHijos(repository, parentMenu, menuOpcion.getSecMopMenuOpcions(), usuario.getSecRolRoles().getRolNombre());
		}
		menuDAO.getSession().flush();
		menuDAO.getSession().clear();
		
		return repository;
	}
	
	@SuppressWarnings("unchecked")
	private void cargarHijos(MenuRepository repository, MenuComponent parentMenu, Set<SecMopMenuOpcion> menuOpcion, String nombreRol) {
		
			for (Iterator<SecMopMenuOpcion> opciones = menuOpcion.iterator(); opciones.hasNext();) {
				SecMopMenuOpcion opcion = (SecMopMenuOpcion) opciones.next();
				//Si a este rol se le asigno el menu entonces este usuario tendra acceso
				
				if (isContentInRole(opcion, nombreRol)) {
					MenuComponent opcionMenu = new MenuComponent();
					opcionMenu.setAction(opcion.getMopAction());
					//if(opcion.getMopAction()!=null) System.out.println("opcion.getMopAction()="+opcion.getMopAction());
					opcionMenu.setAltImage(opcion.getMopAltimge());
					opcionMenu.setDescription(opcion.getMopDescription());
					opcionMenu.setForward(opcion.getMopForward());
					opcionMenu.setHeight(opcion.getMopHeight());
					opcionMenu.setImage(opcion.getMopImage());
					opcionMenu.setLocation(opcion.getMopLocation());
					opcionMenu.setModule(opcion.getMopModule());
					opcionMenu.setName(opcion.getMopName());
					opcionMenu.setOnclick(opcion.getMopOnclick());
					opcionMenu.setOnmouseout(opcion.getMopOnmouseout());
					opcionMenu.setOnmouseover(opcion.getMopOnmouseover());
					opcionMenu.setTarget(opcion.getMopTarget());
					opcionMenu.setTitle(opcion.getMopTitle());
					opcionMenu.setToolTip(opcion.getMopTooltip());
					opcionMenu.setWidth(opcion.getMopWidth());
					opcionMenu.setParent(parentMenu);
					repository.addMenu(opcionMenu);
					cargarHijos(repository, opcionMenu, opcion
							.getSecMopMenuOpcions(), nombreRol);
				}
		}
	}

	@SuppressWarnings("unchecked")
	private boolean isContentInRole(SecMopMenuOpcion opcion, String nombreRol) {
		boolean estaEnRoles = false;
		if(!opcion.getSecRopRolMenus().isEmpty()) {
			for (Iterator<SecRopRolMenu> roles = opcion.getSecRopRolMenus().iterator(); roles.hasNext();) {
				SecRopRolMenu rol = (SecRopRolMenu) roles.next();
				if(nombreRol.equals(rol.getId().getSecRolRoles().getRolNombre())) {
					estaEnRoles = true;
					break;
				}
			}
		}
		return estaEnRoles;
	}

	protected Map<String, String> getKeyMethodMap() {
		
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.inises.cargar","cargar");
		map.put("cmd.inises.entrar","entrar");

		return map;
	}
}