/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.seguridad.struts.action;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.hibernate.Transaction;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeImpl;
import org.jmesa.limit.ExportType;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.BasicCellEditor;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.html.HtmlBuilder;

import com.cetia.sicaco.hibernate.SecParParentescoDAO;
import com.cetia.sicaco.hibernate.SecPemPersonaEmergencia;
import com.cetia.sicaco.hibernate.SecPemPersonaEmergenciaDAO;
import com.cetia.sicaco.hibernate.SecPerPersona;
import com.cetia.sicaco.hibernate.SecPerPersonaDAO;
import com.cetia.sicaco.seguridad.struts.form.PerEmergenciaForm;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;

/** 
 * MyEclipse Struts
 * Creation date: 02-15-2008
 * 
 * XDoclet definition:
 * @struts.action path="/perEmergencia" name="perEmergenciaForm" input="pagina-lista.seguridad.perEmergencia" parameter="accion" scope="request" validate="true"
 * @struts.action-forward name="lista" path="pagina-lista.seguridad.perEmergencia"
 * @struts.action-forward name="dml" path="pagina-dml.seguridad.perEmergencia"
 * @struts.action-forward name="error" path="pagina-lista.seguridad.perEmergencia"
 */
public class PerEmergenciaAction extends DMLAction {
	/*
	 * Generated Methods
	 */
	public static final String TABLA_ID = "secPemPersonaEmergencia";
	private static final String PERID_EMERGENCIA="perIdEmergencia";
	
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		PerEmergenciaForm emergenciaForm = (PerEmergenciaForm) form;
		
		SecPerPersonaDAO secPerPersonaDAO = new SecPerPersonaDAO(getSessionHibernate(request));
		SecPerPersona secPerPersona = secPerPersonaDAO.findById(emergenciaForm.getPerId());
		//Aqui empieza el cï¿½digo para generar Tabla
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(secPerPersona.getSecPemPersonaEmergencias());
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		
		Limit limit = tableFacade.getLimit();
        if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
        if(request.getSession().getAttribute("asoc") == null){
       	 request.getSession().setAttribute("asoc", emergenciaForm.isAsoc());
       }
        request.setAttribute(Constantes.PERSONA,secPerPersona);
        request.setAttribute("form",emergenciaForm);
        request.setAttribute(Constantes.ACCION_KEY,"/perEmergencia");
        request.setAttribute("filtro", "1");
		return mapping.findForward("lista");
		 
	}
	
	public ActionForward redirectInvalidData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		ActionErrors errors = (ActionErrors)request.getSession().getAttribute(Constantes.ERRORS);
		String perId = (String)request.getSession().getAttribute(PERID_EMERGENCIA);
		SecPerPersona secPerPersona = null;
		List lst = null;
		SecParParentescoDAO parentescoDAO = new SecParParentescoDAO(getSessionHibernate(request));
		Transaction tx = parentescoDAO.getSession().beginTransaction();
		SecPerPersonaDAO secPerPersonaDAO = new SecPerPersonaDAO(getSessionHibernate(request));
		try {
			lst = parentescoDAO.findAll();
			secPerPersona = secPerPersonaDAO.findById(perId);
		} catch (Exception e) {
			// TODO: handle exception
			tx.rollback();
			e.printStackTrace();
		}finally{
			parentescoDAO.getSession().flush();
			parentescoDAO.getSession().clear();
			
		}
		request.setAttribute("parentesco", lst);
		//----- Variables de configuracion
        PerEmergenciaForm  perEmergenciaForm = (PerEmergenciaForm) form;
        perEmergenciaForm.setPerId(perId);
        request.setAttribute(Constantes.PERSONA, secPerPersona);
        request.setAttribute("form",perEmergenciaForm);
        request.setAttribute(Constantes.ACCION_KEY, "/perEmergenciaAccion");
		request.setAttribute("filtro", "0");
		request.setAttribute("boton", "0");
		request.getSession().setAttribute("asoc", perEmergenciaForm.isAsoc());
		saveMessages(request, errors);
		return mapping.findForward("lista");
	}
	
	
	
	//---- Funcion que genera el html de la tabla del jmesa
	private String html(final TableFacade tableFacade, final HttpServletRequest request) {
		tableFacade.setColumnProperties("pemPrimerNombre",
				"secParParentesco.parDescripcion",
				"pemTelefono");
		Table table = tableFacade.getTable();
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.emergencia.caption");
		
		Row row = table.getRow();
		Column nombreColumna = row.getColumn("secParParentesco.parDescripcion");
		nombreColumna.setTitleKey("tbl.emergencia.secParParentesco");
		
		nombreColumna = row.getColumn("pemPrimerNombre");
		nombreColumna.setTitleKey("tbl.emergencia.pemPrimerNombre");
		
		//----- Implementamos la edicion de usuario
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				SecPemPersonaEmergencia personaEmergencia = (SecPemPersonaEmergencia)item;
				
				HtmlBuilder html = new HtmlBuilder();
				value = personaEmergencia.getPemPrimerNombre();
				value = value + ((personaEmergencia.getPemSegundoNombre()==null)?"":(" "+personaEmergencia.getPemSegundoNombre()));
				value = value + ((personaEmergencia.getPemTercerNombre()==null)?"":(" "+personaEmergencia.getPemTercerNombre()));
				value = value + ", " + personaEmergencia.getPemPrimerApellido();
				value = value + ((personaEmergencia.getPemSegundoApellido()==null)?"":(" "+personaEmergencia.getPemSegundoApellido()));
				value = value + ((personaEmergencia.getPemApellidoCasada()==null || personaEmergencia.getPemApellidoCasada().trim().equals(""))?"":(" de "+personaEmergencia.getPemApellidoCasada()));
				//---- Generar link para entrar a edicion
				String link = tableFacade.getWebContext().getContextPath();
				link += "/seguridad/perEmergencia.do?pemId="+personaEmergencia.getPemId().toString()+"&perId="+personaEmergencia.getSecPerPersona().getPerId()+"&accion=agrega&boton=1";
				html.a().href().quote().append(link).quote().close();
				//---- Agregamos el link con el nombre = value
				html.append(value);
				html.aEnd();
				
				return html.toString();
			}
		});
				
		nombreColumna = row.getColumn("pemTelefono");
		nombreColumna.setTitleKey("tbl.emergencia.pemTelefono");
		
		return tableFacade.render();
	}
	
	//---- Funcion que genera los exports, el formato que tendran
	 private void export(final TableFacade tableFacade) {
		 	tableFacade.setColumnProperties("pemPrimerNombre","pemPrimerApellido",
					"secParParentesco.parDescripcion",
					"pemTelefono");
			Table table = tableFacade.getTable();
			//---- Titulo de la tabla
			table.setCaptionKey("tbl.emergencia.caption");
			
			Row row = table.getRow();
			
			Column nombreColumna = row.getColumn("secParParentesco.parDescripcion");
			nombreColumna.setTitleKey("tbl.emergencia.secParParentesco");
			
			nombreColumna = row.getColumn("pemPrimerNombre");
			nombreColumna.setTitleKey("tbl.emergencia.pemPrimerNombre");
			
			//----- Implementamos la edicion de usuario
			nombreColumna = row.getColumn("pemPrimerApellido");
			nombreColumna.setTitleKey("tbl.emergencia.pemPrimerApellido");
			
			
			nombreColumna = row.getColumn("pemTelefono");
			nombreColumna.setTitleKey("tbl.emergencia.pemTelefono.export");

			tableFacade.render();
	 }
	
	//---- Accion de cancelar, que regresa a la pantalla basica de la lista 
 	public ActionForward cancelar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		return lista(mapping, form, request, response);
	}
	
 	//---- Accion que inicia la pantalla para agregar persona
	public ActionForward agregar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		PerEmergenciaForm emergenciaForm = (PerEmergenciaForm) form;
		request.getSession().setAttribute(PERID_EMERGENCIA,emergenciaForm.getPerId());
		SecPerPersonaDAO secPerPersonaDAO = new SecPerPersonaDAO(getSessionHibernate(request));
		SecPerPersona secPerPersona = secPerPersonaDAO.findById(emergenciaForm.getPerId());
		SecParParentescoDAO parentescoDAO = new SecParParentescoDAO(getSessionHibernate(request));
		List lst = parentescoDAO.findAll();
		request.setAttribute("parentesco", lst);
		
		//----- Variables de configuracion
		request.setAttribute("form",emergenciaForm);

        request.setAttribute("persona",secPerPersona);
		request.setAttribute(Constantes.ACCION_KEY, "/perEmergenciaAccion");
		request.setAttribute("filtro", "0");
		request.setAttribute("boton", "0");
		return mapping.findForward("dml");
	}
	
	//---- Accion asociada al link de edicion de la tabla, entra a pantalla de edicion
	public ActionForward editar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		PerEmergenciaForm  emergenciaForm = (PerEmergenciaForm) form;
		SecPemPersonaEmergenciaDAO emergenciaDAO = new SecPemPersonaEmergenciaDAO(getSessionHibernate(request));
		
		SecParParentescoDAO parentescoDAO = new SecParParentescoDAO(getSessionHibernate(request));
		List lst = parentescoDAO.findAll();
		request.setAttribute("parentesco", lst);
		
		//---- Set de los datos de la persona seleccionada para la edicion
		emergenciaForm.setPersonaEmergenciaH(emergenciaDAO.findById(emergenciaForm.getPemId()));
	
		//---- Variables de configuracion
		request.setAttribute("form",emergenciaForm);
		request.setAttribute(Constantes.ACCION_KEY, "/perEmergenciaAccion");
		request.setAttribute("filtro", "0");
		request.setAttribute("boton", "1");
		return mapping.findForward("dml");
	}
	
	//---- Accion de guardar nueva persona, regresa a lista principal
	public ActionForward guardar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		PerEmergenciaForm  emergenciaForm = (PerEmergenciaForm) form;
		SecPemPersonaEmergenciaDAO emergenciaDAO = new SecPemPersonaEmergenciaDAO(getSessionHibernate(request));
		
		//---- Indica inicio de las transacciones
		Transaction trx = emergenciaDAO.getSession().beginTransaction();
		
		//emergenciaForm.setPemId(emergenciaDAO.nextId());
		
		//---- Save realiza un insert en la tabla
		emergenciaDAO.save(emergenciaForm.getPersonaEmergenciaH());
		trx.commit();
		emergenciaDAO.getSession().flush();
		emergenciaDAO.getSession().clear();
		
		return lista(mapping, form, request, response);
	}
	
	//---- Accion de guardar los cambios hecho de una edicion
	public ActionForward salvar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		PerEmergenciaForm  emergenciaForm = (PerEmergenciaForm) form;
		SecPemPersonaEmergenciaDAO emergenciaDAO = new SecPemPersonaEmergenciaDAO(getSessionHibernate(request));
		
		//---- Inicia transaccion
		Transaction trx = emergenciaDAO.getSession().beginTransaction();
		
		//---- Merge indica un update en la tabla
		emergenciaDAO.merge(emergenciaForm.getPersonaEmergenciaH());
		trx.commit();
		emergenciaDAO.getSession().flush();
		emergenciaDAO.getSession().clear();
		
		return lista(mapping, form, request, response);
	}
	
	//---- Elimina los datos seleccionados de la tabla
	public ActionForward eliminar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		PerEmergenciaForm  emergenciaForm = (PerEmergenciaForm) form;
		SecPemPersonaEmergenciaDAO emergenciaDAO = new SecPemPersonaEmergenciaDAO(getSessionHibernate(request));
		
		//---- Inicia transaccion
		Transaction trx = emergenciaDAO.getSession().beginTransaction();
		
		//---- Delete indica un delete de la tabla
		emergenciaDAO.delete(emergenciaDAO.findById(emergenciaForm.getPersonaEmergenciaH().getPemId()));
		trx.commit();
		emergenciaDAO.getSession().flush();
		emergenciaDAO.getSession().clear();
		
		return lista(mapping, form, request, response);
	}
	public ActionForward redirectLista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
			return mapping.findForward("redirectLista");
	}
	
	public ActionForward redirectListaAsociados(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		return mapping.findForward("redirectListaAsoc");
	}
	
	//---- Mapas usados para conectar las acciones
	protected Map<String, String> getKeyMethodMap() {
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.emergencia.agregar", "guardar");
		map.put("cmd.emergencia.mostrar","agregar");
		map.put("cmd.emergencia.editar","editar");
		map.put("cmd.emergencia.modificar","salvar");
		map.put("cmd.emergencia.eliminar","eliminar");
		map.put("cmd.emergencia.cancelar","cancelar");
		map.put("cmd.emergencia.lista", "lista");
		map.put("cmd.emergencia.axn2","editar");
		map.put("cmd.emergencia.dml", "agregar");
		map.put("cmd.emergencia.redirectInvalidData","redirectInvalidData");
		map.put("cmd.emergencia.fowardToLista","redirectLista");
		map.put("cmd.emergencia.redirectListaAsc","redirectListaAsociados");
		return map;
	}
}