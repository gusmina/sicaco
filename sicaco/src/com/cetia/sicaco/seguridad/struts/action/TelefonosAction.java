/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.seguridad.struts.action;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.hibernate.Transaction;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeImpl;
import org.jmesa.limit.ExportType;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.BasicCellEditor;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.html.HtmlBuilder;

import com.cetia.sicaco.hibernate.SecPerPersona;
import com.cetia.sicaco.hibernate.SecPerPersonaDAO;
import com.cetia.sicaco.hibernate.SecTelTelefono;
import com.cetia.sicaco.hibernate.SecTelTelefonoDAO;
import com.cetia.sicaco.hibernate.SecTelTelefonoId;
import com.cetia.sicaco.hibernate.SecTteTipoTelefonoDAO;
import com.cetia.sicaco.seguridad.struts.form.TelefonosForm;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;
import com.mad.utilidades.AlreadyExistPhoneException;

/** 
 * MyEclipse Struts
 * Creation date: 02-20-2008
 * 
 * XDoclet definition:
 * @struts.action path="/telefonos" name="telefonosForm" input="pagina-lista.seguridad.phone" parameter="accion" scope="request" validate="true"
 * @struts.action-forward name="lista" path="pagina-lista.seguridad.phone"
 * @struts.action-forward name="dml" path="pagina-dml.seguridad.phone"
 * @struts.action-forward name="error" path="pagina-lista.seguridad.phone"
 */
public class TelefonosAction extends DMLAction {
	/*
	 * Generated Methods
	 */

	public static final String TABLA_ID = "secTelTelefono";
	private static final String PER_IDTELEFONO = "perIdTelefono";
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		TelefonosForm telefonosForm = (TelefonosForm) form;
		SecPerPersonaDAO secPerPersonaDAO = new SecPerPersonaDAO(getSessionHibernate(request));
		SecPerPersona secPerPersona = secPerPersonaDAO.findById(telefonosForm.getPerId());
		request.getSession().setAttribute(PER_IDTELEFONO,telefonosForm.getPerId());
		SecTteTipoTelefonoDAO telefonoDAO = new SecTteTipoTelefonoDAO(getSessionHibernate(request));
		List lst = telefonoDAO.findAll();
		request.setAttribute("tipoTelefono", lst);
		
		//Aqui empieza el c�digo para generar Tabla
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(secPerPersona.getSecTelTelefonos());
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		
		Limit limit = tableFacade.getLimit();
        if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
        request.setAttribute(Constantes.PERSONA,secPerPersona);
        request.setAttribute("form",telefonosForm);
        request.getSession().setAttribute("asoc",telefonosForm.isAsoc());//se utiliza para saber si viene de asociado
        request.setAttribute(Constantes.ACCION_KEY, "/telefonos");
        request.setAttribute("filtro", "1");
		return mapping.findForward("lista");
		 
	}
	public ActionForward redirectInvalidData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		ActionErrors errors = (ActionErrors)request.getSession().getAttribute(Constantes.ERRORS);
		String perId = (String)request.getSession().getAttribute(PER_IDTELEFONO);
		SecPerPersonaDAO secPerPersonaDAO = new SecPerPersonaDAO(getSessionHibernate(request));
		SecPerPersona secPerPersona = secPerPersonaDAO.findById(perId);
		SecTteTipoTelefonoDAO telefonoDAO = new SecTteTipoTelefonoDAO(getSessionHibernate(request));
		List lst = telefonoDAO.findAll();
		request.setAttribute("tipoTelefono", lst);
		//Aqui empieza el c�digo para generar Tabla
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(secPerPersona.getSecTelTelefonos());
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL, ExportType.PDF);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
        if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
            return null; 
        }else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
        TelefonosForm telefonosForm = new TelefonosForm();
        telefonosForm.setPerId(perId);
        request.setAttribute(Constantes.PERSONA,secPerPersona);
        request.setAttribute("form",telefonosForm);
        request.setAttribute(Constantes.ACCION_KEY, "/telefonos");
        request.setAttribute("asoc",telefonosForm.isAsoc());//se utiliza para saber si viene de asociado
        request.setAttribute("filtro", "1");
        saveMessages(request, errors);
		return mapping.findForward("lista");
	}
	
	
	//---- Funcion que genera el html de la tabla del jmesa
	private String html(final TableFacade tableFacade, final HttpServletRequest request) {
		tableFacade.setColumnProperties("id.telTelefono","telExt","secTteTipoTelefono.tteDescripcion","eliminar");
		Table table = tableFacade.getTable();
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.telefonos.caption.export");
		
		Row row = table.getRow();
		Column nombreColumna = row.getColumn("secTteTipoTelefono.tteDescripcion");
		nombreColumna.setTitleKey("tbl.telefonos.secTteTipoTelefono.tteDescripcion");
		
		nombreColumna = row.getColumn("telExt");
		nombreColumna.setTitleKey("tbl.telefonos.telExt");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				SecTelTelefono telefono = (SecTelTelefono)item;
				if(value != null && !value.equals("")){
					return value;
				}else
					return "---";
			}
		});
		
		nombreColumna = row.getColumn("id.telTelefono");
		nombreColumna.setTitleKey("tbl.telefonos.id.telTelefono");
		
		nombreColumna = row.getColumn("eliminar");
		nombreColumna.setTitleKey("tbl.telefonos.eliminar");
		
		//----- Implementamos la edicion de usuario
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				SecTelTelefono telefono = (SecTelTelefono)item;
				//---- Generar link para entrar a edicion
				HtmlBuilder html = new HtmlBuilder();
				String eliminar = "Eliminar";
				html.a().onclick("handlerDeleteButton('"+ telefono.getId().getTelTelefono()+ "','"+telefono.getId().getSecPerPersona().getPerId()+"');").append("class=\"linkEliminar\"").title(eliminar).id("deleteButtonId").close();
				html.aEnd();
				return html.toString();
			}
		});
		
		
		return tableFacade.render();
	}
	
	//---- Funcion que genera los exports, el formato que tendran
	 private void export(final TableFacade tableFacade) {
		 	tableFacade.setColumnProperties("id.telTelefono","secTteTipoTelefono.tteDescripcion");
			Table table = tableFacade.getTable();
			//---- Titulo de la tabla
			table.setCaptionKey("tbl.emergencia.caption");
			
			Row row = table.getRow();
			Column nombreColumna = row.getColumn("secTteTipoTelefono.tteDescripcion");
			nombreColumna.setTitleKey("tbl.telefonos.secTteTipoTelefono.tteDescripcion");
			
			nombreColumna = row.getColumn("id.telTelefono");
			nombreColumna.setTitleKey("tbl.telefonos.id.telTelefono");
			
			tableFacade.render();
			
	 }
	
	//---- Accion de cancelar, que regresa a la pantalla basica de la lista 
 	public ActionForward cancelar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		return lista(mapping, form, request, response);
	}
	
 	//---- Accion que inicia la pantalla para agregar persona
	public ActionForward agregar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
	
		//----- Variables de configuracion
		request.setAttribute(Constantes.ACCION_KEY, "/telefonosAccion");
		request.setAttribute("filtro", "0");
		request.setAttribute("boton", "0");
		
		return mapping.findForward("dml");
	}
	
	//---- Accion asociada al link de edicion de la tabla, entra a pantalla de edicion
	public ActionForward editar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		TelefonosForm  telefonosForm = (TelefonosForm) form;
		SecTelTelefonoDAO telefonoDAO = new SecTelTelefonoDAO(getSessionHibernate(request));
		
		//---- Set de los datos de la persona seleccionada para la edicion
		telefonosForm.setTelefonoH(telefonoDAO.findById(telefonosForm.getId()));
	
		//---- Variables de configuracion
		request.setAttribute(Constantes.ACCION_KEY, "/telefonosAccion");
		request.setAttribute("filtro", "0");
		request.setAttribute("boton", "1");
		return mapping.findForward("dml");
	}
	
	//---- Accion de guardar nueva persona, regresa a lista principal
	public ActionForward guardar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		TelefonosForm telefonosForm = (TelefonosForm) form;
		SecTelTelefono flagTelefono = null;
		SecTelTelefonoId idTelefono = telefonosForm.getId();
		SecTelTelefonoDAO telefonoDAO = new SecTelTelefonoDAO(getSessionHibernate(request));
		
		
		//---- Indica inicio de las transacciones
		Transaction trx = telefonoDAO.getSession().beginTransaction();
		try {
			flagTelefono = telefonoDAO.findById(idTelefono);
			validatePhoneLogic(flagTelefono);
			telefonoDAO.save(telefonosForm.getTelefonoH());
			trx.commit();
		}catch(AlreadyExistPhoneException phoneEx){
			ActionErrors errors = new ActionErrors();
			errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("error.telefono.id.telTelefono"));
			saveMessages(request, errors);
		}catch (Exception e) {
			// TODO: handle exception
			trx.rollback();
			e.printStackTrace();
		}finally{
			telefonoDAO.getSession().flush();
			telefonoDAO.getSession().clear();
			
		}
		//correoForm.setPerId(correoElectronicoDAO.nextId());
		
		//---- Save realiza un insert en la tabla
		
		return lista(mapping, form, request, response);
	}
	
	private void validatePhoneLogic(SecTelTelefono flagTelefono)throws Exception{
			if(flagTelefono!=null)throw new AlreadyExistPhoneException();
	}
	
	//---- Accion de guardar los cambios hecho de una edicion
	public ActionForward salvar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		TelefonosForm telefonosForm = (TelefonosForm) form;
		SecTelTelefonoDAO telefonoDAO = new SecTelTelefonoDAO(getSessionHibernate(request));
		
		//---- Inicia transaccion
		Transaction trx = telefonoDAO.getSession().beginTransaction();
		
		//---- Merge indica un update en la tabla
		telefonoDAO.merge(telefonosForm.getTelefonoH());
		trx.commit();
		telefonoDAO.getSession().flush();
		telefonoDAO.getSession().clear();
		
		return lista(mapping, form, request, response);
	}
	
	//---- Elimina los datos seleccionados de la tabla
	public ActionForward eliminar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		TelefonosForm telefonosForm = (TelefonosForm) form;
		SecTelTelefonoDAO telefonoDAO = new SecTelTelefonoDAO(getSessionHibernate(request));
		
		//---- Inicia transaccion
		Transaction trx = telefonoDAO.getSession().beginTransaction();
		
		//---- Delete indica un delete de la tabla
		telefonoDAO.delete(telefonoDAO.findById(telefonosForm.getTelefonoH().getId()));
		trx.commit();
		telefonoDAO.getSession().flush();
		telefonoDAO.getSession().clear();
		
		return lista(mapping, form, request, response);
	}
	public ActionForward redirectLista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		return mapping.findForward("redirectLista");
	}
	
	public ActionForward redirectListaAsoc(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		request.getSession().removeAttribute("asoc");
		return mapping.findForward("redirectListaAsoc");
	}
	
		
	//---- Mapas usados para conectar las acciones
	protected Map<String, String> getKeyMethodMap() {
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.telefonos.agregar", "guardar");
		map.put("cmd.telefonos.mostrar","agregar");
		map.put("cmd.telefonos.editar","editar");
		map.put("cmd.telefonos.modificar","salvar");
		map.put("cmd.telefonos.eliminar","eliminar");
		map.put("cmd.telefonos.cancelar","cancelar");
		map.put("cmd.telefonos.lista", "lista");
		map.put("cmd.telefonos.axn2","editar");
		map.put("cmd.telefonos.dml", "dml");
		map.put("cmd.telefonos.redirectInvalidData","redirectInvalidData");
		map.put("cmd.telefonos.redirectLista","redirectLista");
		map.put("cmd.telefonos.redirectListaAsoc","redirectListaAsoc");
		return map;
	}

}