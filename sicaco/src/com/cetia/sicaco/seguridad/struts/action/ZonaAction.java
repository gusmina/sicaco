/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.seguridad.struts.action;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.hibernate.Transaction;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeImpl;
import org.jmesa.limit.ExportType;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.BasicCellEditor;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.html.HtmlBuilder;

import com.cetia.sicaco.hibernate.SecZonZona;
import com.cetia.sicaco.hibernate.SecZonZonaDAO;
import com.cetia.sicaco.seguridad.struts.form.ZonaForm;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;

/** 
 * MyEclipse Struts
 * Creation date: 05-14-2008
 * 
 * XDoclet definition:
 * @struts.action path="/zona" name="zonaForm" input="redirectInvalidData" parameter="accion" scope="request" validate="true"
 * @struts.action-forward name="lista" path="pagina-lista.seguridad.zona"
 */
public class ZonaAction extends DMLAction {
	/*
	 * Generated Methods
	 */

	public static final String TABLA_ID = "secZonZona";
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		//ZonaForm zonaForm = (ZonaForm)form;
		SecZonZonaDAO zonaDAO = new SecZonZonaDAO(getSessionHibernate(request));
		List lst  = zonaDAO.findAll();
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);//, ExportType.PDF);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
		request.setAttribute(Constantes.ACCION_KEY, "/zona");
        request.setAttribute("filtro", "1");
		return mapping.findForward("lista");
		 
	}
	
	//---- Funcion que genera el html de la tabla del jmesa
	private String html(final TableFacade tableFacade, final HttpServletRequest request) {
		tableFacade.setColumnProperties("zonCodigo","zonNombre","zonDescripcion","eliminar");
		Table table = tableFacade.getTable();
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.zon.caption");
		
		Row row = table.getRow();
		Column nombreColumna = row.getColumn("zonCodigo");
		nombreColumna.setTitleKey("tbl.zon.zonCodigo");
		
		nombreColumna = row.getColumn("zonNombre");
		nombreColumna.setTitleKey("tbl.zon.zonNombre");
		
		nombreColumna = row.getColumn("zonDescripcion");
		nombreColumna.setTitleKey("tbl.zon.zonDescripcion");
		
		nombreColumna = row.getColumn("eliminar");
		nombreColumna.setTitleKey("tbl.zon.eliminar");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				SecZonZona zona = (SecZonZona)item;
				
				HtmlBuilder html = new HtmlBuilder();
				value = "Eliminar";
				//String link = tableFacade.getWebContext().getContextPath();
				//html.a().onclick("handlerDeleteButton1('zonCo="+ zona.getZonCodigo()+ "');").id("deleteButtonId").close();
				html.a().onclick("handlerDeleteButton('"+ zona.getZonId()+ "');").append("class=\"linkEliminar\"").title(value.toString()).id("deleteButtonId").close();
				//html.append(value);
				html.aEnd();
								
				return html.toString();
			}
		});
		
		return tableFacade.render();
	}
	
	//---- Funcion que genera los exports, el formato que tendran
	 private void export(final TableFacade tableFacade) {
		tableFacade.setColumnProperties("zonCodigo","zonNombre","zonDescripcion");
		Table table = tableFacade.getTable();
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.zon.caption");
		
		Row row = table.getRow();
		Column nombreColumna = row.getColumn("zonCodigo");
		nombreColumna.setTitleKey("tbl.zon.zonCodigo.x");
		
		nombreColumna = row.getColumn("zonNombre");
		nombreColumna.setTitleKey("tbl.zon.zonNombre");
		
		nombreColumna = row.getColumn("zonDescripcion");
		nombreColumna.setTitleKey("tbl.zon.zonDescripcion.x");
			
		tableFacade.render();
	}
	 
	public ActionForward guardar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ZonaForm zonaForm = (ZonaForm)form;
		SecZonZonaDAO zonaDAO = new SecZonZonaDAO(getSessionHibernate(request));
		if(zonaDAO.findByZonCodigo(zonaForm.getZonCodigo()).size() > 0){
			ActionErrors errors = new ActionErrors();
			errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.zona.repedito"));
	        saveMessages(request, errors);
	        return lista(mapping, form, request, response);
		}
		Transaction tx = zonaDAO.getSession().beginTransaction();
		try {
			zonaDAO.save(zonaForm.getZonaH());
			tx.commit();
		} catch (Exception e) {
			// TODO: handle exception
			tx.rollback();
			e.printStackTrace();
		}finally{
			zonaDAO.getSession().flush();
			zonaDAO.getSession().clear();
			
		}
		return lista(mapping,form,request,response);
	}

	public ActionForward eliminar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ZonaForm zonaForm = (ZonaForm)form;
		SecZonZonaDAO zonaDAO = new SecZonZonaDAO(getSessionHibernate(request));
		Transaction tx = zonaDAO.getSession().beginTransaction();
		try {
			zonaForm.setZonaH(zonaDAO.findById(zonaForm.getZonId()));
			zonaDAO.delete(zonaForm.getZonaH());
			tx.commit();
		} catch (Exception e) {
			// TODO: handle exception
			tx.rollback();
			log.error("Error al momento de eliminar una zona",e);
		}finally{
			zonaDAO.getSession().flush();
			zonaDAO.getSession().clear();
			
		}
		return lista(mapping,form,request,response);
	}
	
	public ActionForward redirectInvalidData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		ActionErrors errors = (ActionErrors)request.getSession().getAttribute(Constantes.ERRORS);
		SecZonZonaDAO zonaDAO = new SecZonZonaDAO(getSessionHibernate(request));
		List lst = null;
		Transaction tx = zonaDAO.getSession().beginTransaction();
		lst  = zonaDAO.findAll();
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);//, ExportType.PDF);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
		request.setAttribute(Constantes.ACCION_KEY, "/zona");
        request.setAttribute("filtro", "1");
		saveMessages(request, errors);
		return mapping.findForward("lista");
	}
	
	
	protected Map getKeyMethodMap() {
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.zon.lista", "lista");
		map.put("cmd.zon.guardar", "guardar");
		map.put("cmd.zon.eliminar", "eliminar");
		map.put("cmd.zon.redirectInvalidData", "redirectInvalidData");
		return map;
	}
}