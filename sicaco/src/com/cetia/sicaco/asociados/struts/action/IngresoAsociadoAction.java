/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.asociados.struts.action;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeFactory;
import org.jmesa.limit.ExportType;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.BasicCellEditor;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.editor.DateCellEditor;
import org.jmesa.view.html.HtmlBuilder;

import com.cetia.sicaco.asociados.struts.form.IngresoAsociadoForm;
import com.cetia.sicaco.hibernate.CtaAscAsociadoDAO;
import com.cetia.sicaco.hibernate.CtaInaIngresosxasociado;
import com.cetia.sicaco.hibernate.CtaInaIngresosxasociadoDAO;
import com.cetia.sicaco.hibernate.CtaNotNotasDAO;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;

/** 
 * MyEclipse Struts
 * Creation date: 08-19-2008
 * 
 * XDoclet definition:
 * @struts.action parameter="accion"
 */
public class IngresoAsociadoAction extends DMLAction {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	
	public static final String TABLA_ID = "ctaInaIngresosxasociado ";

	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		IngresoAsociadoForm ingresoAsociadoForm = (IngresoAsociadoForm) form;
		CtaInaIngresosxasociadoDAO ingresosAsociadoDAO = new CtaInaIngresosxasociadoDAO(getSessionHibernate(request));
		CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
		List lst = ingresosAsociadoDAO.findByProperty("ctaAscAsociado.ascId", ingresoAsociadoForm.getCtaAscAsociado().getAscId());
		//paginacion roberto
		TableFacade tableFacade = TableFacadeFactory.createTableFacade(TABLA_ID ,request );
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		int totalRows = ingresosAsociadoDAO.getTotalRowCountIngresoxAsociado(ingresoAsociadoForm.getCtaAscAsociado().getAscId());
		tableFacade.setTotalRows(totalRows);
		int rowStart = limit.getRowSelect().getRowStart();
		int rowEnd = limit.getRowSelect().getRowEnd();
		lst = ingresosAsociadoDAO.findAllIngresoXAsociado(rowStart, rowEnd, ingresoAsociadoForm.getCtaAscAsociado().getAscId());
		tableFacade.setItems(lst);
		/*
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		*/
		if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
		request.setAttribute("asociado", asociadoDAO.findById(ingresoAsociadoForm.getAscId()));
		request.setAttribute("form", ingresoAsociadoForm);
		request.setAttribute(Constantes.ACCION_KEY, "/ingresoAsociado");
		return mapping.findForward("lista");
	}
	
	//---- metodo que genera el html de la tabla del jmesa
	private String html(final TableFacade tableFacade, final HttpServletRequest request) {
		tableFacade.setColumnProperties("inaFechaIngreso", "inaFechaSalida", "inaId");
		Table table = tableFacade.getTable();
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.ina.caption");
		
		Row row = table.getRow();
		Column nombreColumna = row.getColumn("inaFechaIngreso");
		nombreColumna.setTitleKey("tbl.ina.fechaIngreso");
		nombreColumna.getCellRenderer().setCellEditor(new DateCellEditor("dd-MMM-yyyy"));
		
		nombreColumna = row.getColumn("inaFechaSalida");
		nombreColumna.setTitleKey("tbl.ina.fechaSalida");
		nombreColumna.getCellRenderer().setCellEditor(new DateCellEditor("dd-MMM-yyyy"));
		
		nombreColumna = row.getColumn("inaId");
		nombreColumna.setTitleKey("tbl.ina.acciones");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtaInaIngresosxasociado ingresosxasociado = (CtaInaIngresosxasociado)item;
				
				HtmlBuilder html = new HtmlBuilder();
				value = getResources(request).getMessage("lbl.ina.nota");
				String link = tableFacade.getWebContext().getContextPath();
				link += "/asociados/ingresoAsociado.do?notId="+ingresosxasociado.getCtaNotNotas().getNotId()
				+"&ascId="+ingresosxasociado.getCtaAscAsociado().getAscId()+"&inaId="+ingresosxasociado.getInaId()+"&accion=forwardConNota";
				html.a().href().quote().append(link).quote().append("class=\"linkNota\"").title(value.toString()).close();
				//html.append(value);
				html.aEnd();				
				return html.toString();		
			}
		});
		
		return tableFacade.render();
	}
	
	//---- metodo que genera los exports, el formato que tendran
	 private void export(final TableFacade tableFacade) {
		 tableFacade.setColumnProperties("inaFechaIngreso", "inaFechaSalida");
			Table table = tableFacade.getTable();
			table.setCaptionKey("tbl.ina.caption");
			
			Row row = table.getRow();
			Column nombreColumna = row.getColumn("inaFechaIngreso");
			nombreColumna.setTitleKey("tbl.ina.fechaIngreso");
			nombreColumna.getCellRenderer().setCellEditor(new DateCellEditor("dd-MMM-yyyy"));
			
			nombreColumna = row.getColumn("inaFechaSalida");
			nombreColumna.setTitleKey("tbl.ina.fechaSalida");
			nombreColumna.getCellRenderer().setCellEditor(new DateCellEditor("dd-MMM-yyyy"));
			
		tableFacade.render();
	}
	 
		public ActionForward forwardConNota(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {
			IngresoAsociadoForm ingresoAsociadoForm = (IngresoAsociadoForm) form;
			CtaNotNotasDAO notasDAO = new CtaNotNotasDAO(getSessionHibernate(request));
			ingresoAsociadoForm.setCtaNotNotas(notasDAO.findById(ingresoAsociadoForm.getNotId()));
			CtaInaIngresosxasociadoDAO ingresosxasociadoDAO = new CtaInaIngresosxasociadoDAO(getSessionHibernate(request));
			ingresoAsociadoForm.setCtaInaIngresosxasociadoH(ingresosxasociadoDAO.findById(ingresoAsociadoForm.getInaId()));
			return lista(mapping, ingresoAsociadoForm, request, response);
		}
		
		public ActionForward regresar(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {
			return mapping.findForward("toAsociados");
		}

	
	protected Map getKeyMethodMap() {
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.ina.lista","lista");
		map.put("cmd.ina.regresar","regresar");
		map.put("cmd.ina.verNota","forwardConNota");
		return map;
	}
}