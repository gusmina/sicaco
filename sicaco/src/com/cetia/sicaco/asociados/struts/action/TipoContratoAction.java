/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.asociados.struts.action;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.hibernate.Transaction;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeImpl;
import org.jmesa.limit.ExportType;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.BasicCellEditor;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.html.HtmlBuilder;
import com.cetia.sicaco.asociados.struts.form.TipoContratoForm;
import com.cetia.sicaco.hibernate.CtaTcoTipoContrato;
import com.cetia.sicaco.hibernate.CtaTcoTipoContratoDAO;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;

/** 
 * MyEclipse Struts
 * Creation date: 07-28-2008
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class TipoContratoAction extends DMLAction {
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	
	public static final String TABLA_ID = "ctaTcoTipoContrato";

	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		TipoContratoForm tipoContratoForm = (TipoContratoForm) form;
		CtaTcoTipoContratoDAO tipoContratoDAO = new CtaTcoTipoContratoDAO(getSessionHibernate(request));
		List<CtaTcoTipoContrato> ls = null;
		//paginacion roberto
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		int totalRow = tipoContratoDAO.getTotalRowCount();
		tableFacade.setTotalRows(totalRow);
		int filaInicio = limit.getRowSelect().getRowStart();
		int filaFin = limit.getRowSelect().getRowEnd();
		ls = tipoContratoDAO.findAll(filaInicio, filaFin);
		tableFacade.setItems(ls);
		
	/*  List lst = tipoContratoDAO.findAll();
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();		
		*/
		if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
		request.setAttribute("form", tipoContratoForm);
		request.setAttribute(Constantes.ACCION_KEY, "/tipoContrato");
		return mapping.findForward("lista");
	}
	
	//---- metodo que genera el html de la tabla del jmesa
	private String html(final TableFacade tableFacade, final HttpServletRequest request) {
		tableFacade.setColumnProperties("tcoNombre", "tcoDescripcion", "tcoId");
		Table table = tableFacade.getTable();
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.tco.caption");
		
		Row row = table.getRow();
		Column nombreColumna = row.getColumn("tcoNombre");
		nombreColumna.setTitleKey("tbl.tco.etrNombre");
		
		nombreColumna = row.getColumn("tcoDescripcion");
		nombreColumna.setTitleKey("tbl.tco.tcoDescripcion");
		
		nombreColumna = row.getColumn("tcoId");
		nombreColumna.setTitleKey("tbl.tco.acciones");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtaTcoTipoContrato tipoContrato = (CtaTcoTipoContrato)item;
				HtmlBuilder html = new HtmlBuilder();
				value = "Editar";
				String link = tableFacade.getWebContext().getContextPath();
				link += "/asociados/tipoContrato.do?tcoId="+tipoContrato.getTcoId()+"&tcoNombre="
				+tipoContrato.getTcoNombre()+"&tcoDescripcion="+ tipoContrato.getTcoDescripcion()+
				"&accion=cargarDatos&mdf=true";
				html.a().href().quote().append(link).quote().append("class=\"linkEditar\"").title(value.toString()).close();
				//html.append(value);
				html.aEnd();				
				return html.toString();		
			}
		});
		
		return tableFacade.render();
	}
	
	//---- metodo que genera los exports, el formato que tendran
	 private void export(final TableFacade tableFacade) {
		 tableFacade.setColumnProperties("tcoNombre", "tcoDescripcion");
			Table table = tableFacade.getTable();;
		
			//---- Titulo de la tabla
			table.setCaptionKey("tbl.tco.caption");
			
			Row row = table.getRow();
			Column nombreColumna = row.getColumn("tcoNombre");
			nombreColumna.setTitleKey("tbl.tco.etrNombre");
			
			nombreColumna = row.getColumn("tcoDescripcion");
			nombreColumna.setTitleKey("tbl.tco.tcoDescripcion");
			
		tableFacade.render();
	}
	
	 public ActionForward guardar(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {
			TipoContratoForm tipoContratoForm = (TipoContratoForm)form;
			CtaTcoTipoContratoDAO tipoContratoDAO = new CtaTcoTipoContratoDAO(getSessionHibernate(request));
			Transaction tx = tipoContratoDAO.getSession().beginTransaction();
			try{
				if(!tipoContratoForm.isMdf()){//ingresando un nuevo registro
					if(tipoContratoDAO.findByTcoNombre(tipoContratoForm.getTipoContratoH().getTcoNombre()).isEmpty()){
						tipoContratoForm.getTipoContratoH().setTcoId(tipoContratoDAO.nextId());
						tipoContratoDAO.save(tipoContratoForm.getTipoContratoH());
					}else{
						mensajes("errors.tcoNombreRepetido",request);
						return lista(mapping, form, request, response);
					}
				}else{//modificando un registro
					if(tipoContratoDAO.findByUpdatedName(tipoContratoForm.getTcoId(),tipoContratoForm.getTcoNombre()).isEmpty()){
						tipoContratoDAO.merge(tipoContratoForm.getTipoContratoH());
					}else{
						mensajes("errors.tcoNombreRepetido",request);
						return lista(mapping, form, request, response);
					}
				}
				tx.commit();
			}catch(Exception e){
				tx.rollback();
				e.printStackTrace();
			}finally{
				tipoContratoDAO.getSession().flush();
				tipoContratoDAO.getSession().clear();
				
			}
			return lista(mapping,new TipoContratoForm(),request,response);
		} 
	 
	 public ActionForward cargarDatos(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {
		 return lista(mapping, form, request, response);
	 }
	 
		public ActionForward redirectInvalidData(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response){
			ActionErrors errors = (ActionErrors)request.getSession().getAttribute(Constantes.ERRORS);
			saveMessages(request, errors);
			return lista(mapping, form, request, response);
		}
		
		public void mensajes(String msg, HttpServletRequest request){
			ActionErrors errors = new ActionErrors();
	        errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(msg));
	        saveMessages(request, errors);
		}
		
	
	protected Map getKeyMethodMap() {
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.tct.lista", "lista");
		map.put("cmd.tct.guardar", "guardar");
		map.put("cmd.tct.cargarDatos", "cargarDatos");
		map.put("cmd.tct.redirectInvalidData", "redirectInvalidData");
		return map;
	}
}