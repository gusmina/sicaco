/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.orden.struts.action;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.StringTokenizer;

import javax.servlet.ServletContext;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.jasperreports.engine.JRException;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.hibernate.Transaction;
import org.hibernate.exception.ConstraintViolationException;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeFactory;
import org.jmesa.facade.TableFacadeImpl;
import org.jmesa.limit.ExportType;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.BasicCellEditor;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.editor.DateCellEditor;
import org.jmesa.view.html.HtmlBuilder;

import com.cetia.sicaco.hibernate.CtaAscAsociado;
import com.cetia.sicaco.hibernate.CtaAscAsociadoDAO;
import com.cetia.sicaco.hibernate.CtaCasCuentaAsociado;
import com.cetia.sicaco.hibernate.CtaCasCuentaAsociadoDAO;
import com.cetia.sicaco.hibernate.CtaMxpMovimientoPrestamo;
import com.cetia.sicaco.hibernate.CtaMxpMovimientoPrestamoDAO;
import com.cetia.sicaco.hibernate.CtaPrePrestamo;
import com.cetia.sicaco.hibernate.CtaPrePrestamoDAO;
import com.cetia.sicaco.hibernate.CtaTprTipoPrestamo;
import com.cetia.sicaco.hibernate.CtaTprTipoPrestamoDAO;
import com.cetia.sicaco.hibernate.CtaTtrTipoTransaccionDAO;
import com.cetia.sicaco.hibernate.CtaTxaTransaccionxcuentaAsociado;
import com.cetia.sicaco.hibernate.CtaTxaTransaccionxcuentaAsociadoDAO;
import com.cetia.sicaco.hibernate.CtrEstEstado;
import com.cetia.sicaco.hibernate.CtrEstEstadoDAO;
import com.cetia.sicaco.hibernate.CtrParParametros;
import com.cetia.sicaco.hibernate.CtrParParametrosDAO;
import com.cetia.sicaco.hibernate.FacCliCliente;
import com.cetia.sicaco.hibernate.FacCliClienteDAO;
import com.cetia.sicaco.hibernate.HibernateSessionFactory;
import com.cetia.sicaco.hibernate.InvProProveedor;
import com.cetia.sicaco.hibernate.InvProProveedorDAO;
import com.cetia.sicaco.hibernate.OrdOcoOrdenDeCompra;
import com.cetia.sicaco.hibernate.OrdOcoOrdenDeCompraDAO;
import com.cetia.sicaco.hibernate.OrdPecPeticionCompraDAO;
import com.cetia.sicaco.hibernate.OrdRefCuentaReferencia;
import com.cetia.sicaco.hibernate.OrdRefCuentaReferenciaDAO;
import com.cetia.sicaco.hibernate.SecIseInicioSesion;
import com.cetia.sicaco.hibernate.SecIseInicioSesionDAO;
import com.cetia.sicaco.hibernate.SecPerPersona;
import com.cetia.sicaco.hibernate.SecPerPersonaDAO;
import com.cetia.sicaco.orden.struts.form.OrdenCompraForm;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;
import com.cetia.sicaco.struts.PartidaAutomatica;
import com.mad.utilidades.ElapsedTime;
import com.mad.utilidades.ExportReport;
import com.mad.utilidades.IntereseYMora;
import com.mad.utilidades.ReportFile;
import com.mad.utilidades.compresion.ZipFile;


/** 
 * MyEclipse Struts
 * Creation date: 05-02-2008
 * 
 * XDoclet definition:
 * @struts.action path="/ordenCompra" name="ordenCompraForm" input="redirectInvalidData" parameter="accion" scope="request" validate="true"
 * @struts.action-forward name="lista" path="pagina-lista.orden.compra"
 * @struts.action-forward name="dml" path="pagina-dml.orden.compra"
 */
public class OrdenCompraAction extends DMLAction {
	
	
	public static final String TABLA_ID = "ordOcoOrdenCompra";
	public int INICIO;
	public int FIN;
	
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */

	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		OrdenCompraForm compraForm = (OrdenCompraForm)form;
		if(compraForm.getIni() == null) compraForm.setIni(1);
		if(compraForm.getIni() == 1){
			request.getSession().setAttribute("cuenta", 0);
			request.getSession().setAttribute("loadAs", 0);
			compraForm.setIni(0);
			if(compraForm.getDon() == 1){
				compraForm.setFechaEmision(new Date());
				request.setAttribute("calendar", 1);
			}
		}
		
		if(request.getAttribute("don") != null){
			compraForm.setDon((Integer) request.getAttribute("don"));
			request.setAttribute("don", compraForm.getDon());
			if(compraForm.getDon() == 1){
				compraForm.setFechaEmision(new Date());
				request.setAttribute("calendar", 1);
			}
		}
		
		compraForm.setDis("false");
		compraForm.setDis2("enabled");
		OrdOcoOrdenDeCompraDAO compraDAO = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
		compraForm.setOcoCodigo(compraDAO.nextCod(compraForm.getDon(), 0));
		List lst = compraDAO.findAllD(compraForm.getDon(), compraForm.getUsuarioConectado().getMax());
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);//, ExportType.PDF);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
		request.setAttribute("form", compraForm);
		request.setAttribute(Constantes.ACCION_KEY, "/ordenCompra");
        request.setAttribute("filtro", 0);
        request.setAttribute("boton", 0);
        if(request.getSession().getAttribute("cuenta") != null && (Integer) request.getSession().getAttribute("cuenta") == 1){
        	List cref = loadP(compraForm, request,response);
        	if(cref.isEmpty()){
        		mensajes("errors.ordcom.noPro", compraForm, request, response);
        		return mapping.findForward("lista");
        	}
        	request.setAttribute("cuentas", cref);
			request.setAttribute("cuenta", 1);
		}else{
			request.setAttribute("cuenta", 0);
		}
        if(request.getSession().getAttribute("loadAs") != null && (Integer) request.getSession().getAttribute("loadAs") == 1){
        	loadA(compraForm, request);
			request.setAttribute("loadAsoc", 1);
		}else{
			request.setAttribute("loadAsoc", 0);
		}
        request.setAttribute("don", compraForm.getDon());
        request.setAttribute("enabled", 1);
        SecIseInicioSesionDAO inicioSesionDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
        SecIseInicioSesion inicioSesion = inicioSesionDAO.findById(compraForm.getUsuarioConectado().getNombreUsuario());
        
        request.setAttribute("admin", inicioSesion.getSecRolRoles().getRolNombre());
       // request.getSession().removeAttribute("cuenta");
		return mapping.findForward("lista");
		 
	}
	
	//---- Funcion que genera el html de la tabla del jmesa
	private String html(final TableFacade tableFacade, final HttpServletRequest request) {
		tableFacade.setColumnProperties("ocoCodigo","ascCodigo","invProProveedor.proNombre",
				"ocoEmision","ocoVencimiento","ocoMonto","ocoEstado");
		Table table = tableFacade.getTable();
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.ordenCompra.caption");
		
		Row row = table.getRow();
		Column nombreColumna = row.getColumn("ocoCodigo");
		nombreColumna.setTitleKey("tbl.ordenCompra.ocoCodigo");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				OrdOcoOrdenDeCompra compra = (OrdOcoOrdenDeCompra)item;
				if(compra.getOcoDonacion() == 1){
					value = "D" + value;
				}
				HtmlBuilder html = new HtmlBuilder();
				String val = "- " + value + " -";
				String link = tableFacade.getWebContext().getContextPath();
				link += "/orden/ordenCompra.do?accion=edit&ocoId=" + compra.getOcoId()+ "&don=" + compra.getOcoDonacion();//+ compra.getId().getOcoId();
				html.a().href().quote().append(link).quote().close();
				html.append(val);
				html.aEnd();
								
				return html.toString();
			}
		});
		
		nombreColumna = row.getColumn("ascCodigo");
		nombreColumna.setTitleKey("tbl.ordenCompra.secAscAsociado.id.ascCodigo");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				OrdOcoOrdenDeCompra compra = (OrdOcoOrdenDeCompra) item;
				if(compra.getAscCodigo() == null || compra.getAscCodigo().equals("")){
					FacCliClienteDAO clienteDAO = new FacCliClienteDAO(getSessionHibernate(request));
					FacCliCliente cliente = clienteDAO.findById(compra.getCliCodigo());
					value = cliente.getCliCodigo() + " - " + cliente.getCliNombre();
				}else{
					CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
					CtaAscAsociado asociado = asociadoDAO.findById(compra.getAscCodigo());
					
					SecPerPersonaDAO personaDAO = new SecPerPersonaDAO(getSessionHibernate(request));
					SecPerPersona persona = personaDAO.findById(asociado.getSecPerPersona().getPerId());
					
					value = asociado.getAscCodigoAsociado() + " - " + persona.getPerPrimerApellido()
					+ ", " + persona.getPerPrimerNombre();
				}
				HtmlBuilder html = new HtmlBuilder();
				html.append(value);
								
				return html.toString();
			}
		});
		
		nombreColumna = row.getColumn("invProProveedor.proNombre");
		nombreColumna.setTitleKey("tbl.ordenCompra.invProProveedor.proNombre");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				OrdOcoOrdenDeCompra compra = (OrdOcoOrdenDeCompra) item;
				return value;
			}
		});
		
		nombreColumna = row.getColumn("ocoEmision");
		nombreColumna.setTitleKey("tbl.ordenCompra.ocoEmision");
		nombreColumna.getCellRenderer().setCellEditor(new DateCellEditor("dd-MMM-yyyy"));
		
		nombreColumna = row.getColumn("ocoVencimiento");
		nombreColumna.setTitleKey("tbl.ordenCompra.ocoVencimiento");
		nombreColumna.getCellRenderer().setCellEditor(new DateCellEditor("dd-MMM-yyyy"));
		
		nombreColumna = row.getColumn("ocoMonto");
		nombreColumna.setTitleKey("tbl.ordenCompra.ocoMonto");
		
		nombreColumna = row.getColumn("ocoEstado");
		nombreColumna.setTitleKey("tbl.ordenCompra.ocoEstado");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				OrdOcoOrdenDeCompra compra = (OrdOcoOrdenDeCompra) item;
				String val = "";
				if(compra.getOcoEstado().equals("E")){
					val = "Emitida";
				}
				if(compra.getOcoEstado().equals("C")){
					val = "Cargada";
				}
				if(compra.getOcoEstado().equals("R")){
					val = "Cargada";
				}
				if(compra.getOcoEstado().equals("F")){
					val = "Cargada";
				}
				if(compra.getOcoEstado().equals("D")){
					val = "Cargada";
				}				
				if(compra.getOcoEstado().equals("P")){
					val = "Pagada";
				}
				if(compra.getOcoEstado().equals("G")){
					val = "Pagada";
				}				
				if(compra.getOcoEstado().equals("S")){
					val = "Pagada";
				}				
				if(compra.getOcoDonacion() == 1){
					val = "Regalo";
				}
				return val;
			}
		});
		
		return tableFacade.render();
	}
	
	//---- Funcion que genera los exports, el formato que tendran
	 private void export(final TableFacade tableFacade) {
		 tableFacade.setColumnProperties("linNombre","linDescripcion");
		Table table = tableFacade.getTable();
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.linea.caption");
		
		Row row = table.getRow();
		Column nombreColumna = row.getColumn("linNombre");
		nombreColumna.setTitleKey("tbl.linea.linNombre");
		
		nombreColumna = row.getColumn("linDescripcion");
		nombreColumna.setTitleKey("tbl.linea.linDescripcion");

		tableFacade.render();
	}
	 
	 public ActionForward edit(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {
		 OrdenCompraForm compraForm = (OrdenCompraForm)form;
		 OrdOcoOrdenDeCompraDAO compraDAO = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
		 //compraForm.setOcoId(compraForm.getOcoId());
		 if(request.getAttribute("don")!= null){
			 compraForm.setDon((Integer)request.getAttribute("don"));
			 request.setAttribute("don", compraForm.getDon());
		 }
		 if(compraForm.getDon() == 1){
			 compraForm.setOcoDonacion(1);
		 }else compraForm.setOcoDonacion(0);
		 compraForm.setCompraH(compraDAO.findById(compraForm.getOcoId()));
		 compraForm.setDis("true");
		 compraForm.setDis2("disabled");
		 loadP2(compraForm, request,response);
		 loadA(compraForm, request);
		
		 //Buscar credito para mostrar asi el credito disponible correcto
		 CtaCasCuentaAsociadoDAO casDao = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
		 //CtaPrePrestamo credito = casDao.findCredito(compraForm.getAscCodigo());
		 //compraForm.setCredito(credito.getPreSaldoActualT());
		 
		 CtaPrePrestamoDAO prestamoDAO = new CtaPrePrestamoDAO(getSessionHibernate(request));
		 CtrParParametrosDAO parametrosDAO = new CtrParParametrosDAO(getSessionHibernate(request));
		 OrdPecPeticionCompraDAO petCompDAO = new OrdPecPeticionCompraDAO(getSessionHibernate(request));
		 CtrParParametros creditoOrden = parametrosDAO.findById("CREDITO_ORDEN");
		 Double nuevoDisponible = creditoOrden.getParValorNumber() - prestamoDAO.sumCreditoUtilizado(compraForm.getAscCodigo(),"O") - petCompDAO.creditoUtilizado(compraForm.getAscCodigo());
		 compraForm.setCredito(nuevoDisponible);
		 
		 request.setAttribute("form", compraForm);
		 compraForm.setCompraH(compraDAO.findById(compraForm.getOcoId()));
		 compraForm.setIdOrden(compraForm.getOcoId());//agregado 
		 SecIseInicioSesionDAO sesionDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
		 String usuId = compraForm.getUsuarioConectado().getNombreUsuario();
		 SecIseInicioSesion sesion = sesionDAO.findById(usuId);
		 GregorianCalendar gc = new GregorianCalendar();
		 GregorianCalendar gct = new GregorianCalendar();
		 Date today = new Date();
		 Date creado = new Date();
		 OrdOcoOrdenDeCompra ordenDeCompra = compraDAO.findById(compraForm.getOcoId());
		 
		 //emitida
		 if(ordenDeCompra.getOcoEstado().equals("E")){
			 request.setAttribute("emitida", 1);
		 }
		 
		 creado = ordenDeCompra.getOcoEmision();
		 gc.setTime(creado);
		 gct.setTime(today);
		 ElapsedTime elapsedTime = new ElapsedTime();
		 gc = ElapsedTime.dTGC(new Date());
		 gc.set(Calendar.MILLISECOND, 0);
		 gc.set(Calendar.SECOND, 0);
		 gc.set(Calendar.MINUTE, 0);
		 gc.set(Calendar.HOUR_OF_DAY, 0);
		
		 gct.set(Calendar.MILLISECOND, 0);
		 gct.set(Calendar.SECOND, 0);
		 gct.set(Calendar.MINUTE, 0);
		 gct.set(Calendar.HOUR_OF_DAY, 0);
		 
		 int diferencia = elapsedTime.getDays(gc, gct);
		 request.setAttribute("filtro", 1);
		 if(sesion.getSecRolRoles().getRolNombre().equals("ADMINISTRADOR")/* &&  compraForm.getCompraH().getOcoEstado().equals("C")*/){
			 request.setAttribute("boton", 4);
		 }else{
			 request.setAttribute("boton", 3);
			 String estado=compraForm.getCompraH().getOcoEstado();
			 if(compraForm.getImpreOreimpre() == 1) 
				 request.setAttribute("imp", 1);
		 } 
		 request.setAttribute("loadAsoc", 1);
		 if(compraForm.getImpreOreimpre() == 1){
			 request.setAttribute("x", 1);
		 }
		 		 
		 request.setAttribute(Constantes.ACCION_KEY, "/ordenCompra");
		 return mapping.findForward("dml");
	 }
	 
	 public ActionForward salvar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		OrdenCompraForm compraForm = (OrdenCompraForm)form;
		OrdOcoOrdenDeCompraDAO compraDAO = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
		Transaction tx = compraDAO.getSession().beginTransaction();
		try {
			OrdRefCuentaReferenciaDAO cuentaReferenciaDAO = new OrdRefCuentaReferenciaDAO(getSessionHibernate(request));
			compraForm.setOrdRefCuentaReferencia(cuentaReferenciaDAO.findById(compraForm.getOrdRefCuentaReferencia().getRefId()));
			InvProProveedorDAO proveedorDAO = new InvProProveedorDAO(getSessionHibernate(request));
			compraForm.setInvProProveedor(proveedorDAO.findById(compraForm.getInvProProveedor().getProId()));
//			SecAscAsociadoDAO asociadoDAO = new SecAscAsociadoDAO(getSessionHibernate(request));
//--		compraForm.setSecAscAsociado( (SecAscAsociado) asociadoDAO.findByAscCodigo(compraForm.getAscCodigo()).get(0));
			compraDAO.merge(compraForm.getCompraH());
			tx.commit();
		} catch (Exception e) {
			// TODO: handle exception
			tx.rollback();
			e.printStackTrace();
		}finally{
			compraDAO.getSession().flush();
			compraDAO.getSession().clear();
			
		}
		return lista(mapping,form,request,response);
	}
	 
	 public ActionForward anular(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {
		 	OrdenCompraForm compraForm = (OrdenCompraForm)form;
			OrdOcoOrdenDeCompraDAO compraDAO = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
			Transaction tx = compraDAO.getSession().beginTransaction();
			try {
				OrdRefCuentaReferenciaDAO cuentaReferenciaDAO = new OrdRefCuentaReferenciaDAO(getSessionHibernate(request));
				compraForm.setOrdRefCuentaReferencia(cuentaReferenciaDAO.findById(compraForm.getOrdRefCuentaReferencia().getRefId()));
				InvProProveedorDAO proveedorDAO = new InvProProveedorDAO(getSessionHibernate(request));
				compraForm.setInvProProveedor(proveedorDAO.findById(compraForm.getInvProProveedor().getProId()));
//				SecAscAsociadoDAO asociadoDAO = new SecAscAsociadoDAO(getSessionHibernate(request));
//--			compraForm.setSecAscAsociado( (SecAscAsociado) asociadoDAO.findByAscCodigo(compraForm.getAscCodigo()).get(0));
				compraForm.setCompraH(compraDAO.findById(compraForm.getOcoId()));
				compraForm.getCompraH().setOcoEstado("A");
				compraForm.setAudUsuarioModificacion(compraForm.getUsuarioConectado().getNombreUsuario());
				compraDAO.merge(compraForm.getCompraH());
			} catch (Exception e) {
				// TODO: handle exception
				tx.rollback();
				e.printStackTrace();
			}finally{
				tx.commit();
				OrdOcoOrdenDeCompra orden = compraForm.getCompraH();
				enviarOrdenAContabilidad(orden, compraForm.getUsuarioConectado().getNombreUsuario(),request);
				compraDAO.getSession().flush();
				compraDAO.getSession().clear();
				
			}
			int donar = compraForm.getDon();
			compraForm = new OrdenCompraForm();
			compraForm.setDis("false");
			compraForm.setIni(0);
			compraForm.setDon(donar);
			request.getSession().setAttribute("cuenta", 0);
			request.getSession().setAttribute("loadAs", 0);
			return lista(mapping,form,request,response);
		} 

	public ActionForward regresar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
			return mapping.findForward("redirectEstante");
	}
	
	public ActionForward cargaProv(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		OrdenCompraForm compraForm = (OrdenCompraForm)form;
		List cref = loadP(compraForm, request,response);
		if(cref == null){
    		mensajes("errors.ordcom.noPro", compraForm, request, response);
    		return mapping.findForward("lista");
    	}
		//request.setAttribute("cuentas", cref);
		if(cref.size() == 0){
			compraForm.setOrdRefCuentaReferencia(new OrdRefCuentaReferencia());
			compraForm.getOrdRefCuentaReferencia().setRefCuenta("No hay cuenta");
		}else{
			OrdRefCuentaReferencia referencia = (OrdRefCuentaReferencia) cref.get(0);
			compraForm.setCuentaRef(referencia.getRefCuenta());
			compraForm.setOrdRefCuentaReferencia(referencia);
		}
		
		if(cref.isEmpty() != true){
			request.getSession().setAttribute("cuenta", 1);
		}else{
			request.getSession().setAttribute("cuenta", 0);
		}
		request.setAttribute("form", compraForm);
		return lista(mapping, form, request, response);
	}
	
	public List loadP(ActionForm form, HttpServletRequest request, HttpServletResponse response){
		OrdenCompraForm compraForm = (OrdenCompraForm)form;
		InvProProveedorDAO proveedorDAO = new InvProProveedorDAO(getSessionHibernate(request));
		OrdRefCuentaReferenciaDAO referenciaDAO = new OrdRefCuentaReferenciaDAO(getSessionHibernate(request));
		String proCodigo = compraForm.getInvProProveedor().getProCodigo();
		List tmp = proveedorDAO.findByProCodigo(proCodigo);
		List cref = null;
		if(tmp.size()>0){
			InvProProveedor proveedor = (InvProProveedor)proveedorDAO.findByProCodigo(proCodigo).get(0);
			compraForm.setInvProProveedor(proveedor);
			cref = referenciaDAO.findByProIdEstado(proveedor.getProId(),"A");
		}
		return cref;
	}
	
	public void loadP2(ActionForm form, HttpServletRequest request, HttpServletResponse response){
		OrdenCompraForm compraForm = (OrdenCompraForm)form;
		InvProProveedorDAO proveedorDAO = new InvProProveedorDAO(getSessionHibernate(request));
		 InvProProveedor proveedor = proveedorDAO.findById(compraForm.getCompraH().getInvProProveedor().getProId());
		 compraForm.setProCodigo(proveedor.getProCodigo());
		 compraForm.setProNombre(proveedor.getProNombre());
		OrdRefCuentaReferenciaDAO referenciaDAO = new OrdRefCuentaReferenciaDAO(getSessionHibernate(request));
		compraForm.setInvProProveedor(proveedor);
		if(referenciaDAO.findByProIdEstado2(proveedor.getProId(),"A") == null){
			compraForm.setCuentaRef("---");
		}else{
			compraForm.setCuentaRef(referenciaDAO.findByProIdEstado2(proveedor.getProId(),"A").getRefCuenta());
		}
	}
	
	public ActionForward cargaAsc(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		OrdenCompraForm compraForm = (OrdenCompraForm)form;
		request.getSession().setAttribute("loadAs", 1);
       	request.setAttribute("form", compraForm);
		return lista(mapping, form, request, response);
	}
	
	public void loadA(ActionForm form, HttpServletRequest request){
		OrdenCompraForm compraForm = (OrdenCompraForm)form;
		CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
		
		if(compraForm.getAscCodigo()!= null && asociadoDAO.findById(compraForm.getAscCodigo())!=null){
	//		SecCraCreditoAsociadoDAO creditoAsociadoDAO = new SecCraCreditoAsociadoDAO(getSessionHibernate(request));
			CtaAscAsociado asociado = asociadoDAO.findById(compraForm.getAscCodigo());
			
			SecPerPersonaDAO personaDAO = new SecPerPersonaDAO(getSessionHibernate(request));
			SecPerPersona persona = personaDAO.findById(asociado.getSecPerPersona().getPerId());
			
			String asocNombre = persona.getPerPrimerApellido() + ", " + persona.getPerPrimerNombre();
			compraForm.setAscNombre(asocNombre);
			compraForm.setAscCodigo3(asociado.getAscCodigo());
		}else{
			FacCliClienteDAO clienteDAO = new FacCliClienteDAO(getSessionHibernate(request));
			FacCliCliente cliente = clienteDAO.findById(compraForm.getCliCodigo());
			compraForm.setAscNombre(cliente.getCliNombre());
			compraForm.setAscCodigo3(cliente.getCliCodigo());
		}
		/*
		CtaCasCuentaAsociadoDAO cuentaAsociadoDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
		CtaPrePrestamo prestamo = cuentaAsociadoDAO.findCredito(asociado.getAscId());
		OrdOcoOrdenDeCompraDAO compraDAO = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
		Double creditoUsado = compraDAO.creditoUsadoPorAsociado(asociado.getAscId());
		CtrParParametrosDAO parametrosDAO = new CtrParParametrosDAO(getSessionHibernate(request));
		CtrParParametros parametros = parametrosDAO.findById("CREDITO_ORDEN");
		if(creditoUsado == null){
			creditoUsado = 0.0;
		}
		if(creditoUsado > parametros.getParValorNumber()){
			compraForm.setCredito(0.0);
		}else{
			compraForm.setCredito(prestamo.getPreSaldoActualT());
		}*/
	}
	
	public ActionForward guardar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		OrdenCompraForm compraForm = (OrdenCompraForm)form;
		if(compraForm.getCodigo() != null && !compraForm.getCodigo().trim().equals("")){
			if(compraForm.getOcoMonto() <= 0 ){//validacion para que el monto sea mayor que cero
				mensajes("error.oco.montoMenorCero", compraForm, request, response);
				return lista(mapping, compraForm, request, response);
			}
			OrdOcoOrdenDeCompraDAO compraDAO = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
			CtaMxpMovimientoPrestamoDAO movimientoPrestamoDAO = new CtaMxpMovimientoPrestamoDAO(getSessionHibernate(request));
			CtaTxaTransaccionxcuentaAsociadoDAO txaDAO = new CtaTxaTransaccionxcuentaAsociadoDAO(getSessionHibernate(request));
			CtaPrePrestamoDAO prestamoDAO = new CtaPrePrestamoDAO(getSessionHibernate(request));
			CtrParParametrosDAO parametrosDAO = new CtrParParametrosDAO(getSessionHibernate(request));
			
			int idOrden = -1;
			
			SecIseInicioSesionDAO sesionDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
			SecIseInicioSesion sesion = sesionDAO.findById(compraForm.getUsuarioConectado().getNombreUsuario());
			SecPerPersona persona = sesion.getSecPerPersona();
			String elaborado = persona.getPerPrimerNombre() + " " + persona.getPerPrimerApellido();
			/*
			System.out.println("=================================================");
			System.out.println("CompraForm DON: "+compraForm.getDon());
			System.out.println("=================================================");
			*/
			
			
			if(compraForm.getDon() != 1){
				compraForm.setOcoDonacion(0);
				compraForm.setOcoCodigo(compraDAO.nextCod(0,compraForm.getRestart()));
				
				CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
				
				compraForm.setAscCodigo(compraForm.getCodigo());
				CtaAscAsociado asociado = asociadoDAO.findById(compraForm.getAscCodigo());
				if(asociado.getEstId()==21){
					mensajes("error.oco.asociadoRestringido", compraForm, request, response);
					return lista(mapping, compraForm, request, response);
				}
				if(asociado.getEstId()==6){
					mensajes("error.oco.asociadoInactivo", compraForm, request, response);
					return lista(mapping, compraForm, request, response);
				}				
				if(compraForm.getInvProProveedor().getProId() == null || compraForm.getInvProProveedor().getProId() <= 0){
					mensajes("errors.ordcom.noPro", compraForm, request, response);
					return lista(mapping, compraForm, request, response);
				}				
				InvProProveedorDAO proveedorDAO = new InvProProveedorDAO(getSessionHibernate(request));
				InvProProveedor proveedor = proveedorDAO.findById(compraForm.getInvProProveedor().getProId());
				if(proveedor.getIucPutProveedorTipoPrestamos().size()<1){
					mensajes("error.oco.proSinUnion", compraForm, request, response);
					return lista(mapping, compraForm, request, response);
				}
				
				//Obtener el tipo de prestamo de la orden a generar
				CtaTprTipoPrestamoDAO trpDao = new CtaTprTipoPrestamoDAO(getSessionHibernate(request));
				CtaTprTipoPrestamo tpr = trpDao.findByProveedor(proveedor.getProId());
				
				//Obtener saldo pendiente
				Double creditoUsado = prestamoDAO.sumCreditoUtilizado(asociado.getAscId(),"O");
				if(creditoUsado == null){
					creditoUsado = 0.0;
				}
				OrdPecPeticionCompraDAO petCompDAO = new OrdPecPeticionCompraDAO(getSessionHibernate(request));
				CtrParParametros creditoOrden = parametrosDAO.findById("CREDITO_ORDEN");
				Double disponible = creditoOrden.getParValorNumber() - creditoUsado - petCompDAO.creditoUtilizado(asociado.getAscId());
				
				Double divisor = parametrosDAO.findById("NUM_CUOTAS_ORDEN_COMPRA").getParValorNumber();
				Double pagosMes = parametrosDAO.findById("DIVISOR_CUOTAS_MES").getParValorNumber();
				
				if(compraForm.getOcoMonto()> disponible){
					mensajes("error.compra.monto", compraForm, request, response);
					request.getSession().setAttribute("cuenta", 0);
					request.getSession().setAttribute("loadAs", 0);
					return lista(mapping, form, request, response);
				}else{
					CtaCasCuentaAsociadoDAO cuentaAsociadoDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
					CtaCasCuentaAsociado cas = new CtaCasCuentaAsociado();
					Transaction tx = prestamoDAO.getSession().beginTransaction();
					CtaPrePrestamo prestamo = new CtaPrePrestamo();
					
					List lCas =cuentaAsociadoDAO.findByTprAndAsc(tpr.getTprId(), asociado.getAscId(), "O");
					if(lCas.size()>0){
						cas = (CtaCasCuentaAsociado) lCas.get(0);
						prestamo = prestamoDAO.findById(cas.getCtaPrePrestamo().getPreId());
						
						prestamo.setCtaCbaCuentaBancaria(null);
						Double pendAnterior = 0.0;
						if(prestamo.getPrePendMov() != null){
							pendAnterior = prestamo.getPrePendMov();
						}
						prestamo.setPreSaldoActualT(prestamo.getPreSaldoActualT() + compraForm.getOcoMonto());
						//prestamo.setPreMontoSolicitado(prestamo.getPreSaldoActualT());
						//Tasa que se usara no se dividira en tasa mensual, sino que se usara el porcentaje completo
						prestamo.setPrePendMov(prestamo.getPrePendMov() + (compraForm.getOcoMonto()*(tpr.getCtaTinTasaInteres().getTinTasa()/100)));
						prestamo.setPreCuota(((prestamo.getPreSaldoActualT() + prestamo.getPrePendMov())/divisor)*pagosMes);
						prestamo.setPreMontoSolicitado(compraForm.getOcoMonto());
						prestamoDAO.merge(prestamo);
						
						CtrEstEstadoDAO ctrEstEstadoDAO = new CtrEstEstadoDAO(getSessionHibernate(request));
						CtrEstEstado ctrEstEstado= new CtrEstEstado();
						ctrEstEstado= ctrEstEstadoDAO.findById(13);
						cas.setCtrEstEstado(ctrEstEstado);
						cuentaAsociadoDAO.merge(cas);
						tx.commit();
					}else{
//						Transaction tx = prestamoDAO.getSession().beginTransaction();
						prestamo.setCtaCbaCuentaBancaria(null);
						prestamo.setCtaTprTipoPrestamo(tpr);
						prestamo.setPreAcumMov(0.0);
						prestamo.setPreCredito("O");
						//Tasa que se usara no se dividira en tasa mensual, sino que se usara el porcentaje completo
						prestamo.setPrePendMov(compraForm.getOcoMonto()*(tpr.getCtaTinTasaInteres().getTinTasa()/100));
						prestamo.setPreLiquidoARecibir(compraForm.getOcoMonto());
						prestamo.setPreFechaSolicitud(new Date());
						prestamo.setPreMontoSolicitado(compraForm.getOcoMonto());
						prestamo.setPreSaldoActualT(compraForm.getOcoMonto());
						prestamo.setPreMoraMov(0.0);
						prestamo.setPreCuota(((prestamo.getPreSaldoActualT() + prestamo.getPrePendMov())/divisor)*pagosMes);
						prestamo.setPreReferencia(prestamoDAO.generarId("C"));
						prestamo.setPreId(prestamo.getPreReferencia());
						prestamo.setPreInteresAcumulado(0.0);
						prestamo.setCtaTinTasaInteres(null);
						prestamo.setCtaSegSeguros(null);
						try {
						prestamoDAO.save(prestamo);
							//Transaction tx = prestamoDAO.getSession().beginTransaction();
							tx.commit();
							prestamoDAO.getSession().flush();
							prestamoDAO.getSession().clear();
						} catch (ConstraintViolationException e) {
							prestamo.setPreId(prestamoDAO.generarId2("C"));
							prestamo.setPreReferencia(prestamo.getPreId());
							prestamoDAO.save(prestamo);
							//Transaction tx = prestamoDAO.getSession().beginTransaction();
							tx.commit();
							prestamoDAO.getSession().flush();
							prestamoDAO.getSession().clear();
						}
						

						Transaction tx2 = cuentaAsociadoDAO.getSession().beginTransaction();
						cas.setCasFechaApertura(new Date());
						cas.setCasPrincipal("N");
						cas.setCtaAscAsociado(asociado);
						cas.setCtaCahCuentaAhorro(null);
						cas.setCtaCbaCuentaBancaria(null);
						cas.setCtaPrePrestamo(prestamo);
						cas.setCtaPxtPersonaExterna(null);
						cas.setCtaSegSeguros(null);
						
						//Estado activo para prestamo 13
						CtrEstEstadoDAO estadoDAO = new CtrEstEstadoDAO(getSessionHibernate(request));
						CtrEstEstado estActivo = estadoDAO.findById(13);
						
						cas.setCtrEstEstado(estActivo);
						cuentaAsociadoDAO.save(cas);
						//
						//tx2.commit();
						tx2.commit();
					}
					Transaction txpr = txaDAO.getSession().beginTransaction();
					CtaTxaTransaccionxcuentaAsociado txa = new CtaTxaTransaccionxcuentaAsociado();
					
					txa.setCtaCasCuentaAsociado(cas);
					CtaTtrTipoTransaccionDAO tipoTransaccionDAO = new CtaTtrTipoTransaccionDAO(getSessionHibernate(request));
					//Cargo por orden, el ttrId es 1
					txa.setCtaTtrTipoTransaccion(tipoTransaccionDAO.findById(1));
					txa.setTxaComprobante(txaDAO.nextComprobante());
					//CtaTcmTipoComprobanteDAO tipoComprobanteDAO = new CtaTcmTipoComprobanteDAO(getSessionHibernate(request));
					txa.setTxaFecha(new Date());
					txa.setTxaMonto(compraForm.getOcoMonto());
					txa.setAudFechaCreacion(new Date());
					txa.setAudFechaModificacion(new Date());
					txa.setAudUsuarioCreacion(compraForm.getUsuarioConectado().getNombreUsuario());
					txa.setAudUsuarioModificacion(compraForm.getUsuarioConectado().getNombreUsuario());
					txaDAO.save(txa);
					
					txpr.commit();
					txaDAO.getSession().flush();
					txaDAO.getSession().clear();
					
					Transaction txmxp = movimientoPrestamoDAO.getSession().beginTransaction();
					CtaMxpMovimientoPrestamo mxpAnt = movimientoPrestamoDAO.findUltimoMovimiento(prestamo.getPreId());
					CtaMxpMovimientoPrestamo movimientoPrestamo = new CtaMxpMovimientoPrestamo();
					if(mxpAnt == null){
						movimientoPrestamo.setCtaPrePrestamo(prestamo);
						movimientoPrestamo.setMxpFecha(new Date());
						movimientoPrestamo.setMxpMora(0.0);
						movimientoPrestamo.setMxpInteresPendiente(0.0);
						movimientoPrestamo.setMxpInteresAcumulado(0.0);
						movimientoPrestamo.setMxpSaldoActual(0.0);
						movimientoPrestamo.setAudFechaCreacion(new Date());
						movimientoPrestamo.setAudFechaModificacion(new Date());
						movimientoPrestamo.setAudUsuarioCreacion(compraForm.getUsuarioConectado().getNombreUsuario());
						movimientoPrestamo.setAudUsuarioModificacion(compraForm.getUsuarioConectado().getNombreUsuario());
						movimientoPrestamo.setCtaTxaTransaccionxcuentaAsociado(txa);
						movimientoPrestamo.setMxpSaldo(prestamo.getPreSaldoActualT());
						movimientoPrestamoDAO.save(movimientoPrestamo);
						txmxp.commit();
						movimientoPrestamoDAO.getSession().flush();
						movimientoPrestamoDAO.getSession().clear();
					}else{
						movimientoPrestamo.setCtaPrePrestamo(prestamo);
						movimientoPrestamo.setMxpFecha(new Date());
						movimientoPrestamo.setMxpMora(0.0);
						movimientoPrestamo.setMxpSaldoActual(0.0);
						movimientoPrestamo.setMxpInteresPendiente(0.0);
						movimientoPrestamo.setMxpInteresAcumulado(0.0);
						movimientoPrestamo.setAudFechaCreacion(new Date());
						movimientoPrestamo.setAudFechaModificacion(new Date());
						movimientoPrestamo.setAudUsuarioCreacion(compraForm.getUsuarioConectado().getNombreUsuario());
						movimientoPrestamo.setAudUsuarioModificacion(compraForm.getUsuarioConectado().getNombreUsuario());
						movimientoPrestamo.setCtaTxaTransaccionxcuentaAsociado(txa);
						movimientoPrestamo.setMxpSaldoActual(mxpAnt.getMxpSaldoActual());
						movimientoPrestamo.setMxpSaldo(prestamo.getPreSaldoActualT()/*-movimientoPrestamo.getMxpSaldoActual()*/);
						movimientoPrestamoDAO.save(movimientoPrestamo);
						txmxp.commit();
						movimientoPrestamoDAO.getSession().flush();
						movimientoPrestamoDAO.getSession().clear();
					}
				/*	if(mxpAnt == null){
						movimientoPrestamo.setCtaPrePrestamo(prestamo);
						movimientoPrestamo.setMxpFecha(new Date());
						movimientoPrestamo.setMxpMora(0.0);
						movimientoPrestamo.setMxpInteresPendiente(0.0);
						movimientoPrestamo.setMxpInteresAcumulado(0.0);
						movimientoPrestamo.setMxpSaldoActual(0.0);
						movimientoPrestamo.setAudFechaCreacion(new Date());
						movimientoPrestamo.setAudFechaModificacion(new Date());
						movimientoPrestamo.setAudUsuarioCreacion(compraForm.getUsuarioConectado().getNombreUsuario());
						movimientoPrestamo.setAudUsuarioModificacion(compraForm.getUsuarioConectado().getNombreUsuario());
						movimientoPrestamo.setCtaTxaTransaccionxcuentaAsociado(txa);
						
						movimientoPrestamoDAO.save(movimientoPrestamo);
						txmxp.commit();
						movimientoPrestamoDAO.getSession().flush();
						movimientoPrestamoDAO.getSession().clear();
					}else{
						movimientoPrestamo.setCtaPrePrestamo(prestamo);
						movimientoPrestamo.setMxpFecha(new Date());
						movimientoPrestamo.setMxpMora(0.0);
						movimientoPrestamo.setMxpSaldoActual(0.0);
						movimientoPrestamo.setMxpInteresPendiente(0.0);
						movimientoPrestamo.setMxpInteresAcumulado(0.0);
						movimientoPrestamo.setAudFechaCreacion(new Date());
						movimientoPrestamo.setAudFechaModificacion(new Date());
						movimientoPrestamo.setAudUsuarioCreacion(compraForm.getUsuarioConectado().getNombreUsuario());
						movimientoPrestamo.setAudUsuarioModificacion(compraForm.getUsuarioConectado().getNombreUsuario());
						movimientoPrestamo.setCtaTxaTransaccionxcuentaAsociado(txa);
						movimientoPrestamoDAO.save(movimientoPrestamo);
						txmxp.commit();
						movimientoPrestamoDAO.getSession().flush();
						movimientoPrestamoDAO.getSession().clear();
					}*/
					
					//Llamar a dividir todos los prestamos de orden entre el divisor para sus nuevas cuotas
					
//					divisorACreditos(asociado.getAscId(), "O", tpr.getTprId(),
//							divisor, compraForm.getUsuarioConectado().getNombreUsuario(),request);					
					
					/*prestamoDAO.merge(prestamo);
					txmxp.commit();
					prestamoDAO.getSession().flush();
					prestamoDAO.getSession().clear();*/
				}
				
				//compraForm.setOcoId(compraId);
				compraForm.setOcoElaborado(elaborado);
				compraForm.setOcoEmision(new Date());
				compraForm.setOcoEstado("C");
				compraForm.setOcoPagado(0.0);
				compraForm.setOcoSaldo(compraForm.getOcoMonto());
				/*
				InvProProveedorDAO proveedorDAO = new InvProProveedorDAO(getSessionHibernate(request));
				InvProProveedor proveedor = (InvProProveedor)proveedorDAO.findByProCodigo(compraForm.getProCodigo()).get(0);
				*/
				compraForm.setInvProProveedor(proveedor);
				
				OrdRefCuentaReferenciaDAO referenciaDAO = new OrdRefCuentaReferenciaDAO(getSessionHibernate(request));
				OrdRefCuentaReferencia ref = referenciaDAO.findById(compraForm.getOrdRefCuentaReferencia().getRefId());
				compraForm.setOrdRefCuentaReferencia(ref);
				if(compraForm.getOrdRefCuentaReferencia() == null){
					compraForm.setOrdRefCuentaReferencia(referenciaDAO.findById(referenciaDAO.firstId()));
				}
				
				Double venc = parametrosDAO.findById("ORDEN_VENCIMIENTO").getParValorNumber();
				Date fechaActual = new Date();
				Date nuevaFecha = ElapsedTime.obtenerFecha(fechaActual, venc.intValue());
				compraForm.setOcoVencimiento(nuevaFecha);
				Transaction tx = compraDAO.getSession().beginTransaction();
				try {
					compraDAO.save(compraForm.getCompraH());
					tx.commit();
					OrdOcoOrdenDeCompra orden = compraForm.getCompraH();
					idOrden = orden.getOcoId();
					enviarOrdenAContabilidad(orden, compraForm.getUsuarioConectado().getNombreUsuario(),request);
				} catch (Exception e) {
					tx.rollback();
					e.printStackTrace();
				}finally{
					compraDAO.getSession().flush();
					compraDAO.getSession().clear();
				}
				/*
				movimientoPrestamoDAO.getSession().close();
				prestamoDAO.getSession().close();
				txaDAO.getSession().close();
				
				Double creditoUsado = compraDAO.creditoUsadoPorAsociado(asociado.getAscId());
				CtrParParametros parametros = parametrosDAO.findById("CREDITO_ORDEN");
				Double disponible = 0.0;
				if(creditoUsado == null){
					creditoUsado = 0.0;
				}
				if(creditoUsado <= parametros.getParValorNumber()){
					disponible = parametros.getParValorNumber() - creditoUsado;
				}
				*/
				
				Double nuevoDisponible = creditoOrden.getParValorNumber() - prestamoDAO.sumCreditoUtilizado(asociado.getAscId(),"O") - petCompDAO.creditoUtilizado(asociado.getAscId());
				compraForm.setCredito(nuevoDisponible);
			}else{
				SimpleDateFormat sdf = new SimpleDateFormat();
				if(compraForm.getFechaEmision()== null 
						|| compraForm.getFechaEmision().trim().equals("")){
					mensajes("error.compra.fechaEmisionNull", compraForm, request, response);
					compraForm.setIni(1);
					compraForm.setDon(1);
					return lista(mapping, compraForm, request, response);
				}
				IntereseYMora iYm = new IntereseYMora();
				if(ElapsedTime.fechaMenor(compraForm.getFEmision(),iYm.noTime(new Date()))){
					mensajes("error.compra.fechaMenor", compraForm, request, response);
					compraForm.setIni(1);
					compraForm.setDon(1);
					return lista(mapping, compraForm, request, response);
				}
				//Validando que no se puedan emitir donaciones a un usuario inactivo
					CtaAscAsociadoDAO asociadoDAOO = new CtaAscAsociadoDAO(getSessionHibernate(request));
					CtaAscAsociado asociado = asociadoDAOO.findById(compraForm.getCodigo());
					if (asociado != null ){
						if(asociado.getEstId()==6){
							mensajes("error.oco.asociadoInactivo", compraForm, request, response);
							return lista(mapping, compraForm, request, response);
						}
					}
					
				/*------------------------------------------------------------------*/
				compraForm.setOcoDonacion(1);
				compraForm.setOcoCodigo(compraDAO.nextCod(1,compraForm.getRestart()));
				compraForm.setOcoElaborado(elaborado);
				compraForm.setOcoEmision(compraForm.getFechaEmision());
				compraForm.setOcoEstado("C");
				compraForm.setOcoPagado(0.0);
				compraForm.setOcoSaldo(compraForm.getOcoMonto());
				
				InvProProveedorDAO proveedorDAO = new InvProProveedorDAO(getSessionHibernate(request));
				//String proCodigo = compraForm.getInvProProveedor().getProCodigo();
				InvProProveedor proveedor = (InvProProveedor)proveedorDAO.findByProCodigo(compraForm.getProCodigo()).get(0);
				compraForm.setInvProProveedor(proveedor);
				
				CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
				if(asociadoDAO.findById(compraForm.getCodigo()) == null){
					compraForm.setCliCodigo(compraForm.getCodigo());
					compraForm.setAscCodigo(null);
				}else{
					compraForm.setAscCodigo(compraForm.getCodigo());
					compraForm.setCliCodigo(null);
				}
				/*if(compraForm.getPrestamoId().equals(compraForm.getCodigo())){
					compraForm.setCliCodigo(compraForm.getCodigo());
				}else{
					compraForm.setAscCodigo(compraForm.getCodigo());
				}*/
				
				OrdRefCuentaReferenciaDAO referenciaDAO = new OrdRefCuentaReferenciaDAO(getSessionHibernate(request));
				OrdRefCuentaReferencia ref = referenciaDAO.findById(compraForm.getOrdRefCuentaReferencia().getRefId());
				compraForm.setOrdRefCuentaReferencia(ref);
				if(compraForm.getOrdRefCuentaReferencia() == null){
					compraForm.setOrdRefCuentaReferencia(referenciaDAO.findById(referenciaDAO.firstId()));
				}
	
				Double venc = parametrosDAO.findById("ORDEN_VENCIMIENTO").getParValorNumber();
				Date fechaActual = compraForm.getFEmision();
				//ElapsedTime elapsedTime = new ElapsedTime();
				Date nuevaFecha = ElapsedTime.obtenerFecha(fechaActual, venc.intValue());
				compraForm.setOcoVencimiento(nuevaFecha);
				Transaction tx = compraDAO.getSession().beginTransaction();
				try {
					compraDAO.save(compraForm.getCompraH());
					tx.commit();
				} catch (Exception e) {
					// TODO: handle exception
					tx.rollback();
					e.printStackTrace();
				}finally{
					OrdOcoOrdenDeCompra orden = compraForm.getCompraH();
					idOrden = orden.getOcoId();
					enviarOrdenAContabilidad(orden, compraForm.getUsuarioConectado().getNombreUsuario(),request);
					compraDAO.getSession().flush();
					compraDAO.getSession().clear();
					
				}
			}
			int regalo = compraForm.getDon();
			request.getSession().setAttribute("cuenta", 0);
			request.getSession().setAttribute("loadAs", 0);
			compraForm.setImpreOreimpre(1);
			compraForm.setIdOrden(idOrden);
			compraForm.setRegalo(regalo);
			request.setAttribute("x", 1);
			return edit(mapping, compraForm, request, response);
		}else{
			mensajes("error.compra.codigoNulo", compraForm, request, response);
			return lista(mapping, compraForm, request, response);
		}
		//return lista(mapping, compraForm, request, response);
	}
	
//	public void divisorACreditos(String ascId, String tipoCredito,
//			Integer tprId, Double divisor, String usuario,HttpServletRequest request) {
//		CtaCasCuentaAsociadoDAO cuentaAsociadoDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
//		CtaPrePrestamoDAO prestamoDAO = new CtaPrePrestamoDAO(getSessionHibernate(request));
//		List lCas = cuentaAsociadoDAO.findByAscAndTipoCreditoMenosTprId(ascId,tipoCredito, tprId);
//		for (Iterator iterator = lCas.iterator(); iterator.hasNext();) {
//			CtaPrePrestamo prestamo = (CtaPrePrestamo) iterator.next();
//			prestamo.setPreCuota(prestamo.getPreSaldoActualT()/divisor);
//			prestamoDAO.merge(prestamo);
//			Transaction tx = prestamoDAO.getSession().beginTransaction();
//			prestamoDAO.getSession().flush();
//			prestamoDAO.getSession().clear();
//		}
//	}

	public ActionForward imprimeOrden(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		OrdenCompraForm compraForm = (OrdenCompraForm)form;
		//imprimirReporte
		ActionForward forward = null;
		try{
			Date fechaActual = new Date();
			//ReportesOrdenForm rOrdenForm = (ReportesOrdenForm) form;
			
			response.setHeader("Cache-Control","private");
			response.setHeader("Pragma", "Cache");
			String pathReporte = "";//ruta reporte
			String nombreReporte = "";
			ExportReport exportar = null;
			ReportFile reporte = new ReportFile();
			ServletContext servletContext = getServlet().getServletContext();
			
			nombreReporte = "ordenCompra";
			pathReporte = servletContext
			.getRealPath("/reportesOtros/facturacion/ordenCompra/ordenCompra.jasper");
			reporte.addParameter("ocoId",compraForm.getIdOrden());
			reporte.addParameter("REGALO",compraForm.getRegalo());
			reporte.setPathJasper(pathReporte);
			exportar = new ExportReport(reporte);//reporte a exportar
			
			//Conexion jdbc normal
			String jdbcDriver = "com.mysql.jdbc.Driver";
			Class.forName(jdbcDriver);
			OrdOcoOrdenDeCompraDAO compraDAO = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
			String url = HibernateSessionFactory.getConfiguration().getProperty("connection.url");
			String user = HibernateSessionFactory.getConfiguration().getProperty("connection.username");
			String pass = HibernateSessionFactory.getConfiguration().getProperty("connection.password");

			Connection con = DriverManager.getConnection(url, user, pass);

			byte[] repCompilado = exportar.exportReportPDF(con);
			
			response.setContentType("application/pdf");
			response.setContentLength(repCompilado.length);
			response.setHeader("content-Disposition", "attachment;filename="+nombreReporte+"-"+fechaActual.getTime()+".pdf");
			//response.setHeader("content-Disposition", "attachment;filename="+nombreReporte+"-"+rForm.getFechaReporte()+".pdf");
			ServletOutputStream outputStream = response.getOutputStream();
			outputStream.write(repCompilado, 0, repCompilado.length);
			outputStream.flush();
			outputStream.close();
			
		}catch(Exception e){
			e.printStackTrace();
			log.error("Se produjo un error al tratar de generar el reporte...", e);
			System.out.println("Se produjo un error al tratar de generar el reporte...\n");
		}
		return null;
	}

	private void enviarOrdenAContabilidad(OrdOcoOrdenDeCompra orden,
			String nombreUsuario,HttpServletRequest request) {
		String parametros ="3;";
		parametros += orden.getOcoDonacion().toString() + ";";
		parametros += orden.getOcoEstado() + ";";
		parametros += orden.getInvProProveedor().getInvTprTipoProveedor().getTprId().toString() + ";";
		parametros += orden.getInvProProveedor().getProId().toString();
		PartidaAutomatica partidaAutomatica =  new PartidaAutomatica();
		partidaAutomatica.crearPartidaAutomatica(
				parametros,
				orden.getOcoMonto(),
				nombreUsuario,1,null,null,null,request);
	}

	public ActionForward cancelar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		OrdenCompraForm compraForm = (OrdenCompraForm)form;
		OrdenCompraForm compraForm2 = new OrdenCompraForm();
		compraForm2.setIni(1);
		compraForm2.setDon(compraForm.getDon());
		request.setAttribute("don", compraForm.getDon());
		return lista(mapping, form, request, response);
	}
	
	public ActionForward buscar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		OrdenCompraForm ordenCompraForm = (OrdenCompraForm) form;
		InvProProveedorDAO proveedorDAO = new InvProProveedorDAO(getSessionHibernate(request));
		OrdOcoOrdenDeCompraDAO ordenDeCompraDAO = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
		List lst = null;
		TableFacade tableFacade = TableFacadeFactory.createTableFacade(TABLA_ID ,request );
		//tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		int totalRows  = 0;
		totalRows = ordenDeCompraDAO.getTotalRowCountOrdenesByCriteria(ordenCompraForm.getCompraH());
		tableFacade.setTotalRows(totalRows);
		int rowStart = limit.getRowSelect().getRowStart();
		int rowEnd = limit.getRowSelect().getRowEnd();
		lst = ordenDeCompraDAO.findOrdenesByCriteria(ordenCompraForm.getCompraH(), rowStart, rowEnd);
		tableFacade.setItems(lst);
		if (limit.isExported()) {
        	//---- exporta la tabla
        //    export(tableFacade);
            return null; 
        } else {
        	String html;
    		html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
		request.setAttribute(Constantes.ACCION_KEY, "/ordenCompra");
		request.setAttribute("provs", proveedorDAO.findAll());
		return mapping.findForward("busq");
		/*OrdenCompraForm compraForm = (OrdenCompraForm)form;
		int donar = compraForm.getDon();
		compraForm = new OrdenCompraForm();
		compraForm.setDis("false");
		compraForm.setIni(0);
		compraForm.setDon(donar);
		request.getSession().setAttribute("cuenta", 0);
		request.getSession().setAttribute("loadAs", 0);
		return lista(mapping, form, request, response);*/
	}
	
	public ActionForward reimpresion(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
	 	OrdenCompraForm compraForm = (OrdenCompraForm)form;
	 	
	 	OrdOcoOrdenDeCompraDAO compraDAO = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
	 	OrdOcoOrdenDeCompra compra = compraDAO.findById(compraForm.getOcoId());
	 	/*compra.setOcoEstado("R");
	 	compra.setAudFechaModificacion(new Date());
	 	compra.setAudUsuarioModificacion(compraForm.getUsuarioConectado().getNombreUsuario());
	 	Transaction tx = compraDAO.getSession().beginTransaction();
	 	compraDAO.merge(compra);
	 	tx.commit();
	 	compraDAO.getSession().flush();
	 	compraDAO.getSession().clear();
	 	*/
	 	
		compraForm.setIni(1);
		ActionErrors mensaje = new ActionErrors();
		mensaje.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("mensaje.ordcom.reimpresion"));
		saveMessages(request, mensaje);
		compraForm.setIdOrden(compra.getOcoId());
		compraForm.setRegalo(compra.getOcoDonacion());
		return imprimeOrden(mapping, compraForm, request, response);
	} 
	
	public void mensajes(String msg,OrdenCompraForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ActionErrors errors = new ActionErrors();
		OrdenCompraForm compraForm = (OrdenCompraForm)form;
		if(compraForm.getIni() == 1){
			request.getSession().setAttribute("cuenta", 0);
			request.getSession().setAttribute("loadAs", 0);
			compraForm.setIni(0);
		}
		compraForm.setDis("false");
		OrdOcoOrdenDeCompraDAO compraDAO = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
		List lst = compraDAO.findAllD(compraForm.getDon(), compraForm.getUsuarioConectado().getMax());
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);//, ExportType.PDF);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
		request.setAttribute("form", compraForm);
		request.setAttribute(Constantes.ACCION_KEY, "/ordenCompra");
        request.setAttribute("filtro", 0);
        if(request.getSession().getAttribute("cuenta") != null && (Integer) request.getSession().getAttribute("cuenta") == 1){
        	List cref = loadP(compraForm, request,response);
        	request.setAttribute("cuentas", cref);
			request.setAttribute("cuenta", 1);
		}else{
			request.setAttribute("cuenta", 0);
		}
        if((Integer) request.getSession().getAttribute("loadAs") == 1){
        	loadA(compraForm, request);
			request.setAttribute("loadAsoc", 1);
		}else{
			request.setAttribute("loadAsoc", 0);
		}
        errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(msg));
        saveMessages(request, errors);
	}
	
	public ActionForward cargarListaAsociados(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		OrdenCompraForm ordenCompraForm = (OrdenCompraForm) form;
		List<CtaAscAsociado> listaAsociados = null;
		List<FacCliCliente> listaClientes = null;
		
		CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
		CtaAscAsociado asociado = new CtaAscAsociado();
		if(ordenCompraForm.getAscEmp() == 2){
			asociado.setAscCodigo(ordenCompraForm.getAscCodigo3());
		}else{
			asociado.setAscCodigoAsociado(ordenCompraForm.getAscCodigo3());
		}
		//asociado.setAscCodigoAsociado(ordenCompraForm.getAscCodigo3());
		if(ordenCompraForm.getAscNombre() != null && !ordenCompraForm.getAscNombre().trim().equals("")){
			if(ordenCompraForm.getAscNombre().trim().indexOf(",") == -1){
				if(ordenCompraForm.getAscNombre().trim().indexOf(" ") == -1){
					asociado.getSecPerPersona().setPerPrimerNombre(ordenCompraForm.getAscNombre().trim());
				}else{
					StringTokenizer tokenizer = new StringTokenizer(ordenCompraForm.getAscNombre().trim());
					asociado.getSecPerPersona().setPerPrimerNombre(tokenizer.nextToken().trim());
					asociado.getSecPerPersona().setPerPrimerApellido(tokenizer.nextToken().trim());
				}
			}else{
				if(ordenCompraForm.getAscNombre().trim().startsWith(",")){
					asociado.getSecPerPersona().setPerPrimerApellido("");
					asociado.getSecPerPersona().setPerPrimerNombre(ordenCompraForm.getAscNombre().substring(1).trim());
				}else{
					StringTokenizer tokenizer = new StringTokenizer(ordenCompraForm.getAscNombre().trim(),",");
					asociado.getSecPerPersona().setPerPrimerApellido(tokenizer.nextToken().trim());
					asociado.getSecPerPersona().setPerPrimerNombre(tokenizer.nextToken().trim());
				}
			}
		}
		
		SecPerPersona persona = new SecPerPersona();
		persona.setPerPrimerNombre(ordenCompraForm.getAscNombre());
		
		try {
			if(ordenCompraForm.getDon() == 1){
				FacCliClienteDAO clienteDAO = new FacCliClienteDAO(getSessionHibernate(request));
				FacCliCliente cliente = new FacCliCliente();
				cliente.setCliCodigo(ordenCompraForm.getAscCodigo3());
				cliente.setCliNombre(ordenCompraForm.getAscNombre());
				listaClientes = clienteDAO.findByCriteria(cliente, 10,1);
				listaAsociados = asociadoDAO.findByNameUser(asociado,10);
			}else{
				listaAsociados = asociadoDAO.findByNameUser(asociado,10);
			}
			
			Boolean nulo = false;
			if(listaAsociados.size() < 1){
				nulo = true;
			}
			String listaResponse = "";
			if(ordenCompraForm.getDon() == 1){
				listaResponse = construirListaAsociados(listaAsociados, nulo, ordenCompraForm.getDon(), ordenCompraForm.getAscEmp(),request);
				listaResponse = construirListaClientes(listaClientes,listaResponse);
			}else{
				listaResponse = construirListaAsociados(listaAsociados, nulo, ordenCompraForm.getDon(), ordenCompraForm.getAscEmp(),request);
			}
			
			response.getWriter().write(listaResponse);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (RuntimeException e) {
			log.error("Error runtime", e);
		} catch (IOException e) {
			log.error(e);
		}
		return null;
	}
	
	private String construirListaClientes(List<FacCliCliente> listaClientes, String lista) {
		lista = lista.substring(0,lista.length() - 8);
		lista+="<tr><td colspan=\"2\"><span style=\"font-size: 10px;font-style: italic;\">Clientes:</span></td></tr>";
		if(listaClientes.size() < 1){
			lista+= "<tr><td colspan=\"2\"><span style=\"font-size: 10px;color: red;font-style: italic;\">"
			+ "No se encontro ningun cliente en el sistema para esta b&uacute;squeda</span></td></tr>";
		}else{
			for (Iterator iterator = listaClientes.iterator(); iterator.hasNext();) {
				//SecAscAsociado asociado = (SecAscAsociado) iterator.next();
				FacCliCliente cliente = (FacCliCliente)iterator.next();
				lista += "<tr>";
				lista += "<td><input onclick=\"JavaScript:saveSeleccionA(this.value);\" type=\"radio\" name=\"_miseleccion\" value=\""
						+ cliente.getCliCodigo()
						+ ";"
						+ cliente.getCliNombre()
						+ ";"
						+ cliente.getCliCodigo()
						+ ";"
						+ " "
						+ ";"
						+ cliente.getCliCodigo()
						+ "\"/></td>";
				lista += "<td><span style=\"font-size: 10px;color: #6E6E6E;font-style: italic;\">"
					+ cliente.getCliCodigo()
					+ " - "
					+ cliente.getCliNombre()
					+ "</span></td>";
				lista += "</tr>";
			}
		}
		lista += "</table>";
		return lista;
	}

	private String construirListaAsociados(List<CtaAscAsociado> listaAsociados, Boolean nulo, int don, int ascEmp
			,HttpServletRequest request) {
		String lista = "<table id=\"resultadoAsc\">";
		lista+="<tr><td colspan=\"2\"><span style=\"font-size: 10px;font-style: italic;\">Asociados:</span></td></tr>";
		if(nulo == true){
			lista+= "<tr><td colspan=\"2\"><span style=\"font-size: 10px;color: red;font-style: italic;\">"
			+ "No se encontro ningun asociado en el sistema para esta b&uacute;squeda</span></td></tr>";
		}else{
			int max2 = 0;
			for (Iterator iterator = listaAsociados.iterator(); iterator.hasNext();) {
				//SecAscAsociado asociado = (SecAscAsociado) iterator.next();
				CtaAscAsociado asociado = (CtaAscAsociado)iterator.next();
				CtaCasCuentaAsociadoDAO cuentaAsociadoDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
				//CtaPrePrestamo prestamo = cuentaAsociadoDAO.findCredito(asociado.getAscId());
				CtaPrePrestamoDAO prestamoDAO = new CtaPrePrestamoDAO(getSessionHibernate(request));
				Double creditoUsado = prestamoDAO.sumCreditoUtilizado(asociado.getAscId(),"O");
								
				OrdOcoOrdenDeCompraDAO compraDAO = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
				creditoUsado += compraDAO.usadoEmitidasAsociado(asociado.getAscId());
				
				//Double creditoUsado = compraDAO.creditoUsadoPorAsociado(asociado.getAscId());
				CtrParParametrosDAO parametrosDAO = new CtrParParametrosDAO(getSessionHibernate(request));
				CtrParParametros parametros = parametrosDAO.findById("CREDITO_ORDEN");
				Double disponible = 0.0;
				if(creditoUsado == null){
					creditoUsado = 0.0;
				}
				
				OrdPecPeticionCompraDAO petCompDAO = new OrdPecPeticionCompraDAO(getSessionHibernate(request));
				creditoUsado+= petCompDAO.creditoUtilizado(asociado.getAscId());
				
				if(creditoUsado <= parametros.getParValorNumber()){
					disponible = parametros.getParValorNumber() - creditoUsado;
				}
				String codigo = "";
				if(ascEmp == 1){
					codigo = asociado.getAscCodigoAsociado();
				}else{
					codigo = asociado.getAscCodigo();
				}
				CtrEstEstadoDAO estadoDAO = new CtrEstEstadoDAO(getSessionHibernate(request));
				if(max2<10){
					lista += "<tr>";
					lista += "<td><input onclick=\"JavaScript:saveSeleccionA(this.value);\" type=\"radio\" name=\"_miseleccion\" value=\""
							+ codigo
							+ ";"
							+ asociado.getSecPerPersona().getPerPrimerNombre()
							+ " "
							+ asociado.getSecPerPersona().getPerPrimerApellido()
							+ ";"
							+ asociado.getAscId()
							+ ";"
							//+ disponible//prestamo.getPreSaldoActualT()
							+ disponible.toString()
							//+ ";"
							//+ prestamo.getPreId()
							+ "\"/></td>";
					if(don == 0){
						if(asociado.getEstId()==21){
							lista += "<td><span style=\"font-size: 10px;color: #CC3333;font-style: italic;\">"
								+ "Restringido - " 
								+ asociado.getSecPerPersona().getPerPrimerNombre()
								+ " "
								+ asociado.getSecPerPersona().getPerSegundoNombre()
								+ " "
								+ asociado.getSecPerPersona().getPerPrimerApellido()
								+ " "
								+ asociado.getSecPerPersona().getPerSegundoApellido()
								+ "</span></td>";
							lista += "</tr>";
						}else{
							lista += "<td><span style=\"font-size: 10px;color: #6E6E6E;font-style: italic;\">"
								+ asociado.getSecPerPersona().getPerPrimerNombre()
								+ " "
								+ asociado.getSecPerPersona().getPerSegundoNombre()
								+ " "
								+ asociado.getSecPerPersona().getPerPrimerApellido()
								+ " "
								+ asociado.getSecPerPersona().getPerSegundoApellido()
								+ " - "
								+ estadoDAO.findById(asociado.getEstId()).getEstNombre()
								+ "</span></td>";
							lista += "</tr>";
						}
					}else{
						lista += "<td><span style=\"font-size: 10px;color: #6E6E6E;font-style: italic;\">"
							+ asociado.getSecPerPersona().getPerPrimerNombre()
							+ " "
							+ asociado.getSecPerPersona().getPerSegundoNombre()
							+ " "
							+ asociado.getSecPerPersona().getPerPrimerApellido()
							+ " "
							+ asociado.getSecPerPersona().getPerSegundoApellido()
							+ " - "
							+ estadoDAO.findById(asociado.getEstId()).getEstNombre()
							+ "</span></td>";
						lista += "</tr>";
					}
				}
				max2++;
			}
		}
		lista += "</table>";
		return lista;
	}
	
	public ActionForward cargarListaProveedor(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) { // se utiliza para realizar la
											// busqueda de los proveedores
		InvProProveedorDAO proProveedorDAO = new InvProProveedorDAO(getSessionHibernate(request));
		InvProProveedor proveedor = new InvProProveedor();
		OrdenCompraForm ordenCompraForm = (OrdenCompraForm) form;
		List<InvProProveedor> listaProveedores = null;
		proveedor.setProCodigo(ordenCompraForm.getProCodigo());
		proveedor.setProNombre(ordenCompraForm.getProNombre());
		try {
			listaProveedores = proProveedorDAO.findByCriteria(proveedor);
			String listaResponse;
			if(proProveedorDAO.findAll().size()<1){
				listaResponse = "<table id=\"resultadoArt\">";
				listaResponse += "<tr>";
				listaResponse += "<td><span style=\"font-size: 10px;color: red;font-style: italic;\">"
						+ "No existe ning&uacute;n proveedor en el sistema</span></td>";
				listaResponse += "</tr></table>";
			}else{
				if(listaProveedores.size() < 1){
					listaResponse = "<table id=\"resultadoArt\">";
					listaResponse += "<tr>";
					listaResponse += "<td><span style=\"font-size: 10px;color: red;font-style: italic;\">"
							+ "La b&uacute;squeda no gener&oacute; ning&uacute;n resultado</span></td>";
					listaResponse += "</tr></table>";
				}else{
					// Construimos una lista para el response
					listaResponse = contruirListaProveedores(listaProveedores,request);
				}
			}
			response.getWriter().write(listaResponse);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (RuntimeException e) {
			log.error("Error runtime", e);
		} catch (IOException e) {
			log.error(e);
		}

		return null;
	}

	private String contruirListaProveedores(
			List<InvProProveedor> listaProveedores,HttpServletRequest request) {
		OrdRefCuentaReferenciaDAO referenciaDAO = new OrdRefCuentaReferenciaDAO(getSessionHibernate(request));
		InvProProveedorDAO proveedorDAO = new InvProProveedorDAO(getSessionHibernate(request));
		String lista = "<table id=\"resultadoProv\">";
		int max = 0;
		for (Iterator iterator = listaProveedores.iterator(); iterator
				.hasNext();) {
			InvProProveedor proProveedor = (InvProProveedor) iterator.next();
			List referencias = referenciaDAO.findByProIdEstado(proProveedor.getProId(), "A");
			OrdRefCuentaReferencia referencia = new OrdRefCuentaReferencia();
			if(referencias.size()>0){
				 referencia = (OrdRefCuentaReferencia)referenciaDAO.findByProIdEstado(proProveedor.getProId(), "A").get(0); 
			}else{
				referencia.setRefCuenta("No posee cuenta");
			}
			if(max < 10){
				lista += "<tr>";
				lista += "<td><input onclick=\"JavaScript:saveSeleccionP(this.value);\" type=\"radio\" name=\"_miseleccion\" value=\""
						+ proProveedor.getProCodigo()
						+ ";"
						+ proProveedor.getProNombre()
						+ ";"
						+ proProveedor.getProId()
						+ ";"
						+ referencia.getRefCuenta()
						+ ";"
						+ referencia.getRefId()
						+ "\"/></td>";
				if(proProveedor.getIucPutProveedorTipoPrestamos().size() > 0){
					lista += "<td><span style=\"font-size: 10px;color: #6E6E6E;font-style: italic;\">"
							+ proProveedor.getProNombre() + "</span></td>";
				}else{
					lista += "<td><span style=\"font-size: 10px;color: #CC3333;font-style: italic;\">"
						+ proProveedor.getProNombre() + "</span></td>";
				}
				lista += "</tr>";
			}
			max++;
		}
		lista += "</table>";
		return lista;
	}
	
	public ActionForward redirectInvalidData(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) { 
		ActionErrors errors = (ActionErrors)request.getSession().getAttribute(Constantes.ERRORS);
		saveMessages(request, errors);
		OrdenCompraForm compraForm = (OrdenCompraForm)form;
		compraForm.setIni(1);
		return lista(mapping, compraForm, request, response);
	}
	
	public ActionForward cargaParam(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) { 
		OrdenCompraForm compraForm = (OrdenCompraForm)form;
		String lista = "";
		HtmlBuilder builder = new HtmlBuilder();
		builder.input().type("hidden").name("param").id("paramId");
		CtrParParametrosDAO parametrosDAO = new CtrParParametrosDAO(getSessionHibernate(request));
		CtrParParametros parametros = parametrosDAO.findById("TIEMPO_LIMPIAR_ORDENES");
		builder.value("" +parametros.getParValorNumber().intValue());
		builder.end();
		try{
			response.getWriter().write(builder.toString());
			response.getWriter().flush();
			response.getWriter().close();
		} catch (RuntimeException e) {
			log.error("Error runtime", e);
		} catch (IOException e) {
			log.error(e);
		}
	
		return null;
	}
	
	public ActionForward clean(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) { 
		OrdenCompraForm compraForm = (OrdenCompraForm)form;
		OrdOcoOrdenDeCompraDAO compraDAO = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
		Transaction tx = compraDAO.getSession().beginTransaction();
		
		Date fechaAtras = ElapsedTime.obtenerFechaMeses(new Date(), -compraForm.getParam());
		List lcompras = compraDAO.findAllD(compraForm.getDon(), -1);
		for (Iterator iterator = lcompras.iterator(); iterator.hasNext();) {
			OrdOcoOrdenDeCompra compra = (OrdOcoOrdenDeCompra) iterator.next();
			if(compra.getOcoEstado().equals("C")){
				if(ElapsedTime.fechaMenor(compra.getOcoVencimiento(), fechaAtras)){
					compraDAO.delete(compra);
					tx.commit();
					compraDAO.getSession().flush();
					compraDAO.getSession().clear();
				}
			}
		}
		
		return lista(mapping, compraForm, request, response);
	}
	
	public ActionForward cleanDon(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) { 
		OrdenCompraForm compraForm = (OrdenCompraForm)form;
		OrdOcoOrdenDeCompraDAO compraDAO = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
		Transaction tx = compraDAO.getSession().beginTransaction();
		
		if(compraForm.getProCodigo() == null || compraForm.getProCodigo().trim().equals("")){
			mensajes("errors.ordcom.noPro", compraForm, request, response);
			return listaMasiva(mapping, compraForm, request, response);
		}if(compraForm.getOcoMonto() <= 0){
			mensajes("errors.ordcom.montoNegativo", compraForm, request, response);
			return listaMasiva(mapping, compraForm, request, response);
		}
		if(compraForm.getFechaEmision()== null 
				|| compraForm.getFechaEmision().trim().equals("")){
			mensajes("error.compra.fechaEmisionNull", compraForm, request, response);
			return listaMasiva(mapping, compraForm, request, response);
		}
		/*
		List lcompras = compraDAO.findAllD(1, -1);
		for (Iterator iterator = lcompras.iterator(); iterator.hasNext();) {
			OrdOcoOrdenDeCompra compra = (OrdOcoOrdenDeCompra) iterator.next();
			if(compra.getOcoEstado().equals("C")){
				compraDAO.delete(compra);
				tx.commit();
				compraDAO.getSession().flush();
				compraDAO.getSession().clear();
			}
		}
		*/
		InvProProveedorDAO proveedorDAO = new InvProProveedorDAO(getSessionHibernate(request));
		InvProProveedor proveedor = (InvProProveedor)proveedorDAO.findByProCodigo(compraForm.getProCodigo()).get(0);
		crearOrdenesMasivas(proveedor,compraForm.getOcoMonto(),compraForm,1,request);
		
		return listaMasiva(mapping, compraForm, request, response);
	}
	
	public ActionForward massiveDon(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) { 
		OrdenCompraForm compraForm = (OrdenCompraForm)form;
		OrdOcoOrdenDeCompraDAO compraDAO = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
		Transaction tx = compraDAO.getSession().beginTransaction();
		/*
		//necesito esto por la forma en que ya funcionan los mensajes
		request.getSession().setAttribute("cuenta",0);
		request.getSession().setAttribute("loadAs",0);
		*/
		if(compraForm.getProCodigo() == null || compraForm.getProCodigo().trim().equals("")){
			mensajes("errors.ordcom.noPro", compraForm, request, response);
			return listaMasiva(mapping, compraForm, request, response);
		}if(compraForm.getOcoMonto() <= 0){
			mensajes("errors.ordcom.montoNegativo", compraForm, request, response);
			return listaMasiva(mapping, compraForm, request, response);
		}
		if(compraForm.getFechaEmision()== null 
				|| compraForm.getFechaEmision().trim().equals("")){
			mensajes("error.compra.fechaEmisionNull", compraForm, request, response);
			return listaMasiva(mapping, compraForm, request, response);
		}
		IntereseYMora iYm = new IntereseYMora();
		if(ElapsedTime.fechaMenor(compraForm.getFEmision(),iYm.noTime(new Date()))){
			mensajes("error.compra.fechaMenor", compraForm, request, response);
			return listaMasiva(mapping, compraForm, request, response);
		}
		
		InvProProveedorDAO proveedorDAO = new InvProProveedorDAO(getSessionHibernate(request));
		InvProProveedor proveedor = (InvProProveedor)proveedorDAO.findByProCodigo(compraForm.getProCodigo()).get(0);
		crearOrdenesMasivas(proveedor,compraForm.getOcoMonto(),compraForm,0,request);
		
		request.getSession().setAttribute("ini", INICIO);
		request.getSession().setAttribute("fin", FIN);
		compraForm.setImprimir(1);
		return listaMasiva(mapping, compraForm, request, response);
	}
	
	private void crearOrdenesMasivas(InvProProveedor proveedor, Double ocoMonto, ActionForm form, int restart,HttpServletRequest request) {
		OrdenCompraForm form2 = (OrdenCompraForm)form;
		CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
		OrdOcoOrdenDeCompraDAO compraDAO = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
		CtrParParametrosDAO parametrosDAO = new CtrParParametrosDAO(getSessionHibernate(request));
		Transaction tx = compraDAO.getSession().beginTransaction();
		INICIO = 0;
		FIN = 0;
		int init = 0;
		int sizeLista = 0;
		List asociadosActivos = asociadoDAO.findActivosConAportacion2();//findByProperty("ctrEstEstado.estId", 0);
		sizeLista = asociadosActivos.size();
		for (Iterator iterator = asociadosActivos.iterator(); iterator
				.hasNext();) {
			String asociado = (String) iterator.next();
			OrdOcoOrdenDeCompra compraForm = new OrdOcoOrdenDeCompra();
			compraForm.setOcoDonacion(1);
			compraForm.setOcoCodigo(compraDAO.nextCod(1,restart));
			compraForm.setOcoElaborado(form2.getUsuarioConectado().getNombreUsuario());
			compraForm.setOcoEmision(form2.getFEmision());
			compraForm.setOcoEstado("C");
			compraForm.setOcoPagado(0.0);
			compraForm.setOcoSaldo(ocoMonto);
			compraForm.setOcoMonto(ocoMonto);
			compraForm.setAudFechaCreacion(new Date());
			compraForm.setAudUsuarioCreacion(form2.getUsuarioConectado().getNombreUsuario());
			compraForm.setAudUsuarioModificacion(form2.getUsuarioConectado().getNombreUsuario());
			
			InvProProveedorDAO proveedorDAO = new InvProProveedorDAO(getSessionHibernate(request));
			compraForm.setInvProProveedor(proveedor);
			
			compraForm.setAscCodigo(asociado);
			
			OrdRefCuentaReferenciaDAO referenciaDAO = new OrdRefCuentaReferenciaDAO(getSessionHibernate(request));
			OrdRefCuentaReferencia ref = referenciaDAO.findById(form2.getOrdRefCuentaReferencia().getRefId());
			compraForm.setOrdRefCuentaReferencia(ref);
			if(compraForm.getOrdRefCuentaReferencia() == null){
				compraForm.setOrdRefCuentaReferencia(referenciaDAO.findById(referenciaDAO.firstId()));
			}
	
			Double venc = parametrosDAO.findById("ORDEN_VENCIMIENTO").getParValorNumber();
			Date fechaActual = form2.getFEmision();
			Date nuevaFecha = ElapsedTime.obtenerFecha(fechaActual, venc.intValue());
			compraForm.setOcoVencimiento(nuevaFecha);
			compraForm.setAudFechaModificacion(new Date());
			try {
				compraDAO.save(compraForm);
				enviarOrdenAContabilidad(compraForm, form2.getUsuarioConectado().getNombreUsuario(),request);
				tx.commit();
				//System.out.println(compraForm.getOcoId());
				if(init == 0){
					INICIO = compraForm.getOcoId();
					init++;
				}
			} catch (Exception e) {
				// TODO: handle exception
				tx.rollback();
				e.printStackTrace();
			}finally{
				compraDAO.getSession().flush();
				compraDAO.getSession().clear();
			}
			if(restart == 1){
				restart = 0;
			}
		}
		FIN = INICIO + sizeLista;
	}
	
	public ActionForward listaMasiva(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		OrdenCompraForm compraForm = (OrdenCompraForm)form;
		OrdOcoOrdenDeCompraDAO compraDAO = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
		compraForm.setDon(1);
		compraForm.setFechaEmision(new Date());
		
		if(compraForm.getImprimir() == 1){
			request.setAttribute("imprimirMass", 1);
		}else{
			request.getSession().removeAttribute("ini");
			request.getSession().removeAttribute("fin");
		}
		
		if(compraForm.getIni() == null) compraForm.setIni(1);
		if(compraForm.getIni() == 1){
			request.getSession().setAttribute("cuenta", 0);
			request.getSession().setAttribute("loadAs", 0);
			compraForm.setIni(0);
			if(compraForm.getDon() == 1){
				compraForm.setFechaEmision(new Date());
				request.setAttribute("calendar", 1);
			}
		}
		
		compraForm.setOcoCodigo(compraDAO.nextCod(compraForm.getDon(), 0));
		
		List lst = compraDAO.findAllD(1, compraForm.getUsuarioConectado().getMax());
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);//, ExportType.PDF);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
		request.setAttribute("form", compraForm);
		request.setAttribute(Constantes.ACCION_KEY, "/ordenCompra");
        request.setAttribute("filtro", 0);
        request.setAttribute("boton", 0);
        request.setAttribute("don", 1);
        request.setAttribute("enabled", 1);
        SecIseInicioSesionDAO inicioSesionDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
        SecIseInicioSesion inicioSesion = inicioSesionDAO.findById(compraForm.getUsuarioConectado().getNombreUsuario());
        
        request.setAttribute("admin", inicioSesion.getSecRolRoles().getRolNombre());
		return mapping.findForward("listaMasiva");
	}

	/**
	 * M&eacute;todo encargado de imprimir los archivos de las ordenes y luego
	 * convertirlos en un zip
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward imprimirOrdenes(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		OrdenCompraForm compraForm = (OrdenCompraForm)form;
		
		ServletContext servletContext = getServlet().getServletContext();
		String pathReportes = servletContext
				.getRealPath("/reportesOtros/facturacion/ordenCompra/ordenCompra.jasper");
		String carpetaReportes = servletContext.getRealPath("/");
		String carpetaOriginal = carpetaReportes + "/ordenes/";
		HashMap<String, Object> mapa = new HashMap<String, Object>();
		ReportFile rep = new ReportFile(pathReportes, mapa);
		rep.setPathJasper(pathReportes);
		ExportReport export = new ExportReport();
		Connection con = HibernateSessionFactory.getSession().connection();
		export.setReportFile(rep);

		// Creamos la carpeta temporal
		carpetaReportes = carpetaReportes + "/repOrd/"
				+ ((new SimpleDateFormat("yyyyMMddHHmmss")).format(new Date()))
				+ "/";
		File file = new File(carpetaReportes);
		file.mkdirs();
		
		//Transaccion
		OrdOcoOrdenDeCompraDAO compraDAO = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
		Transaction trx = compraDAO.getSession().beginTransaction();
		// Iteramos sobre los cheques seleccionados
		int inicio = (Integer) request.getSession().getAttribute("ini");
		OrdOcoOrdenDeCompra compra = compraDAO.findById(inicio);
		int ocoNum = compra.getOcoCodigo();
		int fin = (Integer) request.getSession().getAttribute("fin");
		for (int i = inicio; i < fin; i++) {
			// Seteamos los parametros del reporte
			mapa.put("ocoId", i);
			mapa.put("REGALO", 1);
			try {
				// Imprimimos los reportes pendientes
				export.exportReportPDF(carpetaReportes
						+ "orden_D"
						+ ocoNum + ".pdf", con);
			} catch (JRException e) {
				log.error("No se pudo imprimir el reporte " + i, e);
			}
			ocoNum++;
		}

		// Comprimimos el archivo y enviamos el response
		ZipFile zip = new ZipFile();
		File fileZip = new File(carpetaOriginal);
		if (!fileZip.exists()) {
			fileZip.mkdirs();
		}
		try {
			String ordenes = carpetaOriginal
					+ "";
			String fileName = ((new SimpleDateFormat("yyyyMMddHHmmss"))
					.format(new Date())) + ".zip";
			File dirOrdenes = new File(ordenes);
			if(!dirOrdenes.exists()) {
				dirOrdenes.mkdirs();
			}
			dirOrdenes = new File(ordenes+fileName);
			zip.zip(ordenes+fileName,carpetaReportes);
			zip.deleteDir(carpetaReportes);
			
			
			enviarFileResponse(response, fileName, dirOrdenes);
		} catch (FileNotFoundException e) {
			log.error("", e);
		} catch (IOException e) {
			log.error("", e);
		}
		//Hacemos commit para guardar todos los cambios
		trx.commit();
		return null;
	}

	public void enviarFileResponse(HttpServletResponse response,
			String fileName, File archivo) throws FileNotFoundException,
			IOException {
		//Cambiamos el response para que se puedan bajar los archivos
		response.setContentType("application/octet-stream");
		response.setHeader("content-Disposition", "attachment;filename="+fileName);
		response.setBufferSize((int)archivo.length());
		// Obtenemos el response para poder enviar el archivo
		FileInputStream stream = new FileInputStream(archivo);
		PrintWriter out = response.getWriter();
		int n = -1;
		while ((n = stream.read()) != -1) {
			out.write(n);
		}
		out.flush();
		out.close();
	}
	
	public ActionForward cargar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		OrdenCompraForm compraForm = (OrdenCompraForm)form;
		
		OrdOcoOrdenDeCompraDAO compraDAO = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
		OrdOcoOrdenDeCompra orden = compraDAO.findById(compraForm.getOcoId());
		
		SecIseInicioSesionDAO sesionDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
		SecIseInicioSesion sesion = sesionDAO.findById(compraForm.getUsuarioConectado().getNombreUsuario());
		
		InvProProveedorDAO proveedorDAO = new InvProProveedorDAO(getSessionHibernate(request));
		InvProProveedor proveedor = proveedorDAO.findById(orden.getInvProProveedor().getProId());
		if(proveedor.getIucPutProveedorTipoPrestamos().size()<1){
			mensajes("error.oco.proSinUnion", compraForm, request, response);
			return lista(mapping, compraForm, request, response);
		}
		orden.setAudUsuarioModificacion(sesion.getIseNombreUsuario());
		orden.setOcoEstado("C");
		compraDAO.merge(orden);
				
		//Obtener el tipo de prestamo de la orden a generar
		CtaTprTipoPrestamoDAO trpDao = new CtaTprTipoPrestamoDAO(getSessionHibernate(request));
		CtaTprTipoPrestamo tpr = trpDao.findByProveedor(proveedor.getProId());
		
		CtrParParametrosDAO parametrosDAO = new CtrParParametrosDAO(getSessionHibernate(request));
		Double divisor = parametrosDAO.findById("NUM_CUOTAS_ORDEN_COMPRA").getParValorNumber();
				
		CtaCasCuentaAsociadoDAO cuentaAsociadoDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
		CtaCasCuentaAsociado cas = new CtaCasCuentaAsociado();
		CtaPrePrestamo prestamo = new CtaPrePrestamo();
		
		CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
		CtaAscAsociado asociado = asociadoDAO.findById(orden.getAscCodigo());
		
		CtaPrePrestamoDAO prestamoDAO = new CtaPrePrestamoDAO(getSessionHibernate(request));
		
		List lCas =cuentaAsociadoDAO.findByTprAndAsc(tpr.getTprId(), asociado.getAscId(), "O");
		Transaction tx = prestamoDAO.getSession().beginTransaction();
		if(lCas.size()>0){
			
			cas = (CtaCasCuentaAsociado) lCas.get(0);
			prestamo = prestamoDAO.findById(cas.getCtaPrePrestamo().getPreId());
			prestamo.setPreSaldoActualT(prestamo.getPreSaldoActualT() + compraForm.getOcoMonto());
			prestamo.setPreMontoSolicitado(prestamo.getPreSaldoActualT());
			prestamo.setPrePendMov(prestamo.getPrePendMov() + (compraForm.getOcoMonto()*((tpr.getCtaTinTasaInteres().getTinTasa()/12)/100)));
			prestamo.setPreCuota((prestamo.getPreSaldoActualT() + prestamo.getPrePendMov())/divisor);
			prestamo.setPreMontoSolicitado(compraForm.getOcoMonto());
			prestamoDAO.merge(prestamo);
			tx.commit();
			
		}else{
			prestamo.setCtaTprTipoPrestamo(tpr);
			prestamo.setPreAcumMov(0.0);
			prestamo.setPreCredito("O");
			prestamo.setPrePendMov(compraForm.getOcoMonto()*((tpr.getCtaTinTasaInteres().getTinTasa()/12)/100));
			prestamo.setPreLiquidoARecibir(compraForm.getOcoMonto());
			prestamo.setPreFechaSolicitud(new Date());
			prestamo.setPreMontoSolicitado(compraForm.getOcoMonto());
			prestamo.setPreSaldoActualT(compraForm.getOcoMonto());
			prestamo.setPreMoraMov(0.0);
			prestamo.setPreCuota((prestamo.getPreSaldoActualT() + prestamo.getPrePendMov())/divisor);
			prestamo.setPreReferencia(prestamoDAO.generarId("C"));
			prestamo.setPreId(prestamo.getPreReferencia());
			prestamo.setPreInteresAcumulado(0.0);
			prestamo.setCtaTinTasaInteres(null);
			prestamo.setCtaSegSeguros(null);
			prestamoDAO.save(prestamo);
			tx.commit();
			
			cas.setCasFechaApertura(new Date());
			cas.setCasPrincipal("N");
			cas.setCtaAscAsociado(asociado);
			cas.setCtaCahCuentaAhorro(null);
			cas.setCtaCbaCuentaBancaria(null);
			cas.setCtaPrePrestamo(prestamo);
			cas.setCtaPxtPersonaExterna(null);
			cas.setCtaSegSeguros(null);
			
			//Estado activo para prestamo 13
			CtrEstEstadoDAO estadoDAO = new CtrEstEstadoDAO(getSessionHibernate(request));
			CtrEstEstado estActivo = estadoDAO.findById(13);
			
			cas.setCtrEstEstado(estActivo);
			cuentaAsociadoDAO.save(cas);
			Transaction tx2 = cuentaAsociadoDAO.getSession().beginTransaction();
			tx2.commit();
		}
		
		CtaTxaTransaccionxcuentaAsociadoDAO txaDAO = new CtaTxaTransaccionxcuentaAsociadoDAO(getSessionHibernate(request));
		CtaTxaTransaccionxcuentaAsociado txa = new CtaTxaTransaccionxcuentaAsociado();
		
		txa.setCtaCasCuentaAsociado(cas);
		CtaTtrTipoTransaccionDAO tipoTransaccionDAO = new CtaTtrTipoTransaccionDAO(getSessionHibernate(request));
		//Cargo por orden, el ttrId es 1
		txa.setCtaTtrTipoTransaccion(tipoTransaccionDAO.findById(1));
		txa.setTxaComprobante(txaDAO.nextComprobante());
		//CtaTcmTipoComprobanteDAO tipoComprobanteDAO = new CtaTcmTipoComprobanteDAO(getSessionHibernate(request));
		txa.setTxaFecha(new Date());
		txa.setTxaMonto(compraForm.getOcoMonto());
		txa.setAudFechaCreacion(new Date());
		txa.setAudFechaModificacion(new Date());
		txa.setAudUsuarioCreacion(compraForm.getUsuarioConectado().getNombreUsuario());
		txa.setAudUsuarioModificacion(compraForm.getUsuarioConectado().getNombreUsuario());
		txaDAO.save(txa);
		Transaction txpr = txaDAO.getSession().beginTransaction();
		txpr.commit();
		txaDAO.getSession().flush();
		txaDAO.getSession().clear();
		
		CtaMxpMovimientoPrestamoDAO movimientoPrestamoDAO = new CtaMxpMovimientoPrestamoDAO(getSessionHibernate(request));
		Transaction txmxp = movimientoPrestamoDAO.getSession().beginTransaction();
		CtaMxpMovimientoPrestamo mxpAnt = movimientoPrestamoDAO.findUltimoMovimiento(prestamo.getPreId());
		CtaMxpMovimientoPrestamo movimientoPrestamo = new CtaMxpMovimientoPrestamo();
		if(mxpAnt == null){
			movimientoPrestamo.setCtaPrePrestamo(prestamo);
			movimientoPrestamo.setMxpFecha(new Date());
			movimientoPrestamo.setMxpMora(0.0);
			movimientoPrestamo.setMxpInteresPendiente(0.0);
			movimientoPrestamo.setMxpInteresAcumulado(0.0);
			movimientoPrestamo.setMxpSaldoActual(0.0);
			movimientoPrestamo.setAudFechaCreacion(new Date());
			movimientoPrestamo.setAudFechaModificacion(new Date());
			movimientoPrestamo.setAudUsuarioCreacion(compraForm.getUsuarioConectado().getNombreUsuario());
			movimientoPrestamo.setAudUsuarioModificacion(compraForm.getUsuarioConectado().getNombreUsuario());
			movimientoPrestamo.setCtaTxaTransaccionxcuentaAsociado(txa);
			movimientoPrestamo.setMxpSaldo(prestamo.getPreSaldoActualT());
			movimientoPrestamoDAO.save(movimientoPrestamo);
			txmxp.commit();
			movimientoPrestamoDAO.getSession().flush();
			movimientoPrestamoDAO.getSession().clear();
		}else{
			movimientoPrestamo.setCtaPrePrestamo(prestamo);
			movimientoPrestamo.setMxpFecha(new Date());
			movimientoPrestamo.setMxpMora(0.0);
			movimientoPrestamo.setMxpSaldoActual(0.0);
			movimientoPrestamo.setMxpInteresPendiente(0.0);
			movimientoPrestamo.setMxpInteresAcumulado(0.0);
			movimientoPrestamo.setAudFechaCreacion(new Date());
			movimientoPrestamo.setAudFechaModificacion(new Date());
			movimientoPrestamo.setAudUsuarioCreacion(compraForm.getUsuarioConectado().getNombreUsuario());
			movimientoPrestamo.setAudUsuarioModificacion(compraForm.getUsuarioConectado().getNombreUsuario());
			movimientoPrestamo.setCtaTxaTransaccionxcuentaAsociado(txa);
			movimientoPrestamo.setMxpSaldoActual(mxpAnt.getMxpSaldoActual());
			movimientoPrestamo.setMxpSaldo(prestamo.getPreSaldoActualT()-movimientoPrestamo.getMxpSaldoActual());
			movimientoPrestamoDAO.save(movimientoPrestamo);
			txmxp.commit();
			movimientoPrestamoDAO.getSession().flush();
			movimientoPrestamoDAO.getSession().clear();
		}
			
		//Llamar a dividir todos los prestamos de orden entre el divisor para sus nuevas cuotas
		
//		divisorACreditos(asociado.getAscId(), "O", tpr.getTprId(),
//				divisor, compraForm.getUsuarioConectado().getNombreUsuario(),request);					
				
		//Obtener saldo pendiente
		Double creditoUsado = prestamoDAO.sumCreditoUtilizado(asociado.getAscId(),"O");
		if(creditoUsado == null){
			creditoUsado = 0.0;
		}
		OrdPecPeticionCompraDAO petCompDAO = new OrdPecPeticionCompraDAO(getSessionHibernate(request));
		CtrParParametros creditoOrden = parametrosDAO.findById("CREDITO_ORDEN");
		Double nuevoDisponible = creditoOrden.getParValorNumber() - prestamoDAO.sumCreditoUtilizado(asociado.getAscId(),"O") - petCompDAO.creditoUtilizado(asociado.getAscId());;
		compraForm.setCredito(nuevoDisponible);
		
		return lista(mapping, compraForm, request, response);
	}
	
	protected Map getKeyMethodMap() {
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.ordcom.lista", "lista");
		map.put("cmd.ordcom.cargaAsc", "cargaAsc");
		map.put("cmd.ordcom.cargaPro", "cargaProv");
		map.put("cmd.ordcom.guardar", "guardar");
		map.put("cmd.ordcom.cancelar", "cancelar");
		map.put("cmd.ordcom.cancel", "cancelar");
		map.put("cmd.ordcom.editar", "edit");
		map.put("cmd.ordcom.anular", "anular");
		map.put("cmd.ordcom.buscar", "buscar");
		map.put("cmd.ordcom.reimpresion", "reimpresion");
		map.put("cmd.ordcom.cargarListaAsociados", "cargarListaAsociados");
		map.put("cmd.ordcom.cargarListaProveedor", "cargarListaProveedor");
		map.put("cmd.ordcom.redirectInvalidData", "redirectInvalidData");
		map.put("cmd.ordcom.cargaParam", "cargaParam");
		map.put("cmd.ordcom.clean", "clean");
		map.put("cmd.ordcom.massiveDon", "massiveDon");
		map.put("cmd.ordcom.cleanDon", "cleanDon");
		map.put("cmd.ordcom.listaMasiva", "listaMasiva");
		map.put("cmd.ordcom.imprimeOrden", "imprimeOrden");
		map.put("cmd.ordcom.imprimirOrdenes", "imprimirOrdenes");
		map.put("cmd.ordcom.cargar", "cargar");
		return map;
	}
}