/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.orden.struts.action;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.hibernate.Transaction;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeImpl;
import org.jmesa.limit.ExportType;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.BasicCellEditor;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.html.HtmlBuilder;

import com.cetia.sicaco.hibernate.InvProProveedor;
import com.cetia.sicaco.hibernate.InvProProveedorDAO;
import com.cetia.sicaco.hibernate.OrdRefCuentaReferencia;
import com.cetia.sicaco.hibernate.OrdRefCuentaReferenciaDAO;
import com.cetia.sicaco.orden.struts.form.CuentaReferenciaForm;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;

/** 
 * MyEclipse Struts
 * Creation date: 04-30-2008
 * 
 * XDoclet definition:
 * @struts.action path="/cuentaReferencia" name="cuentaReferenciaForm" input="redirectInvalidData" parameter="accion" scope="request" validate="true"
 * @struts.action-forward name="lista" path="pagina-lista.orden.cuentaReferencia"
 */
public class CuentaReferenciaAction extends DMLAction {
	/*
	 * Generated Methods
	 */

	public static final String TABLA_ID = "ordRefCuentaReferencia";
	private final static String METHOD_NAME = "methodName";
	private final static String PROV_ID = "provId";
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		CuentaReferenciaForm referenciaForm = (CuentaReferenciaForm)form;
		OrdRefCuentaReferenciaDAO referenciaDAO = new OrdRefCuentaReferenciaDAO(getSessionHibernate(request));
		java.util.List lst = null;
		InvProProveedorDAO proveedorDAO = new InvProProveedorDAO(getSessionHibernate(request));
		InvProProveedor proveedor = proveedorDAO.findById(referenciaForm.getInvProProveedor().getProId());
		referenciaForm.setProvId(referenciaForm.getInvProProveedor().getProId());
		request.getSession().setAttribute(PROV_ID, referenciaForm.getProvId());
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(proveedor.getOrdRefCuentaReferencias());
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);//, ExportType.PDF);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
		//request.getSession().removeAttribute(BDG_ID);
		request.getSession().setAttribute(METHOD_NAME, "invalidSave");
		request.setAttribute(Constantes.PROVEEDOR, proveedor);
		request.setAttribute("form", referenciaForm);
		request.setAttribute(Constantes.ACCION_KEY, "/cuentaReferencia");
        request.setAttribute("filtro", "0");
		return mapping.findForward("lista");
		 
	}
	
	//---- Funcion que genera el html de la tabla del jmesa
	private String html(final TableFacade tableFacade, final HttpServletRequest request) {
		tableFacade.setColumnProperties("refCuenta","refDescripcion","refEstado","refId");
		Table table = tableFacade.getTable();
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.cref.caption");
		
		Row row = table.getRow();

		Column nombreColumna = row.getColumn("refCuenta");
		nombreColumna.setTitleKey("tbl.cref.refCuenta");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				OrdRefCuentaReferencia referencia = (OrdRefCuentaReferencia)item;
				HtmlBuilder html = new HtmlBuilder();
				String link = tableFacade.getWebContext().getContextPath();
				link += "/orden/cuentaReferencia.do?refId="+referencia.getRefId().toString()+ "&proId=" + referencia.getInvProProveedor().getProId().toString() + "&accion=edit";
				html.a().href().quote().append(link).quote().close();
				html.append(value);
				html.aEnd();
				
				return html.toString();
			}
		});
				
		nombreColumna = row.getColumn("refDescripcion");
		nombreColumna.setTitleKey("tbl.cref.refDescripcion");
		
		nombreColumna = row.getColumn("refEstado");
		nombreColumna.setTitleKey("tbl.cref.refEstado");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				if(value.equals("A")) value = "activa";
				else value = "inactiva";
				return value;
			}
		});
		
		nombreColumna = row.getColumn("refId");
		nombreColumna.setTitleKey("tbl.cref.control");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				OrdRefCuentaReferencia referencia = (OrdRefCuentaReferencia)item;
				HtmlBuilder html = new HtmlBuilder();
				String clase = "";
				if(referencia.getRefEstado().equals("A")){
					value="Inactivar";
					clase = "class=\"linkInActivar\"";
				}
				else{
					//value="Activar";//<u>reactivar</u>";
					//clase ="class=\"linkActivar\"";
				}
			//	String link = tableFacade.getWebContext().getContextPath();
				html.a().onclick("handlerDeleteButton("+ referencia.getRefId()+ ");").append(clase).title(value.toString()).id("deleteButtonId").close();
			//	html.append(value);
				html.aEnd().ulEnd();
								
				return html.toString();
			}
		});
		
		return tableFacade.render();
	}
	
	//---- Funcion que genera los exports, el formato que tendran
	 private void export(final TableFacade tableFacade) {
		 tableFacade.setColumnProperties("refCuenta","refDescripcion","refEstado");
			Table table = tableFacade.getTable();
			//---- Titulo de la tabla
			table.setCaptionKey("tbl.cref.caption");
			
			Row row = table.getRow();

			Column nombreColumna = row.getColumn("refCuenta");
			nombreColumna.setTitleKey("tbl.cref.refCuenta");
					
			nombreColumna = row.getColumn("refDescripcion");
			nombreColumna.setTitleKey("tbl.cref.refDescripcion.x");
			
			nombreColumna = row.getColumn("refEstado");
			nombreColumna.setTitleKey("tbl.cref.refEstado");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

				public Object getValue(Object item, String property, int rowcount) {
					Object value = new BasicCellEditor().getValue(item, property, rowcount);
					if(value.equals("A")) value = "activa";
					else value = "inactiva";
					return value;
				}
			});
			
		tableFacade.render();
	}
	 
	public ActionForward guardar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		CuentaReferenciaForm referenciaForm = (CuentaReferenciaForm)form;
		OrdRefCuentaReferenciaDAO referenciaDAO = new OrdRefCuentaReferenciaDAO(getSessionHibernate(request));
		Transaction tx = referenciaDAO.getSession().beginTransaction();
		try {
			List l = referenciaDAO.findByProIdEstado(referenciaForm.getProId(), "A");
			if(l.size() > 0){
				mensajes("errors.cref.active", referenciaForm , request, response);
				return mapping.findForward("lista");
			}
			referenciaForm.setRefEstado("A");
			referenciaDAO.save(referenciaForm.getReferenciaH());
			tx.commit();
		} catch (Exception e) {
			// TODO: handle exception
			tx.rollback();
			e.printStackTrace();
		}finally{
			referenciaDAO.getSession().flush();
			referenciaDAO.getSession().clear();
			
		}
		InvProProveedorDAO proveedorDAO = new InvProProveedorDAO(getSessionHibernate(request));
		InvProProveedor proveedor = proveedorDAO.findById(referenciaForm.getProId());
		referenciaForm = new CuentaReferenciaForm();
		referenciaForm.setInvProProveedor(proveedor);
		return lista(mapping,referenciaForm,request,response);
	}

	public ActionForward salvar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		CuentaReferenciaForm referenciaForm = (CuentaReferenciaForm)form;
		OrdRefCuentaReferenciaDAO referenciaDAO = new OrdRefCuentaReferenciaDAO(getSessionHibernate(request));
		Transaction tx = referenciaDAO.getSession().beginTransaction();
		try {
			InvProProveedorDAO proveedorDAO = new InvProProveedorDAO(getSessionHibernate(request));
			referenciaForm.setInvProProveedor(proveedorDAO.findById(referenciaForm.getProId()));
			referenciaDAO.merge(referenciaForm.getReferenciaH());
			tx.commit();
		} catch (Exception e) {
			// TODO: handle exception
			tx.rollback();
			e.printStackTrace();
		}finally{
			referenciaDAO.getSession().flush();
			referenciaDAO.getSession().clear();
			
		}
		return lista(mapping,referenciaForm,request,response);
	}
	
	public ActionForward eliminar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		CuentaReferenciaForm referenciaForm = (CuentaReferenciaForm)form;
		OrdRefCuentaReferenciaDAO referenciaDAO = new OrdRefCuentaReferenciaDAO(getSessionHibernate(request));
		Transaction tx = referenciaDAO.getSession().beginTransaction();
		try {
			referenciaForm.setReferenciaH(referenciaDAO.findById(referenciaForm.getReffId()));
			referenciaForm.setRefEstado("I");
			referenciaDAO.merge(referenciaForm.getReferenciaH());
			tx.commit();
		} catch (Exception e) {
			// TODO: handle exception
			tx.rollback();
			e.printStackTrace();
		}finally{
			referenciaDAO.getSession().flush();
			referenciaDAO.getSession().clear();
			
		}
		return lista(mapping,form,request,response);
	}
	
	public ActionForward editar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		CuentaReferenciaForm referenciaForm = (CuentaReferenciaForm)form;
		OrdRefCuentaReferenciaDAO referenciaDAO =  new OrdRefCuentaReferenciaDAO(getSessionHibernate(request));
		referenciaForm.setReferenciaH(referenciaDAO.findById(referenciaForm.getRefId()));
		request.getSession().setAttribute(METHOD_NAME, "invalidUpdate");
		request.setAttribute("form", referenciaForm);
		request.setAttribute(Constantes.ACCION_KEY, "/cuentaReferencia");
        request.setAttribute("filtro", "1");
		return mapping.findForward("dml");
	}
	
		
	public ActionForward cancelar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		return lista(mapping, form, request, response);
	}
	
	public ActionForward redirectInvalidData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		ActionErrors errors = (ActionErrors)request.getSession().getAttribute(Constantes.ERRORS);
		CuentaReferenciaForm referenciaForm = (CuentaReferenciaForm)form;
		OrdRefCuentaReferenciaDAO referenciaDAO = new OrdRefCuentaReferenciaDAO(getSessionHibernate(request));
		referenciaForm.setProvId((Integer) request.getSession().getAttribute(PROV_ID));
		//request.getSession().removeAttribute("id");
		String methodName = (String)request.getSession().getAttribute(METHOD_NAME);
		if(methodName!= null){
			if(methodName.equals("invalidSave")){
				java.util.List lst = null;
				InvProProveedorDAO proveedorDAO = new InvProProveedorDAO(getSessionHibernate(request));
				InvProProveedor proveedor = proveedorDAO.findById(referenciaForm.getProvId());
				TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
				tableFacade.setItems(proveedor.getOrdRefCuentaReferencias());
				//---- Genera los tipos de formas con que se podran exportar los datos
				tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);//, ExportType.PDF);
				tableFacade.setStateAttr("restore");
				Limit limit = tableFacade.getLimit();
				if (limit.isExported()) {
		        	//---- exporta la tabla
		            export(tableFacade);
		            return null; 
		        } else {
		        	//---- genera el html de la tabla para ser mostrada
		            String html = html(tableFacade, request);
		            request.setAttribute(Constantes.LISTA_KEY, html);
		        }
		        //----- Variables de configuracion
				//request.getSession().removeAttribute(BDG_ID);
				request.getSession().setAttribute(METHOD_NAME, "invalidSave");
				request.setAttribute(Constantes.PROVEEDOR, proveedor);
				request.setAttribute("form", referenciaForm);
				request.setAttribute(Constantes.ACCION_KEY, "/cuentaReferencia");
		        request.setAttribute("filtro", "0");
		        saveMessages(request, errors);
				return mapping.findForward("lista");
			}
			if(methodName.equals("invalidUpdate")){
				referenciaForm.setReferenciaH(referenciaDAO.findById(referenciaForm.getRefId()));
				request.getSession().setAttribute(METHOD_NAME, "invalidUpdate");
				request.setAttribute("form", referenciaForm);
				request.setAttribute(Constantes.ACCION_KEY, "/cuentaReferencia");
		        request.setAttribute("filtro", "1");
				saveMessages(request, errors);
				return mapping.findForward("dml");
			}
		}
		return lista(mapping, form, request, response);
	}
	
	public ActionForward redirectProveedor(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		return mapping.findForward("redirectProveedor");
	}
	
	public void mensajes(String msg,CuentaReferenciaForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ActionErrors errors = new ActionErrors();
		CuentaReferenciaForm referenciaForm = (CuentaReferenciaForm)form;
		OrdRefCuentaReferenciaDAO referenciaDAO = new OrdRefCuentaReferenciaDAO(getSessionHibernate(request));
		java.util.List lst = null;
		InvProProveedorDAO proveedorDAO = new InvProProveedorDAO(getSessionHibernate(request));
		InvProProveedor proveedor = proveedorDAO.findById(referenciaForm.getInvProProveedor().getProId());
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(proveedor.getOrdRefCuentaReferencias());
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);//, ExportType.PDF);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
		//request.getSession().removeAttribute(BDG_ID);
		request.getSession().setAttribute(METHOD_NAME, "invalidSave");
		request.setAttribute(Constantes.PROVEEDOR, proveedor);
		request.setAttribute("form", referenciaForm);
		request.setAttribute(Constantes.ACCION_KEY, "/cuentaReferencia");
        request.setAttribute("filtro", "0");
        errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(msg));
        saveMessages(request, errors);
	}
	
	
	protected Map getKeyMethodMap() {
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.cref.lista", "lista");
		map.put("cmd.cref.guardar", "guardar");
		map.put("cmd.cref.eliminar", "eliminar");
		map.put("cmd.cref.salvar", "salvar");
		map.put("cmd.cref.editar", "editar");
		map.put("cmd.cref.cancelar", "cancelar");
		map.put("cmd.cref.redirectInvalidData","redirectInvalidData");
		map.put("cmd.cref.redirectProveedor", "redirectProveedor");
		return map;
	}
}