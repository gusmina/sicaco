/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.orden.struts.action;

import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletContext;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.hibernate.Transaction;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeImpl;
import org.jmesa.limit.ExportType;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.BasicCellEditor;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.editor.DateCellEditor;
import org.jmesa.view.html.HtmlBuilder;

import com.cetia.sicaco.hibernate.CtaAscAsociado;
import com.cetia.sicaco.hibernate.CtaAscAsociadoDAO;
import com.cetia.sicaco.hibernate.CtaChkChequePrestamo;
import com.cetia.sicaco.hibernate.CtaChkChequePrestamoDAO;
import com.cetia.sicaco.hibernate.CtaStbSolTransBanc;
import com.cetia.sicaco.hibernate.CtaStbSolTransBancDAO;
import com.cetia.sicaco.hibernate.CtrBanBanco;
import com.cetia.sicaco.hibernate.CtrBanBancoDAO;
import com.cetia.sicaco.hibernate.CtrRckRepositorioCheques;
import com.cetia.sicaco.hibernate.CtrRckRepositorioChequesDAO;
import com.cetia.sicaco.hibernate.HibernateSessionFactory;
import com.cetia.sicaco.hibernate.InvPcbProveedorCuentaBancaria;
import com.cetia.sicaco.hibernate.InvPcbProveedorCuentaBancariaDAO;
import com.cetia.sicaco.hibernate.InvProProveedor;
import com.cetia.sicaco.hibernate.InvProProveedorDAO;
import com.cetia.sicaco.hibernate.OrdOcoOrdenDeCompra;
import com.cetia.sicaco.hibernate.OrdOcoOrdenDeCompraDAO;
import com.cetia.sicaco.hibernate.OrdOpaOrdenDePago;
import com.cetia.sicaco.hibernate.OrdOpaOrdenDePagoDAO;
import com.cetia.sicaco.hibernate.OrdPcoPagoCompra;
import com.cetia.sicaco.hibernate.OrdPcoPagoCompraDAO;
import com.cetia.sicaco.hibernate.OrdRefCuentaReferenciaDAO;
import com.cetia.sicaco.hibernate.SecIseInicioSesion;
import com.cetia.sicaco.hibernate.SecIseInicioSesionDAO;
import com.cetia.sicaco.hibernate.SecPerPersona;
import com.cetia.sicaco.hibernate.SecPerPersonaDAO;
import com.cetia.sicaco.orden.struts.form.OrdenCompraForm;
import com.cetia.sicaco.orden.struts.form.OrdenPagoForm;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;
import com.cetia.sicaco.struts.PartidaAutomatica;
import com.mad.utilidades.ElapsedTime;
import com.mad.utilidades.ExportReport;
import com.mad.utilidades.Redondeo;
import com.mad.utilidades.ReportFile;

/** 
 * MyEclipse Struts
 * Creation date: 05-19-2008
 * 
 * XDoclet definition:
 * @struts.action path="/listaOrdenPago" name="ordenPagoForm" input="redirectInvalidData" parameter="accion" scope="request" validate="true"
 * @struts.action-forward name="lista" path="pagina-lista.orden.listaPago"
 * @struts.action-forward name="dml" path="pagina-dml.orden.dmlPago"
 */
public class ListaOrdenPagoAction extends DMLAction {
	/*
	 * Generated Methods
	 */

	public static final String TABLA_ID = "ordOpaOrdenDePago";
	public static final String TABLA_ID2 = "ordOcoOrdenDeCompra";
	
	public double TOTAL;
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */

	public ActionForward dml(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		OrdenPagoForm pagoForm = (OrdenPagoForm)form;
		if(pagoForm.getLordpId() <= 0){
			pagoForm.setLordpId(pagoForm.getOpaId());
		}
		OrdOpaOrdenDePagoDAO pagoDAO = new OrdOpaOrdenDePagoDAO(getSessionHibernate(request));
		pagoForm.setDis("true");
		pagoForm.setDis2("disabled=\"disabled\"");
		//pagoForm.setOpaId(pagoForm.getLordpId());
		OrdOpaOrdenDePago ordenDePago = null;
		if(request.getAttribute("ordPagoId") != null){
			int ordPagoId = (Integer) request.getAttribute("ordPagoId");
			ordenDePago = pagoDAO.findById(ordPagoId);
			int provId = (Integer) request.getAttribute("provId");
			InvProProveedorDAO proveedorDAO = new InvProProveedorDAO(getSessionHibernate(request));
			ordenDePago.setInvProProveedor(proveedorDAO.findById(provId));
		}else{
			ordenDePago = pagoDAO.findById(pagoForm.getLordpId());
		}
		
		if(!ordenDePago.getOpaEstado().equals("A")){
			request.setAttribute("permitePago", 1);
		}
		
		pagoForm.setPagoH(ordenDePago);
		OrdOcoOrdenDeCompraDAO compraDAO = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
		OrdPcoPagoCompraDAO pagoCompraDAO = new OrdPcoPagoCompraDAO(getSessionHibernate(request));
		List lst2 = pagoCompraDAO.findByPagoId(ordenDePago);
		ArrayList lst3 = new ArrayList();
		for (Iterator iterator = lst2.iterator(); iterator.hasNext();) {
			OrdPcoPagoCompra pagoCompra = (OrdPcoPagoCompra) iterator.next();
			lst3.add(pagoCompra.getId().getOrdOcoOrdenDeCompra());
		}
		List lst = lst3;
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID2, request);
		tableFacade.setItems(lst);
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);//, ExportType.PDF);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html2(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
		
		
		double disc = (pagoForm.getOpaTotal() * (1-(pagoForm.getOpaDescuento()/100)));
		pagoForm.setTotalDescuento(disc);
		if(ordenDePago.getOpaEstado().equals("P")){
			request.setAttribute("filtro", 2);
		}else{
			request.setAttribute("filtro", 1);
		}
		if(ordenDePago.getOpaEstado().equals("D")){
			request.setAttribute("estadoD", 1);
		}
		request.setAttribute("form", pagoForm);
		request.setAttribute(Constantes.ACCION_KEY, "/listaOrdenPago");
		return mapping.findForward("dml");
	}
	
	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		OrdenPagoForm pagoForm = (OrdenPagoForm)form;
		//pagoForm.setDis2("disabled=\"disabled\"");
		OrdOpaOrdenDePagoDAO pagoDAO = new OrdOpaOrdenDePagoDAO(getSessionHibernate(request));
		//pagoDAO.getSession().getSessionFactory();
		List lst = pagoDAO.findAllBut("N");
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);//, ExportType.PDF);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
		request.setAttribute("form", pagoForm);
		request.setAttribute(Constantes.ACCION_KEY, "/listaOrdenPago");
        request.setAttribute("filtro", 0);
		return mapping.findForward("lista");
		 
	}
	
	//---- Funcion que genera el html de la tabla del jmesa
	private String html(final TableFacade tableFacade, final HttpServletRequest request) {
		tableFacade.setColumnProperties("opaCodigo","invProProveedor.proCodigo","opaFechaPago",
				"opaTotal","opaDescuento", "audFechaCreacion","opaEstado");
		Table table = tableFacade.getTable();
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.lordp.caption");
		
		Row row = table.getRow();
		Column nombreColumna = row.getColumn("opaCodigo");
		nombreColumna.setTitleKey("tbl.lordp.opaCodigo");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				OrdOpaOrdenDePago pago = (OrdOpaOrdenDePago) item;
				
				HtmlBuilder html = new HtmlBuilder();
				String val = "- " + value + " -";
				String link = tableFacade.getWebContext().getContextPath();
				link += "/orden/listaOrdenPago.do?accion=dml&lordpId="+ pago.getOpaId();
				html.a().href().quote().append(link).quote().close();
				html.append(val);
				html.aEnd();
								
				return html.toString();
			}
		});
		
		nombreColumna = row.getColumn("invProProveedor.proCodigo");
		nombreColumna.setTitleKey("tbl.lordp.invProProveedor.proCodigo");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				OrdOpaOrdenDePago pago = (OrdOpaOrdenDePago) item;
				
				InvProProveedorDAO proveedorDAO = new InvProProveedorDAO(getSessionHibernate(request));
				
				value = value + " - " + pago.getInvProProveedor().getProNombre();
				
				HtmlBuilder html = new HtmlBuilder();
				html.append(value);
				
				return html.toString();
			}
		});
		
		nombreColumna = row.getColumn("opaFechaPago");
		nombreColumna.setTitleKey("tbl.lordp.opaFechaPago");
		//nombreColumna.getCellRenderer().setCellEditor(new DateCellEditor("dd-MMM-yyyy"));
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				OrdOpaOrdenDePago pago = (OrdOpaOrdenDePago) item;
				
				InvProProveedorDAO proveedorDAO = new InvProProveedorDAO(getSessionHibernate(request));
				SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-yyyy");
				//value = value + " - " + pago.getInvProProveedor().getProNombre();
				
				HtmlBuilder html = new HtmlBuilder();
				if(!pago.getOpaEstado().equals("I")){
					html.append(sdf.format(pago.getOpaFechaPago()));
				}else{
					ElapsedTime et = new ElapsedTime();
					GregorianCalendar g1 = new GregorianCalendar();
					g1 = ElapsedTime.dTGC(new Date());
					GregorianCalendar g2 = new GregorianCalendar();
					g2 = ElapsedTime.dTGC(pago.getOpaFechaPago());
					g1.set(Calendar.MILLISECOND, 0);
					g1.set(Calendar.SECOND, 0);
					g1.set(Calendar.MINUTE, 0);
					g1.set(Calendar.HOUR_OF_DAY, 0);
					
					g2.set(Calendar.MILLISECOND, 0);
					g2.set(Calendar.SECOND, 0);
					g2.set(Calendar.MINUTE, 0);
					g2.set(Calendar.HOUR_OF_DAY, 0);
					
					int dias = et.getDays(g1, g2);
					if(ElapsedTime.fechaMenor(new Date(),pago.getOpaFechaPago() )){
						int color = 0xFF0000;
						if(dias > 15){
							html.append(sdf.format(pago.getOpaFechaPago()));
							return html.toString();
						}else{
							color = color + 3584 + (2304*dias);
							html.append("<span style=\"font-weight: bold;color: #"+Integer.toHexString(color)+";\">");
						}
						
					}else{
						html.append("<span style=\"font-weight: bold;color: #FF0000;\">");
					}
					html.append(sdf.format(pago.getOpaFechaPago()));
					html.append("</span>");
				}
				return html.toString();
			}
		});

		nombreColumna = row.getColumn("opaTotal");
		nombreColumna.setTitleKey("tbl.lordp.opaTotal");
		
		nombreColumna = row.getColumn("opaDescuento");
		nombreColumna.setTitleKey("tbl.lordp.opaDescuento");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				value = value + "%";
				return value;
			}
		});

		nombreColumna = row.getColumn("audFechaCreacion");
		nombreColumna.setTitleKey("tbl.lordp.totalDesc");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){
			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				OrdOpaOrdenDePago pago = (OrdOpaOrdenDePago)item;
				double value2 = pago.getOpaTotal() * (1 - (pago.getOpaDescuento()/100));
				String value3 = Redondeo.dRound(value2, 2);
				return value3;
			}
		});
		
		nombreColumna = row.getColumn("opaEstado");
		nombreColumna.setTitleKey("tbl.lordp.opaEstado");
		
		return tableFacade.render();
	}
	
	private String html2(final TableFacade tableFacade, final HttpServletRequest request) {
		tableFacade.setColumnProperties("ocoCodigo","ocoEmision","secAscAsociado.id.ascCodigo",
				"ocoPagado");
		Table table = tableFacade.getTable();
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.ordenPago.caption");
		
		Row row = table.getRow();
		Column nombreColumna = row.getColumn("ocoCodigo");
		nombreColumna.setTitleKey("tbl.ordenPago.ocoCodigo");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				OrdOcoOrdenDeCompra compra = (OrdOcoOrdenDeCompra)item;
				if(compra.getOcoDonacion() == 1){
					value = "D" + value;
				}
				
				HtmlBuilder html = new HtmlBuilder();
				String val = "- " + value + " -";
				return val;
			}
		});
		
		nombreColumna = row.getColumn("secAscAsociado.id.ascCodigo");
		nombreColumna.setTitleKey("tbl.ordenPago.secAscAsociado.id.ascCodigo");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				OrdOcoOrdenDeCompra compra = (OrdOcoOrdenDeCompra) item;
				
				CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
				CtaAscAsociado asociado = asociadoDAO.findById(compra.getAscCodigo());
				
				SecPerPersonaDAO personaDAO = new SecPerPersonaDAO(getSessionHibernate(request));
				SecPerPersona persona = personaDAO.findById(asociado.getSecPerPersona().getPerId());
				
				value = asociado.getAscCodigo() + " - " + persona.getPerPrimerApellido()
				+ ", " + persona.getPerPrimerNombre();
				
				HtmlBuilder html = new HtmlBuilder();
				html.append(value);
				
				TOTAL = TOTAL + compra.getOcoPagado();
								
				return html.toString();
			}
		});
		
		nombreColumna = row.getColumn("ocoPagado");
		nombreColumna.setTitleKey("tbl.ordenPago.ocoPagado");

		nombreColumna = row.getColumn("ocoEmision");
		nombreColumna.setTitleKey("tbl.ordenPago.ocoEmision");
		nombreColumna.getCellRenderer().setCellEditor(new DateCellEditor("dd-MMM-yyyy"));
/*		
		nombreColumna = row.getColumn("ocoMonto");
		nombreColumna.setTitleKey("tbl.ordenPago.ocoMonto");
*/
		return tableFacade.render();
	}
	
	//---- Funcion que genera los exports, el formato que tendran
	 private void export(final TableFacade tableFacade) {
		 tableFacade.setColumnProperties("linNombre","linDescripcion");
		Table table = tableFacade.getTable();
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.linea.caption");
		
		Row row = table.getRow();
		Column nombreColumna = row.getColumn("linNombre");
		nombreColumna.setTitleKey("tbl.linea.linNombre");
		
		nombreColumna = row.getColumn("linDescripcion");
		nombreColumna.setTitleKey("tbl.linea.linDescripcion");

		tableFacade.render();
	}
	 
	public ActionForward regresar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
			return mapping.findForward("redirectEstante");
	}
	
	public List loadP(ActionForm form, HttpServletRequest request){
		OrdenCompraForm compraForm = (OrdenCompraForm)form;
		InvProProveedorDAO proveedorDAO = new InvProProveedorDAO(getSessionHibernate(request));
		OrdRefCuentaReferenciaDAO referenciaDAO = new OrdRefCuentaReferenciaDAO(getSessionHibernate(request));
		String proCodigo = compraForm.getInvProProveedor().getProCodigo();
		InvProProveedor proveedor = (InvProProveedor)proveedorDAO.findByProCodigo(proCodigo).get(0);
		compraForm.setInvProProveedor(proveedor);
		List cref = referenciaDAO.findByProId(proveedor.getProId());
		return cref;
	}
	
	public ActionForward cancelar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		OrdenPagoForm pagoForm = (OrdenPagoForm)form;
		OrdOpaOrdenDePagoDAO ordenPagoDao = new OrdOpaOrdenDePagoDAO(getSessionHibernate(request));
		OrdOpaOrdenDePago ordenPago = ordenPagoDao.findById(pagoForm.getLordpId());
		/*if(ordenPago.getOpaEstado().equals("C")){
			ordenPago.setOpaEstado("I");
			ordenPagoDao.merge(ordenPago);
			Transaction tx = ordenPagoDao.getSession().beginTransaction();
			tx.commit();
			ordenPagoDao.getSession().flush();
			ordenPagoDao.getSession().clear();
		}*/
		return lista(mapping, form, request, response);
	}
	
	public ActionForward fill(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		OrdenPagoForm pagoForm = (OrdenPagoForm)form;
		OrdenPagoForm pagoForm2 = (OrdenPagoForm) request.getSession().getAttribute("pagoForm");
		if(pagoForm2.getIni() == 1){
			pagoForm2.setIni(0);
		}
		pagoForm2.setOpaCodigo(pagoForm.getOpaCodigo());
		pagoForm2.setOpaDescuento(pagoForm.getOpaDescuento());
		pagoForm2.setOpaFechaPago(pagoForm.getOpaFechaPago());
		request.getSession().setAttribute("pagoForm", pagoForm2);
		request.setAttribute("detalleOrden", 1);
		return mapping.findForward("fill");
	}
	
	public ActionForward retornar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		TOTAL = 0;
		OrdenPagoForm pagoForm = (OrdenPagoForm) request.getSession().getAttribute("pagoForm");
		pagoForm.setDis("true");
		OrdOcoOrdenDeCompraDAO compraDAO = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
		ArrayList lst = (ArrayList)request.getSession().getAttribute("ordDet");
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);//, ExportType.PDF);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
		request.setAttribute("form", pagoForm);
		request.getSession().setAttribute("pagoForm", pagoForm);
		request.setAttribute(Constantes.ACCION_KEY, "/ordenPago");
        request.setAttribute("filtro", 1);
		return mapping.findForward("lista");
	}
	
	public ActionForward calcular(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		OrdenPagoForm pagoForm = (OrdenPagoForm)form;
		OrdenPagoForm pagoForm2 = (OrdenPagoForm) request.getSession().getAttribute("pagoForm");
		if(pagoForm2.getIni() == 1){
			pagoForm2.setIni(0);
			pagoForm2.setOpaTotal(0.0);
			pagoForm2.setTotalDescuento(0.0);
			request.getSession().setAttribute("ordDet", new ArrayList());
		}else{
			Double disc = 1 - pagoForm2.getOpaDescuento()/100;
			pagoForm.setOpaTotal(TOTAL);
			pagoForm.setTotalDescuento(TOTAL * disc);
			pagoForm2.setOpaTotal(TOTAL);
			pagoForm2.setTotalDescuento(TOTAL * disc);
		}
		request.getSession().setAttribute("pagoForm", pagoForm2);
		//request.setAttribute("detalleOrden", 1);
		return retornar(mapping, form, request, response);
	}
	
	public ActionForward buscar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		OrdenPagoForm pagoForm = (OrdenPagoForm)form;
		//pagoForm.setDis2("disabled=\"disabled\"");
		OrdOpaOrdenDePagoDAO pagoDAO = new OrdOpaOrdenDePagoDAO(getSessionHibernate(request));
		pagoForm.getInvProProveedor().setProId(null);
		InvProProveedorDAO proveedorDAO = new InvProProveedorDAO(getSessionHibernate(request));
		if(pagoForm.getInvProProveedor() != null && !pagoForm.getInvProProveedor().getProCodigo().equals("")){
			pagoForm.getPagoH().setInvProProveedor((InvProProveedor)proveedorDAO.findByProCodigo(pagoForm.getInvProProveedor().getProCodigo()).get(0));
		}
		List lst = pagoDAO.findByCriteria(pagoForm.getPagoH());
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);//, ExportType.PDF);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
		request.setAttribute("form", pagoForm);
		request.setAttribute(Constantes.ACCION_KEY, "/listaOrdenPago");
        request.setAttribute("filtro", 0);
		return mapping.findForward("lista");
		 
	}
	
	//imprimirReporte
	public ActionForward imprimirReporte(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		OrdenPagoForm pagoForm = (OrdenPagoForm)form;
		ActionForward forward = null;
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
		try{
			Date fechaActual = new Date();
			//ReportesOrdenForm rOrdenForm = (ReportesOrdenForm) form;
			
			response.setHeader("Cache-Control","private");
			response.setHeader("Pragma", "Cache");
			String pathReporte = "";//ruta reporte
			String nombreReporte = "";
			ExportReport exportar = null;
			ReportFile reporte = new ReportFile();
			ServletContext servletContext = getServlet().getServletContext();
			
			nombreReporte = "RepCobroUnProv";
			pathReporte = servletContext
			.getRealPath("/listaReportesOrden/RepCobroUnProv/RepCobroUnProv.jasper");
			if(pagoForm.getLordpId() == 0){
				pagoForm.setLordpId(pagoForm.getOpaCodigo());
			}
			reporte.addParameter("PRO_ID", pagoForm.getInvProProveedor().getProId());
			reporte.addParameter("OPA_ID", pagoForm.getLordpId());
			reporte.setPathJasper(pathReporte);
			exportar = new ExportReport(reporte);//reporte a exportar
			
			//Conexion jdbc normal
			String jdbcDriver = "com.mysql.jdbc.Driver";
			Class.forName(jdbcDriver);
			String url = HibernateSessionFactory.getConfiguration().getProperty("connection.url");
			String user = HibernateSessionFactory.getConfiguration().getProperty("connection.username");
			String pass = HibernateSessionFactory.getConfiguration().getProperty("connection.password");

			Connection con = DriverManager.getConnection(url, user, pass);


			//Connection con = HibernateSessionFactory.getSession().connection();
			//System.out.println(JRPropertiesMap.class.getPackage().getImplementationVersion());
			byte[] repCompilado = exportar.exportReportPDF(con);
			//exportar.exportReportPDF("algunPdf.pdf", con);
			
			response.setContentType("application/pdf");
			response.setContentLength(repCompilado.length);
			response.setHeader("content-Disposition", "attachment;filename="+nombreReporte+"-"+fechaActual.getTime()+".pdf");
			//response.setHeader("content-Disposition", "attachment;filename="+nombreReporte+"-"+rForm.getFechaReporte()+".pdf");
			ServletOutputStream outputStream = response.getOutputStream();
			outputStream.write(repCompilado, 0, repCompilado.length);
			outputStream.flush();
			outputStream.close();
			
		}catch(Exception e){
			e.printStackTrace();
			log.error("Se produjo un error al tratar de generar el reporte...", e);
			System.out.println("Se produjo un error al tratar de generar el reporte...\n");
		}
		return forward;
	}
	
	public ActionForward anular(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		OrdenPagoForm ordenPagoForm = (OrdenPagoForm)form;
		OrdOpaOrdenDePagoDAO ordenDePagoDAO = new OrdOpaOrdenDePagoDAO(getSessionHibernate(request));
		OrdOpaOrdenDePago ordenDePago = ordenDePagoDAO.findById(ordenPagoForm.getLordpId());
		Transaction tx = ordenDePagoDAO.getSession().beginTransaction();
		ordenDePago.setOpaEstado("A");
		ordenDePagoDAO.merge(ordenDePago);
		tx.commit();
		ordenDePagoDAO.getSession().flush();
		ordenDePagoDAO.getSession().clear();
		
		OrdPcoPagoCompraDAO pagoCompraDAO = new OrdPcoPagoCompraDAO(getSessionHibernate(request));
		List lPagoCompra = pagoCompraDAO.findByProperty("id.ordOpaOrdenDePago.opaId", ordenDePago.getOpaId());
		for (Iterator iterator = lPagoCompra.iterator(); iterator.hasNext();) {
			OrdPcoPagoCompra pagoCompra = (OrdPcoPagoCompra) iterator.next();
			OrdOcoOrdenDeCompraDAO ordenDeCompraDAO = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
			OrdOcoOrdenDeCompra ordenDeCompra = ordenDeCompraDAO.findById(pagoCompra.getId().getOrdOcoOrdenDeCompra().getOcoId());
			/*if(ordenDeCompra.getOcoSaldo()== 0){
				ordenDeCompra.setOcoEstado("R");
			}else{
				ordenDeCompra.setOcoEstado("D");
			}*/
			if(ordenDeCompra.getOcoEstado().equals("F")){
				ordenDeCompra.setOcoEstado("C");
			}
			if(ordenDeCompra.getOcoEstado().equals("G")){
				ordenDeCompra.setOcoEstado("P");
			}
			
			ordenDeCompraDAO.merge(ordenDeCompra);
			tx.commit();
			ordenDeCompraDAO.getSession().flush();
			ordenDeCompraDAO.getSession().clear();

			pagoCompraDAO.delete(pagoCompra);
			tx.commit();
			pagoCompraDAO.getSession().flush();
			pagoCompraDAO.getSession().clear();
		}
		
		
		return lista(mapping, form, request, response);
	}
	
	public ActionForward cargarHtml(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		OrdenPagoForm pagoForm = (OrdenPagoForm)form;
		String texto = "";
		HtmlBuilder htmlBuilder = new HtmlBuilder();
		htmlBuilder.table(0).border("0").close().tr(0).close();
		if(pagoForm.getOpaTipoPago().equals("C")){
			CtrBanBancoDAO bancoDAO = new CtrBanBancoDAO(getSessionHibernate(request));
			List lban = bancoDAO.findAll();
			htmlBuilder.td(0).close().append("<label>Banco</label>").tdEnd();
			htmlBuilder.td(0).close().select().name("banId").id("banId");
			htmlBuilder.onchange("loadRepo();");
			htmlBuilder.close();
			int x = 0;
			int banId = 0;
			for (Iterator iterator = lban.iterator(); iterator.hasNext();) {
				CtrBanBanco banco = (CtrBanBanco) iterator.next();
				if(x<1){
					banId = banco.getBanId();
					x++;
				}
				htmlBuilder.option().value(banco.getBanId().toString()).close().append(banco.getBanNombre()).optionEnd();
			}
			htmlBuilder.selectEnd();
			htmlBuilder.tdEnd();
			//Select del repositorio
			CtrBanBanco banco = bancoDAO.findById(banId);
			CtrRckRepositorioChequesDAO rckDao = new CtrRckRepositorioChequesDAO(getSessionHibernate(request));
			SecIseInicioSesionDAO sesionDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
			SecIseInicioSesion sesion = sesionDAO.findById(pagoForm.getUsuarioConectado().getNombreUsuario());
			List rckList = rckDao.findBySyB(banId, sesion.getSecPerPersona().getSecSucSucursal().getSucId());
			htmlBuilder.td(0).close().append("<label>Repositorio</label>").tdEnd();
			htmlBuilder.td(0).close();
			htmlBuilder.div().id("repositorios").close();
			htmlBuilder.select().name("rckId").id("rckId");
			htmlBuilder.onchange("loadCorrelativo();");
			htmlBuilder.close();
			x = 0;
			Integer correlativo = 0;
			for (Iterator iterator = rckList.iterator(); iterator.hasNext();) {
				CtrRckRepositorioCheques rck = (CtrRckRepositorioCheques) iterator.next();
				if(x<1){
					correlativo = rck.getRckCorrActual();
					x++;
				}
				htmlBuilder.option().value(rck.getRckId().toString()).close().append(rck.getRckNombre()).optionEnd();
			}
			htmlBuilder.selectEnd();
			htmlBuilder.tdEnd().trEnd(0);
			
			htmlBuilder.tr(0);
			htmlBuilder.td(0).close().append("<label>Numero Cheque</label>").tdEnd();
			htmlBuilder.td(0).close();
			htmlBuilder.div().id("correlativos").close();
				htmlBuilder.input().type("text")
					.name("chequeNum").id("chequeNumId").readonly();
					if(correlativo == null || correlativo <= 0){
						htmlBuilder.value("No hay repositorio activo para este banco").size("25");
					}else{
						htmlBuilder.value(correlativo.toString()).size("15");
					}
				htmlBuilder.close();
			htmlBuilder.divEnd();
			htmlBuilder.tdEnd();
			htmlBuilder.trEnd(0).tr(0).close();
		}
		if(pagoForm.getOpaTipoPago().equals("N")){
			double disponible=0.0;
			htmlBuilder.td(0).close().append("<label>Cuenta Bancaria:</label>").tdEnd();
			htmlBuilder.td(0).colspan("2");
			InvPcbProveedorCuentaBancariaDAO cuentaBancariaDAO = new InvPcbProveedorCuentaBancariaDAO(getSessionHibernate(request));
			
			int c = 0;
			InvProProveedorDAO proveedorDAO = new InvProProveedorDAO(getSessionHibernate(request));
			int tam = proveedorDAO.findById(pagoForm.getProveedorId()).getInvPcbProveedorCuentaBancarias().size(); 
			if(tam >0){
				htmlBuilder.close().select().name("numCuentaBanc").close();
				for (Iterator iterator = proveedorDAO.findById(pagoForm.getProveedorId()).getInvPcbProveedorCuentaBancarias().iterator(); iterator.hasNext();) {
					InvPcbProveedorCuentaBancaria cuentaBancaria = (InvPcbProveedorCuentaBancaria) iterator.next();
					
					htmlBuilder.option().value(cuentaBancaria.getId().getPcbNumeroCuenta()).close();
					htmlBuilder.append(cuentaBancaria.getId().getCtrBanBanco().getBanNombre() + " - " 
							+cuentaBancaria.getCtaTcuTipoCuenta().getTcuNombre() + " - "
							+cuentaBancaria.getId().getPcbNumeroCuenta()).optionEnd();
				}
				htmlBuilder.selectEnd().tdEnd();
			}else{
				htmlBuilder.append(" style=\"color:#E95316;\"").close().append("<label>No hay cuentas que mostrar</label>").tdEnd();
			}
			
		}
		htmlBuilder.trEnd(0).tableEnd(1);
		texto = htmlBuilder.toString();
		try{
			response.getWriter().write(texto);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (RuntimeException e) {
			log.error("Error runtime", e);
		} catch (IOException e) {
			log.error(e);
		}
		return null;
	}
	
	public ActionForward realizarPago(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		OrdenPagoForm ordenPagoForm = (OrdenPagoForm)form;
		OrdOpaOrdenDePagoDAO ordenDePagoDAO = new OrdOpaOrdenDePagoDAO(getSessionHibernate(request));
		OrdOpaOrdenDePago ordenDePago = ordenDePagoDAO.findById(ordenPagoForm.getLordpId());
		Transaction tx = ordenDePagoDAO.getSession().beginTransaction();
		if(ordenPagoForm.getOpaTipoPago().equals("-1")){
			mensajes("error.ordenPago.seleccion", request);
			return dml(mapping, ordenPagoForm, request, response);
		}
		if(ordenPagoForm.getOpaTipoPago().equals("E")){//Efectivo
			ordenDePago.setOpaNota("Efectivo");
		}
		CtrRckRepositorioChequesDAO rckDao = new CtrRckRepositorioChequesDAO(getSessionHibernate(request));
		CtrRckRepositorioCheques rck = new CtrRckRepositorioCheques();
		
		if(ordenPagoForm.getOpaTipoPago().equals("C")){//Cheque
			CtrBanBancoDAO bancoDAO = new CtrBanBancoDAO(getSessionHibernate(request));
			CtrBanBanco banco = bancoDAO.findById(ordenPagoForm.getBanId());
			
			SecIseInicioSesionDAO sesionDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
			SecIseInicioSesion sesion = sesionDAO.findById(ordenPagoForm.getUsuarioConectado().getNombreUsuario());
			rck = rckDao.findById(ordenPagoForm.getRckId());
			
			ordenDePago.setOpaNota(banco.getBanNombre() 
					+ " Cheque #: " + rck.getRckCorrActual());
		}
		if(ordenPagoForm.getOpaTipoPago().equals("N")){//Pago Electrónico
			InvPcbProveedorCuentaBancariaDAO pcbDAO = new InvPcbProveedorCuentaBancariaDAO(getSessionHibernate(request));
			InvPcbProveedorCuentaBancaria pcb = (InvPcbProveedorCuentaBancaria) pcbDAO.findByProperty("id.pcbNumeroCuenta", ordenPagoForm.getNumCuentaBanc()).get(0);
			ordenDePago.setOpaNota("Se realizo pago por Net Banking " +
					"Banco: "+ pcb.getId().getCtrBanBanco().getBanNombre() +  
					" Cuenta #: " + pcb.getId().getPcbNumeroCuenta());
			
			CtaStbSolTransBancDAO stbDao = new CtaStbSolTransBancDAO(getSessionHibernate(request));
			CtaStbSolTransBanc stb = new CtaStbSolTransBanc();
			stb.setCtaCahCuentaAhorro(null);
			stb.setCtaCbaCuentaBancaria(null);
			stb.setInvPcbProveedorCuentaBancaria(pcb);
			stb.setStbFechaSol(new Date());
			stb.setStbMonto(ordenDePago.getOpaTotal()-((ordenDePago.getOpaDescuento()/100)*ordenDePago.getOpaTotal()));
			stb.setOpaId(ordenDePago.getOpaId());
			SecIseInicioSesionDAO sesionDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
			SecIseInicioSesion sesion = sesionDAO.findById(ordenPagoForm.getUsuarioConectado().getNombreUsuario());
			/*String nombrePersona = sesion.getSecPerPersona().getPerPrimerNombre() + " " + sesion.getSecPerPersona().getPerSegundoNombre() +
				" " + sesion.getSecPerPersona().getPerPrimerApellido()+ " " + sesion.getSecPerPersona().getPerSegundoApellido();*/
			//Aqui se pondra quien realiza la transaccion en este caso
			stb.setStbNombreAsociado(pcb.getId().getInvProProveedor().getProNombre()/*sesion.getIseNombreUsuario()*/);
			stb.setStbRazon("Deposito pago Proveedores electronico");
			stb.setStbTipoAhorro(pcb.getCtaTcuTipoCuenta().getTcuNombre());
			//Setear estado N de no efectuada
			stb.setStbEstado("N");
			stbDao.save(stb);
			Transaction txStb = stbDao.getSession().beginTransaction();
			txStb.commit();
			stbDao.getSession().flush();
			stbDao.getSession().clear();
			
			ordenDePago.setOpaTipoPago(ordenPagoForm.getOpaTipoPago());
			//D SIGNIFICA QUE ESPERA PAGO ELECTRONICO
			ordenDePago.setOpaEstado("D");
			ordenDePagoDAO.merge(ordenDePago);
			tx.commit();
		}else{
			ordenDePago.setOpaTipoPago(ordenPagoForm.getOpaTipoPago());
			ordenDePago.setOpaEstado("P");
			ordenDePagoDAO.merge(ordenDePago);
			tx.commit();
			
			//Setear las ordenes de compra pertenecientes a pagadas al proveedor
			OrdOcoOrdenDeCompraDAO compraDAO = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
			OrdPcoPagoCompraDAO pagoCompraDAO = new OrdPcoPagoCompraDAO(getSessionHibernate(request));
			List pagoCompraList = pagoCompraDAO.findByPagoId(ordenDePago);
			for (Iterator iterator = pagoCompraList.iterator(); iterator.hasNext();) {
				OrdPcoPagoCompra pco = (OrdPcoPagoCompra) iterator.next();
				OrdOcoOrdenDeCompra compra = compraDAO.findById(pco.getId().getOrdOcoOrdenDeCompra().getOcoId());
				if(compra.getOcoEstado().equals("F")){//ya lo cambie Ida
					compra.setOcoEstado("D");
				}
				if(compra.getOcoEstado().equals("G")){
					compra.setOcoEstado("S");
				}
				compraDAO.merge(compra);
			}
			Transaction txCompra = compraDAO.getSession().beginTransaction();
			txCompra.commit();
			
			enviarOrdenPagoAContabilidad(ordenDePago,ordenPagoForm.getUsuarioConectado().getNombreUsuario(),rck,request);
			ordenDePagoDAO.getSession().flush();
			ordenDePagoDAO.getSession().clear();
		}
		
		if(ordenPagoForm.getOpaTipoPago().equals("C")){
			rck.setRckCorrActual(rck.getRckCorrActual() + 1);
			rckDao.merge(rck);
			tx.commit();
			rckDao.getSession().flush();
			rckDao.getSession().clear();
		}
		
		if(!ordenPagoForm.getOpaTipoPago().equals("N")){
			mensajes("msg.ordenPago.exito", request);
		}else{
			mensajes("msg.ordenPago.electronico", request);
		}
		return lista(mapping, form, request, response);
	}
	
	private void enviarOrdenPagoAContabilidad(OrdOpaOrdenDePago ordenDePago,
			String nombreUsuario, CtrRckRepositorioCheques rck, HttpServletRequest request) {
		//Total de la factura sin iva
		String conOSinDescuento = "0;";
		String parametros = "4;"
			+ ordenDePago.getOpaEstado()+";"
			+ conOSinDescuento
			+ ordenDePago.getInvProProveedor().getInvTprTipoProveedor().getTprId().toString() + ";"
			+ ordenDePago.getInvProProveedor().getProId() + ";";
		/*if(ordenDePago.getOpaTipoPago().equals("N")){
			parametros += "E";
		}else{
			parametros += ordenDePago.getOpaTipoPago();
		}*/
		parametros += ordenDePago.getOpaTipoPago();
		
		CtaChkChequePrestamoDAO chequePrestamoDAO = new CtaChkChequePrestamoDAO(getSessionHibernate(request));
		CtaChkChequePrestamo chequePrestamo = null;
			
		Integer numCheque = 0,tpaId=1;
		if(ordenDePago.getOpaTipoPago().equals("C")){//Cheque
			numCheque = rck.getRckCorrActual();
		
			chequePrestamo = new CtaChkChequePrestamo();
			chequePrestamo.setChkCorrelativoCheque(numCheque);
			chequePrestamo.setChkEmitidoA(ordenDePago.getInvProProveedor().getProNombre());
			chequePrestamo.setChkFecha(new Date());
			SecIseInicioSesionDAO sesionDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
			SecIseInicioSesion sesion = sesionDAO.findById(nombreUsuario);
			chequePrestamo.setChkLugar(sesion.getSecPerPersona().getSecSucSucursal().getSucDireccion());
			
			Double montoE = new Double(ordenDePago.getOpaTotal()-((ordenDePago.getOpaDescuento()/100)*ordenDePago.getOpaTotal()));
			chequePrestamo.setChkMontoEmitido(montoE.floatValue()/*ordenDePago.getOpaTotal().floatValue()*/);
			
			chequePrestamo.setChkRazon("Pago a Proveedor");
			chequePrestamo.setCtaPrePrestamo(null);
			chequePrestamo.setCtrBanBanco(rck.getCtrCckControlCheques().getCtrBanBanco());
			chequePrestamoDAO.save(chequePrestamo);
			Transaction tx = chequePrestamoDAO.getSession().beginTransaction();
			tx.commit();
			chequePrestamoDAO.getSession().flush();
			chequePrestamoDAO.getSession().clear();
			tpaId=2;
		}else{
			chequePrestamo = null;
		}

		Double montoDesc =ordenDePago.getOpaTotal()-((ordenDePago.getOpaDescuento()/100)*ordenDePago.getOpaTotal());
		PartidaAutomatica partidaAutomatica =  new PartidaAutomatica();
		partidaAutomatica.crearPartidaAutomaticaOrdenPago(
				parametros,
				(ordenDePago.getOpaTotal()),montoDesc,
				nombreUsuario, tpaId, 0, chequePrestamo,0,request);//El tpaId depende de si es efectivo(tpaId=1),cheque(tpaId=2),pago electronico(tpaId=1)
		
		//Descuento
		if(ordenDePago.getOpaDescuento() > 0){
			conOSinDescuento = "1;";
			String parametros2 = "4;"
				+ ordenDePago.getOpaEstado()+";"
				+ conOSinDescuento
				+ ordenDePago.getInvProProveedor().getInvTprTipoProveedor().getTprId().toString() + ";"
				+ ordenDePago.getInvProProveedor().getProId() + ";";
			
			/*if(ordenDePago.getOpaTipoPago().equals("N")){
				parametros2 += "E";
			}else{
				parametros2 += ordenDePago.getOpaTipoPago();
			}*/
			
			parametros2 += ordenDePago.getOpaTipoPago();
			partidaAutomatica.crearPartidaAutomaticaOrdenPago(
					parametros2,0.00,
					(ordenDePago.getOpaTotal()*(ordenDePago.getOpaDescuento()/100)),
					nombreUsuario, tpaId,null,null,null,request);
		}
	}

	public void mensajes(String msg, HttpServletRequest request){
		ActionErrors errors = new ActionErrors();
		errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(msg));
		saveMessages(request, errors);
	}
	
	public ActionForward cargarRepositorio(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		OrdenPagoForm pagoForm = (OrdenPagoForm)form;
		String texto = "";
		CtrBanBancoDAO bancoDAO = new CtrBanBancoDAO(getSessionHibernate(request));
		HtmlBuilder htmlBuilder = new HtmlBuilder();
		CtrBanBanco banco = bancoDAO.findById(pagoForm.getBanId());
		CtrRckRepositorioChequesDAO rckDao = new CtrRckRepositorioChequesDAO(getSessionHibernate(request));
		SecIseInicioSesionDAO sesionDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
		SecIseInicioSesion sesion = sesionDAO.findById(pagoForm.getUsuarioConectado().getNombreUsuario());
		List rckList = rckDao.findBySyB(banco.getBanId(), sesion.getSecPerPersona().getSecSucSucursal().getSucId());
		htmlBuilder.td(0).close();
		htmlBuilder.div().id("repositorios").close();
		htmlBuilder.select().name("rckId").id("rckId");
		htmlBuilder.onchange("loadCorrelativo();");
		htmlBuilder.close();
		int x = 0;
		Integer correlativo = 0;
		for (Iterator iterator = rckList.iterator(); iterator.hasNext();) {
			CtrRckRepositorioCheques rck = (CtrRckRepositorioCheques) iterator.next();
			if(x<1){
				correlativo = rck.getRckCorrActual();
				x++;
			}
			htmlBuilder.option().value(rck.getRckId().toString()).close().append(rck.getRckNombre()).optionEnd();
		}
		htmlBuilder.selectEnd();
		texto = htmlBuilder.toString();
		try{
			response.getWriter().write(texto);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (RuntimeException e) {
			log.error("Error runtime", e);
		} catch (IOException e) {
			log.error(e);
		}
		return null;
	}
	
	public ActionForward cargarCorrelativo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		OrdenPagoForm pagoForm = (OrdenPagoForm)form;
		CtrBanBancoDAO bancoDAO = new CtrBanBancoDAO(getSessionHibernate(request));
		CtrBanBanco banco = bancoDAO.findById(pagoForm.getBanId());
		CtrRckRepositorioChequesDAO rckDao = new CtrRckRepositorioChequesDAO(getSessionHibernate(request));
		SecIseInicioSesionDAO sesionDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
		SecIseInicioSesion sesion = sesionDAO.findById(pagoForm.getUsuarioConectado().getNombreUsuario());
		if(pagoForm.getRckId() == null){
			List rckList = rckDao.findBySyB(banco.getBanId(), sesion.getSecPerPersona().getSecSucSucursal().getSucId());
			if(rckList.size()>0){
				CtrRckRepositorioCheques rck = (CtrRckRepositorioCheques) rckList.get(0); 
				pagoForm.setRckId(rck.getRckId());
			}
		}
		String texto = "";
		HtmlBuilder htmlBuilder = new HtmlBuilder();
		htmlBuilder.input().type("text").readonly().styleClass("exclude")
			.name("chequeNum").id("chequeNumId");
		if(pagoForm.getRckId() == null){
			htmlBuilder.value("No hay cheques disponibles").size("25");
		}else{
			CtrRckRepositorioCheques rck = rckDao.findById(pagoForm.getRckId());
			htmlBuilder.value(rck.getRckCorrActual().toString()).size("15");
		}
		htmlBuilder.close();
		texto = htmlBuilder.toString();
		try{
			response.getWriter().write(texto);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (RuntimeException e) {
			log.error("Error runtime", e);
		} catch (IOException e) {
			log.error(e);
		}
		return null;
	}
	
	public ActionForward quedan(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response){
		OrdenPagoForm ordenForm = (OrdenPagoForm) form;
		OrdOpaOrdenDePagoDAO ordenPagoDAO = new OrdOpaOrdenDePagoDAO(getSessionHibernate(request));
		OrdOpaOrdenDePago ordenPago = (OrdOpaOrdenDePago)ordenPagoDAO.findById(ordenForm.getLordpId());
		InvProProveedorDAO proveedorDAO = new InvProProveedorDAO(getSessionHibernate(request));
		InvProProveedor proveedor = proveedorDAO.findById(ordenPago.getInvProProveedor().getProId());
		//vamos imprimir el reporte
		try{
			Date fechaActual = new Date();
			response.setHeader("Cache-Control", "private");
			response.setHeader("Pragma", "Cache");
			String pathReporte = "";//ruta del reporte
			String nombreReporte = "";
			ExportReport exportar = null;
			ReportFile reporte = new ReportFile();
			ServletContext servletContext = getServlet().getServletContext();
			int cod = ordenForm.getLordpId();
			String pro = proveedor.getProNombre();
			nombreReporte = "Quedan";
			pathReporte = servletContext.getRealPath("/listaReportesOrden/RepCobroUnProv/Quedan.jasper");
			reporte.addParameter("opId", cod);
			reporte.addParameter("proNombre", pro);
			reporte.setPathJasper(pathReporte);
			exportar = new ExportReport(reporte);//Este es el reporte que se exportara
			
			//conexion jdbc con la base de datos
			String jdbcDriver = "com.mysql.jdbc.Driver";
			Class.forName(jdbcDriver);
			String url = HibernateSessionFactory.getConfiguration().getProperty("connection.url");
			String user = HibernateSessionFactory.getConfiguration().getProperty("connection.username");
			String pass = HibernateSessionFactory.getConfiguration().getProperty("connection.password");
			
			Connection con = DriverManager.getConnection(url,user,pass);
			
			byte [] repCompilado = exportar.exportReportPDF(con);
			
			response.setContentType("application/pdf");
			response.setContentLength(repCompilado.length);
			response.setHeader("content-Disposition", "attachment;filename="+nombreReporte+"-"+fechaActual.getTime()+".pdf");
			ServletOutputStream outPutStream = response.getOutputStream();
			outPutStream.write(repCompilado, 0, repCompilado.length);
			outPutStream.flush();
			outPutStream.close();
		}catch(Exception e){
			e.printStackTrace();
			log.error("Se produjo un error al tratar de generar el reporte...", e);
			System.out.println("Se produjo un error al tratar de generar el reporte...\n");
		}
		return null;
	}
	
	protected Map getKeyMethodMap() {
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.lordp.lista", "lista");
		map.put("cmd.lordp.buscar", "buscar");
		map.put("cmd.lordp.cancelar", "cancelar");
		map.put("cmd.ordcom.cancelar", "cancelar");
		map.put("cmd.lordp.editar", "dml");
		map.put("cmd.lordp.anular", "anular");
		map.put("cmd.lordp.imprimirReporte", "imprimirReporte");
		map.put("cmd.ordpago.cargarHtml", "cargarHtml");
		map.put("cmd.lordp.realizarPago", "realizarPago");
		map.put("cmd.ordpago.cargarRepositorio", "cargarRepositorio");
		map.put("cmd.ordpago.cargarCorrelativo", "cargarCorrelativo");
		map.put("cmd.lordp.quedan", "quedan");
		return map;
	}
}