/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.orden.struts.action;

import java.io.IOException;
import java.sql.Connection;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletContext;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.hibernate.Transaction;
import org.hibernate.exception.ConstraintViolationException;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeImpl;
import org.jmesa.limit.ExportType;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.BasicCellEditor;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.editor.DateCellEditor;
import org.jmesa.view.html.HtmlBuilder;

import com.cetia.sicaco.hibernate.CtaAscAsociado;
import com.cetia.sicaco.hibernate.CtaAscAsociadoDAO;
import com.cetia.sicaco.hibernate.HibernateSessionFactory;
import com.cetia.sicaco.hibernate.InvProProveedor;
import com.cetia.sicaco.hibernate.InvProProveedorDAO;
import com.cetia.sicaco.hibernate.OrdOcoOrdenDeCompra;
import com.cetia.sicaco.hibernate.OrdOcoOrdenDeCompraDAO;
import com.cetia.sicaco.hibernate.OrdOpaOrdenDePago;
import com.cetia.sicaco.hibernate.OrdOpaOrdenDePagoDAO;
import com.cetia.sicaco.hibernate.OrdPcoPagoCompra;
import com.cetia.sicaco.hibernate.OrdPcoPagoCompraDAO;
import com.cetia.sicaco.hibernate.OrdPcoPagoCompraId;
import com.cetia.sicaco.hibernate.OrdRefCuentaReferencia;
import com.cetia.sicaco.hibernate.OrdRefCuentaReferenciaDAO;
import com.cetia.sicaco.hibernate.SecPerPersona;
import com.cetia.sicaco.hibernate.SecPerPersonaDAO;
import com.cetia.sicaco.orden.struts.form.OrdenCompraForm;
import com.cetia.sicaco.orden.struts.form.OrdenPagoForm;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;
import com.mad.utilidades.ElapsedTime;
import com.mad.utilidades.ExportReport;
import com.mad.utilidades.Format;
import com.mad.utilidades.Redondeo;
import com.mad.utilidades.ReportFile;

/** 
 * MyEclipse Struts
 * Creation date: 05-07-2008
 * 
 * XDoclet definition:
 * @struts.action path="/ordenPago" name="ordenPagoForm" input="redirectInvalidData" parameter="accion" scope="request" validate="true"
 * @struts.action-forward name="lista" path="pagina-lista.orden.pago"
 * @struts.action-forward name="dml" path="pagina-dml.orden.pago"
 */
public class OrdenPagoAction extends DMLAction {
	/*
	 * Generated Methods
	 */

	public static final String TABLA_ID = "ordOcoOrdenDeCompra";
	
	public double TOTAL;
	public int pos = 0;
	public int TAM_LISTA_DESEMBOLSO = 0;
	public int[] POSICIONES;
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */

	public ActionForward dml(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		OrdenPagoForm pagoForm = (OrdenPagoForm)form;
		
		eliminaOrdenesNoGuardadas(request);
		
		request.getSession().setAttribute("opaCod", 0);
		pagoForm.setOpaFechaPago(new Date());
		pagoForm.setDis("false");
		request.setAttribute("form", pagoForm);
		request.setAttribute(Constantes.ACCION_KEY, "/ordenPago");
        request.setAttribute("filtro", 0);
		return mapping.findForward("dml");
	}
	
	private void eliminaOrdenesNoGuardadas(HttpServletRequest request) {
		OrdPcoPagoCompraDAO pcoDao = new OrdPcoPagoCompraDAO(getSessionHibernate(request));
		OrdOpaOrdenDePagoDAO pagoDAO = new OrdOpaOrdenDePagoDAO(getSessionHibernate(request));
		ArrayList<Integer> pagoIds = new ArrayList<Integer>();
		
		List pcos = pcoDao.findByProperty("id.ordOpaOrdenDePago.opaEstado", "N");
		for (Iterator iterator = pcos.iterator(); iterator.hasNext();) {
			OrdPcoPagoCompra pco = (OrdPcoPagoCompra) iterator.next();
			if(ElapsedTime.fechaMenor(pco.getId().getOrdOpaOrdenDePago().getAudFechaCreacion(), ElapsedTime.obtenerFecha(new Date(), -1))){
				if(pagoIds.size()<1 || !pagoIds.contains(pco.getId().getOrdOpaOrdenDePago().getOpaId())){
					pagoIds.add(pco.getId().getOrdOpaOrdenDePago().getOpaId());
				}
				pcoDao.delete(pco);
				Transaction tx = pcoDao.getSession().beginTransaction();
				tx.commit();
			}
		}
		for (Iterator iterator = pagoIds.iterator(); iterator.hasNext();) {
			Integer pagoId = (Integer) iterator.next();
			OrdOpaOrdenDePago pago = pagoDAO.findById(pagoId);
			pagoDAO.delete(pago);
			Transaction tx2 = pagoDAO.getSession().beginTransaction();
			tx2.commit();
			pagoDAO.getSession().flush();
			pagoDAO.getSession().clear();
		}
	}

	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		OrdenCompraForm compraForm = (OrdenCompraForm)form;
		TOTAL = 0;
		pos = 0;
		if(compraForm.getIni() == 1){
			request.getSession().setAttribute("ordDet", new ArrayList());	
		}
		compraForm.setDis("false");
		OrdOcoOrdenDeCompraDAO compraDAO = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
		List lst = compraDAO.findAllD(compraForm.getDon(), -1);
		List lst2 = null;
		POSICIONES = compraForm.getPosiciones();
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(null);
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);//, ExportType.PDF);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html2(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
            //request.setAttribute("_lista2", html);
        }
        //----- Variables de configuracion
		request.setAttribute("form", compraForm);
		request.setAttribute(Constantes.ACCION_KEY, "/ordenCompra");
        request.setAttribute("filtro", 0);
        if((Integer) request.getSession().getAttribute("cuenta") == 1){
        	List cref = loadP(compraForm, request);
        	request.setAttribute("cuentas", cref);
			request.setAttribute("cuenta", 1);
		}else{
			request.setAttribute("cuenta", 0);
		}
        if((Integer) request.getSession().getAttribute("loadAs") == 1){
        	loadA(compraForm, request);
			request.setAttribute("loadAsoc", 1);
		}else{
			request.setAttribute("loadAsoc", 0);
		}
		return mapping.findForward("lista");
		 
	}
	
	//---- Funcion que genera el html de la tabla del jmesa
	private String html(final TableFacade tableFacade, final HttpServletRequest request) {
		tableFacade.setColumnProperties("ocoCodigo","ocoEmision","secAscAsociado.id.ascCodigo","ocoMonto",
				"ocoPagado");
		Table table = tableFacade.getTable();
		//---- Titulo de la tabla
		//table.setCaptionKey("tbl.ordenCompra.caption");
		
		Row row = table.getRow();
		Column nombreColumna = row.getColumn("ocoCodigo");
		nombreColumna.setTitleKey("tbl.ordenPago.ocoCodigo");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				OrdOcoOrdenDeCompra compra = (OrdOcoOrdenDeCompra)item;
				if(compra.getOcoDonacion() == 1){
					value = "D" + value;
				}
				HtmlBuilder html = new HtmlBuilder();
				String val = "- " + value + " -";
								
				return val;//html.toString();
			}
		});
		
		nombreColumna = row.getColumn("secAscAsociado.id.ascCodigo");
		nombreColumna.setTitleKey("tbl.ordenPago.secAscAsociado.id.ascCodigo");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				OrdOcoOrdenDeCompra compra = (OrdOcoOrdenDeCompra) item;
				
				CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
				CtaAscAsociado asociado = asociadoDAO.findById(compra.getAscCodigo());
				
				SecPerPersonaDAO personaDAO = new SecPerPersonaDAO(getSessionHibernate(request));
				SecPerPersona persona = personaDAO.findById(asociado.getSecPerPersona().getPerId());
				
				value = asociado.getAscCodigo() + " - " + persona.getPerPrimerApellido()
				+ ", " + persona.getPerPrimerNombre();
				
				HtmlBuilder html = new HtmlBuilder();
				html.append(value);
				
				TOTAL = TOTAL + compra.getOcoPagado();
								
				return html.toString();
			}
		});
		
		nombreColumna = row.getColumn("ocoPagado");
		nombreColumna.setTitleKey("tbl.ordenPago.ocoPagado");
		nombreColumna = row.getColumn("ocoEmision");
		nombreColumna.setTitleKey("tbl.ordenPago.ocoEmision");
		nombreColumna.getCellRenderer().setCellEditor(new DateCellEditor("dd-MMM-yyyy"));
		
		nombreColumna = row.getColumn("ocoMonto");
		nombreColumna.setTitleKey("tbl.ordenPago.ocoMonto");

		return tableFacade.render();
	}
	
	//---- Funcion que genera los exports, el formato que tendran
	 private void export(final TableFacade tableFacade) {
		 tableFacade.setColumnProperties("linNombre","linDescripcion");
		Table table = tableFacade.getTable();
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.linea.caption");
		
		Row row = table.getRow();
		Column nombreColumna = row.getColumn("linNombre");
		nombreColumna.setTitleKey("tbl.linea.linNombre");
		
		nombreColumna = row.getColumn("linDescripcion");
		nombreColumna.setTitleKey("tbl.linea.linDescripcion");

		tableFacade.render();
	}
	 
	 public ActionForward edit(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {
		 OrdenCompraForm compraForm = (OrdenCompraForm)form;
		 OrdOcoOrdenDeCompraDAO compraDAO = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
		 if(compraForm.getDon() == 1){
			 compraForm.setOcoDonacion(1);
		 }else compraForm.setOcoDonacion(0);
		 compraForm.setCompraH(compraDAO.findById(compraForm.getOcoId()));
		 compraForm.setDis("true");
		 List cref = loadP(compraForm, request);
		 if(cref.isEmpty()){
			 request.setAttribute("cuenta", 0);
		 }else{
			 request.setAttribute("cuenta", 1);
		 }
		 loadA(compraForm, request);
     	 request.setAttribute("cuentas", cref);
		 request.setAttribute("form", compraForm);
		 request.setAttribute("filtro", 1);
		 request.setAttribute("loadAsoc", 1);
		 request.setAttribute(Constantes.ACCION_KEY, "/ordenCompra");
		 return mapping.findForward("dml");
	 }
	 
	 public ActionForward salvar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		OrdenCompraForm compraForm = (OrdenCompraForm)form;
		OrdOcoOrdenDeCompraDAO compraDAO = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
		Transaction tx = compraDAO.getSession().beginTransaction();
		try {
			OrdRefCuentaReferenciaDAO cuentaReferenciaDAO = new OrdRefCuentaReferenciaDAO(getSessionHibernate(request));
			compraForm.setOrdRefCuentaReferencia(cuentaReferenciaDAO.findById(compraForm.getOrdRefCuentaReferencia().getRefId()));
			InvProProveedorDAO proveedorDAO = new InvProProveedorDAO(getSessionHibernate(request));
			compraForm.setInvProProveedor(proveedorDAO.findById(compraForm.getInvProProveedor().getProId()));
		//	SecAscAsociadoDAO asociadoDAO = new SecAscAsociadoDAO(getSessionHibernate(request));
			//compraForm.setSecAscAsociado( (SecAscAsociado) asociadoDAO.findByAscCodigo(compraForm.getAscCodigo()).get(0));
			compraForm.setOcoDonacion(compraForm.getDon());
			compraDAO.merge(compraForm.getCompraH());
			tx.commit();
		} catch (Exception e) {
			// TODO: handle exception
			tx.rollback();
			e.printStackTrace();
		}finally{
			compraDAO.getSession().flush();
			compraDAO.getSession().clear();
			
		}
		return lista(mapping,form,request,response);
	}
	 
	 public ActionForward anular(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {
		 	OrdenCompraForm compraForm = (OrdenCompraForm)form;
			OrdOcoOrdenDeCompraDAO compraDAO = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
			Transaction tx = compraDAO.getSession().beginTransaction();
			try {
				OrdRefCuentaReferenciaDAO cuentaReferenciaDAO = new OrdRefCuentaReferenciaDAO(getSessionHibernate(request));
				compraForm.setOrdRefCuentaReferencia(cuentaReferenciaDAO.findById(compraForm.getOrdRefCuentaReferencia().getRefId()));
				InvProProveedorDAO proveedorDAO = new InvProProveedorDAO(getSessionHibernate(request));
				compraForm.setInvProProveedor(proveedorDAO.findById(compraForm.getInvProProveedor().getProId()));
				//SecAscAsociadoDAO asociadoDAO = new SecAscAsociadoDAO(getSessionHibernate(request));
				//compraForm.setSecAscAsociado( (SecAscAsociado) asociadoDAO.findByAscCodigo(compraForm.getAscCodigo()).get(0));
				compraForm.setOcoDonacion(compraForm.getDon());
				compraForm.setCompraH(compraDAO.findById(compraForm.getOcoId()));
				
				if(compraForm.getCompraH().getOcoEstado().equals("F")){
					compraForm.getCompraH().setOcoEstado("C");
				}
				if(compraForm.getCompraH().getOcoEstado().equals("G")){
					compraForm.getCompraH().setOcoEstado("P");
				}				
				compraDAO.merge(compraForm.getCompraH());
				tx.commit();
			} catch (Exception e) {
				// TODO: handle exception
				tx.rollback();
				e.printStackTrace();
			}finally{
				compraDAO.getSession().flush();
				compraDAO.getSession().clear();
				
			}
			int donar = compraForm.getDon();
			compraForm = new OrdenCompraForm();
			compraForm.setDis("false");
			compraForm.setIni(0);
			compraForm.setDon(donar);
			request.getSession().setAttribute("cuenta", 0);
			request.getSession().setAttribute("loadAs", 0);
			return lista(mapping,form,request,response);
		} 
	
	public ActionForward cargaProv(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		OrdenPagoForm pagoForm = (OrdenPagoForm)form;
		pagoForm.setDis("true");
		pos = 0;
		InvProProveedorDAO proveedorDAO = new InvProProveedorDAO(getSessionHibernate(request));
		if(pagoForm.getInvProProveedor().getProId() == null || pagoForm.getInvProProveedor().getProId() == 0){
			ActionErrors errors = new ActionErrors();
			errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("error.ordPago.proveedor"));
	        saveMessages(request, errors);
	        return dml(mapping, form, request, response);
		}
		pagoForm.setInvProProveedor(proveedorDAO.findById(pagoForm.getInvProProveedor().getProId()));
		
		pagoForm.setOpaFechaPago(ElapsedTime.obtenerFecha(new Date(), pagoForm.getInvProProveedor().getProDiasPago()));
		
		OrdOpaOrdenDePagoDAO pagoDAO = new OrdOpaOrdenDePagoDAO(getSessionHibernate(request));
		if(request.getSession().getAttribute("opaCod")== null){
			pagoForm.setOpaCodigo(pagoDAO.nextCod(pagoForm.getRestart()));
			request.getSession().setAttribute("opaCod", pagoForm.getOpaCodigo());
			
			//crear orden de pago con estado N
			OrdOpaOrdenDePago odp = new OrdOpaOrdenDePago();
			odp.setAudFechaCreacion(new Date());
			odp.setAudFechaModificacion(new Date());
			odp.setAudUsuarioCreacion(pagoForm.getUsuarioConectado().getNombreUsuario());
			odp.setAudUsuarioModificacion(odp.getAudUsuarioCreacion());
			odp.setOpaEstado("N");
			odp.setOpaId(pagoDAO.nextId());
			odp.setOpaFechaPago(new Date());
			odp.setInvProProveedor(pagoForm.getInvProProveedor());
			pagoForm.setOpa(odp.getOpaId());
			odp.setOpaCodigo(pagoForm.getOpaCodigo());
			odp.setOpaTotal(0.0);
			odp.setOpaDescuento(0.0);
			pagoDAO.save(odp);
			Transaction tx = pagoDAO.getSession().beginTransaction();
			tx.commit();
			request.getSession().setAttribute("pago", odp.getOpaId());
			pagoForm.setPagoH(odp);
		}else{
			Integer opaCod = (Integer) request.getSession().getAttribute("opaCod");
			if(opaCod == null || opaCod.equals(0)){
				pagoForm.setOpaCodigo(pagoDAO.nextCod(pagoForm.getRestart()));
				request.getSession().setAttribute("opaCod", pagoForm.getOpaCodigo());
				
				//crear orden de pago con estado N
				OrdOpaOrdenDePago odp = new OrdOpaOrdenDePago();
				odp.setAudFechaCreacion(new Date());
				odp.setAudFechaModificacion(new Date());
				odp.setAudUsuarioCreacion(pagoForm.getUsuarioConectado().getNombreUsuario());
				odp.setAudUsuarioModificacion(odp.getAudUsuarioCreacion());
				odp.setOpaEstado("N");
				odp.setOpaId(pagoDAO.nextId());
				pagoForm.setOpa(odp.getOpaId());
				odp.setOpaCodigo(pagoForm.getOpaCodigo());
				odp.setOpaFechaPago(new Date());
				odp.setInvProProveedor(pagoForm.getInvProProveedor());
				odp.setOpaTotal(0.0);
				odp.setOpaDescuento(0.0);
				pagoDAO.save(odp);
				Transaction tx = pagoDAO.getSession().beginTransaction();
				tx.commit();
				request.getSession().setAttribute("pago", odp.getOpaId());
				pagoForm.setPagoH(odp);
			}
		}
		
		OrdOcoOrdenDeCompraDAO compraDAO = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
		List lst = compraDAO.findByProCodigo2(pagoForm.getInvProProveedor().getProCodigo());
		List lst2 = null;
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);
		TAM_LISTA_DESEMBOLSO = lst.size();
		pagoForm.setTamListaOrdenP(TAM_LISTA_DESEMBOLSO);
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);//, ExportType.PDF);
		tableFacade.setStateAttr("restore");
		//tableFacade.setTotalRows(0);
		//tableFacade.setMaxRows(lst.size());
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
            return null; 
        } else {
        	POSICIONES = pagoForm.getPosiciones();
        	//---- genera el html de la tabla para ser mostrada
            String html = html2(tableFacade, request);
            //request.setAttribute("_lista2", html);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
		request.setAttribute("form", pagoForm);
		request.getSession().setAttribute("pagoForm", pagoForm);
		request.setAttribute(Constantes.ACCION_KEY, "/ordenPago");
        request.setAttribute("filtro", 1);
		return mapping.findForward("lista");
	}
	
	public List loadP(ActionForm form, HttpServletRequest request){
		OrdenCompraForm compraForm = (OrdenCompraForm)form;
		InvProProveedorDAO proveedorDAO = new InvProProveedorDAO(getSessionHibernate(request));
		OrdRefCuentaReferenciaDAO referenciaDAO = new OrdRefCuentaReferenciaDAO(getSessionHibernate(request));
		String proCodigo = compraForm.getInvProProveedor().getProCodigo();
		InvProProveedor proveedor = (InvProProveedor)proveedorDAO.findByProCodigo(proCodigo).get(0);
		compraForm.setInvProProveedor(proveedor);
		List cref = referenciaDAO.findByProId(proveedor.getProId());
		return cref;
	}
	
	public ActionForward cargaAsc(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		OrdenCompraForm compraForm = (OrdenCompraForm)form;
		request.getSession().setAttribute("loadAs", 1);
       	request.setAttribute("form", compraForm);
		return lista(mapping, form, request, response);
	}
	
	public void loadA(ActionForm form, HttpServletRequest request){
		OrdenCompraForm compraForm = (OrdenCompraForm)form;
	//	SecAscAsociadoDAO asociadoDAO = new SecAscAsociadoDAO(getSessionHibernate(request));
		//SecPerPersonaDAO personaDAO = new SecPerPersonaDAO(getSessionHibernate(request));
	//	SecCraCreditoAsociadoDAO creditoAsociadoDAO = new SecCraCreditoAsociadoDAO(getSessionHibernate(request));
		String ascCod = compraForm.getAscCodigo();
	//	SecAscAsociado asociado = (SecAscAsociado) asociadoDAO.findByAscCodigo(ascCod).get(0);
		//compraForm.setSecAscAsociado(asociado);
	//	String asocNombre = asociado.getSecPerPersona().getPerPrimerApellido() + ", " + asociado.getSecPerPersona().getPerPrimerNombre();
	//	compraForm.setNombreAsoc(asocNombre);
	//	List cra = creditoAsociadoDAO.findByAscCodigo(ascCod);
	//	SecCraCreditoAsociado creditoAsociado = (SecCraCreditoAsociado) cra.get(0);
	//	compraForm.setCredito(creditoAsociado.getCraCredito());
	}
	
	public ActionForward guardar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		OrdenPagoForm pagoForm = (OrdenPagoForm)form;
		OrdOpaOrdenDePagoDAO pagoDAO = new OrdOpaOrdenDePagoDAO(getSessionHibernate(request));
		OrdOcoOrdenDeCompraDAO compraDAO = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
		//OrdenPagoForm pagoForm = (OrdenPagoForm) request.getSession().getAttribute("pagoForm");
		
		//Chequeamos que vaya con algo de detalle ingresado
		List lst = compraDAO.findByProCodigo2(pagoForm.getInvProProveedor().getProCodigo());
		//(List)request.getSession().getAttribute("ordDet");
		if(lst.size()<1 || pagoForm.getPosiciones().length<1){
			ActionErrors errors = new ActionErrors();
			errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("error.ordPago.missingDetalles"));
	        saveMessages(request, errors);
	        return lista(mapping, pagoForm, request, response);
		}
		//List ordDet = null;
		/*
			Aqui va toda la parte del calculo
		*/
		//List lst = compraDAO.findByProCodigo(pagoForm.getDon(), pagoForm.getInvProProveedor().getProCodigo());
		int[] pos = pagoForm.getPosiciones();
		double[] val = pagoForm.getValores();
		int[] pos2 = new int[lst.size()];
		
		
		if((pos!=null) && (pos.length > 0)) {
			
			int k = 0;
			for(int i = 0; i < pos2.length; i++){
				if(k+1 > pos.length){
					pos2[i] = -1;
				}else{
					if(i < pos[k]){
						pos2[i] = -1;
					}else{
						pos2[i] = i;
						k++;
					}
				}
				
			}
			
	        for(int i = 0; i < pos.length; i++) {
	            double unValor = val[pos[i]];
	            if(unValor <= 0){
	            	//request.getSession().setAttribute("ordDet", lst);
	            	mensajes("errors.ordDet.zero", request);
					return retornar(mapping, pagoForm, request, response);
	            }
	            int j=0;
	            Iterator iterator = lst.iterator();
	        	OrdOcoOrdenDeCompra compra = new OrdOcoOrdenDeCompra();
	            while(j < pos[i]){
	            	if(iterator.hasNext()){
	            		compra = (OrdOcoOrdenDeCompra) iterator.next();
	            	}
	            	j++;
	            }
	            compra = (OrdOcoOrdenDeCompra)iterator.next();
	            if(compra.getOcoMonto() >= unValor){
	            	compra.setOcoPagado(unValor);
	            	TOTAL = TOTAL + unValor;
	            }else{
	            	//request.getSession().setAttribute("ordDet", lst);
	            	mensajes("errors.ordDet.cantMax", request);
					return retornar(mapping, pagoForm, request, response);
	            }
	            
	        }
	   
			request.getSession().setAttribute("ordDet", lst);
		}else{
			lst = compraDAO.findByProCodigo(pagoForm.getDon(), pagoForm.getInvProProveedor().getProCodigo());
			//request.getSession().setAttribute("ordDet", ordDet);
			mensajes("errors.ordDet.noSeleccion", request);
			return retornar(mapping, pagoForm, request, response);
		}
		
		//pagoForm.setOpaId(pagoDAO.nextId());
		if(pagoForm.getRestart() == 1){
			pagoForm.setOpaCodigo(1);
		}
		pagoForm.setOpaEstado("C");
		//pagoForm.setOpaTotal(TOTAL);
		pagoForm.setAudFechaCreacion(new Date());
		pagoForm.setAudFechaModificacion(new Date());
		pagoForm.setAudUsuarioCreacion(pagoForm.getUsuarioConectado().getNombreUsuario());
		pagoForm.setAudUsuarioModificacion(pagoForm.getUsuarioConectado().getNombreUsuario());
		pagoForm.setOpaCodigo(pagoDAO.nextCod(pagoForm.getRestart()));
		
		InvProProveedorDAO proveedorDAO = new InvProProveedorDAO(getSessionHibernate(request));
		String proCodigo = pagoForm.getInvProProveedor().getProCodigo();
		InvProProveedor proveedor = (InvProProveedor)proveedorDAO.findByProCodigo(proCodigo).get(0);
		pagoForm.setInvProProveedor(proveedor);

		Transaction tx = pagoDAO.getSession().beginTransaction();
		try {
			pagoDAO.save(pagoForm.getPagoH());
			tx.commit();
		} catch (Exception e) {
			// TODO: handle exception
			tx.rollback();
			e.printStackTrace();
		}finally{
			//OrdOcoOrdenDeCompraDAO compraDAO = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
			//lst = ordDet;
			int pos4 = 0;
			int pos3 = 0;
			for (Iterator iterator = lst.iterator(); iterator.hasNext();) {
				OrdOcoOrdenDeCompra compra = (OrdOcoOrdenDeCompra) iterator.next();
				if(pos3 < pagoForm.getPosiciones().length){
					if(pos4 == pagoForm.getPosiciones()[pos3]){
						if(compra.getOcoEstado().equals("R")  || compra.getOcoEstado().equals("C")){
							compra.setOcoEstado("F");
						}
						if(compra.getOcoEstado().equals("P")){
							compra.setOcoEstado("G");
						}
						compra.setAudUsuarioModificacion(pagoForm.getUsuarioConectado().getNombreUsuario());
						compraDAO.merge(compra);
						tx.commit();
						try {
							OrdPcoPagoCompra pagoCompra = new OrdPcoPagoCompra();
							OrdPcoPagoCompraDAO pagoCompraDAO = new OrdPcoPagoCompraDAO(getSessionHibernate(request));
							OrdPcoPagoCompraId pagoCompraId = new OrdPcoPagoCompraId();
							OrdOpaOrdenDePago ordenDePago = pagoDAO.findById(pagoForm.getPagoH().getOpaId());
							pagoCompraId.setOrdOpaOrdenDePago(ordenDePago);
							pagoCompraId.setOrdOcoOrdenDeCompra(compra);
							pagoCompra.setId(pagoCompraId);
							pagoCompraDAO.save(pagoCompra);
							tx.commit();
						} catch (ConstraintViolationException e) {
							log.warn("La orden ya se encontraba en la tabla");
						}finally{
							pos3++;	
						}
					}
				}
				pos4++;
			}
			pagoDAO.getSession().flush();
			pagoDAO.getSession().clear();
			
		}
		
		//Llamada a generacion del reporte (quedan)
		//generaReporte(pagoForm.getPagoH().getOpaId(),proveedor.getProId(),response);
		request.setAttribute("salvado", 1);
		request.setAttribute("ordPagoId", pagoForm.getPagoH().getOpaId());
		request.setAttribute("provId", proveedor.getProId());
		return mapping.findForward("dmlListaPago");
	}
	
	//imprimirReporte
	public ActionForward imprimirReporte(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		OrdenPagoForm pagoForm = (OrdenPagoForm)form;
		ActionForward forward = null;
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
		try{
			Date fechaActual = new Date();
			//ReportesOrdenForm rOrdenForm = (ReportesOrdenForm) form;
			
			response.setHeader("Cache-Control","private");
			response.setHeader("Pragma", "Cache");
			String pathReporte = "";//ruta reporte
			String nombreReporte = "";
			ExportReport exportar = null;
			ReportFile reporte = new ReportFile();
			ServletContext servletContext = getServlet().getServletContext();
			
			nombreReporte = "RepCobroUnProv";
			pathReporte = servletContext
			.getRealPath("/listaReportesOrden/RepCobroUnProv/RepCobroUnProv.jasper");
			reporte.addParameter("PRO_ID", pagoForm.getInvProProveedor().getProId());
			reporte.addParameter("OPA_ID", pagoForm.getOpaId());
			reporte.setPathJasper(pathReporte);
			exportar = new ExportReport(reporte);//reporte a exportar
			Connection con = HibernateSessionFactory.getSession().connection();
			//System.out.println(JRPropertiesMap.class.getPackage().getImplementationVersion());
			byte[] repCompilado = exportar.exportReportPDF(con);
			
			response.setContentType("application/pdf");
			response.setContentLength(repCompilado.length);
			response.setHeader("content-Disposition", "attachment;filename="+nombreReporte+"-"+fechaActual.getTime()+".pdf");
			//response.setHeader("content-Disposition", "attachment;filename="+nombreReporte+"-"+rForm.getFechaReporte()+".pdf");
			ServletOutputStream outputStream = response.getOutputStream();
			outputStream.write(repCompilado, 0, repCompilado.length);
			outputStream.flush();
			outputStream.close();
			
		}catch(Exception e){
			e.printStackTrace();
			log.error("Se produjo un error al tratar de generar el reporte...", e);
			System.out.println("Se produjo un error al tratar de generar el reporte...\n");
		}
		return forward;
	}

	private boolean encuentraCheckeado(Integer ocoId, int[] posiciones) {
		for (int i = 0; i < posiciones.length; i++) {
			if(ocoId == posiciones[i]) {
				return true;
			}
		}
		return false;
	}

	public ActionForward cancelar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		OrdenPagoForm pagoForm = (OrdenPagoForm)form;
		int donar = pagoForm.getDon();
		pagoForm = new OrdenPagoForm();
		pagoForm.setDis("false");
		pagoForm.setIni(0);
		pagoForm.setDon(donar);
		request.getSession().setAttribute("pagoForm", new OrdenPagoForm());
		request.getSession().setAttribute("ordDet", new ArrayList());
//		request.getSession().setAttribute("cuenta", 0);
//		request.getSession().setAttribute("loadAs", 0);
		return dml(mapping, form, request, response);
	}
	
	public ActionForward fill(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		OrdenPagoForm pagoForm = (OrdenPagoForm)form;
		OrdenPagoForm pagoForm2 = (OrdenPagoForm) request.getSession().getAttribute("pagoForm");
		if(pagoForm2.getIni() == 1){
			pagoForm2.setIni(0);
		}
		pagoForm2.setOpaCodigo(pagoForm.getOpaCodigo());
		pagoForm2.setOpaDescuento(pagoForm.getOpaDescuento());
		pagoForm2.setOpaFechaPago(pagoForm.getOpaFechaPago());
		request.getSession().setAttribute("pagoForm", pagoForm2);
		request.setAttribute("detalleOrden", 1);
		return mapping.findForward("fill");
	}
	
	public ActionForward retornar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		TOTAL = 0;
		pos = 0;
		OrdenPagoForm pagoForm = (OrdenPagoForm) form;
		pagoForm.setDis("true");
		OrdOcoOrdenDeCompraDAO compraDAO = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
		List lst = compraDAO.findByProCodigo(pagoForm.getDon(), pagoForm.getInvProProveedor().getProCodigo());
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);//, ExportType.PDF);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
            return null; 
        } else {
        	POSICIONES = pagoForm.getPosiciones();
        	//---- genera el html de la tabla para ser mostrada
            String html = html2(tableFacade, request);
            //request.setAttribute("_lista2", html);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
		request.setAttribute("form", pagoForm);
		request.getSession().setAttribute("pagoForm", pagoForm);
		request.setAttribute(Constantes.ACCION_KEY, "/ordenPago");
		if(request.getAttribute("salvado")!=null){
			int salvado = (Integer) request.getAttribute("salvado");
			if(salvado == 1){
				request.setAttribute("filtro", 2);
			}
		}else{
			request.setAttribute("filtro", 1);
		}
		return mapping.findForward("lista");
	}
	
	public ActionForward calcular(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		OrdenPagoForm pagoForm = (OrdenPagoForm)form;
		OrdOcoOrdenDeCompraDAO compraDAO = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
		
		List lst = compraDAO.findByProCodigo(pagoForm.getDon(), pagoForm.getInvProProveedor().getProCodigo());
		int[] pos = pagoForm.getPosiciones();
		double[] val = pagoForm.getValores();
		int[] pos2 = new int[lst.size()];
		
		
		if((pos!=null) && (pos.length > 0)) {
			
			int k = 0;
			for(int i = 0; i < pos2.length; i++){
				if(k+1 > pos.length){
					pos2[i] = -1;
				}else{
					if(i < pos[k]){
						pos2[i] = -1;
					}else{
						pos2[i] = i;
						k++;
					}
				}
				
			}
			
	        for(int i = 0; i < pos.length; i++) {
	            double unValor = val[pos[i]];
	            if(unValor <= 0){
	            	request.getSession().setAttribute("ordDet", lst);
	            	mensajes("errors.ordDet.zero", request);
					return retornar(mapping, pagoForm, request, response);
	            }
	            int j=0;
	            Iterator iterator = lst.iterator();
	        	OrdOcoOrdenDeCompra compra = new OrdOcoOrdenDeCompra();
	            while(j < pos[i]){
	            	if(iterator.hasNext()){
	            		compra = (OrdOcoOrdenDeCompra) iterator.next();
	            	}
	            	j++;
	            }
	            compra = (OrdOcoOrdenDeCompra)iterator.next();
	            if(compra.getOcoMonto() >= unValor){
	            	compra.setOcoPagado(unValor);
	            	TOTAL = TOTAL + unValor;
	            }else{
	            	request.getSession().setAttribute("ordDet", lst);
	            	mensajes("errors.ordDet.cantMax", request);
					return retornar(mapping, pagoForm, request, response);
	            }
	            
	        }
	   
			request.getSession().setAttribute("ordDet", lst);
		}else{
			List ordDet = compraDAO.findByProCodigo(pagoForm.getDon(), pagoForm.getInvProProveedor().getProCodigo());
			request.getSession().setAttribute("ordDet", ordDet);
		}
		
		Double disc = 1 - pagoForm.getOpaDescuento()/100;
		pagoForm.setOpaTotal(TOTAL);
		pagoForm.setTotalDescuento(TOTAL * disc);
		if(pagoForm.getRestart() == 1){
			pagoForm.setOpaCodigo(1);
		}
		request.setAttribute("form", pagoForm);
		return retornar(mapping, form, request, response);
	}
	
	public ActionForward cargarListaProveedor(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) { // se utiliza para realizar la
											// busqueda de los proveedores
		InvProProveedorDAO proProveedorDAO = new InvProProveedorDAO(getSessionHibernate(request));
		InvProProveedor proveedor = new InvProProveedor();
		OrdenPagoForm pagoForm = (OrdenPagoForm)form;
		List<InvProProveedor> listaProveedores = null;
		proveedor.setProCodigo(pagoForm.getProCodigo());
		proveedor.setProNombre(pagoForm.getProNombre());
		try {
			listaProveedores = proProveedorDAO.findByCriteria(proveedor);
			String listaResponse;
			if(proProveedorDAO.findAll().size()<1){
				listaResponse = "<table id=\"resultadoArt\">";
				listaResponse += "<tr>";
				listaResponse += "<td><span style=\"font-size: 10px;color: red;font-style: italic;\">"
						+ "No existe ning&uacute;n proveedor en el sistema</span></td>";
				listaResponse += "</tr></table>";
			}else{
				if(listaProveedores.size() < 1){
					listaResponse = "<table id=\"resultadoArt\">";
					listaResponse += "<tr>";
					listaResponse += "<td><span style=\"font-size: 10px;color: red;font-style: italic;\">"
							+ "La b&uacute;squeda no gener&oacute; ning&uacute;n resultado</span></td>";
					listaResponse += "</tr></table>";
				}else{
					// Construimos una lista para el response
					listaResponse = contruirListaProveedores(listaProveedores,request);
				}
			}
			response.getWriter().write(listaResponse);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (RuntimeException e) {
			log.error("Error runtime", e);
		} catch (IOException e) {
			log.error(e);
		}

		return null;
	}

	private String contruirListaProveedores(
			List<InvProProveedor> listaProveedores, HttpServletRequest request) {
		OrdRefCuentaReferenciaDAO referenciaDAO = new OrdRefCuentaReferenciaDAO(getSessionHibernate(request));
		String lista = "<table id=\"resultadoProv\">";
		int max = 0;
		for (Iterator iterator = listaProveedores.iterator(); iterator
				.hasNext();) {
			InvProProveedor proProveedor = (InvProProveedor) iterator.next();
			List referencias = referenciaDAO.findByProIdEstado(proProveedor.getProId(), "A");
			OrdRefCuentaReferencia referencia = new OrdRefCuentaReferencia();
			if(referencias.size()>0){
				 referencia = (OrdRefCuentaReferencia)referenciaDAO.findByProIdEstado(proProveedor.getProId(), "A").get(0); 
			}
			if(max < 10){
				lista += "<tr>";
				lista += "<td><input onclick=\"JavaScript:saveSeleccionP(this.value);\" type=\"radio\" name=\"_miseleccion\" value=\""
						+ proProveedor.getProCodigo()
						+ ";"
						+ proProveedor.getProNombre()
						+ ";"
						+ proProveedor.getProId()
						+ ";"
						+ referencia.getRefCuenta()
						+ ";"
						+ referencia.getRefId()
						+ "\"/></td>";
				lista += "<td><span style=\"font-size: 10px;color: #6E6E6E;font-style: italic;\">"
						+ proProveedor.getProNombre() + "</span></td>";
				lista += "</tr>";
			}
			max++;
		}
		lista += "</table>";
		return lista;
	}
	
	//---- Funcion que genera el html de la tabla del jmesa
	private String html2(final TableFacade tableFacade, final HttpServletRequest request) {
		tableFacade.setColumnProperties("ocoCodigo","ocoEmision","secAscAsociado.id.ascCodigo","ocoMonto",
				"ocoPagado","ocoVencimiento");//,"chkbox");
		Table table = tableFacade.getTable();
		//---- Titulo de la tabla
		//table.setCaptionKey("tbl.ordenPago.caption");
		
		Row row = table.getRow();
		Column nombreColumna = row.getColumn("ocoCodigo");
		nombreColumna.setTitleKey("tbl.ordenPago.ocoCodigo");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				OrdOcoOrdenDeCompra compra = (OrdOcoOrdenDeCompra)item;
				if(compra.getOcoDonacion() == 1){
					value = "D" + value;
				}
				HtmlBuilder html = new HtmlBuilder();
				String val = "- " + value + " -";
								
				return val;//html.toString();
			}
		});

		nombreColumna = row.getColumn("secAscAsociado.id.ascCodigo");
		nombreColumna.setTitleKey("tbl.ordenPago.secAscAsociado.id.ascCodigo");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				OrdOcoOrdenDeCompra compra = (OrdOcoOrdenDeCompra) item;
				
				CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
				CtaAscAsociado asociado = asociadoDAO.findById(compra.getAscCodigo());
				
				SecPerPersonaDAO personaDAO = new SecPerPersonaDAO(getSessionHibernate(request));
				SecPerPersona persona = personaDAO.findById(asociado.getSecPerPersona().getPerId());
				
				value = asociado.getAscCodigo() + " - " + persona.getPerPrimerApellido()
				+ ", " + persona.getPerPrimerNombre();
				
				HtmlBuilder html = new HtmlBuilder();
				html.append(value);
				
				return html.toString();
			}
		});
		
		nombreColumna = row.getColumn("ocoPagado");
		nombreColumna.setTitleKey("tbl.ordenPago.ocoPagado");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				OrdOcoOrdenDeCompra compra = (OrdOcoOrdenDeCompra)item;
				HtmlBuilder html = new HtmlBuilder();
				//if(compra.getOcoPagado() == null){
					html.input().type("hidden").id("montoHidden" + compra.getOcoId()).value(compra.getOcoMonto().toString()).end();
					html.input().type("hidden").id("pagadoHidden" + compra.getOcoId()).value(compra.getOcoPagado().toString()).end();
					if(compra.getOcoPagado()!=0.0){
//						html.input().type("text").name("valores").value(""+Redondeo.roundDouble(compra.getOcoPagado(),2)+"");
						html.input().type("text").name("valores").value(""+Redondeo.roundDouble(compra.getOcoMonto(),2)+"");
					}else{
						html.input().type("text").name("valores").value(""+Redondeo.roundDouble(compra.getOcoMonto(),2)+"");
					}
					html.size("10").id("ocoId" + compra.getOcoId());
					html.onchange("modificaOrden("+compra.getOcoId()+");").close();
				/*}else{
					html.input().type("text").name("valores").value(""+compra.getOcoPagado()+"").size("10").id("montoId").close();
				}*/
								
				return html.toString();
			}
		});
		
		nombreColumna = row.getColumn("ocoEmision");
		nombreColumna.setTitleKey("tbl.ordenPago.ocoEmision");
		nombreColumna.getCellRenderer().setCellEditor(new DateCellEditor("dd-MMM-yyyy"));
		
		nombreColumna = row.getColumn("ocoVencimiento");
		nombreColumna.setTitleKey("tbl.ordenPago.ocoVencimiento");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){
			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				OrdOcoOrdenDeCompra compra = (OrdOcoOrdenDeCompra)item;
				HtmlBuilder html = new HtmlBuilder();
				String del="check";
				String link = tableFacade.getWebContext().getContextPath();
				link += "/orden/detalleOrden.do?accion=check&ocoCodigo=" + compra.getOcoCodigo();
				if(encuentraChecked(request,compra.getOcoId())){
					//html.input().type("checkbox").name("posiciones").value(""+pos+"").id("posi"+pos);
					//html.onclick("JavaScript:alert('');").end();//;calculaDesembolso("+ TAM_LISTA_DESEMBOLSO +");").close();
					//html.onclick("JavaScript:calculaDesembolso("+ TAM_LISTA_DESEMBOLSO +");").close();
					html.input().type("checkbox").name("posiciones").value(""+pos+"").id("posi"+compra.getOcoId()).checked();
					html.onclick("JavaScript:agregaOrden("+ compra.getOcoId() +");").close();
				}else{
					//TOTAL = TOTAL + compra.getOcoPagado();
					//html.input().type("checkbox").name("posiciones").value(""+pos+"").id("posi"+pos).checked();
					//html.onclick("alert();").end();//html.onclick("alert();calculaDesembolso("+ TAM_LISTA_DESEMBOLSO +");").close();
					//html.onclick("JavaScript:calculaDesembolso("+ TAM_LISTA_DESEMBOLSO +");").close();
					html.input().type("checkbox").name("posiciones").value(""+pos+"").id("posi"+compra.getOcoId());
					html.onclick("JavaScript:agregaOrden("+ compra.getOcoId() +");").close();
				}
				pos=pos+1;
				return html.toString();
			}

			private boolean encuentraChecked(HttpServletRequest request,
					Integer ocoId) {
				if(request.getSession().getAttribute("pago") != null){
					Integer opa = (Integer) request.getSession().getAttribute("pago");
					if(opa != null && !opa.equals(0)){
						OrdOpaOrdenDePagoDAO pagoDAO = new OrdOpaOrdenDePagoDAO(getSessionHibernate(request));
						OrdOpaOrdenDePago pago = pagoDAO.findById(opa);
						OrdPcoPagoCompraDAO pcoDao = new OrdPcoPagoCompraDAO(getSessionHibernate(request));
						List pcoList = pcoDao.findByPagoId(pago);
						for (Iterator iterator = pcoList.iterator(); iterator
								.hasNext();) {
							OrdPcoPagoCompra pco = (OrdPcoPagoCompra) iterator.next();
							if(pco.getId().getOrdOcoOrdenDeCompra().getOcoId().equals(ocoId)){
								return true;
							}
						}
					}
				}
				return false;
			}

			private boolean encuentraPos(int[] posiciones, int pos) {
				if(posiciones!= null){
					for (int i = 0; i < posiciones.length; i++) {
						if(posiciones[i] == pos){
							return true;
						}
					}
				}
				return false;
			}
		});
		
		nombreColumna = row.getColumn("ocoMonto");
		nombreColumna.setTitleKey("tbl.ordenPago.ocoMonto");
		return tableFacade.render();
	}
	
	public void mensajes(String msg, HttpServletRequest request){
		ActionErrors errors = new ActionErrors();
		errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(msg));
		saveMessages(request, errors);
	}
	
	public ActionForward agregaOrden(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		OrdenPagoForm pagoForm = (OrdenPagoForm)form;
		
		OrdPcoPagoCompraDAO pcoDao = new OrdPcoPagoCompraDAO(getSessionHibernate(request));
		
		Double total = 0.0;
		Double totalDescuento = 0.0;
		
		//obtener la orden de compra
		OrdOcoOrdenDeCompraDAO ocoDao = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
		Transaction tx = ocoDao.getSession().beginTransaction();
		OrdOcoOrdenDeCompra oco = ocoDao.findById(pagoForm.getOcoId());
		oco.setOcoPagado(pagoForm.getOcoVal());
		ocoDao.merge(oco);
		
		tx.commit();
		
		//Obtener la orden de pago
		OrdOpaOrdenDePagoDAO pagoDao = new OrdOpaOrdenDePagoDAO(getSessionHibernate(request));
		OrdOpaOrdenDePago pago = pagoDao.findById(pagoForm.getOpa());
		pago.setOpaDescuento(pagoForm.getOpaDescuento());
		pago.setOpaTotal(pcoDao.totalPago(pago.getOpaId())+oco.getOcoPagado());
		pagoDao.merge(pago);
		tx.commit();
		
		//System.out.println(oco.getOcoMonto());
		
		
		OrdPcoPagoCompra pco = new OrdPcoPagoCompra();
		OrdPcoPagoCompraId pcoId = new OrdPcoPagoCompraId();
		pcoId.setOrdOcoOrdenDeCompra(oco);
		pcoId.setOrdOpaOrdenDePago(pago);
		pco.setId(pcoId);
		pcoDao.save(pco);
		tx.commit();
		
		total = pago.getOpaTotal();
		totalDescuento = total*(1-(pago.getOpaDescuento()/100));
		
		try{
			String listaResponse = "";
			listaResponse = createTotales(total, totalDescuento);
			response.getWriter().write(listaResponse);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (RuntimeException e) {
			log.error("Error runtime", e);
		} catch (IOException e) {
			log.error(e);
		}

		return null;
	}
	
	private String createTotales(Double total, Double totalDescuento) {
		HtmlBuilder hb = new HtmlBuilder();
		hb.table(0).border("0").align("center").close();
		hb.tr(0).close();
			hb.td(0).close();
				hb.append("<label>Total:</label>");
			hb.tdEnd();
			hb.td(1).close();
				hb.input().type("text").name("opaTotal")
					.id("opaTotalId").styleClass("obligatorio").readonly()
					.value(Format.formatDinero(total)).end();
			hb.tdEnd();
		hb.trEnd(0);
		hb.tr(1).close();
			hb.td(0).close();
				hb.append("<label>Total con descuento:</label>");
			hb.tdEnd();
			hb.td(1).close();
				hb.input().type("text").name("totalDescuento")
					.id("totalDescuentoId").styleClass("obligatorio").readonly()
					.value(Format.formatDinero(totalDescuento)).end();
			hb.tdEnd();
		hb.trEnd(1);
		hb.tableEnd(0);
		return hb.toString();
	}

	public ActionForward modificaOrden(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		OrdenPagoForm pagoForm = (OrdenPagoForm)form;
		
		OrdPcoPagoCompraDAO pcoDao = new OrdPcoPagoCompraDAO(getSessionHibernate(request));
		
		Double total = 0.0;
		Double totalDescuento = 0.0;
		
		//obtener la orden de compra
		OrdOcoOrdenDeCompraDAO ocoDao = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
		OrdOcoOrdenDeCompra oco = ocoDao.findById(pagoForm.getOcoId());
		oco.setOcoPagado(pagoForm.getOcoVal());
		ocoDao.merge(oco);
		Transaction tx = ocoDao.getSession().beginTransaction();
		tx.commit();
		
		//Obtener la orden de pago
		OrdOpaOrdenDePagoDAO pagoDao = new OrdOpaOrdenDePagoDAO(getSessionHibernate(request));
		OrdOpaOrdenDePago pago = pagoDao.findById(pagoForm.getOpa());
		pago.setOpaDescuento(pagoForm.getOpaDescuento());
		pago.setOpaTotal(pcoDao.totalPagoMenosOcoId(pago.getOpaId(), oco.getOcoId())+oco.getOcoPagado());
		pagoDao.merge(pago);
		tx.commit();
		
		total = pago.getOpaTotal();
		totalDescuento = total*(1-(pago.getOpaDescuento()/100));
		
		try{
			String listaResponse = "";
			listaResponse = createTotales(total, totalDescuento);
			response.getWriter().write(listaResponse);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (RuntimeException e) {
			log.error("Error runtime", e);
		} catch (IOException e) {
			log.error(e);
		}

		return null;
	}
	
	public ActionForward modificaDescuento(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		OrdenPagoForm pagoForm = (OrdenPagoForm)form;
		
		OrdPcoPagoCompraDAO pcoDao = new OrdPcoPagoCompraDAO(getSessionHibernate(request));
		
		Double total = 0.0;
		Double totalDescuento = 0.0;
		
		//Obtener la orden de pago
		OrdOpaOrdenDePagoDAO pagoDao = new OrdOpaOrdenDePagoDAO(getSessionHibernate(request));
		OrdOpaOrdenDePago pago = pagoDao.findById(pagoForm.getOpa());
		pago.setOpaDescuento(pagoForm.getOpaDescuento());
		pagoDao.merge(pago);
		Transaction tx = pagoDao.getSession().beginTransaction();
		tx.commit();
		
		total = pago.getOpaTotal();
		totalDescuento = total*(1-(pago.getOpaDescuento()/100));
		
		try{
			String listaResponse = "";
			listaResponse = createTotales(total, totalDescuento);
			response.getWriter().write(listaResponse);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (RuntimeException e) {
			log.error("Error runtime", e);
		} catch (IOException e) {
			log.error(e);
		}

		return null;
	}
	
	public ActionForward remueveOrden(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		OrdenPagoForm pagoForm = (OrdenPagoForm)form;
		
		OrdPcoPagoCompraDAO pcoDao = new OrdPcoPagoCompraDAO(getSessionHibernate(request));
		
		Double total = 0.0;
		Double totalDescuento = 0.0;
		
		//obtener la orden de compra
		OrdOcoOrdenDeCompraDAO ocoDao = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
		OrdOcoOrdenDeCompra oco = ocoDao.findById(pagoForm.getOcoId());
		
		//Obtener la orden de pago
		OrdOpaOrdenDePagoDAO pagoDao = new OrdOpaOrdenDePagoDAO(getSessionHibernate(request));
		OrdOpaOrdenDePago pago = pagoDao.findById(pagoForm.getOpa());
		pago.setOpaDescuento(pagoForm.getOpaDescuento());
		pago.setOpaTotal(pago.getOpaTotal() - oco.getOcoPagado());
		pagoDao.merge(pago);
		Transaction tx = pagoDao.getSession().beginTransaction();
		tx.commit();
		
		oco.setOcoPagado(0.0);
		ocoDao.merge(oco);
		tx.commit();
		
		total = pago.getOpaTotal();
		totalDescuento = total*(1-(pago.getOpaDescuento()/100));
		
		//OrdPcoPagoCompra pco = new OrdPcoPagoCompra();
		OrdPcoPagoCompraId pcoId = new OrdPcoPagoCompraId();
		pcoId.setOrdOcoOrdenDeCompra(oco);
		pcoId.setOrdOpaOrdenDePago(pago);
		OrdPcoPagoCompra pco = pcoDao.findById(pcoId);
		pcoDao.delete(pco);
		tx.commit();
		
		try{
			String listaResponse = "";
			listaResponse = createTotales(total, totalDescuento);
			response.getWriter().write(listaResponse);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (RuntimeException e) {
			log.error("Error runtime", e);
		} catch (IOException e) {
			log.error(e);
		}

		return null;
	}
	
	public ActionForward guardar2(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		OrdenPagoForm pagoForm = (OrdenPagoForm)form;
		OrdOpaOrdenDePagoDAO pagoDAO = new OrdOpaOrdenDePagoDAO(getSessionHibernate(request));
		OrdOpaOrdenDePago pago = pagoDAO.findById(pagoForm.getOpa());
		SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
	
		try {
			Date fechaPago = (Date)dateFormat.parse(pagoForm.getOpaFechaPago());
			pago.setOpaFechaPago(fechaPago);
			
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		if(pagoForm.getRestart() == 1){
			pagoForm.setOpaCodigo(1);
			pago.setOpaCodigo(1);
		}
		pago.setOpaCodigo(pagoDAO.nextCod(pagoForm.getRestart()));
		pago.setOpaEstado("C");
		pagoDAO.merge(pago);
		Transaction tx = pagoDAO.getSession().beginTransaction();
		tx.commit();
		
		pagoForm.setPagoH(pago);
		
		OrdPcoPagoCompraDAO pcoDao = new OrdPcoPagoCompraDAO(getSessionHibernate(request));
		List pcos = pcoDao.findByPagoId(pago);

		for (Iterator iterator = pcos.iterator(); iterator.hasNext();) {
			OrdPcoPagoCompra pco = (OrdPcoPagoCompra) iterator.next();
			
			OrdOcoOrdenDeCompraDAO compraDAO = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
			OrdOcoOrdenDeCompra compra = compraDAO.findById(pco.getId().getOrdOcoOrdenDeCompra().getOcoId());
			if(compra.getOcoEstado().equals("R") || compra.getOcoEstado().equals("C")){
				compra.setOcoEstado("F");
			}
			if(compra.getOcoEstado().equals("P")){			
				compra.setOcoEstado("G");
			}
			compraDAO.merge(compra);
			tx.commit();
		}
		
		request.setAttribute("salvado", 1);
		request.setAttribute("ordPagoId", pago.getOpaId());
		request.setAttribute("provId", pago.getInvProProveedor().getProId());
		return mapping.findForward("dmlListaPago");
	}
	
	protected Map getKeyMethodMap() {
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.ordpago.dml", "dml");
		map.put("cmd.ordcom.cargaAsc", "cargaAsc");
		map.put("cmd.ordpago.cargaPro", "cargaProv");
		//map.put("cmd.ordpago.guardar", "guardar");
		map.put("cmd.ordpago.cancelar", "cancelar");
		map.put("cmd.ordcom.cancel", "cancelar");
		map.put("cmd.ordcom.editar", "edit");
		map.put("cmd.ordcom.salvar", "salvar");
		map.put("cmd.ordcom.anular", "anular");
		map.put("cmd.ordDet.lista", "fill");
		map.put("cmd.ordDet.retornar", "retornar");
		map.put("cmd.ordpago.calcular", "calcular");
		map.put("cmd.ordcom.cargarListaProveedor", "cargarListaProveedor");
		map.put("cmd.ordpago.imprimirReporte", "imprimirReporte");
		map.put("cmd.ordPago.agregaOrden", "agregaOrden");
		map.put("cmd.ordPago.modificaOrden", "modificaOrden");
		map.put("cmd.ordPago.modificaDescuento", "modificaDescuento");
		map.put("cmd.ordPago.remueveOrden", "remueveOrden");
		map.put("cmd.ordpago.guardar2", "guardar2");
		return map;
	}
}