/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.facturacion.struts.action;


import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeImpl;
import org.jmesa.limit.ExportType;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.BasicCellEditor;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.html.HtmlBuilder;

import com.cetia.sicaco.facturacion.struts.form.DetalleFacturaForm;
import com.cetia.sicaco.facturacion.struts.form.EncabezadoFacturaForm;
import com.cetia.sicaco.hibernate.ConRimRetencionImpuestoDAO;
import com.cetia.sicaco.hibernate.FacDfaDetalleFactura;
import com.cetia.sicaco.hibernate.FacFenFacturaEncabezado;
import com.cetia.sicaco.hibernate.InvArtArticulo;
import com.cetia.sicaco.hibernate.InvArtArticuloDAO;
import com.cetia.sicaco.hibernate.InvCnvConversionDAO;
import com.cetia.sicaco.hibernate.InvCprCapacidadProducto;
import com.cetia.sicaco.hibernate.InvCprCapacidadProductoDAO;
import com.cetia.sicaco.hibernate.InvCprCapacidadProductoId;
import com.cetia.sicaco.hibernate.InvEboExistenciaBodega;
import com.cetia.sicaco.hibernate.InvEboExistenciaBodegaDAO;
import com.cetia.sicaco.hibernate.InvEboExistenciaBodegaId;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;
import com.mad.utilidades.Format;

/** 
 * MyEclipse Struts
 * Creation date: 04-08-2008
 * 
 * XDoclet definition:
 * @struts.action path="/detalleFactura" name="detalleFacturaForm" input="redirectInvalidData" parameter="accion" scope="request" validate="true"
 * @struts.action-forward name="dml" path="pagina-dml.facturacion.encabezadoFactura"
 */
public class DetalleFacturaAction extends DMLAction {
	/*
	 * Generated Methods
	 * 
	 */
	
	

	public static final String TABLA_ID = "facDfaDetalleFactura";
	public static final String LST_CONV = "conv";
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		DetalleFacturaForm detalleFacturaForm = (DetalleFacturaForm)form;
		FacFenFacturaEncabezado encabezado = (FacFenFacturaEncabezado) request.getSession().getAttribute("head");
		
		//detalleFacturaForm.setDfaDescripcion("");
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(encabezado.getFacDfaDetalleFacturas());

		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);//, ExportType.PDF);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
		request.setAttribute(Constantes.ACCION_KEY, "/detalleFactura");
		request.setAttribute("form", detalleFacturaForm);
		String tipoIngreso = request.getParameter("moa");
		Integer tFactura = (Integer)request.getSession().getAttribute("buy");
		if (tipoIngreso.equals("A")) {
			if (tFactura.intValue() == 1){//si la factura es de venta debera activar el filtro
				//para mostrar el campo de porcentaje de utilidad
				request.setAttribute("filtroV", "0");
			}
			request.setAttribute("filtro", "1");
			InvCnvConversionDAO conversionDAO= new InvCnvConversionDAO(getSessionHibernate(request));
			List lstC = conversionDAO.findAll();
			request.getSession().setAttribute(LST_CONV, lstC);
			request.setAttribute("filtroIngreso",0);
		}else{
			request.setAttribute("filtroIngreso",1);
		}
		return mapping.findForward("lista");
		 
	}
	
	//---- Funcion que genera el html de la tabla del jmesa
	private String html(final TableFacade tableFacade,
			final HttpServletRequest request) {
		String tipoIngreso = request.getParameter("moa");
		if (tipoIngreso.equals("A")) {
			tableFacade.setColumnProperties("id.invArtArticulo.artCodigo",
					"dfaCantidad", "dfaDescripcion", "dfaPrecioUnitario",
					"dfaExento", "dfaPrecioTotal", "audUsuarioCreacion");
			Table table = tableFacade.getTable();
			// ---- Titulo de la tabla
			table.setCaptionKey("tbl.detalle.caption");

			Row row = table.getRow();

			Column nombreColumna = row.getColumn("id.invArtArticulo.artCodigo");
			nombreColumna
					.setTitleKey("tbl.detalle.id.invArtArticulo.artCodigo");

			nombreColumna = row.getColumn("dfaCantidad");
			nombreColumna.setTitleKey("tbl.detalle.dfaCantidad");

			nombreColumna = row.getColumn("dfaDescripcion");
			nombreColumna.setTitleKey("tbl.detalle.dfaDescripcion");

			nombreColumna = row.getColumn("dfaPrecioUnitario");
			nombreColumna.setTitleKey("tbl.detalle.dfaPrecioUnitario");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {
				public Object getValue(Object item, String property,
						int rowcount) {
					Object value = new BasicCellEditor().getValue(item,
							property, rowcount);
					FacDfaDetalleFactura detalle = (FacDfaDetalleFactura) item;
					//value = Redondeo.dRound(detalle.getDfaPrecioUnitario(), 2);
					value = "<div align=\"right\">"+Format.formatDinero(detalle.getDfaPrecioUnitario())+"</div>";
					return value;
				}
			});

			nombreColumna = row.getColumn("dfaExento");
			nombreColumna.setTitleKey("tbl.detalle.dfaExento");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {

				public Object getValue(Object item, String property,
						int rowcount) {
					Object value = new BasicCellEditor().getValue(item,
							property, rowcount);
					FacDfaDetalleFactura detalle = (FacDfaDetalleFactura) item;
					if (detalle.getDfaExento() == 1) {
						double exentas = detalle.getDfaPrecioUnitario()
								* detalle.getDfaCantidad();
						//value = Redondeo.dRound(exentas, 2);
						value = "<div align=\"right\">"+Format.formatDinero(exentas)+"</div>";
					} else {
						value = "";
					}
					return value;
				}
			});

			nombreColumna = row.getColumn("dfaPrecioTotal");
			nombreColumna.setTitleKey("tbl.detalle.dfaPrecioTotal");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {
				public Object getValue(Object item, String property,
						int rowcount) {
					Object value = new BasicCellEditor().getValue(item,
							property, rowcount);
					FacDfaDetalleFactura detalle = (FacDfaDetalleFactura) item;
					if (detalle.getDfaExento() == 0) {
						ConRimRetencionImpuestoDAO impuestoDAO = new ConRimRetencionImpuestoDAO(getSessionHibernate(request));
						double x = impuestoDAO.findById(1).getRimImpuesto() / 100;
						double totalVentas = detalle.getDfaPrecioUnitario()
								* detalle.getDfaCantidad() * (1 + x);
						value = "<div align=\"right\">"+Format.formatDinero(totalVentas)+"</div>"; //Redondeo.dRound(totalVentas, 2);
					} else {
						value = "";
					}
					return value;
				}
			});

			nombreColumna = row.getColumn("audUsuarioCreacion");
			nombreColumna.setTitleKey("tbl.detalle.eliminar");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {
				public Object getValue(Object item, String property,
						int rowcount) {
					Object value = new BasicCellEditor().getValue(item,
							property, rowcount);
					FacDfaDetalleFactura detalle = (FacDfaDetalleFactura) item;
					HtmlBuilder html = new HtmlBuilder();
					String del = "eliminar";
					String link = tableFacade.getWebContext().getContextPath();
					link += "/facturacion/detalleFactura.do?id.invArtArticulo.artCodigo="
							+ detalle.getId().getInvArtArticulo()
									.getArtCodigo() + "&accion=delete&moa=A";// +"&id.invArtArticulo.artCodigo="+
																		// detalle.getId().getInvArtArticulo().getArtCodigo().toString()
																		// +"&accion=delete";
					html.a().href().quote().append(link).quote().close();
					html.append(del);
					html.aEnd();
					return html.toString();
				}
			});

		} else {
			
			tableFacade.setColumnProperties("dfaCantidad", "dfaDescripcion","dfaExento" ,"dfaPrecioTotal","audUsuarioCreacion");//,"dfaExento", );
			Table table = tableFacade.getTable();
			// ---- Titulo de la tabla
			table.setCaptionKey("tbl.detalle.caption");

			Row row = table.getRow();
			
			Column nombreColumna = row.getColumn("dfaCantidad");
			nombreColumna.setTitleKey("tbl.detalle.dfaCantidad");

			nombreColumna = row.getColumn("dfaDescripcion");
			nombreColumna.setTitleKey("tbl.detalle.dfaDescripcion");
			
			nombreColumna = row.getColumn("dfaExento");
			nombreColumna.setTitleKey("tbl.detalle.dfaExento");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {

				public Object getValue(Object item, String property,
						int rowcount) {
					Object value = new BasicCellEditor().getValue(item,
							property, rowcount);
					FacDfaDetalleFactura detalle = (FacDfaDetalleFactura) item;
					if (detalle.getDfaExento() == 1) {
						//value = Redondeo.dRound(detalle.getDfaPrecioTotal(), 2);
						value = "<div align=\"right\">"+Format.formatDinero(detalle.getDfaPrecioTotal())+"</div>";
					} else {
						value = "";
					}
					return value;
				}
			});

			nombreColumna = row.getColumn("dfaPrecioTotal");
			nombreColumna.setTitleKey("tbl.detalle.dfaPrecioTotal");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {
				public Object getValue(Object item, String property,
						int rowcount) {
					Object value = new BasicCellEditor().getValue(item,
							property, rowcount);
					FacDfaDetalleFactura detalle = (FacDfaDetalleFactura) item;
					if (detalle.getDfaExento() == 0) {
						ConRimRetencionImpuestoDAO impuestoDAO = new ConRimRetencionImpuestoDAO(getSessionHibernate(request));
						double x = impuestoDAO.findById(1).getRimImpuesto() / 100;
						double totalVentas = detalle.getDfaPrecioTotal() * (1 + x);
						//value = Redondeo.dRound(totalVentas, 2);
						value = "<div align=\"right\">"+Format.formatDinero(totalVentas)+"</div>";
					} else {
						value = "";
					}
					return value;
				}
			});
			
			nombreColumna = row.getColumn("audUsuarioCreacion");
			nombreColumna.setTitleKey("tbl.detalle.eliminar");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {
				public Object getValue(Object item, String property,
						int rowcount) {
					Object value = new BasicCellEditor().getValue(item,
							property, rowcount);
					FacDfaDetalleFactura detalle = (FacDfaDetalleFactura) item;
					HtmlBuilder html = new HtmlBuilder();
					String del = "eliminar";
					String link = tableFacade.getWebContext().getContextPath();
					link += "/facturacion/detalleFactura.do?id.invArtArticulo.artCodigo="
							 +detalle.getId().getInvArtArticulo().getArtCodigo()
							 + "&accion=delete&moa=M";
					html.a().href().quote().append(link).quote().close();
					html.append(del);
					html.aEnd();
					return html.toString();
				}
			});
			
		}
		
		return tableFacade.render();
	}
	
	//---- Funcion que genera los exports, el formato que tendran
	 private void export(final TableFacade tableFacade) {
		tableFacade.setColumnProperties("tprNombre","tprId");
		Table table = tableFacade.getTable();
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.tipoProveedor.caption");
		
		Row row = table.getRow();
		Column nombreColumna = row.getColumn("tprNombre");
		nombreColumna.setTitleKey("tbl.tipoProveedor.tprNombre");
		
		tableFacade.render();
	}
	
	 public ActionForward agregar(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {
			String tipoIngreso = request.getParameter("moa");
			Integer tFactura = (Integer)request.getSession().getAttribute("buy");
			DetalleFacturaForm detalleFacturaForm = (DetalleFacturaForm)form;
			FacDfaDetalleFactura detalleFactura = new FacDfaDetalleFactura();
			FacFenFacturaEncabezado encabezado = (FacFenFacturaEncabezado)request.getSession().getAttribute("head");
			EncabezadoFacturaForm headForm =  (EncabezadoFacturaForm)request.getSession().getAttribute("headForm");
			detalleFacturaForm.setAudFechaCreacion(new Date());
			detalleFacturaForm.setAudFechaModificacion(new Date());
			detalleFacturaForm.setAudUsuarioCreacion(detalleFacturaForm.getUsuarioConectado().getNombreUsuario());
			detalleFacturaForm.setAudUsuarioModificacion(detalleFacturaForm.getUsuarioConectado().getNombreUsuario());
			detalleFactura = detalleFacturaForm.getDetalleFacturaH();
			int cantReal = 0;
			if(tipoIngreso.equals("A")){
				detalleFacturaForm.setDfaPrecioTotal(detalleFacturaForm.getDfaPrecioUnitario()*detalleFacturaForm.getDfaCantidad());
				int cant = detalleFacturaForm.getDfaCantidad();
				int bodId = headForm.getInvBodBodegas().getBodId();
				InvArtArticuloDAO artDAO = new InvArtArticuloDAO(getSessionHibernate(request));
				InvArtArticulo art = artDAO.findById(detalleFactura.getId().getInvArtArticulo().getArtCodigo());
				InvEboExistenciaBodegaDAO eboDAO = new InvEboExistenciaBodegaDAO(getSessionHibernate(request));
				InvEboExistenciaBodegaId eboId = new InvEboExistenciaBodegaId();
				InvCprCapacidadProductoDAO cprDAO = new InvCprCapacidadProductoDAO(getSessionHibernate(request));
				InvCprCapacidadProductoId cprId = new InvCprCapacidadProductoId();
				cprId.getInvArtArticulo().setArtCodigo(detalleFacturaForm.getArtCodigo());
				cprId.getInvBodBodegas().setBodId(bodId);
				InvCprCapacidadProducto cpr = cprDAO.findById(cprId);
				eboId.getInvBodBodegas().setBodId(bodId);
				eboId.getInvPexProductosExistencia().setArtCodigo(detalleFacturaForm.getArtCodigo());
				InvEboExistenciaBodega ebo = eboDAO.findById(eboId);
				int cantBod = ebo.getEboCantidadProducto();//desde articulo al crearse debo colocar 0 en la tabla de ebo en cant. producto
				if(art.getArtPorcentajeUtilidad() == null && tFactura.intValue() == 1){// si el porcentaje de utilidad del producto
					//es 0.0 entonces hay que setearle el que viene en el formulario y calcular el precio sugerido y el precio minimo
					detalleFactura.getId().getInvArtArticulo().setArtPorcentajeUtilidad(detalleFacturaForm.getPorcentajeU());
				}else{
					detalleFactura.getId().getInvArtArticulo().setArtPorcentajeUtilidad(art.getArtPorcentajeUtilidad());
				}
				/*if(headForm.getCompra() == 1){
					// cantReal = cant*factorConversion;
					if((cant + cantBod) > cpr.getCprCantidadMaxima()){//validacion de compra para no sobrepasar la capacidad de la bodega
						mensajes("errors.detalle.maxCant", detalleFacturaForm, request, response); 
						mensajes("errors.articulo.dfaCantidad.required", detalleFacturaForm, request, response);*/
						/* return mapping.findForward("lista");
					}	
				}*/
				/*if(headForm.getCompra()== 0){
					// cantReal= cant/factorConversion;
					if(cant > cantBod){
						
						mensajes("errors.detalle.cantMax", detalleFacturaForm, request, response);
						return mapping.findForward("lista");
					}
				}*/
			//	lCantR.put(detalleFactura.getId().getInvArtArticulo().getArtCodigo(), cantReal);
				//request.getSession().setAttribute("listaCantReal", lCantR);
				detalleFacturaForm.setDfaCantidad(cant);
				ArrayList al = (ArrayList) request.getSession().getAttribute("factoresL");
				if(al.size()==0) al.add(0,detalleFacturaForm.getFactorConversion());
				else  al.add(al.size(),detalleFacturaForm.getFactorConversion());
				request.setAttribute("filtroIngreso","0");
				request.setAttribute("filtro", "1");
				request.getSession().setAttribute("factoresL",al);
			}else{//si es ingreso manual
				detalleFactura.getId().getInvArtArticulo().setArtCodigo(detalleFactura.getId().getInvArtArticulo().getArtCodigo()+encabezado.getFacDfaDetalleFacturas().size()); //esto le agrega un numero al final del codigo del articulo,pe: articulo25
				request.setAttribute("filtroIngreso",1);
			}
			encabezado.getFacDfaDetalleFacturas().add(detalleFactura); 
			request.getSession().setAttribute("head", encabezado);
			return lista(mapping,form,request,response);
		}
	
	public ActionForward regresar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
			DetalleFacturaForm facturaForm = (DetalleFacturaForm) form;
			if(facturaForm.getMoa().equals("M")){
				FacFenFacturaEncabezado encabezado = (FacFenFacturaEncabezado)request.getSession().getAttribute("head");
				Set detalles = encabezado.getFacDfaDetalleFacturas();
				InvArtArticuloDAO articuloDAO = new InvArtArticuloDAO(getSessionHibernate(request));
				List lst = articuloDAO.findAll();
				if(!lst.isEmpty()){
					InvArtArticulo articulo = (InvArtArticulo)lst.get(0);
					String artCodigo = articulo.getArtCodigo();
					for(Iterator iterator = detalles.iterator(); iterator.hasNext();){
						FacDfaDetalleFactura detalleFactura2 =(FacDfaDetalleFactura) iterator.next();
						InvArtArticulo articulo2 =(InvArtArticulo)detalleFactura2.getId().getInvArtArticulo();
						articulo2.setArtCodigo(artCodigo);
					}
					encabezado.setFacDfaDetalleFacturas((Set)detalles);
					request.getSession().setAttribute("head", encabezado);
				}else{
					lista(mapping, form, request, response);
				}
			}
			request.setAttribute("auxi",1);
		return mapping.findForward("regresar");
	}
	
	public ActionForward cargaArticulo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		DetalleFacturaForm detalleFacturaForm = (DetalleFacturaForm)form;
		InvArtArticuloDAO articuloDAO = new InvArtArticuloDAO(getSessionHibernate(request));
		ArrayList lsta = new ArrayList ();
			if(articuloDAO.findById(detalleFacturaForm.getArtCodigo()) !=null){
				InvArtArticulo articulo = (InvArtArticulo)articuloDAO.findById(detalleFacturaForm.getArtCodigo());
				detalleFacturaForm.setDfaPrecioUnitario(articulo.getArtPrecioMinimo()*detalleFacturaForm.getFactorConversion());
				lsta = (ArrayList)request.getSession().getAttribute("factoresL");
				lsta.add(detalleFacturaForm.getFactorConversion());
				//detalleFacturaForm.setPrecioTotal()
				detalleFacturaForm.setDfaDescripcion(articulo.getArtNombre());
				//precioMinimo aparece descrito como el costo, por lo tanto lo menos a lo que se puede vender algo es al precio que se compro
			}else{
				ActionErrors errors = new ActionErrors();
				FacFenFacturaEncabezado encabezado = (FacFenFacturaEncabezado) request.getSession().getAttribute("head");

				TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
				tableFacade.setItems(encabezado.getFacDfaDetalleFacturas());

				//---- Genera los tipos de formas con que se podran exportar los datos
				tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);//, ExportType.PDF);
				tableFacade.setStateAttr("restore");
				Limit limit = tableFacade.getLimit();
				if (limit.isExported()) {
					//---- exporta la tabla
					export(tableFacade);
					return null; 
				} else {
					//---- genera el html de la tabla para ser mostrada
					String html = html(tableFacade, request);
					request.setAttribute(Constantes.LISTA_KEY, html);
				}
				//----- Variables de configuracion
				request.setAttribute(Constantes.ACCION_KEY, "/detalleFactura");
				request.setAttribute("form", detalleFacturaForm);
				request.setAttribute("filtro", "1");
				errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.detalle.articulo"));
				saveMessages(request, errors);
				return mapping.findForward("lista");
			}
			request.setAttribute("filtroIngreso","0");
			request.setAttribute("filtro", "1");
			request.setAttribute("form", detalleFacturaForm);
			request.getSession().setAttribute("factoresL",lsta);
		
		return lista(mapping, form, request, response);
	}
	
	public void mensajes(String msg,DetalleFacturaForm detalleFacturaForm,
			HttpServletRequest request, HttpServletResponse response){
		ActionErrors errors = new ActionErrors();
		FacFenFacturaEncabezado encabezado = (FacFenFacturaEncabezado) request.getSession().getAttribute("head");

		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(encabezado.getFacDfaDetalleFacturas());

		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);//, ExportType.PDF);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
            //return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
		request.setAttribute(Constantes.ACCION_KEY, "/detalleFactura");
		request.setAttribute("form", detalleFacturaForm);
        request.setAttribute("filtro", "1");
        errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(msg));
        saveMessages(request, errors);
		//return mapping.findForward("lista");
	}
	
	public ActionForward delete(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		DetalleFacturaForm detalleFacturaForm = (DetalleFacturaForm)form;
		//FacDfaDetalleFactura detalleFactura = new FacDfaDetalleFactura();
		FacFenFacturaEncabezado encabezado = (FacFenFacturaEncabezado)request.getSession().getAttribute("head");
		//EncabezadoFacturaForm headForm =  (EncabezadoFacturaForm)request.getSession().getAttribute("headForm");
		for (Iterator iterator = encabezado.getFacDfaDetalleFacturas().iterator(); iterator.hasNext();) {
			FacDfaDetalleFactura detalleFactura2 = (FacDfaDetalleFactura) iterator.next();
			if(detalleFactura2.getId().getInvArtArticulo().getArtCodigo().equals(detalleFacturaForm.getId().getInvArtArticulo().getArtCodigo())){
				encabezado.getFacDfaDetalleFacturas().remove(detalleFactura2);
				request.getSession().setAttribute("head", encabezado);
				if(detalleFacturaForm.getMoa().equals("M")){
					request.setAttribute("moa","M");
					request.setAttribute("filtroIngreso",1);
				}else{
					Integer tFactura = (Integer)request.getSession().getAttribute("buy");
					if (tFactura.intValue() == 1){//si la factura es de venta debera activar el filtro
						//para mostrar el campo de porcentaje de utilidad
						request.setAttribute("filtroV", "0");
					}
					request.setAttribute("moa","A");
					request.setAttribute("filtro", "1");
					request.setAttribute("filtroIngreso",0);
				}	
				return lista(mapping,form,request,response);
			}
		}
		
		request.getSession().setAttribute("head", encabezado);
		return lista(mapping,form,request,response);
	}
	
	public ActionForward redirectInvalidData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		
		return mapping.findForward("lista");
	}
	

	
	protected Map getKeyMethodMap() {
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.detalle.lista", "lista");
		map.put("cmd.detalle.agregar", "agregar");
		map.put("cmd.detalle.regresar", "regresar");
		map.put("cmd.detalle.cargaArticulo", "cargaArticulo");
		map.put("cmd.detalle.eliminar", "delete");
		map.put("cmd.detalle.redirectInvalidData", "redirectInvalidData");
		return map;
	}
}