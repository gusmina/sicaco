/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.facturacion.struts.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.hibernate.Transaction;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeImpl;
import org.jmesa.limit.ExportType;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.BasicCellEditor;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.editor.DateCellEditor;
import org.jmesa.view.html.HtmlBuilder;

import com.cetia.sicaco.facturacion.struts.form.EncabezadoFacturaForm;
import com.cetia.sicaco.hibernate.FacDfaDetalleFactura;
import com.cetia.sicaco.hibernate.FacDfaDetalleFacturaDAO;
import com.cetia.sicaco.hibernate.FacFenFacturaEncabezado;
import com.cetia.sicaco.hibernate.FacFenFacturaEncabezadoDAO;
import com.cetia.sicaco.hibernate.InvBodBodegasDAO;
import com.cetia.sicaco.hibernate.InvProProveedor;
import com.cetia.sicaco.hibernate.InvProProveedorDAO;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;
import com.mad.utilidades.Format;

/** 
 * MyEclipse Struts
 * Creation date: 05-19-2008
 * 
 * XDoclet definition:
 * @struts.action path="/listaFacturas" name="encabezadoFacturaForm" input="redirectInvalidData" parameter="accion" scope="request" validate="true"
 * @struts.action-forward name="lista" path="pagina-lista.facturacion.listaFacturas"
 * @struts.action-forward name="dml" path="pagina-dml.facturacion.listaFacturas"
 */
public class ListaFacturasAction extends DMLAction {
	/*
	 * Generated Methods
	 */
	private ArrayList ar = new ArrayList();
	public static final String TABLA_ID = "facDfaDetalleFactura";
	public static final String LST_BOD = "bod";
	public static final String LST_PRO = "pro";
	public static final String FACTURA = "factura";
	public static final String TIPO_FACT = "tipoFact";
	public static final String ASK_BODEGA = "askBod";
	int REPOS;
	double TOTAL_VENTAS;
	double TOTAL_EXENTAS;
	double IVA_RETENIDO;
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		EncabezadoFacturaForm encabezadoFacturaForm = (EncabezadoFacturaForm)form;
		FacFenFacturaEncabezadoDAO encabezadoDAO = new FacFenFacturaEncabezadoDAO(getSessionHibernate(request));
		List lst = null;
		lst = encabezadoDAO.findAllCompra(encabezadoFacturaForm.getVoc());
		
		request.setAttribute("voc", encabezadoFacturaForm.getVoc());
		
		InvBodBodegasDAO bodegasDAO = new InvBodBodegasDAO(getSessionHibernate(request));
		List lbod = bodegasDAO.findAll();
		if(lbod.size() > 0){
			request.setAttribute("listaBodegas", lbod);
		}else{
			//error
		}
		
		//request.getSession().setAttribute("factCoV", encabezadoFacturaForm.getCompra());
		
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);//, ExportType.PDF);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade,request, encabezadoFacturaForm.getVoc());
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request, encabezadoFacturaForm.getVoc());
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
		  //----- Variables de configuracion
		if(encabezadoFacturaForm.getVoc() == 1){
			request.setAttribute("compra", 1);
		}else{
			request.setAttribute("compra", 2);
		}
		request.setAttribute("form", encabezadoFacturaForm);
        request.setAttribute("filtro", "0");
		request.setAttribute(Constantes.ACCION_KEY, "/listaFacturas");
		return mapping.findForward("lista");
	}
	
	//---- Funcion que genera el html de la tabla del jmesa
	private String html(final TableFacade tableFacade, final HttpServletRequest request, final int compra) {
		//int compra = (Integer)request.getSession().getAttribute("factCoV");
		if(compra == 1 || compra == 4){
			tableFacade.setColumnProperties("fenNumeroFactura","invProProveedor.proId",
					"fenFechaFactura","fenTotalVenta","fenCancelada","invBodBodegas.bodNombre","ctrEstEstado.estId",
					"audUsuarioCreacion");
			Table table = tableFacade.getTable();
			//---- Titulo de la tabla
			table.setCaptionKey("tbl.lfact.caption");
			
			Row row = table.getRow();
			
			Column nombreColumna = row.getColumn("fenNumeroFactura");
			nombreColumna.setTitleKey("tbl.lfact.fenNumeroFactura");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

				public Object getValue(Object item, String property, int rowcount) {
					Object value = new BasicCellEditor().getValue(item, property, rowcount);
					FacFenFacturaEncabezado encabezado = (FacFenFacturaEncabezado)item;
					
					HtmlBuilder html = new HtmlBuilder();
					String link = tableFacade.getWebContext().getContextPath();
					link += "/facturacion/encabezadoFactura.do?accion=vista&compra=1&fenId="+ encabezado.getFenId();
					if(encabezado.getFenTipoFactura().equals("NC")){
						link += "&nva=true&fenTipoFactura=NC&view=NC";
					}else{
						link += "&nva=true&fenTipoFactura=CR&view=prov";
					}
					if(encabezado.getCtrEstEstado().getEstId() == 1){
						link += "&impresa=1";
					}
					html.a().href().quote().append(link).quote().close();
					html.append(value);
					html.aEnd();
									
					return html.toString();
				}
			});

			nombreColumna = row.getColumn("invProProveedor.proId");
			nombreColumna.setTitleKey("tbl.lfact.invProProveedor.proCodigo");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

				public Object getValue(Object item, String property, int rowcount) {
					Object value = new BasicCellEditor().getValue(item, property, rowcount);
					FacFenFacturaEncabezado encabezado = (FacFenFacturaEncabezado) item;
					
					InvProProveedorDAO proveedorDAO = new InvProProveedorDAO(getSessionHibernate(request));
					InvProProveedor proveedor = proveedorDAO.findById(encabezado.getInvProProveedor().getProId());
					value = proveedor.getProNombre();
/*					value = value + " - " + encabezado.getInvProProveedor().getProNombre();
					
					HtmlBuilder html = new HtmlBuilder();
					html.append(value);
*/					
					return value;// html.toString();
				}
			});
			
			nombreColumna = row.getColumn("fenFechaFactura");
			nombreColumna.setTitleKey("tbl.lfact.fenFechaFactura");
			nombreColumna.getCellRenderer().setCellEditor(new DateCellEditor("dd-MMM-yyyy"));
			
			nombreColumna = row.getColumn("fenTotalVenta");
			nombreColumna.setTitleKey("tbl.lfact.fenTotalVenta");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

				public Object getValue(Object item, String property, int rowcount) {
					Object value1 = new BasicCellEditor().getValue(item, property, rowcount);
					String value = "";
					value = "<div align=\"right\">"+Format.formatDinero(value1)+"</div>";
					return value;
				}
				
			});
			
			nombreColumna = row.getColumn("fenCancelada");
			nombreColumna.setTitleKey("tbl.lfact.fenCancelada");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				FacFenFacturaEncabezado encabezado = (FacFenFacturaEncabezado)item;
				if(value != null){
					if(value.toString().equals("E")){
						value = "Efectivo";
					}
					if(value.toString().equals("C")){
						value = "Credito";
					}
					if(value.toString().equals("P")){
						value = "Pendiente";
					}
				}else value = "--";
				return value;
			}
			});
		
			
			nombreColumna = row.getColumn("invBodBodegas.bodNombre");
			nombreColumna.setTitleKey("tbl.lfact.invBodBodegas.bodNombre");
			
			nombreColumna = row.getColumn("ctrEstEstado.estId");
			nombreColumna.setTitleKey("tbl.lfact.fenEstado");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				if(value != null){
					if(value.equals(1)){
						value = "Impresa";
					}
					if(value.equals(2)){
						value = "Anulada";
					}
					if(value.equals(3)){
						value = "Guardada";
					}
				}
				return value;
			}
			});
			
			nombreColumna = row.getColumn("audUsuarioCreacion");
			nombreColumna.setTitleKey("tbl.lfact.eliminar");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

				public Object getValue(Object item, String property, int rowcount) {
					Object value = new BasicCellEditor().getValue(item, property, rowcount);
					FacFenFacturaEncabezado encabezado = (FacFenFacturaEncabezado) item;
					String texto = "";
					if(encabezado.getCtrEstEstado().getEstId().equals(3)){
						HtmlBuilder html = new HtmlBuilder();
						String del = "Eliminar";
						String link = tableFacade.getWebContext().getContextPath();
						link += "/facturacion/listaFacturas.do?fenId="
								+ encabezado.getFenId().toString()
								+ "&voc=1&accion=delete";
						html.a().href().quote().append(link).quote().append("class=\"linkEliminar\"").title(del).close();
						html.aEnd();
						texto = html.toString();
					}
				
					return texto;
				}
			});

		}else{
			tableFacade.setColumnProperties("fenTipoFactura","fenNumeroFactura",
					"fenFechaFactura","fenTotalVenta","fenCancelada",
					"invBodBodegas.bodNombre","ctrEstEstado.estId", "audUsuarioCreacion");
			Table table = tableFacade.getTable();
			//---- Titulo de la tabla
			table.setCaptionKey("tbl.lfact.caption2");
			
			Row row = table.getRow();
			
			Column nombreColumna = row.getColumn("fenNumeroFactura");
			nombreColumna.setTitleKey("tbl.lfact.fenNumeroFactura2");
			
			nombreColumna = row.getColumn("fenFechaFactura");
			nombreColumna.setTitleKey("tbl.lfact.fenFechaFactura");
			nombreColumna.getCellRenderer().setCellEditor(new DateCellEditor("dd-MMM-yyyy"));
			
			nombreColumna = row.getColumn("fenTotalVenta");
			nombreColumna.setTitleKey("tbl.lfact.fenTotalVenta");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

				public Object getValue(Object item, String property, int rowcount) {
					Object value1 = new BasicCellEditor().getValue(item, property, rowcount);
					String value = "";
					value = "<div align=\"right\">"+Format.formatDinero(value1)+"</div>";
					return value;
				}
				
			});
			
			nombreColumna = row.getColumn("fenCancelada");
			nombreColumna.setTitleKey("tbl.lfact.fenCancelada");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				FacFenFacturaEncabezado encabezado = (FacFenFacturaEncabezado)item;
				if(value != null){
					if(value.toString().equals("E")){
						value = "Efectivo";
					}
					if(value.toString().equals("C")){
						value = "Credito";
					}
					if(value.toString().equals("P")){
						value = "Pendiente";
					}
				}else value = "--";
				return value;
			}
			});
		
			
			nombreColumna = row.getColumn("invBodBodegas.bodNombre");
			nombreColumna.setTitleKey("tbl.lfact.invBodBodegas.bodNombre");
			
			nombreColumna = row.getColumn("fenTipoFactura");
			nombreColumna.setTitleKey("tbl.lfact.fenTipoFactura");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

				public Object getValue(Object item, String property, int rowcount) {
					Object value = new BasicCellEditor().getValue(item, property, rowcount);
					FacFenFacturaEncabezado encabezado = (FacFenFacturaEncabezado)item;
					//if(value.toString().equals("CO")){
					value =  encabezado.getFenSerieFactura();//"CO - " +;
					//}
					HtmlBuilder html = new HtmlBuilder();
					//String val = value;
					String link = tableFacade.getWebContext().getContextPath();
					link += "/facturacion/encabezadoFactura.do?accion=vista&compra=1&fenId="+ encabezado.getFenId();
					if(encabezado.getFenTipoFactura().equals("ND")){
						link += "&nva=true&fenTipoFactura=ND&view=ND";
					}else{
						link += "&nva=true&fenTipoFactura=CR&view=c";
					}
					if(encabezado.getCtrEstEstado().getEstId() == 1){
						link += "&impresa=1";
					}
					html.a().href().quote().append(link).quote().close();
					html.append(value);
					html.aEnd();
									
					return html.toString();
				}
				});
			
			
			nombreColumna = row.getColumn("ctrEstEstado.estId");
			nombreColumna.setTitleKey("tbl.lfact.fenEstado");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				if(value != null){
					if(value.equals(1)){
						value = "Impresa";
					}
					if(value.equals(2)){
						value = "Anulada";
					}
					if(value.equals(3)){
						value = "Guardada";
					}
				}
				return value;
			}
			});
			
			nombreColumna = row.getColumn("audUsuarioCreacion");
			nombreColumna.setTitleKey("tbl.lfact.eliminar");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

				public Object getValue(Object item, String property, int rowcount) {
					Object value = new BasicCellEditor().getValue(item, property, rowcount);
					FacFenFacturaEncabezado encabezado = (FacFenFacturaEncabezado) item;
					String texto = "";
					if(encabezado.getCtrEstEstado().getEstId().equals(3)){
						HtmlBuilder html = new HtmlBuilder();
						String del = "Eliminar";
						String link = tableFacade.getWebContext().getContextPath();
						link += "/facturacion/listaFacturas.do?fenId="
								+ encabezado.getFenId().toString()
								+ "&voc=2&accion=delete";
						html.a().href().quote().append(link).quote().append("class=\"linkEliminar\"").title(del).close();
						html.aEnd();
						texto = html.toString();
					}
				
					return texto;
				}
			});

		}
		
		return tableFacade.render();
	}
	
	//---- Funcion que genera los exports, el formato que tendran
	 private void export(final TableFacade tableFacade, final HttpServletRequest request, final int compra) {
			//int compra = (Integer)request.getSession().getAttribute("factCoV");
			if(compra == 1 || compra == 4){
				tableFacade.setColumnProperties("fenNumeroFactura","invProProveedor.proId",
						"fenFechaFactura","fenTotalVenta","fenCancelada","invBodBodegas.bodNombre");
				Table table = tableFacade.getTable();
				//---- Titulo de la tabla
				table.setCaptionKey("tbl.lfact.caption");
				
				Row row = table.getRow();
				
				Column nombreColumna = row.getColumn("fenNumeroFactura");
				nombreColumna.setTitleKey("tbl.lfact.fenNumeroFactura.x");

				nombreColumna = row.getColumn("invProProveedor.proId");
				nombreColumna.setTitleKey("tbl.lfact.invProProveedor.proCodigo");
				nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

					public Object getValue(Object item, String property, int rowcount) {
						Object value = new BasicCellEditor().getValue(item, property, rowcount);
						FacFenFacturaEncabezado encabezado = (FacFenFacturaEncabezado) item;
						
						InvProProveedorDAO proveedorDAO = new InvProProveedorDAO(getSessionHibernate(request));
						InvProProveedor proveedor = proveedorDAO.findById(encabezado.getInvProProveedor().getProId());
						value = proveedor.getProNombre();
						
						return value;// html.toString();
					}
				});
				
				nombreColumna = row.getColumn("fenFechaFactura");
				nombreColumna.setTitleKey("tbl.lfact.fenFechaFactura.x");
				nombreColumna.getCellRenderer().setCellEditor(new DateCellEditor("dd-MMM-yyyy"));
				
				nombreColumna = row.getColumn("fenTotalVenta");
				nombreColumna.setTitleKey("tbl.lfact.fenTotalVenta");
				nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

					public Object getValue(Object item, String property, int rowcount) {
						Object value1 = new BasicCellEditor().getValue(item, property, rowcount);
						String value = "";
						value = Format.formatDinero(value1);
						return value;
					}
					
				});
				
				nombreColumna = row.getColumn("fenCancelada");
				nombreColumna.setTitleKey("tbl.lfact.fenCancelada");
				nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

				public Object getValue(Object item, String property, int rowcount) {
					Object value = new BasicCellEditor().getValue(item, property, rowcount);
					FacFenFacturaEncabezado encabezado = (FacFenFacturaEncabezado)item;
					if(value != null){
						if(value.toString().equals("E")){
							value = "Efectivo";
						}
						if(value.toString().equals("C")){
							value = "Credito";
						}
						if(value.toString().equals("P")){
							value = "Pendiente";
						}
					}else value = "--";
					return value;
				}
				});
			
				
				nombreColumna = row.getColumn("invBodBodegas.bodNombre");
				nombreColumna.setTitleKey("tbl.lfact.invBodBodegas.bodNombre");

			}else{
				tableFacade.setColumnProperties("fenTipoFactura","fenNumeroFactura",
						"fenFechaFactura","fenTotalVenta","fenCancelada",
						"invBodBodegas.bodNombre");
				Table table = tableFacade.getTable();
				//---- Titulo de la tabla
				table.setCaptionKey("tbl.lfact.caption2");
				
				Row row = table.getRow();
				
				Column nombreColumna = row.getColumn("fenNumeroFactura");
				nombreColumna.setTitleKey("tbl.lfact.fenNumeroFactura2");
				
				nombreColumna = row.getColumn("fenFechaFactura");
				nombreColumna.setTitleKey("tbl.lfact.fenFechaFactura.x");
				nombreColumna.getCellRenderer().setCellEditor(new DateCellEditor("dd-MMM-yyyy"));
				
				nombreColumna = row.getColumn("fenTotalVenta");
				nombreColumna.setTitleKey("tbl.lfact.fenTotalVenta");
				nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

					public Object getValue(Object item, String property, int rowcount) {
						Object value1 = new BasicCellEditor().getValue(item, property, rowcount);
						String value = "";
						value = Format.formatDinero(value1);
						return value;
					}
					
				});
				
				nombreColumna = row.getColumn("fenCancelada");
				nombreColumna.setTitleKey("tbl.lfact.fenCancelada");
				nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

				public Object getValue(Object item, String property, int rowcount) {
					Object value = new BasicCellEditor().getValue(item, property, rowcount);
					FacFenFacturaEncabezado encabezado = (FacFenFacturaEncabezado)item;
					if(value != null){
						if(value.toString().equals("E")){
							value = "Efectivo";
						}
						if(value.toString().equals("C")){
							value = "Credito";
						}
						if(value.toString().equals("P")){
							value = "Pendiente";
						}
					}else value = "--";
					return value;
				}
				});
			
				
				nombreColumna = row.getColumn("invBodBodegas.bodNombre");
				nombreColumna.setTitleKey("tbl.lfact.invBodBodegas.bodNombre");
				
				nombreColumna = row.getColumn("fenTipoFactura");
				nombreColumna.setTitleKey("tbl.lfact.fenTipoFactura");
				nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

					public Object getValue(Object item, String property, int rowcount) {
						Object value = new BasicCellEditor().getValue(item, property, rowcount);
						FacFenFacturaEncabezado encabezado = (FacFenFacturaEncabezado)item;
						value =  encabezado.getFenSerieFactura();
										
						return value;
					}
					});

			}
		
		tableFacade.render();
	}
	 

	public ActionForward cancelar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		EncabezadoFacturaForm encabezadoForm = (EncabezadoFacturaForm)form;
		request.setAttribute("form", encabezadoForm);
		return lista(mapping, form, request, response);
	}
	
	
	public ActionForward dml(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		EncabezadoFacturaForm encabezadoForm = (EncabezadoFacturaForm)form;
		FacFenFacturaEncabezadoDAO encabezadoDAO = new FacFenFacturaEncabezadoDAO(getSessionHibernate(request));
		encabezadoForm.setFacturaEncabezadoH(encabezadoDAO.findById(encabezadoForm.getFenId()));
		request.setAttribute("form", encabezadoForm);
		request.setAttribute("filtro", 1);
		//request.setAttribute("compra", 1);
		request.setAttribute(Constantes.ACCION_KEY, "/listaFacturas");
		return mapping.findForward("dml");
	}
	
	public ActionForward buscar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		EncabezadoFacturaForm encabezadoFacturaForm = (EncabezadoFacturaForm)form;
		FacFenFacturaEncabezadoDAO encabezadoDAO = new FacFenFacturaEncabezadoDAO(getSessionHibernate(request));
		List lst = null;
		lst = encabezadoDAO.findByCriteria(encabezadoFacturaForm.getFacturaEncabezadoH(), encabezadoFacturaForm.getVoc(),
				encabezadoFacturaForm.getProCodigo(), encabezadoFacturaForm.getProNombre());
		
		InvBodBodegasDAO bodegasDAO = new InvBodBodegasDAO(getSessionHibernate(request));
		List lbod = bodegasDAO.findAll();
		if(lbod.size() > 0){
			request.setAttribute("listaBodegas", lbod);
		}else{
			//error
		}
		
		//request.getSession().setAttribute("factCoV", encabezadoFacturaForm.getCompra());
		
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);//, ExportType.PDF);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade, request, encabezadoFacturaForm.getVoc());
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request, encabezadoFacturaForm.getVoc());
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
		  //----- Variables de configuracion
		if(encabezadoFacturaForm.getVoc() == 1){
			request.setAttribute("compra", 1);
		}else{
			request.setAttribute("compra", 2);
		}
		request.setAttribute("form", encabezadoFacturaForm);
        request.setAttribute("filtro", "0");
		request.setAttribute(Constantes.ACCION_KEY, "/listaFacturas");
		return mapping.findForward("lista");
	}

	public ActionForward delete(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		EncabezadoFacturaForm encabezadoForm = (EncabezadoFacturaForm)form;
		FacFenFacturaEncabezadoDAO encabezadoDAO = new FacFenFacturaEncabezadoDAO(getSessionHibernate(request));
		FacFenFacturaEncabezado factura = encabezadoDAO.findById(encabezadoForm.getFenId());
		FacDfaDetalleFacturaDAO dfaDao = new FacDfaDetalleFacturaDAO(getSessionHibernate(request));
		List dfas = dfaDao.findByProperty("facFenFacturaEncabezado.fenId", factura.getFenId());
		for (Iterator iterator = dfas.iterator(); iterator.hasNext();) {
			FacDfaDetalleFactura dfa = (FacDfaDetalleFactura) iterator.next();
			dfaDao.delete(dfa);
		}
		Transaction tx = dfaDao.getSession().beginTransaction();
		tx.commit();
		dfaDao.getSession().flush();
		dfaDao.getSession().clear();
		
		encabezadoDAO.delete(factura);
		Transaction tx2 = encabezadoDAO.getSession().beginTransaction();
		tx2.commit();
		encabezadoDAO.getSession().flush();
		encabezadoDAO.getSession().clear();
		request.setAttribute("form", encabezadoForm);
		return lista(mapping, encabezadoForm, request, response);
	}
	
	public ActionForward limpiarGuardadas(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		EncabezadoFacturaForm encabezadoForm = (EncabezadoFacturaForm)form;
		FacFenFacturaEncabezadoDAO encabezadoDAO = new FacFenFacturaEncabezadoDAO(getSessionHibernate(request));
		List facturasAEliminar = encabezadoDAO.findAllCompraGuardadas(encabezadoForm.getVoc());
		for (Iterator iterator = facturasAEliminar.iterator(); iterator
				.hasNext();) {
			FacFenFacturaEncabezado factura = (FacFenFacturaEncabezado) iterator.next();
			FacDfaDetalleFacturaDAO dfaDao = new FacDfaDetalleFacturaDAO(getSessionHibernate(request));
			List dfas = dfaDao.findByProperty("facFenFacturaEncabezado.fenId", factura.getFenId());
			for (Iterator iterator2 = dfas.iterator(); iterator2.hasNext();) {
				FacDfaDetalleFactura dfa = (FacDfaDetalleFactura) iterator2.next();
				dfaDao.delete(dfa);
			}
			Transaction tx = dfaDao.getSession().beginTransaction();
			tx.commit();
			dfaDao.getSession().flush();
			dfaDao.getSession().clear();
			
			encabezadoDAO.delete(factura);
			Transaction tx2 = encabezadoDAO.getSession().beginTransaction();
			tx2.commit();
			encabezadoDAO.getSession().flush();
			encabezadoDAO.getSession().clear();
		}
		//FacFenFacturaEncabezado factura = encabezadoDAO.findById(encabezadoForm.getFenId());
		request.setAttribute("form", encabezadoForm);
		return lista(mapping, encabezadoForm, request, response);
	}
	
	protected Map getKeyMethodMap() {
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.lfact.lista", "lista");
		map.put("cmd.lfact.edit", "dml");
		map.put("cmd.proveedor.salvar", "salvar");
		map.put("cmd.proveedor.editar", "editar");
		map.put("cmd.proveedor.cancelar", "cancelar");
		map.put("cmd.proveedor.agregar", "agregar");
		map.put("cmd.encabezado.calcular", "calcular");
		map.put("cmd.detalle.lista", "ingresarDetalle");
		map.put("cmd.encabezado.cargaProvedor", "cargaProveedor");
		//map.put("cmd.encabezado.redirectInvalid ", arg1)
		//map.put("cmd.encabezado.newPrecioSugerido", "newPrecioSugerido");
		map.put("cmd.encabezado.Guardar2","Guardar2");
		map.put("cmd.listaFac.buscar", "buscar");
		map.put("cmd.lfact.delete", "delete");
		map.put("cmd.listaFac.limpiarGuardadas", "limpiarGuardadas");
		return map;
	}
}