/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.contabilidad.struts.action;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.hibernate.Transaction;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeImpl;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.html.HtmlBuilder;

import com.cetia.sicaco.contabilidad.struts.form.RelacionModuloContaForm;
import com.cetia.sicaco.hibernate.ConCpaConceptoPartida;
import com.cetia.sicaco.hibernate.ConCpaConceptoPartidaDAO;
import com.cetia.sicaco.hibernate.ConCueCuentaDAO;
import com.cetia.sicaco.hibernate.ConMxcModuloxCuentacontable;
import com.cetia.sicaco.hibernate.ConMxcModuloxCuentacontableDAO;
import com.cetia.sicaco.hibernate.CtaEtrEmpresaTrabajo;
import com.cetia.sicaco.hibernate.CtaEtrEmpresaTrabajoDAO;
import com.cetia.sicaco.hibernate.CtaTahTipoAhorro;
import com.cetia.sicaco.hibernate.CtaTahTipoAhorroDAO;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;

/** 
 * MyEclipse Struts
 * Creation date: 12-30-2008
 * 
 * XDoclet definition:
 * @struts.action path="/relacionProcesosEspeciales" name="relacionModuloContaForm" parameter="accion" scope="request"
 * @struts.action-forward name="lista" path="pagina-lista.contabilidad.unionProcesosEspeciales"
 */

/**
 * LOS PARAMETROS PARA UNION DE ORDEN DE PAGO SE RIGEN POR EL SIGUIENTE ORDEN
 * PARAMETRO[0] = PROCESO ESPECIAL AL QUE PERTENCE (5 - INGRESO DE ASOCIADOS, 6 - DISTRIBUCION DE DIVIDENDOS, 7 - LIQUIDACION DE ASOCIADOS (SALDO A FAVOR), 8 - DESCUENTOS PLANILLAS (DESCUENTOS DE MAS), 9 - MULTA DE AHORROS (PENALIDAD) 
 * PARAMETRO[1] = IDENTIFICADOR DEL TIPO DE AHORRO A PLAZO. SOLO SERA LLENADO ESTE PARAMETRO CUANDO EL PARAMETRO[0]=9.  
 * */
public class RelacionProcesosEspecialesAction extends DMLAction {
	
private static final String TABLA_ID="conMxcModuloxCuentaContable";
	
	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		RelacionModuloContaForm relacionForm = (RelacionModuloContaForm) form;
		ConMxcModuloxCuentacontableDAO moduloxCuentacontableDAO  = new ConMxcModuloxCuentacontableDAO(getSessionHibernate(request));
		ConCueCuentaDAO cuentaDAO = new ConCueCuentaDAO(getSessionHibernate(request));
		CtaTahTipoAhorroDAO tipoAhorroDAO = new CtaTahTipoAhorroDAO(getSessionHibernate(request));
 		ConCpaConceptoPartidaDAO conceptoPartidaDAO = new ConCpaConceptoPartidaDAO(getSessionHibernate(request));
 		
 		CtaEtrEmpresaTrabajoDAO empresaTrabajoDAO = new CtaEtrEmpresaTrabajoDAO(getSessionHibernate(request));
 		List empList = empresaTrabajoDAO.findAll();
 		
 		List ahorros = tipoAhorroDAO.findAPlazos();
		List cpaList = moduloxCuentacontableDAO.findByModulo(5);
		cpaList.addAll(moduloxCuentacontableDAO.findByModulo(6));
		cpaList.addAll(moduloxCuentacontableDAO.findByModulo(7));
		cpaList.addAll(moduloxCuentacontableDAO.findByModulo(8));
		cpaList.addAll(moduloxCuentacontableDAO.findByModulo(9));
		
		//Se agrego el modulo 10 que es para mandar el sobrante a Cuentas de Socios Retirados
		cpaList.addAll(moduloxCuentacontableDAO.findByModulo(10));
		//Se agrego el modulo 11 que es para cobrar la cuota de ingreso por descuento en planilla
		cpaList.addAll(moduloxCuentacontableDAO.findByModulo(11));
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(cpaList);
		//---- Genera los tipos de formas con que se podran exportar los datos
		//tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
        	//---- exporta la tabla
        //    export(tableFacade);
            return null; 
        } else {
        	String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
		//reseteamos el form
		relacionForm.setParametro(0,"-1");
		relacionForm.setParametro(1,"-1");
		relacionForm.getConCueCuenta().setCueId(-1);
		relacionForm.setConCpaConceptoPartida(new ConCpaConceptoPartida());
		relacionForm.getConCpaConceptoPartida().setCpaId(-2);
		relacionForm.setCxcCargoAbono((byte)-1);
        //----- Variables de configuracion
		request.setAttribute("conceptos", conceptoPartidaDAO.findByCpaDescripcionConcepto(1));
		request.setAttribute("cuentasContables", cuentaDAO.findByCuePosteable(0));
		request.setAttribute("lahorros", ahorros);
		request.setAttribute("form", form);
		request.setAttribute("empList", empList);
		request.setAttribute(Constantes.ACCION_KEY, "/relacionProcesosEspeciales");
		return mapping.findForward("lista");
	}
	
	private ActionErrors validarGuardado(RelacionModuloContaForm relacionForm){
		ActionErrors errors = new ActionErrors();
		if(Integer.parseInt(relacionForm.getParametro(0)) == -1){
			errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.proCon.procesoNoseleccionado"));
		}
		if(relacionForm.getConCpaConceptoPartida().getCpaId() == -2){
			errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.mxcc.conceptoRequired"));
		}else{
			if(relacionForm.getConCpaConceptoPartida().getCpaId() == -1 && relacionForm.getCxaConceptoExtra().trim().equals("")){//validamos que el otro concepto no sea vacio
				errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.mxcc.conceptoRequired"));
			}
		}
		if(relacionForm.getConCueCuenta().getCueId() == -1){
			errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.mxcc.cuentaContableRequired"));
		}
		if(relacionForm.getCxcCargoAbono() == -1){
			errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.mxcc.accionRequired"));
		}
		if(relacionForm.getParametro(0).equals("9") && relacionForm.getParametro(1).equals("-1")){
			errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.proCon.tipoAhorroRequired"));
		}
		if(relacionForm.getParametro(0).equals("8") && relacionForm.getParametro(2).equals("-1")){
			errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.proCon.empresaRequired"));
		}
		
		return errors;
	}
	
	private String html(final TableFacade tableFacade, final HttpServletRequest request) {
		tableFacade.setColumnProperties("cueId","cxcId","cxcCargoAbono","cxaConceptoExtra");
		Table table = tableFacade.getTable();
		
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.cxc.caption");
		
		Row row = table.getRow();
		Column nombreColumna = row.getColumn("cueId");
		nombreColumna.setTitleKey("tbl.cxc.cuentaContable");
		
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				ConMxcModuloxCuentacontable cmx = (ConMxcModuloxCuentacontable) item;
				return cmx.getConCueCuenta().getCueCodigoCuenta() + " / " + (cmx.getConCpaConceptoPartida()!=null?cmx.getConCpaConceptoPartida().getCpaConcepto():cmx.getCxaConceptoExtra());
			}
		});
		
		nombreColumna = row.getColumn("cxcId");
		nombreColumna.setTitleKey("tbl.cxc.proceso");
		
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				String value = "";
				ConMxcModuloxCuentacontable cmx = (ConMxcModuloxCuentacontable) item;
				CtaTahTipoAhorroDAO tipoAhorroDAO = new CtaTahTipoAhorroDAO(getSessionHibernate(request));
				String[] pars = cmx.getCxcParametrosUnion().split(";");
				int proc = new Integer(pars[0]);
				switch (proc) {
				case 5:
					value="Ingreso de Asociados";
					break;
				case 6:
					value="Distribucion de Dividendos";
					break;
				case 7:
					value="Liquidacion de Asociados (Saldo a Favor)";
					break;
				case 8:
					value="Descuento en Planilla (Retenciones de Mas)";
					break;
				case 9:
					int tahId = new Integer(pars[1]);
					CtaTahTipoAhorro tipoAhorro = tipoAhorroDAO.findById(tahId);
					value="Multa de Ahorros - "+tipoAhorro.getTahNombre();
					break;
				case 11:
					value="Cuota de Ingreso (Por Descuento en Planilla)";
					break;					
				}
				return value;
			}
		});
		
		nombreColumna = row.getColumn("cxcCargoAbono");
		nombreColumna.setTitleKey("tbl.cxc.cargoAbono");
		
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
			String value = null;
			ConMxcModuloxCuentacontable modulo = (ConMxcModuloxCuentacontable) item;
			if(modulo.getCxcCargoAbono() == 1) value = "Cargo";
			else value = "Abono";
			return value;
			}
		});
		
		nombreColumna = row.getColumn("cxaConceptoExtra");
		nombreColumna.setTitleKey("tbl.cxc.opcion");
		
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				HtmlBuilder html = new HtmlBuilder();
				ConMxcModuloxCuentacontable modulo = (ConMxcModuloxCuentacontable) item;
				String eliminar = "Eliminar";
				html.a().onclick("handlerDeleteButton('"+ modulo.getCxcId() +"');").append("class=\"linkEliminar\"").style("cursor: pointer;").title(eliminar).id("deleteButtonId").close();
				html.aEnd();
				return html.toString();
			}
		});
		return tableFacade.render();
	}
	
	public ActionForward guardar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ActionErrors errors = new ActionErrors();
		ConMxcModuloxCuentacontableDAO mxcModuloxCuentacontableDAO = new ConMxcModuloxCuentacontableDAO(getSessionHibernate(request));
		RelacionModuloContaForm relacionForm = (RelacionModuloContaForm) form;
		errors = validarGuardado(relacionForm);
		Transaction tx = mxcModuloxCuentacontableDAO.getSession().beginTransaction();
		String parametros = relacionForm.getParametro(0);
		if(relacionForm.getParametro(0).equals("9")){//se verifica si debe concatenarse o no el parametro
			parametros += ";"+relacionForm.getParametro(1);
		}
		if(relacionForm.getParametro(0).equals("8")){//se verifica si debe concatenarse o no el parametro de la empresa
			parametros += ";"+relacionForm.getParametro(2);
		}
		if(relacionForm.getParametro(0).equals("5")){//se verifica el pago de la cuota
			parametros += ";"+relacionForm.getParametro(2);
		}		
		if(!mxcModuloxCuentacontableDAO.findByCuentaParametros(relacionForm.getConCueCuenta().getCueId(), parametros).isEmpty()){
			errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.proCon.relacionRepetida"));
		}
		if(errors.isEmpty()){
			if (relacionForm.getParametro(0).equals("8")){//Coloco el id de la empresa si es descuento en planilla.
				ConMxcModuloxCuentacontable modulo = relacionForm.getModuloxCuentacontable();
				String concepto = modulo.getCxaConceptoExtra();
				CtaEtrEmpresaTrabajoDAO empDAO = new CtaEtrEmpresaTrabajoDAO(getSessionHibernate(request));
				Integer idEmp = new Integer(relacionForm.getParametro(2));
				CtaEtrEmpresaTrabajo emp = empDAO.findById(idEmp);
				concepto+= " ("+emp.getEtrNombre().toUpperCase()+")"; 
				modulo.setCxaConceptoExtra(concepto);
				relacionForm.setModuloxCuentacontable(modulo);	
			}
			if (relacionForm.getParametro(0).equals("5")){//Coloco si pago cuota o no
				ConMxcModuloxCuentacontable modulo = relacionForm.getModuloxCuentacontable();
				String concepto = modulo.getCxaConceptoExtra();
				Integer pagoCuota = new Integer(relacionForm.getParametro(2));
				if(pagoCuota==1) concepto+= " (S&iacute;)";
				else concepto+= " (No)"; 
				modulo.setCxaConceptoExtra(concepto);
				relacionForm.setModuloxCuentacontable(modulo);				
			}
			try{
				if(relacionForm.getConCpaConceptoPartida().getCpaId() == -1) relacionForm.setConCpaConceptoPartida(null);
				relacionForm.getModuloxCuentacontable().setCxcParametrosUnion(parametros);
				relacionForm.setCxcFechaRelacion(new Date());
				mxcModuloxCuentacontableDAO.save(relacionForm.getModuloxCuentacontable());
				tx.commit();
			}catch (Exception e) {
				tx.rollback();
				e.printStackTrace();
			}finally{
				mxcModuloxCuentacontableDAO.getSession().flush();
				mxcModuloxCuentacontableDAO.getSession().clear();
				
			}
		}
		saveMessages(request, errors);	
		return lista(mapping, form, request, response);
	}
	
	public ActionForward eliminar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ConMxcModuloxCuentacontableDAO mxcModuloxCuentacontableDAO = new ConMxcModuloxCuentacontableDAO(getSessionHibernate(request));
		RelacionModuloContaForm relacionForm = (RelacionModuloContaForm) form;
		Transaction tx = mxcModuloxCuentacontableDAO.getSession().beginTransaction();
		try{
			mxcModuloxCuentacontableDAO.delete(mxcModuloxCuentacontableDAO.findById(relacionForm.getCxcId()));
			tx.commit();
		}catch (Exception e) {
			tx.rollback();
			e.printStackTrace();
		}finally{
			mxcModuloxCuentacontableDAO.getSession().flush();
			mxcModuloxCuentacontableDAO.getSession().clear();
			
		}
		return lista(mapping, form, request, response);
	}
	
	protected Map getKeyMethodMap() {
		Map<String, String> map = new HashMap<String, String>();
		map.put("cmd.proCon.lista","lista");
		map.put("cmd.proCon.guardar","guardar");
		map.put("cmd.proCon.eliminar","eliminar");
		return map;
	}
	
	
}