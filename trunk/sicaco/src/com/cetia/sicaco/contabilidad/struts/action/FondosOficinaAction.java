/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.contabilidad.struts.action;

import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.hibernate.Transaction;

import com.cetia.sicaco.contabilidad.struts.form.FondosOficinaForm;
import com.cetia.sicaco.hibernate.ConCueCuenta;
import com.cetia.sicaco.hibernate.ConCueCuentaDAO;
import com.cetia.sicaco.hibernate.ConLofLiquidacionOficina;
import com.cetia.sicaco.hibernate.ConLofLiquidacionOficinaDAO;
import com.cetia.sicaco.hibernate.HibernateSessionFactory;
import com.cetia.sicaco.hibernate.SecIseInicioSesion;
import com.cetia.sicaco.hibernate.SecIseInicioSesionDAO;
import com.cetia.sicaco.hibernate.SecPerPersonaDAO;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;
import com.cetia.sicaco.struts.PartidaAutomatica;
import com.mad.utilidades.Cuenta;
import com.mad.utilidades.ExportWebReport;
import com.mad.utilidades.ReportFile;

/**
 * Mr. Struts Creation date: 11-17-2009
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/fondosOficina" name="fondosOficinaForm"
 *                parameter="accion" scope="request"
 * @struts.action-forward name="dml"
 *                        path="pagina-dml.contabilidad.fondosOficina"
 */
public class FondosOficinaAction extends DMLAction {

	public ActionForward dml(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		request.setAttribute(Constantes.ACCION_KEY, "/fondosOficina");
		ConCueCuentaDAO cuentaDAO = new ConCueCuentaDAO(getSessionHibernate(request));
		// cargando la lista de bancos disponibles para remesar :
		List bancos = cuentaDAO.getBancos();
		request.setAttribute("bancos", bancos);
		// cargando el saldo disponible en la cuenta de "fondos de oficina":
		ConCueCuentaDAO cueDAO = new ConCueCuentaDAO(getSessionHibernate(request));
		ConCueCuenta fondosOf = (ConCueCuenta)cueDAO.findByCueCodigoCuenta("11102").get(0);
		Double saldoOf = fondosOf.getCueSaldoActual();
		DecimalFormat df = new DecimalFormat("0.00");
		String saldo = df.format(saldoOf);
		request.getSession().setAttribute("saldoOf", saldo);
		request.getSession().setAttribute("listaRemesas",
				new HashMap<Long, ConLofLiquidacionOficina>());
		return mapping.findForward("dml");
	}

	public ActionForward imprimirReporte(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
 
		FondosOficinaForm fofiform = (FondosOficinaForm)form;
		ExportWebReport ewr = new ExportWebReport();
		ConLofLiquidacionOficinaDAO lofDAO = new ConLofLiquidacionOficinaDAO(getSessionHibernate(request));
		SecIseInicioSesionDAO sesionDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
		Transaction tx = lofDAO.getSession().beginTransaction();
		SecIseInicioSesion sesion = sesionDAO.findById(fofiform.getUsuarioConectado().getNombreUsuario());
		
		String jdbcDriver = "com.mysql.jdbc.Driver";
		try {
			Class.forName(jdbcDriver);
			String url = HibernateSessionFactory.getConfiguration().getProperty("connection.url");
			String user = HibernateSessionFactory.getConfiguration().getProperty("connection.username");
			String pass = HibernateSessionFactory.getConfiguration().getProperty("connection.password");
			ServletContext sc = getServlet().getServletContext();
			
			String pathJasper= sc.getRealPath("/listaReportes/cierreDeCaja/CierreDeCaja.jasper");
			String pathJrxml=sc.getRealPath("/listaReportes/cierreDeCaja/CierreDeCaja.jrxml");
			ReportFile rep = new ReportFile();
			rep.setPathJasper(pathJasper);
			rep.setPathReport(pathJrxml);
			
			rep.addParameter("saldoAntFondosOficina",fofiform.getSaldoActual());
			rep.addParameter("solicitadoPor",fofiform.getSolicita());
			rep.addParameter("sucursal",sesion.getSecPerPersona().getSecSucSucursal().getSucNombre());
			rep.addParameter("sucId", sesion.getSecPerPersona().getSecSucSucursal().getSucId());
			rep.addParameter("autoriza", fofiform.getAutoriza());
			String s = fofiform.getFecha();
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
			SimpleDateFormat sdf2 = new SimpleDateFormat("dd-MM-yyyy");
			if(s==null || s.equals("")|| s.length() < 1){
				rep.addParameter("fecha", new Date());
			}else{
				rep.addParameter("fecha", sdf2.parse(s));
			}
			Connection con = DriverManager.getConnection(url, user, pass);
			
			ewr.setReportFile(rep);
			ewr.exportPDFWeb("ReporteCierreDeCaja", request, response, true, con);
			//lofDAO.deleteAll();
			tx.commit();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			tx.rollback();
			e.printStackTrace();
		}		
		lofDAO.getSession().flush();
		lofDAO.getSession().clear();
		return null;
	
	}

	public ActionForward cancelar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
			return dml(mapping, new FondosOficinaForm(), request, response);
	}

	public ActionForward actualizarCierre(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {

		FondosOficinaForm fofiForm = (FondosOficinaForm) form;

		// ----------------------------Almacenando las remesas--------------------------------
		ConLofLiquidacionOficinaDAO remDAO = new ConLofLiquidacionOficinaDAO(getSessionHibernate(request));
		Transaction tRem = remDAO.getSession().beginTransaction();
		ConCueCuentaDAO cueDAO = new ConCueCuentaDAO(getSessionHibernate(request));
		Transaction tx = cueDAO.getSession().beginTransaction();
		// ¿Eliminar las Remesas antiguas? NO.

		// Obtengo las remesas, las almaceno y actualizo la cuenta de fondos de oficina :)
		HashMap<Long, ConLofLiquidacionOficina> mapa = (HashMap<Long, ConLofLiquidacionOficina>) request.getSession().getAttribute("listaRemesas");
		Iterator<Long> iNewRem = mapa.keySet().iterator();
		Double remesas = 0.0;
		String tipo = "";
		String concepto = "";
		String usuario =fofiForm.getUsuarioConectado().getNombreUsuario();
		long i;
		PartidaAutomatica partidaAutomatica =  new PartidaAutomatica();
		while (iNewRem.hasNext()) {
			i = iNewRem.next().longValue();
			ConLofLiquidacionOficina remesa = (ConLofLiquidacionOficina) mapa
					.get(i);
			remesas = remesas + remesa.getValorDepositado();
			remDAO.save(remesa);
			tRem.commit();

			// Actualizar la cuenta de bancos
			ConCueCuenta banco = (ConCueCuenta) cueDAO.findByCueCodigoCuenta(
					remesa.getCueId()).get(0);
			banco.setAudFechaModificacion(new Date());
/*			Double saldoBan = banco.getCueSaldoActual()
					- remesa.getValorDepositado();
			banco.setCueSaldoActual(saldoBan);
			cueDAO.merge(banco);
			concepto = banco.getCueNombre();*/
			// Enviar el banco a conta :P
			tipo = "C";
			partidaAutomatica.crearPartidaAutomaticaCC2(banco.getCueId()
					.toString(), remesa.getValorDepositado(), tipo, usuario,concepto,request);

		}
		// actualizar la cuenta de fondos de oficina
		ConCueCuenta fonOfi = (ConCueCuenta) cueDAO.findByCueCodigoCuenta(
				"11102").get(0);/*
		fonOfi.setAudFechaModificacion(new Date());
		Double saldo = fonOfi.getCueSaldoActual() - remesas;
		fonOfi.setCueSaldoActual(saldo);
		cueDAO.merge(fonOfi);
*/
		tx.commit();
		cueDAO.getSession().flush();
		cueDAO.getSession().clear();
		// Enviar a Contabilidad la cuenta de fondos de oficina
		tipo="A";
		//concepto=fonOfi.getCueNombre();
		concepto = "REMESAS DEL DIA";
		
		partidaAutomatica.crearPartidaAutomaticaCC2(fonOfi.getCueId().toString(), remesas, tipo, usuario,concepto,request);
		//Exito
		mensajes("lbl.fondosOficina.exito",request);
		return dml(mapping, new FondosOficinaForm(), request, response);
	}

	public ActionForward cargarListaCuentas(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		ConCueCuentaDAO cuentaDAO = new ConCueCuentaDAO(getSessionHibernate(request));
		FondosOficinaForm fof = (FondosOficinaForm) form;
		try {
			String listaResponse = "";
			String tipo = fof.getBanId().toString().substring(0, 1);
			String bancoId = fof.getBanId().toString().substring(1);
			listaResponse = construirListaCuentas(cuentaDAO.getCuentasDeBanco(
					bancoId, tipo));
			response.getWriter().write(listaResponse);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (RuntimeException e) {
			log.error("Error runtime", e);
		} catch (IOException e) {
			log.error(e);
		}
		return null;
	}

	private String construirListaCuentas(List listaCuentas) {
		String resp = "";
		if (listaCuentas == null || listaCuentas.isEmpty()) {
			resp += "<span style=\"font-size: 10px;color: red;font-style: italic;\">"
					+ "    No se encontraron cuentas asociadas.</span>";
		} else {
			resp = "<select id=\"cueId\" name=\"cueId\"  style=\"width: 350px; font-family: 'Lucida Sans Unicode', 'Lucida Grande', Sans-Serif; font-size: 13px;\">";
			for (Iterator<Cuenta> iterator = listaCuentas.iterator(); iterator
					.hasNext();) {
				Cuenta cuenta = iterator.next();
				resp += "<option value=\"" + cuenta.getCodigo() + "\">"
						+ cuenta.getNombre() + "</option>";
			}
			resp += "</select>";
		}
		return resp;
	}

	public void mensajes(String msg, HttpServletRequest request) {
		ActionErrors errors = new ActionErrors();
		errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(msg));
		saveMessages(request, errors);
	}

	private String construirListaErrores2(ArrayList<String> errors) {
		String errores = "<label align=\"center\" style=\"color: red;text-transform: none\">Se han encontrado los siguientes errores:</label><br>";
		Iterator<String> it = errors.iterator();
		while (it.hasNext()) {
			errores = errores
					+ "<label style=\"color: red;text-transform: none\">- "
					+ it.next() + "</label><br>";
		}
		return errores;
	}

	private String construirListaErrores(ArrayList<String> errors) {
		String errores = "<div id = \"errores\" style=\"text-align:left; width: 48%; font-family:Arial, Helvetica, sans-serif; font-size:11px; color:#F16F6F; background-color: #ffe7e7; border: 1px solid; margin: 10px 0px; padding:5px 5px 5px 5px; background-repeat: no-repeat; background-position: 10px center\"><b>Se han encontrado los siguientes errores:</b></br><UL>";
		Iterator<String> it = errors.iterator();
		while (it.hasNext()) {
			errores = errores + "<li>" + it.next() + "</li>";
		}
		errores = errores
				+ "<UL> <div align=\"right\"> <input type=\"button\"  value=\"ok\" style = \"font-size: 11;\" onclick=\"$('#errores').fadeOut()\"/> </div>"
				+ "</div>";
		return errores;
	}

	private String construirListaRemesas(
			HashMap<Long, ConLofLiquidacionOficina> mapa,
			HttpServletRequest request) {
		String html = "<table id=\"hor-zebra\" style=\"width: 50%; margin: auto;\" align=\"center\">";
		html = html
				+ "<thead><tr><th scope=\"col\" class=\"th1\" style=\"text-align: left;\">&nbsp;</th>"
				+ "<th scope=\"col\" class=\"th1\" style=\"text-align: left;\" > Banco y cuenta bancaria </th>"
				+ "<th scope=\"col\" class=\"th1\" style=\"text-align: left;\" >Valor</th>"
				+ "</tr></thead><tbody>";
		long i;
		int j = 1, size;
		size = mapa.size();
		if (size > 0) {
			Iterator<Long> iterator = mapa.keySet().iterator();

			while (iterator.hasNext()) {
				i = iterator.next().longValue();
				ConLofLiquidacionOficina remesa = (ConLofLiquidacionOficina) mapa
						.get(i);

				if (j % 2 == 0) {
					html = html + "<tr scope=\"row\">";
					html = html
							+ "<td><input type=\"checkbox\" name=\"posicionRemesas\" class=\"posicionRemesas\" value=\""
							+ i
							+ "\"/></td>"
							+ "<td>"
							+ remesa.getCueNombre()
							+ "</td><td><input type=\"text\" name=\"montoRemesa\" value=\""
							+ remesa.getValorDepositado()
							+ "\" id=\""
							+ i
							+ "\" style=\"border: none;background-color: ffffff;\" readonly=\"readonly\" class=\"input\"/></td></tr>";
				} else {
					html = html + "<tr class=\"odd\" scope=\"row\">";
					html = html
							+ "<td><input type=\"checkbox\" name=\"posicionRemesas\" class=\"posicionRemesas\" value=\""
							+ i
							+ "\"/></td>"
							+ "<td>"
							+ remesa.getCueNombre()
							+ "</td><td><input type=\"text\" name=\"montoRemesa\" value=\""
							+ remesa.getValorDepositado()
							+ "\" id=\""
							+ i
							+ "\" style=\"border: none;background-color: #e8edff;\" readonly=\"readonly\" class=\"input\"/></td></tr>";
				}
				j++;
			}
		} else {
			html = html
					+ "<tr class=\"odd\"><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>"
					+ "<tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>";
		}
		html = html + "</tbody></table>";
		return html;
	}

	public ActionForward guardarRemesa(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		FondosOficinaForm fofiForm = (FondosOficinaForm) form;
		String listaResponse = "";
		String listaErrores = "";
		DecimalFormat df = new DecimalFormat("0.00");
		try {
			String saldoString = (String) request.getSession().getAttribute(
					"saldoOf");
			Double saldoOf = df.parse(saldoString).doubleValue();
			ConCueCuentaDAO cueDAO = new ConCueCuentaDAO(getSessionHibernate(request));
			ConCueCuenta cue = new ConCueCuenta();
			ConLofLiquidacionOficina remesa = new ConLofLiquidacionOficina();
			// poblar el objeto remesa
			Integer id = new Integer(fofiForm.getCueId());
			ArrayList<String> errors = new ArrayList<String>();
			if (id == -1)
				errors.add("Debe escoger una cuenta para remesar");
			else {
				SecPerPersonaDAO perDAO = new SecPerPersonaDAO(getSessionHibernate(request));
				SecIseInicioSesionDAO iseDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
				remesa.setCueId(id);
				cue = (ConCueCuenta) cueDAO.findByCueCodigoCuenta(id).get(0);
				remesa.setCueNombre(cue.getCueNombre());
				remesa.setFecha(new Date());
				remesa.setValorDepositado(fofiForm.getRemesar());
				String usu = fofiForm.getUsuarioConectado().getNombreUsuario();
				Integer sucId = iseDAO.findById(usu).getSecPerPersona().getSecSucSucursal().getSucId();
				remesa.setSucId(sucId);
				
			}
			HashMap<Long, ConLofLiquidacionOficina> mapa = (HashMap<Long, ConLofLiquidacionOficina>) request
					.getSession().getAttribute("listaRemesas");

			if (fofiForm.getRemesar() <= 0 || fofiForm.getRemesar() == null) {
				errors.add("La cantidad a remesar debe ser mayor a cero ");
			}
			if (fofiForm.getRemesar() > saldoOf) {
				errors
						.add("La cantidad sobrepasa el saldo en Fondos de oficina ");
			}
			if (!errors.isEmpty()) {
				listaErrores = construirListaErrores(errors);
			} else {
				saldoOf = saldoOf - fofiForm.getRemesar();
				mapa.put(System.currentTimeMillis(), remesa);
				request.getSession().setAttribute("listaRemesas", mapa);
				request.getSession()
						.setAttribute("saldoOf", df.format(saldoOf));
			}
			listaResponse = construirListaRemesas(mapa, request);
			response.getWriter().write(listaErrores + listaResponse);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	public ActionForward eliminarRemesa(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		FondosOficinaForm fofiForm = (FondosOficinaForm) form;
		HashMap<Long, ConLofLiquidacionOficina> mapa = (HashMap<Long, ConLofLiquidacionOficina>) request
				.getSession().getAttribute("listaRemesas");
		double remesa = 0;
		if (fofiForm.getPosicionRemesas() != null) {
			int size = fofiForm.getPosicionRemesas().length;
			int i = 0;
			while (i < size) {
				ConLofLiquidacionOficina remesaPre = mapa.get(fofiForm
						.getPosicionRemesas()[i]);
				remesa = remesa + remesaPre.getValorDepositado();
				mapa.remove(fofiForm.getPosicionRemesas()[i]);
				i++;
			}
		}
		try {
			request.setAttribute("remesa", remesa);
			request.getSession().setAttribute("listaRemesas", mapa);
			response.getWriter().write(construirListaRemesas(mapa, request));
			response.getWriter().flush();
			response.getWriter().close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	}

	protected Map<String, String> getKeyMethodMap() {
		HashMap<String, String> map = new HashMap<String, String>();
		// fondosOficina
		map.put("cmd.fondosOficina.dml", "dml");
		map.put("cmd.fondosOficina.imprimirReporte", "imprimirReporte");
		map.put("cmd.fondosOficina.cancelar", "cancelar");
		map.put("cmd.fondosOficina.actualizarCierre", "actualizarCierre");
		map.put("cmd.fondosOficina.cargarListaCuentas", "cargarListaCuentas");
		map.put("cmd.fondosOficina.guardarRemesa", "guardarRemesa");
		map.put("cmd.fondosOficina.eliminarRemesa", "eliminarRemesa");
		return map;
	}
}