/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.control.struts.action;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.hibernate.Transaction;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeImpl;
import org.jmesa.limit.ExportType;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.BasicCellEditor;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.html.HtmlBuilder;

import com.cetia.sicaco.control.struts.form.BancosForm;
import com.cetia.sicaco.hibernate.CtrBanBanco;
import com.cetia.sicaco.hibernate.CtrBanBancoDAO;
import com.cetia.sicaco.hibernate.CtrPaiPaisDAO;
import com.cetia.sicaco.hibernate.CtrParParametrosDAO;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;

/** 
 * MyEclipse Struts
 * Creation date: 09-18-2008
 * 
 * XDoclet definition:
 * @struts.action path="/bancos" name="bancosForm" input="redirectInvalidData" parameter="accion" scope="request" validate="true"
 * @struts.action-forward name="lista" path="pagina-lista.control.bancos"
 */
public class BancosAction extends DMLAction {

	public String TABLA_ID = "ctrBanBanco";

	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		BancosForm bancosForm = (BancosForm)form;
		
		CtrBanBancoDAO bancoDAO = new CtrBanBancoDAO(getSessionHibernate(request));
		
		List lst = bancoDAO.findAll();
		
		CtrPaiPaisDAO paisDAO = new CtrPaiPaisDAO(getSessionHibernate(request));
		List paises = paisDAO.findAll();
		request.setAttribute("listPais", paises);

		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);

		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
			//---- exporta la tabla
			export(tableFacade);
			return null; 
		} else {
			//---- genera el html de la tabla para ser mostrada
			String html = html(tableFacade, request);
			request.setAttribute(Constantes.LISTA_KEY, html);
		}
		//----- Variables de configuracion
		request.setAttribute("form", bancosForm);
		request.setAttribute("edit", 0);
		request.setAttribute(Constantes.ACCION_KEY, "/bancos");
		return mapping.findForward("lista");
	}

	//---- metodo que genera el html de la tabla del jmesa
	private String html(final TableFacade tableFacade, final HttpServletRequest request) {
		tableFacade.setColumnProperties("banNombre", "ctrPaiPais.paiNombre", "banId");
		Table table = tableFacade.getTable();
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.bancos.caption");

		Row row = table.getRow();
		Column nombreColumna = row.getColumn("banNombre");
		nombreColumna.setTitleKey("tbl.bancos.banNombre");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtrBanBanco banco = (CtrBanBanco)item;
				
				HtmlBuilder html = new HtmlBuilder();
				String link = tableFacade.getWebContext().getContextPath();
				link += "/control/bancos.do?accion=cargarDatos&banId=" + banco.getBanId();
				html.a().href(link).close();
				html.append(value);
				html.aEnd();				
				return html.toString();		
			}
		});

		nombreColumna = row.getColumn("ctrPaiPais.paiNombre");
		nombreColumna.setTitleKey("tbl.bancos.ctrPaiPais.paiNombre");

		nombreColumna = row.getColumn("banId");
		nombreColumna.setTitleKey("tbl.bancos.acciones");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtrBanBanco banco = (CtrBanBanco)item;

				HtmlBuilder html = new HtmlBuilder();
				value = "eliminar";
				//String link = tableFacade.getWebContext().getContextPath();
				html.a().onclick("handlerDeleteButton("+ banco.getBanId() + ");").append("class=\"linkEliminar\"").title(value.toString()).id("deleteButtonId").close();
			//	html.append(value);
				html.aEnd();				
				return html.toString();		
			}

		});

		return tableFacade.render();
	}

	//---- metodo que genera los exports, el formato que tendran
	private void export(final TableFacade tableFacade) {
		tableFacade.setColumnProperties("banNombre", "ctrPaiPais.paiNombre");
		Table table = tableFacade.getTable();
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.bancos.caption");

		Row row = table.getRow();
		Column nombreColumna = row.getColumn("banNombre");
		nombreColumna.setTitleKey("tbl.bancos.banNombre");

		nombreColumna = row.getColumn("ctrPaiPais.paiNombre");
		nombreColumna.setTitleKey("tbl.bancos.ctrPaiPais.paiNombre");

		tableFacade.render();
	}

	public ActionForward guardar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		BancosForm bancosForm = (BancosForm)form;
		
		CtrBanBancoDAO bancoDAO = new CtrBanBancoDAO(getSessionHibernate(request));

		Transaction tx = bancoDAO.getSession().beginTransaction();
		try{
			if(bancoDAO.findByBanNombre(bancosForm.getBancoH().getBanNombre()).isEmpty()){
				CtrParParametrosDAO parametrosDAO = new CtrParParametrosDAO(getSessionHibernate(request));
				
				CtrPaiPaisDAO paisDAO = new CtrPaiPaisDAO(getSessionHibernate(request));
				bancosForm.setCtrPaiPais(paisDAO.findById(bancosForm.getCtrPaiPais().getPaiId()));
				bancoDAO.save(bancosForm.getBancoH());
			}else{
				mensajes("errors.bancosNombreRepetido",request);
				return lista(mapping, form, request, response);
			}
		}catch(Exception e){
			tx.rollback();
			e.printStackTrace();
		}finally{
			tx.commit();
			bancoDAO.getSession().flush();
			bancoDAO.getSession().clear();
			
		}
		return lista(mapping,new BancosForm(),request,response);
	} 

	public ActionForward cargarDatos(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		BancosForm bancosForm = (BancosForm)form;
		
		CtrBanBancoDAO bancoDAO = new CtrBanBancoDAO(getSessionHibernate(request));
		bancosForm.setBancoH(bancoDAO.findById(bancosForm.getBanId()));
		
		List lst = bancoDAO.findAll();
		
		CtrPaiPaisDAO paisDAO = new CtrPaiPaisDAO(getSessionHibernate(request));
		List paises = paisDAO.findAll();
		request.setAttribute("listPais", paises);

		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);

		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
			//---- exporta la tabla
			export(tableFacade);
			return null; 
		} else {
			//---- genera el html de la tabla para ser mostrada
			String html = html(tableFacade, request);
			request.setAttribute(Constantes.LISTA_KEY, html);
		}
		//----- Variables de configuracion
		request.setAttribute("form", bancosForm);
		request.setAttribute("edit", 1);
		request.setAttribute(Constantes.ACCION_KEY, "/bancos");
		return mapping.findForward("lista");
	}


	public ActionForward redirectInvalidData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		ActionErrors errors = (ActionErrors)request.getSession().getAttribute(Constantes.ERRORS);
		saveMessages(request, errors);
		return lista(mapping, form, request, response);
	}

	public void mensajes(String msg, HttpServletRequest request){
		ActionErrors errors = new ActionErrors();
		errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(msg));
		saveMessages(request, errors);
	}
	
	public ActionForward eliminar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		BancosForm bancosForm = (BancosForm)form;
		
		CtrBanBancoDAO bancoDAO = new CtrBanBancoDAO(getSessionHibernate(request));

		Transaction tx = bancoDAO.getSession().beginTransaction();
		try{
			CtrBanBanco banco = bancoDAO.findById(bancosForm.getBanId2());
			if(banco.getInvPcbProveedorCuentaBancarias().size() > 0){
				mensajes("errors.bancos.tieneHijos",request);
				return lista(mapping, form, request, response);
			}else{
				bancoDAO.delete(banco);
			}
		}catch(Exception e){
			tx.rollback();
			e.printStackTrace();
		}finally{
			tx.commit();
			bancoDAO.getSession().flush();
			bancoDAO.getSession().clear();
			
		}
		mensajes("msg.eliminacionExitosa", request);
		return lista(mapping,new BancosForm(),request,response);
	} 
	
	public ActionForward salvar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		BancosForm bancosForm = (BancosForm)form;
		
		CtrBanBancoDAO bancoDAO = new CtrBanBancoDAO(getSessionHibernate(request));

		Transaction tx = bancoDAO.getSession().beginTransaction();
		try{
			//if(bancoDAO.findByBanNombre(bancosForm.getBancoH().getBanNombre()).isEmpty()){
				CtrParParametrosDAO parametrosDAO = new CtrParParametrosDAO(getSessionHibernate(request));
				
				CtrPaiPaisDAO paisDAO = new CtrPaiPaisDAO(getSessionHibernate(request));
				bancosForm.setCtrPaiPais(paisDAO.findById(bancosForm.getCtrPaiPais().getPaiId()));
				bancoDAO.merge(bancosForm.getBancoH());
			/*}else{
				mensajes("errors.bancosNombreRepetido",request);
				return lista(mapping, form, request, response);
			}*/
		}catch(Exception e){
			tx.rollback();
			e.printStackTrace();
		}finally{
			tx.commit();
			bancoDAO.getSession().flush();
			bancoDAO.getSession().clear();
			
		}
		return lista(mapping,new BancosForm(),request,response);
	} 
	
	public ActionForward cancelar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		return lista(mapping, form, request, response);
	}

	
	protected Map getKeyMethodMap() {
		// TODO Auto-generated method stub
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.bancos.lista", "lista");
		map.put("cmd.bancos.guardar", "guardar");
		map.put("cmd.bancos.redirectInvalidData", "redirectInvalidData");
		map.put("cmd.bancos.cargarDatos", "cargarDatos");
		map.put("cmd.bancos.eliminar", "eliminar");
		map.put("cmd.bancos.salvar", "salvar");
		map.put("cmd.bancos.cancelar", "cancelar");
		return map;
	}
}