/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.control.struts.action;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.hibernate.Transaction;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeImpl;
import org.jmesa.limit.ExportType;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.BasicCellEditor;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.html.HtmlBuilder;

import com.cetia.sicaco.control.struts.form.ControlChequeForm;
import com.cetia.sicaco.hibernate.CtrBanBancoDAO;
import com.cetia.sicaco.hibernate.CtrCckControlCheques;
import com.cetia.sicaco.hibernate.CtrCckControlChequesDAO;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;
import com.mad.utilidades.Format;

/** 
 * MyEclipse Struts
 * Creation date: 11-24-2008
 * 
 * XDoclet definition:
 * @struts.action path="/controlCheque" name="controlChequeForm" input="pagina-lista.control.controlCheque" parameter="accion" scope="request" validate="true"
 * @struts.action-forward name="lista" path="pagina-lista.control.controlCheque"
 */
public class ControlChequeAction extends DMLAction {

	public static final String TABLA_ID = "ctrCckControlCheques";

	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ControlChequeForm controlChequeForm = (ControlChequeForm)form;
		CtrCckControlChequesDAO controlChequesDAO = new CtrCckControlChequesDAO(getSessionHibernate(request));
		java.util.List lst = null;
		Transaction tx = controlChequesDAO.getSession().beginTransaction();
		lst = controlChequesDAO.findAll();
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);
		
		CtrBanBancoDAO bancoDAO = new CtrBanBancoDAO(getSessionHibernate(request));
		List lstBan = bancoDAO.findAll();
		request.setAttribute("lstBan", lstBan);

		// ---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");

		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
			// ---- exporta la tabla
			export(tableFacade);// metodos
			return null;
		} else {
			// ---- genera el html de la tabla para ser mostrada
			String html = html(tableFacade, request);// metodos
			request.setAttribute(Constantes.LISTA_KEY, html);
		}

		// ----- Variables de configuracion
		request.setAttribute(Constantes.ACCION_KEY, "/controlCheque");
		request.setAttribute("filtro", "0");
		return mapping.findForward("lista");
	}

	private String html(final TableFacade tableFacade,
			final HttpServletRequest request) {
		tableFacade.setColumnProperties("cckSerie","ctrBanBanco.banNombre" , "cckCorrIni", "cckCorrFin" ,"audFechaCreacion");
		Table table = tableFacade.getTable();
		// ---- Titulo de la tabla
		table.setCaptionKey("tbl.controlCheque.caption");
		Row row = table.getRow();

		Column nombreColumna = row.getColumn("cckSerie");
		nombreColumna.setTitleKey("tbl.controlFacturas.cfcSerie");
		
		nombreColumna = row.getColumn("ctrBanBanco.banNombre");
		nombreColumna.setTitleKey("tbl.controlCheque.ctrBanBanco.banNombre");

		nombreColumna = row.getColumn("cckCorrIni");
		nombreColumna.setTitleKey("tbl.controlFactura.cfcCorrIni");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){
			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtrCckControlCheques control = (CtrCckControlCheques)item;
				value = Format.rellenarIzquierda(control.getCckCorrIni().toString(), "0", control.getCckDigitos());
				return value;
			}
		});

		nombreColumna = row.getColumn("cckCorrFin");
		nombreColumna.setTitleKey("tbl.controlFactura.cfcCorrFin");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){
			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtrCckControlCheques control = (CtrCckControlCheques)item;
				value = Format.rellenarIzquierda(control.getCckCorrFin().toString(), "0", control.getCckDigitos());
				return value;
			}
		});
		
		nombreColumna = row.getColumn("audFechaCreacion");
		nombreColumna.setTitleKey("tbl.controlFactura.accion");
		
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){
		public Object getValue(Object item, String property, int rowcount) {
			Object value = new BasicCellEditor().getValue(item, property, rowcount);
			CtrCckControlCheques control = (CtrCckControlCheques)item;
			value = "Editar";
			HtmlBuilder htmlCt = new HtmlBuilder();
			String link = tableFacade.getWebContext().getContextPath();
			link += "/control/controlCheque.do?cckId="+control.getCckId().toString()+"&accion=forwardToEdicion";
			htmlCt.a().href().quote().append(link).quote().append("class=\"linkEditar\"").title(value.toString()).close();
			//htmlCt.a().href().quote().append(link).quote().close();
			//htmlCt.append(value);
			htmlCt.aEnd();
			
			return htmlCt.toString();
		}
	});

		return tableFacade.render();
	}

	// ---- Funcion que genera los exports, el formato que tendran
	private void export(final TableFacade tableFacade) {
		tableFacade.setColumnProperties("cckSerie","ctrBanBanco.banNombre" , "cckCorrIni", "cckCorrFin" ,"audFechaCreacion");
		Table table = tableFacade.getTable();
		// ---- Titulo de la tabla
		table.setCaptionKey("tbl.controlCheque.caption");
		Row row = table.getRow();

		Column nombreColumna = row.getColumn("cckSerie");
		nombreColumna.setTitleKey("tbl.controlFacturas.cfcSerie");
		
		nombreColumna = row.getColumn("ctrBanBanco.banNombre");
		nombreColumna.setTitleKey("tbl.controlCheque.ctrBanBanco.banNombre");

		nombreColumna = row.getColumn("cckCorrIni");
		nombreColumna.setTitleKey("tbl.controlFactura.cfcCorrIni");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){
			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtrCckControlCheques control = (CtrCckControlCheques)item;
				value = Format.rellenarIzquierda(control.getCckCorrIni().toString(), "0", control.getCckDigitos());
				return value;
			}
		});

		nombreColumna = row.getColumn("cckCorrFin");
		nombreColumna.setTitleKey("tbl.controlFactura.cfcCorrFin");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){
			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtrCckControlCheques control = (CtrCckControlCheques)item;
				value = Format.rellenarIzquierda(control.getCckCorrFin().toString(), "0", control.getCckDigitos());
				return value;
			}
		});

		tableFacade.render();
	}

	public ActionForward buscar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ControlChequeForm controlChequeForm = (ControlChequeForm)form;
		CtrCckControlChequesDAO controlChequesDAO = new CtrCckControlChequesDAO(getSessionHibernate(request));
		java.util.List lst = null;
		Transaction tx = controlChequesDAO.getSession().beginTransaction();
		lst = controlChequesDAO.findByCriteria(controlChequeForm.getControlChequesH());
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);
		
		CtrBanBancoDAO bancoDAO = new CtrBanBancoDAO(getSessionHibernate(request));
		List lstBan = bancoDAO.findAll();
		request.setAttribute("lstBan", lstBan);

		// ---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");

		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
			// ---- exporta la tabla
			export(tableFacade);// metodos
			return null;
		} else {
			// ---- genera el html de la tabla para ser mostrada
			String html = html(tableFacade, request);// metodos
			request.setAttribute(Constantes.LISTA_KEY, html);
		}

		// ----- Variables de configuracion
		request.setAttribute(Constantes.ACCION_KEY, "/controlCheque");
		request.setAttribute("filtro", "0");
		return mapping.findForward("lista");
	}
		
	public ActionForward guardar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ControlChequeForm cform = (ControlChequeForm)form;
		CtrCckControlChequesDAO controlChequesDAO = new CtrCckControlChequesDAO(getSessionHibernate(request));
		if(cform.getCckCorrIni()<1){
			mensajes("error.cfc.iniNegativo", cform, request, response);
			return lista(mapping, form, request, response);
		}
		if(cform.getCckCorrFin() < cform.getCckCorrIni()){
			mensajes("error.cfc.finMenorIni", cform, request, response);
			return lista(mapping, form, request, response);
		}
		if(controlChequesDAO.findSame(cform.getCckSerie()).size() > 0){
			mensajes("error.cfc.mismaSerie", cform, request, response);
			return lista(mapping, form, request, response);
		}
		
		Transaction tx = controlChequesDAO.getSession().beginTransaction();
		CtrCckControlCheques controlCheques = cform.getControlChequesH();
		controlChequesDAO.getSession().save(controlCheques);
		tx.commit();
		controlChequesDAO.getSession().flush();
		controlChequesDAO.getSession().clear();
		
		return lista(mapping, form, request, response);
	}

	public ActionForward editar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ControlChequeForm cform = (ControlChequeForm)form;
		CtrCckControlChequesDAO controlChequesDAO = new CtrCckControlChequesDAO(getSessionHibernate(request));
		if(cform.getCckCorrIni()<1){
			mensajes("error.cfc.iniNegativo", cform, request, response);
			return forwardToEdicion(mapping, form, request, response);
		}
		if(cform.getCckCorrFin() < cform.getCckCorrIni()){
			mensajes("error.cfc.finMenorIni", cform, request, response);
			return forwardToEdicion(mapping, form, request, response);
		}
		Transaction tx = controlChequesDAO.getSession().beginTransaction();
		CtrCckControlCheques controlCheques = controlChequesDAO.findById(cform.getCckId());
		controlCheques.setCckCorrIni(cform.getCckCorrIni());
		controlCheques.setCckCorrFin(cform.getCckCorrFin());
		controlCheques.setCckDigitos(cform.getCckDigitos());
		try {
			controlChequesDAO.getSession().merge(controlCheques);
			tx.commit();
		} catch (Exception e) {
			// TODO: handle exception
			tx.rollback();
			e.printStackTrace();
		} finally {
			controlChequesDAO.getSession().flush();
			controlChequesDAO.getSession().clear();
			
		}
		return lista(mapping, form, request, response);
	}

	public ActionForward redirectInvalidData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ActionErrors errors = (ActionErrors)request.getSession().getAttribute(Constantes.ERRORS);
		saveMessages(request, errors);
		return lista(mapping, form, request, response);
	}
	
	public void mensajes(String msg,ControlChequeForm form,
			HttpServletRequest request, HttpServletResponse response){
		ActionErrors errors = new ActionErrors();
		errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(msg));
        saveMessages(request, errors);
	}

	public ActionForward forwardToEdicion(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		ControlChequeForm cForm = (ControlChequeForm)form;
		CtrCckControlChequesDAO controlChequesDAO = new CtrCckControlChequesDAO(getSessionHibernate(request));
		cForm.setControlChequesH(controlChequesDAO.findById(cForm.getCckId()));
		
		CtrBanBancoDAO bancoDAO = new CtrBanBancoDAO(getSessionHibernate(request));
		List lstBan = bancoDAO.findAll();
		request.setAttribute("lstBan", lstBan);
		
		request.setAttribute("mode", "readonly");
		request.setAttribute("form", cForm);
		request.setAttribute("filtro", "1");
		request.setAttribute(Constantes.ACCION_KEY, "/controlCheque");
		return mapping.findForward("lista");
	}

	public ActionForward cancelar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		return lista(mapping, form, request, response);
	}

	
	protected Map getKeyMethodMap() {
		// TODO Auto-generated method stub
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.controlCheque.lista", "lista");
		map.put("cmd.controlCheque.guardar", "guardar");
		map.put("cmd.controlCheque.editar", "editar");
		map.put("cmd.controlCheque.buscar", "buscar");
		map.put("cmd.controlCheque.forwardToEdicion", "forwardToEdicion");
		map.put("cmd.controlCheque.redirectInvalidData", "redirectInvalidData");
		map.put("cmd.controlCheque.cancelar", "cancelar");
		return map;
	}

}