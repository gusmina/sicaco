/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.control.struts.action;

import java.io.IOException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.hibernate.Transaction;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeImpl;
import org.jmesa.limit.ExportType;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.BasicCellEditor;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.html.HtmlBuilder;

import com.cetia.sicaco.control.struts.form.ReposFactForm;
import com.cetia.sicaco.hibernate.CtrCfcControlFacturacion;
import com.cetia.sicaco.hibernate.CtrCfcControlFacturacionDAO;
import com.cetia.sicaco.hibernate.CtrRfcRepositorioFacturas;
import com.cetia.sicaco.hibernate.CtrRfcRepositorioFacturasDAO;
import com.cetia.sicaco.hibernate.SecSucSucursalDAO;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;
import com.mad.utilidades.Format;

/** 
 * MyEclipse Struts
 * Creation date: 04-04-2008
 * 
 * XDoclet definition:
 * @struts.action path="/reposFact" name="reposFactForm" input="redirectInvalidData" parameter="accion" scope="request" validate="true"
 * @struts.action-forward name="lista" path="pagina-lista.control.reposFact"
 */
public class ReposFactAction extends DMLAction {
	/*
	 * Generated Methods
	 */

	public static final String TABLA_ID = "ctrRfcRepositorioFacturas";
	private final static String METHOD_NAME = "methodName";
	private final static String REPFACT_ID = "repFactId";
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ReposFactForm reposFactForm = (ReposFactForm)form;
		CtrRfcRepositorioFacturasDAO repositorioFacturasDAO = new CtrRfcRepositorioFacturasDAO(getSessionHibernate(request));
		List lst = null;
		lst  = repositorioFacturasDAO.findAll();
		CtrCfcControlFacturacionDAO controlFacturacionDAO = new CtrCfcControlFacturacionDAO(getSessionHibernate(request));
		List lstCFC = controlFacturacionDAO.findAll();
		request.setAttribute("controlFact", lstCFC);
		
		SecSucSucursalDAO sucursalDAO = new SecSucSucursalDAO(getSessionHibernate(request));
		List suc = sucursalDAO.findAllActive();
		request.setAttribute("suc", suc);
		
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);//, ExportType.PDF);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
		request.getSession().removeAttribute(REPFACT_ID);
		request.getSession().setAttribute(METHOD_NAME, "invalidSave");
		request.setAttribute("form", reposFactForm);
		request.setAttribute(Constantes.ACCION_KEY, "/reposFact");
        request.setAttribute("filtro", "0");
		return mapping.findForward("lista");
		 
	}
	
	//---- Funcion que genera el html de la tabla del jmesa
	private String html(final TableFacade tableFacade, final HttpServletRequest request) {
		tableFacade.setColumnProperties("rfcNombre","ctrCfcControlFacturacion.cfcSerie",
				"rfcCorrIni","rfcCorrActual","rfcCorrFin");//, "rfcFechaIni" ,"rfcFechaFin");
		Table table = tableFacade.getTable();
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.rfc.caption");
		
		Row row = table.getRow();
		
		Column nombreColumna = row.getColumn("ctrCfcControlFacturacion.cfcSerie");
		nombreColumna.setTitleKey("tbl.rfc.ctrCfcControlFacturacion.cfcSerie");
		
		nombreColumna = row.getColumn("rfcNombre");
		nombreColumna.setTitleKey("tbl.rfc.rfcNombre");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtrRfcRepositorioFacturas rfc = (CtrRfcRepositorioFacturas)item;
				HtmlBuilder html = new HtmlBuilder();
				String link = tableFacade.getWebContext().getContextPath();
				link += "/control/reposFact.do?rfcId="+rfc.getRfcId().toString()+"&accion=edit";
				html.a().href().quote().append(link).quote().close();
				html.append(value);
				html.aEnd();
				return html.toString();
			}
		});
		
		nombreColumna = row.getColumn("rfcCorrIni");
		nombreColumna.setTitleKey("tbl.rfc.rfcCorrIni");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){
			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtrRfcRepositorioFacturas rfc = (CtrRfcRepositorioFacturas)item;
				CtrCfcControlFacturacion control = rfc.getCtrCfcControlFacturacion();
				value = Format.formatNumeroFactura(rfc.getRfcCorrIni(), control.getCfcDigitos());
				return value;
			}
		});
		
		nombreColumna = row.getColumn("rfcCorrFin");
		nombreColumna.setTitleKey("tbl.rfc.rfcCorrFin");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){
			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtrRfcRepositorioFacturas rfc = (CtrRfcRepositorioFacturas)item;
				CtrCfcControlFacturacion control = rfc.getCtrCfcControlFacturacion();
				value = Format.formatNumeroFactura(rfc.getRfcCorrFin(), control.getCfcDigitos());
				return value;
			}
		});
		
		nombreColumna = row.getColumn("rfcCorrActual");
		nombreColumna.setTitleKey("tbl.rfc.rfcCorrActual");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){
			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtrRfcRepositorioFacturas rfc = (CtrRfcRepositorioFacturas)item;
				CtrCfcControlFacturacion control = rfc.getCtrCfcControlFacturacion();
				value = Format.formatNumeroFactura(rfc.getRfcCorrActual(), control.getCfcDigitos());
				return value;
			}
		});
		/*
		nombreColumna = row.getColumn("rfcFechaIni");
		nombreColumna.setTitleKey("tbl.rfc.rfcFechaIni");
		nombreColumna.getCellRenderer().setCellEditor(new DateCellEditor("dd-MMM-yyyy"));
		
		nombreColumna = row.getColumn("rfcFechaFin");
		nombreColumna.setTitleKey("tbl.rfc.rfcFechaFin");
		nombreColumna.getCellRenderer().setCellEditor(new DateCellEditor("dd-MMM-yyyy"));
		*/
		return tableFacade.render();
	}
	
	//---- Funcion que genera los exports, el formato que tendran
	 private void export(final TableFacade tableFacade) {
		 tableFacade.setColumnProperties("rfcNombre","ctrCfcControlFacturacion.cfcSerie",
					"rfcCorrIni","rfcCorrActual","rfcCorrFin");//, "rfcFechaIni" ,"rfcFechaFin");
			Table table = tableFacade.getTable();
			//---- Titulo de la tabla
			table.setCaptionKey("tbl.rfc.caption");
			
			Row row = table.getRow();
			
			Column nombreColumna = row.getColumn("ctrCfcControlFacturacion.cfcSerie");
			nombreColumna.setTitleKey("tbl.rfc.ctrCfcControlFacturacion.cfcSerie.x");
			
			nombreColumna = row.getColumn("rfcNombre");
			nombreColumna.setTitleKey("tbl.rfc.rfcNombre");
			
			nombreColumna = row.getColumn("rfcCorrIni");
			nombreColumna.setTitleKey("tbl.rfc.rfcCorrIni");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){
				public Object getValue(Object item, String property, int rowcount) {
					Object value = new BasicCellEditor().getValue(item, property, rowcount);
					CtrRfcRepositorioFacturas rfc = (CtrRfcRepositorioFacturas)item;
					CtrCfcControlFacturacion control = rfc.getCtrCfcControlFacturacion();
					value = Format.formatNumeroFactura(rfc.getRfcCorrIni(), control.getCfcDigitos());
					return value;
				}
			});
			
			nombreColumna = row.getColumn("rfcCorrFin");
			nombreColumna.setTitleKey("tbl.rfc.rfcCorrFin");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){
				public Object getValue(Object item, String property, int rowcount) {
					Object value = new BasicCellEditor().getValue(item, property, rowcount);
					CtrRfcRepositorioFacturas rfc = (CtrRfcRepositorioFacturas)item;
					CtrCfcControlFacturacion control = rfc.getCtrCfcControlFacturacion();
					value = Format.formatNumeroFactura(rfc.getRfcCorrFin(), control.getCfcDigitos());
					return value;
				}
			});
			
			nombreColumna = row.getColumn("rfcCorrActual");
			nombreColumna.setTitleKey("tbl.rfc.rfcCorrActual");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){
				public Object getValue(Object item, String property, int rowcount) {
					Object value = new BasicCellEditor().getValue(item, property, rowcount);
					CtrRfcRepositorioFacturas rfc = (CtrRfcRepositorioFacturas)item;
					CtrCfcControlFacturacion control = rfc.getCtrCfcControlFacturacion();
					value = Format.formatNumeroFactura(rfc.getRfcCorrActual(), control.getCfcDigitos());
					return value;
				}
			});
			/*
			nombreColumna = row.getColumn("rfcFechaIni");
			nombreColumna.setTitleKey("tbl.rfc.rfcFechaIni");
			nombreColumna.getCellRenderer().setCellEditor(new DateCellEditor("dd-MMM-yyyy"));
			
			nombreColumna = row.getColumn("rfcFechaFin");
			nombreColumna.setTitleKey("tbl.rfc.rfcFechaFin");
			nombreColumna.getCellRenderer().setCellEditor(new DateCellEditor("dd-MMM-yyyy"));
		*/
		tableFacade.render();
	}
	 
	public ActionForward guardar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ReposFactForm rfcForm = (ReposFactForm)form;
		CtrRfcRepositorioFacturasDAO rfcDAO = new CtrRfcRepositorioFacturasDAO(getSessionHibernate(request));
		CtrCfcControlFacturacionDAO cfcDAO = new CtrCfcControlFacturacionDAO(getSessionHibernate(request));
		if(rfcForm.getCtrCfcControlFacturacion().getCfcSerie() == null || rfcForm.getCtrCfcControlFacturacion().getCfcSerie().trim().equals("")){
			mensajes("error.rfc.missingSerie", rfcForm, request, response);
			return lista(mapping, rfcForm, request, response);
		}
		if(rfcForm.getRfcNombre() == null || rfcForm.getRfcNombre().trim().equals("") ){
			mensajes("error.rfc.missingNombre", rfcForm, request, response);
			return lista(mapping, rfcForm, request, response);
		}
		CtrCfcControlFacturacion cfc = cfcDAO.findById(rfcForm.getCtrCfcControlFacturacion().getCfcSerie());
		if(rfcForm.getRfcCorrFin() > cfc.getCfcCorrFin()){
			mensajes("error.rfc.mayorCorr", rfcForm, request, response);
			return lista(mapping, rfcForm, request, response);
		}
		if(rfcForm.getRfcCorrIni() < cfc.getCfcCorrIni()){
			mensajes("error.rfc.menorCorr", rfcForm, request, response);
			return lista(mapping, rfcForm, request, response);
		}
		
		if(rfcForm.getRfcCorrFin() < rfcForm.getRfcCorrIni()){
			mensajes("error.rfc.finMenorIni", rfcForm, request, response);
			return lista(mapping, rfcForm, request, response);
		}/*
		Date fecha1 = ElapsedTime.sTDate(rfcForm.getRfcFechaFin());
		if(ElapsedTime.fechaMenor(fecha1, new Date())){
			mensajes("error.rfc.fechaFin", rfcForm, request, response);
			return lista(mapping, rfcForm, request, response);
		}*/
		List seriesIguales = rfcDAO.findByCfcSerie(cfc.getCfcSerie());
		if(seriesIguales.size()>0){
			for (Iterator iterator = seriesIguales.iterator(); iterator.hasNext();) {
				CtrRfcRepositorioFacturas repositorioFacturas = (CtrRfcRepositorioFacturas) iterator.next();
				if(rfcForm.getRfcCorrIni() >= repositorioFacturas.getRfcCorrIni() && rfcForm.getRfcCorrIni() <= repositorioFacturas.getRfcCorrFin()){
					mensajes("error.rfc.chocaCorrIni", rfcForm, request, response);
					return lista(mapping, rfcForm, request, response);
				}
				if(rfcForm.getRfcCorrFin() >= repositorioFacturas.getRfcCorrIni() && rfcForm.getRfcCorrFin() <= repositorioFacturas.getRfcCorrFin()){
					mensajes("error.rfc.chocaCorrFin", rfcForm, request, response);
					return lista(mapping, rfcForm, request, response);
				}
				if(repositorioFacturas.getRfcEstado().equals("A") 
						&& (repositorioFacturas.getSucID().equals(rfcForm.getSucID()) 
						&& (repositorioFacturas.getTipoFactCont().equals(rfcForm.getTipoFactCont())))){
					mensajes("error.rfc.masDe1Activo", rfcForm, request, response);
					return lista(mapping, rfcForm, request, response);
				}
				if(repositorioFacturas.getRfcNombre().trim().equalsIgnoreCase(rfcForm.getRfcNombre())){
					mensajes("error.rfc.nombreRepetido", rfcForm, request, response);
					return lista(mapping, rfcForm, request, response);
				}
			}
		}
		
		Transaction tx = rfcDAO.getSession().beginTransaction();
		rfcForm.getRepositorioFacturasH().setRfcCorrActual(rfcForm.getRepositorioFacturasH().getRfcCorrIni());
		rfcDAO.save(rfcForm.getRepositorioFacturasH());
		tx.commit();
		rfcDAO.getSession().flush();
		rfcDAO.getSession().clear();
		
		return lista(mapping,form,request,response);
	}

	public ActionForward salvar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ReposFactForm rfcForm = (ReposFactForm)form;
		CtrRfcRepositorioFacturasDAO rfcDAO = new CtrRfcRepositorioFacturasDAO(getSessionHibernate(request));
		
		CtrCfcControlFacturacionDAO cfcDAO = new CtrCfcControlFacturacionDAO(getSessionHibernate(request));
		CtrCfcControlFacturacion cfc = cfcDAO.findById(rfcForm.getCtrCfcControlFacturacion().getCfcSerie());
		
		if(rfcForm.getCtrCfcControlFacturacion().getCfcSerie() == null || rfcForm.getCtrCfcControlFacturacion().getCfcSerie().equals("")){
			mensajes("error.rfc.missingSerie", rfcForm, request, response);
			return lista(mapping, rfcForm, request, response);
		}
		if(rfcForm.getRfcCorrFin() > cfc.getCfcCorrFin()){
			mensajes("error.rfc.mayorCorr", rfcForm, request, response);
			return lista(mapping, rfcForm, request, response);
		}
		if(rfcForm.getRfcCorrIni() < cfc.getCfcCorrIni()){
			mensajes("error.rfc.menorCorr", rfcForm, request, response);
			return lista(mapping, rfcForm, request, response);
		}
		
		if(rfcForm.getRfcCorrActual() < rfcForm.getRfcCorrIni() || rfcForm.getRfcCorrActual() > rfcForm.getRfcCorrFin()){
			mensajes("error.rfc.corrActualErroneo", rfcForm, request, response);
			return lista(mapping, rfcForm, request, response);
		}
		
		if(rfcForm.getRfcCorrFin() < rfcForm.getRfcCorrIni()){
			mensajes("error.rfc.finMenorIni", rfcForm, request, response);
			return lista(mapping, rfcForm, request, response);
		}/*
		Date fecha1 = ElapsedTime.sTDate(rfcForm.getRfcFechaFin());
		if(ElapsedTime.fechaMenor(fecha1, new Date())){
			mensajes("error.rfc.fechaFin", rfcForm, request, response);
			return lista(mapping, rfcForm, request, response);
		}*/
		List seriesIguales = rfcDAO.findByCfcSerie(cfc.getCfcSerie());
		if(seriesIguales.size()>0){
			for (Iterator iterator = seriesIguales.iterator(); iterator.hasNext();) {
				CtrRfcRepositorioFacturas repositorioFacturas = (CtrRfcRepositorioFacturas) iterator.next();
				if(!repositorioFacturas.getRfcId().equals(rfcForm.getRfcId())){
					if(rfcForm.getRfcCorrIni() >= repositorioFacturas.getRfcCorrIni() && rfcForm.getRfcCorrIni() <= repositorioFacturas.getRfcCorrFin()){
						mensajes("error.rfc.chocaCorrIni", rfcForm, request, response);
						return lista(mapping, rfcForm, request, response);
					}
					if(rfcForm.getRfcCorrFin() >= repositorioFacturas.getRfcCorrIni() && rfcForm.getRfcCorrFin() <= repositorioFacturas.getRfcCorrFin()){
						mensajes("error.rfc.chocaCorrFin", rfcForm, request, response);
						return lista(mapping, rfcForm, request, response);
					}
					if(repositorioFacturas.getRfcEstado().equals("A") 
							&& rfcForm.getRfcEstado().equals("A")
							&& (repositorioFacturas.getSucID().equals(rfcForm.getSucID()) 
							&& (repositorioFacturas.getTipoFactCont().equals(rfcForm.getTipoFactCont())))){
						mensajes("error.rfc.masDe1Activo", rfcForm, request, response);
						return lista(mapping, rfcForm, request, response);
					}
					if(repositorioFacturas.getRfcNombre().trim().equalsIgnoreCase(rfcForm.getRfcNombre())){
						mensajes("error.rfc.nombreRepetido", rfcForm, request, response);
						return lista(mapping, rfcForm, request, response);
					}
				}
			}
		}
		Transaction tx = rfcDAO.getSession().beginTransaction();
		try {
			rfcDAO.merge(rfcForm.getRepositorioFacturasH());
			tx.commit();
		} catch (Exception e) {
			// TODO: handle exception
			tx.rollback();
			e.printStackTrace();
		}finally{
			rfcDAO.getSession().flush();
			rfcDAO.getSession().clear();
			
		}
		return lista(mapping,form,request,response);
	}
	
	public ActionForward eliminar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ReposFactForm rfcForm = (ReposFactForm)form;
		CtrRfcRepositorioFacturasDAO rfcDAO = new CtrRfcRepositorioFacturasDAO(getSessionHibernate(request));
		Transaction tx = rfcDAO.getSession().beginTransaction();
		try {
			rfcForm.setRepositorioFacturasH(rfcDAO.findById(rfcForm.getRfcId()));
			rfcDAO.delete(rfcForm.getRepositorioFacturasH());
			tx.commit();
		} catch (Exception e) {
			// TODO: handle exception
			tx.rollback();
			e.printStackTrace();
		}finally{
			rfcDAO.getSession().flush();
			rfcDAO.getSession().clear();
			
		}
		return lista(mapping,form,request,response);
	}
	
	public ActionForward editar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ReposFactForm rfcForm = (ReposFactForm)form;
		CtrRfcRepositorioFacturasDAO rfcDAO = new CtrRfcRepositorioFacturasDAO(getSessionHibernate(request));
		CtrCfcControlFacturacionDAO cfcDAO = new CtrCfcControlFacturacionDAO(getSessionHibernate(request));
		rfcForm.setRepositorioFacturasH(rfcDAO.findById(rfcForm.getRfcId()));
		java.util.List lstCfc = cfcDAO.findAll();
		
		SecSucSucursalDAO sucursalDAO = new SecSucSucursalDAO(getSessionHibernate(request));
		List suc = sucursalDAO.findAllActive();
		request.setAttribute("suc", suc);
		
		request.getSession().setAttribute(METHOD_NAME, "invalidUpdate");
		request.getSession().setAttribute(REPFACT_ID, rfcForm.getRfcId());
		request.setAttribute("form", rfcForm);
		request.setAttribute("controlFact", lstCfc);
		request.setAttribute(Constantes.ACCION_KEY, "/reposFact");
        request.setAttribute("filtro", "1");
		return mapping.findForward("dml");
	}
	
		
	public ActionForward cancelar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		return lista(mapping, form, request, response);
	}
	
	public ActionForward redirectInvalidData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		ActionErrors errors = (ActionErrors)request.getSession().getAttribute(Constantes.ERRORS);
		String methodName = (String)request.getSession().getAttribute(METHOD_NAME);
		if(methodName!= null){
			if(methodName.equals("invalidSave")){
		        saveMessages(request, errors);
				return lista(mapping, form, request, response);
			}
			if(methodName.equals("invalidUpdate")){
				saveMessages(request, errors);
				return editar(mapping, form, request, response);
			}
		}
		return lista(mapping, form, request, response);
	}
	
	public void mensajes(String msg,ReposFactForm form,
			HttpServletRequest request, HttpServletResponse response){
		ActionErrors errors = new ActionErrors();
		errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(msg));
        saveMessages(request, errors);
	}
	
	//cargarTablaUsados
	public ActionForward cargarTablaUsados(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		String texto;
		ReposFactForm reposFactForm = (ReposFactForm)form;
		CtrRfcRepositorioFacturasDAO repositorioFacturasDAO = new CtrRfcRepositorioFacturasDAO(getSessionHibernate(request));
		List repositorios = repositorioFacturasDAO.findByCfcSerie(reposFactForm.getSerie());
		HtmlBuilder htmlBuilder = new HtmlBuilder();
		htmlBuilder.table(0).append(" align=\"center\" style=\"font-size:x-small;\" bgcolor=\"#EAF7FC\" bordercolor=\"#B0B0B0\" border=\"1\" " ).close();
		htmlBuilder.tr(0).close();
		htmlBuilder.th(0).close().append("Nombre").thEnd();
		htmlBuilder.th(0).close().append("Inicio").thEnd();
		htmlBuilder.th(0).close().append("Fin").thEnd();
		htmlBuilder.th(0).close().append("Uso").thEnd();
		htmlBuilder.trEnd(0);
		if(repositorios.size()<1){
			htmlBuilder.tr(0).close();
			htmlBuilder.td(0).colspan("4").append(" style=\"color:#E95316;\"").close().append("No hay elementos que mostrar").tdEnd();
			htmlBuilder.trEnd(0);
		}else{
			for (Iterator iterator = repositorios.iterator(); iterator.hasNext();) {
				CtrRfcRepositorioFacturas rfc = (CtrRfcRepositorioFacturas) iterator.next();
				htmlBuilder.tr(0).close();
				htmlBuilder.td(0).close().append(rfc.getRfcNombre()).tdEnd();
				htmlBuilder.td(0).close().append(rfc.getRfcCorrIni()).tdEnd();
				htmlBuilder.td(0).close().append(rfc.getRfcCorrFin()).tdEnd();
				String tipo="";
				if(rfc.getTipoFactCont().equals("CO")) tipo = "Consumidor Final";
				if(rfc.getTipoFactCont().equals("VC")) tipo = "Venta a Contribuyentes";
				if(rfc.getTipoFactCont().equals("NC")) tipo = "Nota Credito";
				//if(rfc.getTipoFactCont().equals("ND")) tipo = "Noda Debito";
				//if(rfc.getTipoFactCont().equals("CR")) tipo = "Credito Fiscal";
				//if(rfc.getTipoFactCont().equals("MC")) tipo = "Manual (Consumidor final)";
				//if(rfc.getTipoFactCont().equals("MV")) tipo = "Manual (Credito Fiscal)";
				htmlBuilder.td(0).close().append(tipo).tdEnd();
				htmlBuilder.trEnd(0);
			}
		}
		htmlBuilder.tableEnd(0);
		texto = htmlBuilder.toString();
		try{
			response.getWriter().write(texto);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (RuntimeException e) {
			log.error("Error runtime", e);
		} catch (IOException e) {
			log.error(e);
		}
		return null;
	}
	
	
	protected Map getKeyMethodMap() {
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.rfc.lista", "lista");
		map.put("cmd.rfc.guardar", "guardar");
		map.put("cmd.rfc.eliminar", "eliminar");
		map.put("cmd.rfc.salvar", "salvar");
		map.put("cmd.rfc.editar", "editar");
		map.put("cmd.rfc.cancelar", "cancelar");
		map.put("cmd.rfc.redirectInvalidData","redirectInvalidData");
		map.put("cmd.rfc.cargarTablaUsados", "cargarTablaUsados");
		return map;
	}
}