/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.procesosEspeciales.struts.action;

import java.io.IOException;
import java.text.DecimalFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.StringTokenizer;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.hibernate.Transaction;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeImpl;
import org.jmesa.limit.ExportType;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.BasicCellEditor;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.html.HtmlBuilder;

import com.cetia.sicaco.hibernate.CtaAscAsociado;
import com.cetia.sicaco.hibernate.CtaAscAsociadoDAO;
import com.cetia.sicaco.hibernate.CtaCasCuentaAsociado;
import com.cetia.sicaco.hibernate.CtaCasCuentaAsociadoDAO;
import com.cetia.sicaco.hibernate.CtaChkChequePrestamo;
import com.cetia.sicaco.hibernate.CtaEtrEmpresaTrabajo;
import com.cetia.sicaco.hibernate.CtaEtrEmpresaTrabajoDAO;
import com.cetia.sicaco.hibernate.CtaFxpFiadorPrestamo;
import com.cetia.sicaco.hibernate.CtaFxpFiadorPrestamoDAO;
import com.cetia.sicaco.hibernate.CtaMxpMovimientoPrestamo;
import com.cetia.sicaco.hibernate.CtaMxpMovimientoPrestamoDAO;
import com.cetia.sicaco.hibernate.CtaPrePrestamo;
import com.cetia.sicaco.hibernate.CtaPrePrestamoDAO;
import com.cetia.sicaco.hibernate.CtaPxtPersonaExterna;
import com.cetia.sicaco.hibernate.CtaPxtPersonaExternaDAO;
import com.cetia.sicaco.hibernate.CtaTprTipoPrestamo;
import com.cetia.sicaco.hibernate.CtaTprTipoPrestamoDAO;
import com.cetia.sicaco.hibernate.CtaTtrTipoTransaccion;
import com.cetia.sicaco.hibernate.CtaTtrTipoTransaccionDAO;
import com.cetia.sicaco.hibernate.CtaTxaTransaccionxcuentaAsociado;
import com.cetia.sicaco.hibernate.CtaTxaTransaccionxcuentaAsociadoDAO;
import com.cetia.sicaco.hibernate.CtrEstEstado;
import com.cetia.sicaco.hibernate.CtrEstEstadoDAO;
import com.cetia.sicaco.hibernate.SecPerPersona;
import com.cetia.sicaco.procesosEspeciales.struts.form.CargoFiadoresForm;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;
import com.cetia.sicaco.struts.PartidaAutomatica;
import com.mad.utilidades.Calculadora;
import com.mad.utilidades.IntereseYMora;
import com.mad.utilidades.Redondeo;

/** 
 * MyEclipse Struts
 * Creation date: 11-29-2008
 * 
 * XDoclet definition:
 * @struts.action path="/cargoFiadores" name="cargoFiadoresForm" input="redirectInvalidData" parameter="accion" scope="request" validate="true"
 * @struts.action-forward name="lista" path="pagina-lista.procesosEspeciales.cargoFiadores"
 */
public class CargoFiadoresAction extends DMLAction {
	
	public String TABLA_ID = "CtaPrePrestamo";
	public String TABLA_ID2 = "CtaFxpFiadorPrestamo";
	public int pos;
	public Double saldoPendiente;
	public int TAM_LISTA;

	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		CargoFiadoresForm cargoFiadoresForm = (CargoFiadoresForm)form;
		
		//----- Variables de configuracion
		request.setAttribute("form", cargoFiadoresForm);
		request.setAttribute("edit", 0);
		request.setAttribute(Constantes.ACCION_KEY, "/cargoFiadores");
		return mapping.findForward("lista");
	}

	public ActionForward redirectInvalidData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		ActionErrors errors = (ActionErrors)request.getSession().getAttribute(Constantes.ERRORS);
		saveMessages(request, errors);
		return lista(mapping, form, request, response);
	}

	public void mensajes(String msg, HttpServletRequest request){
		ActionErrors errors = new ActionErrors();
		errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(msg));
		saveMessages(request, errors);
	}

	public ActionForward cargarListaAsociados(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		CargoFiadoresForm cargoFiadoresForm = (CargoFiadoresForm)form;
		List<CtaAscAsociado> listaAsociados = null;
		
		CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
		CtaAscAsociado asociado = new CtaAscAsociado();
		if(cargoFiadoresForm.getAscEmp() == 2){
			asociado.setAscCodigo(cargoFiadoresForm.getCodigoAsociado());
		}else{
			asociado.setAscCodigoAsociado(cargoFiadoresForm.getCodigoAsociado());
		}
		//asociado.setAscCodigoAsociado(ordenCompraForm.getAscCodigo3());
		if(cargoFiadoresForm.getAscNombre() != null && !cargoFiadoresForm.getAscNombre().trim().equals("")){
			if(cargoFiadoresForm.getAscNombre().trim().indexOf(",") == -1){
				if(cargoFiadoresForm.getAscNombre().trim().indexOf(" ") == -1){
					asociado.getSecPerPersona().setPerPrimerNombre(cargoFiadoresForm.getAscNombre().trim());
				}else{
					StringTokenizer tokenizer = new StringTokenizer(cargoFiadoresForm.getAscNombre().trim());
					asociado.getSecPerPersona().setPerPrimerNombre(tokenizer.nextToken().trim());
					asociado.getSecPerPersona().setPerPrimerApellido(tokenizer.nextToken().trim());
				}
			}else{
				if(cargoFiadoresForm.getAscNombre().trim().startsWith(",")){
					asociado.getSecPerPersona().setPerPrimerApellido("");
					asociado.getSecPerPersona().setPerPrimerNombre(cargoFiadoresForm.getAscNombre().substring(1).trim());
				}else{
					StringTokenizer tokenizer = new StringTokenizer(cargoFiadoresForm.getAscNombre().trim(),",");
					asociado.getSecPerPersona().setPerPrimerApellido(tokenizer.nextToken().trim());
					asociado.getSecPerPersona().setPerPrimerNombre(tokenizer.nextToken().trim());
				}
			}
		}
		
		//asociado.setSecPerPersona(persona);
		
		try {
			
			if(cargoFiadoresForm.getAscEmp() == 2){
				listaAsociados = asociadoDAO.findByCodigos(asociado,10,"");
			}else{
				listaAsociados = asociadoDAO.findByNameUserForCargoFiador(asociado,10);
			}
			
			Boolean nulo = false;
			if(listaAsociados.size() < 1){
				nulo = true;
			}
			String listaResponse = "";
			listaResponse = construirListaAsociados(listaAsociados, nulo,request);
			
			response.getWriter().write(listaResponse);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (RuntimeException e) {
			log.error("Error runtime", e);
		} catch (IOException e) {
			log.error(e);
		}
		return null;
	}
	
	private String construirListaAsociados(List<CtaAscAsociado> listaAsociados, Boolean nulo,HttpServletRequest request) {
		String lista = "<table id=\"resultadoAsc\">";
		lista+="<tr><td colspan=\"2\"><span style=\"font-size: 10px;font-style: italic;\">Asociados:</span></td></tr>";
		if(nulo == true){
			lista+= "<tr><td colspan=\"2\"><span style=\"font-size: 10px;color: red;font-style: italic;\">"
			+ "No se encontro ningun asociado en el sistema para esta b&uacute;squeda</span></td></tr>";
		}else{
			int max2 = 0;
			for (Iterator iterator = listaAsociados.iterator(); iterator.hasNext();) {
				//SecAscAsociado asociado = (SecAscAsociado) iterator.next();
				CtaAscAsociado asociado = (CtaAscAsociado)iterator.next();
				CtaCasCuentaAsociadoDAO cuentaAsociadoDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
				lista += "<tr>";
				lista += "<td><input onclick=\"JavaScript:saveSeleccionA(this.value);\" type=\"radio\" name=\"_miseleccion\" value=\""
						+ asociado.getAscCodigoAsociado()
						+ ";"
						+ asociado.getSecPerPersona().getPerPrimerNombre()
						+ ";"
						+ asociado.getSecPerPersona().getPerPrimerApellido()
						+ ";"
						+ asociado.getAscId()
						+ "\"/></td>";
					lista += "<td><span style=\"font-size: 10px;color: #6E6E6E;font-style: italic;\">"
						+ asociado.getSecPerPersona().getPerPrimerNombre()
						+ " "
						+ asociado.getSecPerPersona().getPerPrimerApellido()
						+ "</span></td>";
					lista += "</tr>";
			}
		}
		lista += "</table>";
		return lista;
	}
	
	public void mensajes(String msg, HttpServletRequest request, ActionErrors errors){
		errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(msg));
		saveMessages(request, errors);
	}
	
	public ActionForward cargaPrestamos(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		CargoFiadoresForm cargoFiadoresForm =(CargoFiadoresForm)form;
		CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
		
		CtaCasCuentaAsociadoDAO cuentaAsociadoDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
		List prestamos = cuentaAsociadoDAO.findByAscAndTipoCuenta2(cargoFiadoresForm.getCodigo(), "C");
		
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(prestamos);

		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
			export(tableFacade);
			return null; 
		} else {
			//---- genera el html de la tabla para ser mostrada
			String html = "";
			html = html(tableFacade, request);
			request.setAttribute(Constantes.LISTA_KEY, html);
		}
		//----- Variables de configuracion
		request.setAttribute("form", cargoFiadoresForm);
		request.setAttribute("edit", 0);
		request.setAttribute(Constantes.ACCION_KEY, "/cargoFiadores");
		return mapping.findForward("lista");
	}

	//---- metodo que genera el html de la tabla del jmesa
	private String html(final TableFacade tableFacade, final HttpServletRequest request) {
		tableFacade.setColumnProperties("ctaPrePrestamo.preId","casCuenta","casValorApertura");
		Table table = tableFacade.getTable();
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.cargoFiadores.caption");

		Row row = table.getRow();
		Column nombreColumna = row.getColumn("ctaPrePrestamo.preId");
		nombreColumna.setTitleKey("tbl.cargoFiadores.preId");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtaCasCuentaAsociado cas = (CtaCasCuentaAsociado)item;
				
				HtmlBuilder html = new HtmlBuilder();
				String link = tableFacade.getWebContext().getContextPath();
				link += "/procesosEspeciales/cargoFiadores.do?accion=cargarFiadores&codigo="
					+cas.getCtaAscAsociado().getAscId()+"&preId=" + cas.getCtaPrePrestamo().getPreId();
				html.a().href(link).close();
				html.append(value);
				html.aEnd();				
				return html.toString();		
			}
		});

		nombreColumna = row.getColumn("casCuenta");
		nombreColumna.setTitleKey("tbl.cargoFiadores.saldoRestante");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtaCasCuentaAsociado cas = (CtaCasCuentaAsociado)item;
				DecimalFormat df = new DecimalFormat("0.00");
				 
				return new Double(df.format(cas.getCtaPrePrestamo().getPreSaldoActualT())); 
			}

		});

		nombreColumna = row.getColumn("casValorApertura");
		nombreColumna.setTitleKey("tbl.cargoFiadores.numFiadores");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtaCasCuentaAsociado cas = (CtaCasCuentaAsociado)item;
				CtaFxpFiadorPrestamoDAO fxpDao = new CtaFxpFiadorPrestamoDAO(getSessionHibernate(request));
				CtaPrePrestamo prestamo = cas.getCtaPrePrestamo();
				//int numFiadores = prestamo.getCtaFxpFiadorPrestamos().size();
				int aprobados = fxpDao.findFiadoresByPrestamoAprobados(prestamo.getPreId(),"A").size();
				return aprobados;
			}

		});
		
		
		return tableFacade.render();
	}

	//---- metodo que genera los exports, el formato que tendran
	private void export(final TableFacade tableFacade) {
		tableFacade.setColumnProperties("ascCodigo","ascIngresoCoope",
				"ascRetiroCoope", "ascProfesion","ascSalario","ascAsociadoPadre");
		Table table = tableFacade.getTable();
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.planilla.caption");

		Row row = table.getRow();
		Column nombreColumna = row.getColumn("ascCodigo");
		nombreColumna.setTitleKey("tbl.planilla.ascCodigo.x");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public String getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtaAscAsociado asociado = (CtaAscAsociado)item;
				String codigo = "'" + asociado.getAscCodigo();
				return codigo;		
			}

		});

		nombreColumna = row.getColumn("ascIngresoCoope");
		nombreColumna.setTitleKey("tbl.planilla.aportaciones");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtaAscAsociado asociado = (CtaAscAsociado)item;
				double descAportaciones = 0.0;
				return descAportaciones;		
			}

		});
		
		nombreColumna = row.getColumn("ascRetiroCoope");
		nombreColumna.setTitleKey("tbl.planilla.ahorros");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtaAscAsociado asociado = (CtaAscAsociado)item;
				double descAhorros = 0.0;
				return descAhorros;		
			}

		});

		nombreColumna = row.getColumn("ascProfesion");
		nombreColumna.setTitleKey("tbl.planilla.prestamos");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtaAscAsociado asociado = (CtaAscAsociado)item;
				double descPrestamos = 0.0;
				return descPrestamos;		
			}

		});
		
		nombreColumna = row.getColumn("ascSalario");
		nombreColumna.setTitleKey("tbl.planilla.seguros");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtaAscAsociado asociado = (CtaAscAsociado)item;
				double descSeguros = 0.0;
				return descSeguros;		
			}

		});
		
		nombreColumna = row.getColumn("ascAsociadoPadre");
		nombreColumna.setTitleKey("tbl.planilla.total");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtaAscAsociado asociado = (CtaAscAsociado)item;
				double descAportaciones = 0.0;
				
				double descAhorros = 0.0;
				
				double descPrestamos = 0.0;
				
				double descSeguros = 0.0;
				
				return descAportaciones + descAhorros + descPrestamos + descSeguros;		
			}
		});

		tableFacade.render();
	}
	
	public ActionForward cargarFiadores(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		CargoFiadoresForm cargoFiadoresForm =(CargoFiadoresForm)form;
		CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
		CtaAscAsociado asociado = asociadoDAO.findById(cargoFiadoresForm.getCodigo());
		request.setAttribute("asociado", asociado);
		pos = 0;
		CtaFxpFiadorPrestamoDAO fiadoresDao = new CtaFxpFiadorPrestamoDAO(getSessionHibernate(request));
		List<CtaFxpFiadorPrestamo> fiadores = fiadoresDao.findFiadoresByPrestamoAprobados(cargoFiadoresForm.getPreId(),"A");
		TAM_LISTA = fiadores.size();
		
		CtaPrePrestamoDAO prestamoDAO = new CtaPrePrestamoDAO(getSessionHibernate(request));
		CtaPrePrestamo prestamo = prestamoDAO.findById(cargoFiadoresForm.getPreId());
		request.setAttribute("prestamo", prestamo);
		//double saldoPendiente = prestamo.getPreMontoSolicitado() - prestamo.getPreSaldoActualT();
		DecimalFormat df = new DecimalFormat("0.00");
		String s = df.format(prestamo.getPreSaldoActualT());
		saldoPendiente = new Double(s);
		//request.setAttribute("pendiente", saldoPendiente);

		CtaTprTipoPrestamoDAO tipoPrestamoDAO = new CtaTprTipoPrestamoDAO(getSessionHibernate(request));
//		List lstTpr = tipoPrestamoDAO.findTiposVigentes(new Date());
		List lstTpr = tipoPrestamoDAO.findTiposVigentes2(new Date());
		request.setAttribute("lstTpr", lstTpr);
		
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID2, request);
		tableFacade.setItems(fiadores);

		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
			export(tableFacade);
			return null; 
		} else {
			//---- genera el html de la tabla para ser mostrada
			String html = "";
			html = html2(tableFacade, request);
			request.setAttribute("lista2", html);
		}
		//----- Variables de configuracion
		request.setAttribute("form", cargoFiadoresForm);
		request.setAttribute("edit", 0);
		request.setAttribute(Constantes.ACCION_KEY, "/cargoFiadores");
		return mapping.findForward("lfiadores");
	}
	
	//---- metodo que genera el html2 de la tabla del jmesa
	private String html2(final TableFacade tableFacade, final HttpServletRequest request) {
		tableFacade.setColumnProperties("fxpId","ctaPrePrestamo.preId","ctaTfiTipoFiador.tfiId","fxpEstado");
		Table table = tableFacade.getTable();
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.cargoFiadores.caption2");

		Row row = table.getRow();
		Column nombreColumna = row.getColumn("fxpId");
		nombreColumna.setTitleKey("tbl.cargoFiadores.ascEmpExt");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtaFxpFiadorPrestamo fiador = (CtaFxpFiadorPrestamo)item;
				if(fiador.getCtaAscAsociado() != null){
					return value = "Asociado";
				}else{
					if(fiador.getCtaPxtPersonaExterna().getPxtEmpresa()!=null 
							&& !fiador.getCtaPxtPersonaExterna().getPxtEmpresa().trim().equals("")){
						CtaEtrEmpresaTrabajoDAO empresaTrabajoDAO = new CtaEtrEmpresaTrabajoDAO(getSessionHibernate(request));
						List empresas = empresaTrabajoDAO.findAllActivasConDepartamentos();
						for (Iterator iterator = empresas.iterator(); iterator
								.hasNext();) {
							CtaEtrEmpresaTrabajo empresa = (CtaEtrEmpresaTrabajo) iterator.next();
							if(empresa.getEtrNombre().toUpperCase().trim().equals(fiador.getCtaPxtPersonaExterna().getPxtEmpresa().trim().toUpperCase())){
								return value = "Empleado";
							}
						}
					}
				}
				return value="Externo";
			}
		});

		nombreColumna = row.getColumn("ctaPrePrestamo.preId");
		nombreColumna.setTitleKey("tbl.cargoFiadores.nombre");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtaFxpFiadorPrestamo fiador = (CtaFxpFiadorPrestamo)item;
				String nombre = "";
				if(fiador.getCtaAscAsociado() != null){
					CtaAscAsociado asociado = fiador.getCtaAscAsociado();
					SecPerPersona persona = asociado.getSecPerPersona();
					nombre = persona.getPerPrimerApellido() + ", " + persona.getPerPrimerNombre();
				}else{
					CtaPxtPersonaExterna personaExterna = fiador.getCtaPxtPersonaExterna();
					nombre = personaExterna.getPxtPrimerApellido() + ", " + personaExterna.getPxtNombres();
				}
				return nombre;
			}
		});

		nombreColumna = row.getColumn("ctaTfiTipoFiador.tfiId");
		nombreColumna.setTitleKey("tbl.cargoFiadores.textBox");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtaFxpFiadorPrestamo fiadorPrestamo = (CtaFxpFiadorPrestamo)item;
				HtmlBuilder html = new HtmlBuilder();
				html.input().type("text").name("valores").value("0.00").readonly();
				html.size("10").id("montoId" + pos).close();
								
				return html.toString();
			}
		});
		
		nombreColumna = row.getColumn("fxpEstado");
		nombreColumna.setTitleKey("tbl.cargoFiadores.checkbox");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){
			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtaFxpFiadorPrestamo fiadorPrestamo = (CtaFxpFiadorPrestamo)item;
				HtmlBuilder html = new HtmlBuilder();
				String del="check";
				html.input().type("checkbox").name("posiciones").value(""+pos+"").id("posi"+pos);
				html.onclick("JavaScript:calculaMontos("+saldoPendiente + "," + TAM_LISTA+");").close();
				pos=pos+1;
				return html.toString();
			}

		});
		
		return tableFacade.render();
	}
	
	public ActionForward regresar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		CargoFiadoresForm cargoFiadoresForm = (CargoFiadoresForm)form;
		CargoFiadoresForm form2 = new CargoFiadoresForm();
		return lista(mapping, form2, request, response);
	}
	
	public ActionForward cargarAFiadores(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		CargoFiadoresForm cargoFiadoresForm = (CargoFiadoresForm)form;
		CtaPrePrestamoDAO prestamoDAO = new CtaPrePrestamoDAO(getSessionHibernate(request));
		Transaction tx = prestamoDAO.getSession().beginTransaction();
		CtaPrePrestamo prestamo = prestamoDAO.findById(cargoFiadoresForm.getPreId());
		
		CtaTprTipoPrestamoDAO tipoPrestamoDAO = new CtaTprTipoPrestamoDAO(getSessionHibernate(request));
		CtaTprTipoPrestamo tpr = tipoPrestamoDAO.findById(cargoFiadoresForm.getCtaTprTipoPrestamo().getTprId());
		
		CtaCasCuentaAsociadoDAO casDao = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
		CtaCasCuentaAsociado casPre = casDao.findByPreId(prestamo.getPreId());
		
		int[] posiciones = cargoFiadoresForm.getPosiciones();
		if(posiciones == null || posiciones.length<1){
			mensajes("error.cargoFiadores.noSeleccion", request);
			return lista(mapping, form, request, response);
		}
		int tam = posiciones.length;
		
		//Usar interese y mora para calcular el verdadero total que se debería para esta fecha
		IntereseYMora iYm = new IntereseYMora();
		CtaMxpMovimientoPrestamoDAO mxpDao = new CtaMxpMovimientoPrestamoDAO(getSessionHibernate(request));
		CtaMxpMovimientoPrestamo mxpAnt = mxpDao.findUltimoMovimiento(prestamo.getPreId());
		iYm = iYm.actualizaInteres(mxpAnt, prestamo, casPre, new Date(),request);
		
		Double montoPendiente = prestamo.getPreSaldoActualT() + iYm.getAcumulado() + iYm.getPendiente();
		Double montoSolicitado = Redondeo.roundDouble(montoPendiente/tam, 2);
		//Double totalSolicitado = montoSolicitado * tam;
		Double montoDistinto = montoSolicitado;
		if(posiciones.length > 1){
			montoDistinto = montoPendiente - (montoSolicitado*(tam-1));
			montoDistinto = Redondeo.roundDouble(montoDistinto, 2);
		}
		
		//Estado activo para prestamo: 13
		CtrEstEstadoDAO estadoDAO = new CtrEstEstadoDAO(getSessionHibernate(request));
		CtrEstEstado estActivo = estadoDAO.findById(13);
		//Estado PAGADO POR CARGO A FIADORES: 23
		CtrEstEstado estPagado = estadoDAO.findById(23);
		
		CtaTxaTransaccionxcuentaAsociadoDAO txaDao = new CtaTxaTransaccionxcuentaAsociadoDAO(getSessionHibernate(request));
		prestamo.setPreSaldoActualT(0.0);
		prestamo.setPreAcumMov(0.0);
		prestamo.setPreMoraMov(0.0);
		prestamo.setPrePendMov(0.0);
		prestamoDAO.merge(prestamo);
		tx.commit();
		prestamoDAO.getSession().flush();
		prestamoDAO.getSession().clear();
		
		casPre.setCtrEstEstado(estPagado);
		casDao.merge(casPre);
		tx.commit();
		casDao.getSession().flush();
		casDao.getSession().clear();
		
		CtaTxaTransaccionxcuentaAsociado txa = new CtaTxaTransaccionxcuentaAsociado();
		txa.setCtaCasCuentaAsociado(casPre);
		
		//Tipos de Transacciones
		CtaTtrTipoTransaccionDAO ttrDao = new CtaTtrTipoTransaccionDAO(getSessionHibernate(request));
		CtaTtrTipoTransaccion ttrLiquidaPre = ttrDao.findById(36);
		CtaTtrTipoTransaccion ttrCargaPre = ttrDao.findById(37);
		
		txa.setCtaTtrTipoTransaccion(ttrLiquidaPre);
		txa.setTxaFecha(new Date());
		txa.setTxaMonto(montoPendiente);
		txa.setAudFechaCreacion(new Date());
		txa.setAudFechaModificacion(new Date());
		txa.setAudUsuarioCreacion(cargoFiadoresForm.getUsuarioConectado().getNombreUsuario());
		txa.setAudUsuarioModificacion(txa.getAudUsuarioCreacion());
		txa.setTxaNota(ttrLiquidaPre.getTtrNombre());
		txaDao.save(txa);
		/*tx.commit();
		txaDao.getSession().flush();
		txaDao.getSession().clear();
		*/
		CtaMxpMovimientoPrestamo mxp = new CtaMxpMovimientoPrestamo();
		mxp.setCtaPrePrestamo(prestamo);
		mxp.setCtaTxaTransaccionxcuentaAsociado(txa);
		mxp.setMxpInteresPendiente(iYm.getPendiente());
		mxp.setMxpFecha(new Date());
		mxp.setMxpInteresAcumulado(iYm.getAcumulado());
		mxp.setMxpMora(0.0);
		mxp.setMxpSaldoActual(Redondeo.roundDouble(prestamo.getPreMontoSolicitado().doubleValue(), 2));
		mxp.setMxpSaldo(0.0);
		mxp.setAudFechaCreacion(new Date());
		mxp.setAudFechaModificacion(new Date());
		mxp.setAudUsuarioCreacion(txa.getAudUsuarioCreacion());
		mxp.setAudUsuarioModificacion(txa.getAudUsuarioCreacion());
		mxpDao.save(mxp);
		tx.commit(); 
		mxpDao.getSession().flush();
		mxpDao.getSession().clear();
		
		//Se le envia aqui los intereses
		enviarTransaccionAContabilidad(txa, mxp.getAudUsuarioCreacion(), "C", casPre, 
				(mxp.getMxpInteresAcumulado() + mxp.getMxpInteresPendiente()), null,request);
		
		CtaFxpFiadorPrestamoDAO fiadoresDao = new CtaFxpFiadorPrestamoDAO(getSessionHibernate(request));
		int posFia = 0;
		boolean firstPos = true;
		List fiadores = fiadoresDao.findFiadoresByPrestamoAprobados(cargoFiadoresForm.getPreId(),"A");
		for (Iterator iterator = fiadores.iterator(); iterator.hasNext();) {
			CtaFxpFiadorPrestamo fiador = (CtaFxpFiadorPrestamo) iterator.next();
			if(inPosiciones(posiciones,posFia)){
				fiador = checkIfAsociado(fiador,request);
				CtaPrePrestamo prestamoFiador = new CtaPrePrestamo();
				prestamoFiador.setCtaTinTasaInteres(prestamo.getCtaTinTasaInteres());
				prestamoFiador.setCtaTprTipoPrestamo(tpr);
				if(firstPos){
					firstPos = false;
					prestamoFiador.setPreCuota(
							Calculadora.calcularCuotaDouble(
									montoDistinto,
									(double) tpr.getCtaTinTasaInteres().getTinTasa(), 
									tpr.getCtaPlmPlanMeses().getPlmDuracion()
							)
					);
					prestamoFiador.setPreMontoSolicitado(montoDistinto);
				}else{
					prestamoFiador.setPreCuota(
							Calculadora.calcularCuotaDouble(
									montoSolicitado,
									(double) tpr.getCtaTinTasaInteres().getTinTasa(), 
									tpr.getCtaPlmPlanMeses().getPlmDuracion()
							)
					);
					prestamoFiador.setPreMontoSolicitado(montoSolicitado);
				}
				prestamoFiador.setPreFechaSolicitud(new Date());
				prestamoFiador.setPreId(prestamoDAO.generarId("C"));
				prestamoFiador.setPreInteresAcumulado(0.0);
				prestamoFiador.setPreLiquidoARecibir(0.0);
				prestamoFiador.setPreReferencia(prestamo.getPreId());
				prestamoFiador.setPreSaldoActualT(prestamoFiador.getPreMontoSolicitado());
				prestamoFiador.setCtaSegSeguros(null);
				prestamoFiador.setCtaCbaCuentaBancaria(null);
				prestamoDAO.save(prestamoFiador);
				tx.commit();
				prestamoDAO.getSession().flush();
				prestamoDAO.getSession().clear();
				
				CtaCasCuentaAsociado cas = new CtaCasCuentaAsociado();
				cas.setCasFechaApertura(new Date());
				cas.setCasPrincipal("N");
				cas.setCtaCahCuentaAhorro(null);
				cas.setCtaCbaCuentaBancaria(null);
				cas.setCtaPrePrestamo(prestamoFiador);
				cas.setCtaSegSeguros(null);
				cas.setCtrEstEstado(estActivo);
				if(fiador.getCtaAscAsociado() != null){
					cas.setCtaAscAsociado(fiador.getCtaAscAsociado());
					cas.setCtaPxtPersonaExterna(null);
				}else{
					cas.setCtaAscAsociado(null);
					cas.setCtaPxtPersonaExterna(fiador.getCtaPxtPersonaExterna());
				}
				cas.setCasPrestamoPaga(casPre.getCasCuenta());
				casDao.save(cas);
				/*tx.commit();
				casDao.getSession().flush();
				casDao.getSession().clear();
				*/
				CtaTxaTransaccionxcuentaAsociado txaCarga = new CtaTxaTransaccionxcuentaAsociado();
				txaCarga.setCtaTtrTipoTransaccion(ttrCargaPre);
				txaCarga.setTxaFecha(new Date());
				txaCarga.setCtaCasCuentaAsociado(cas);
				txaCarga.setTxaMonto(Redondeo.roundDouble(prestamoFiador.getPreMontoSolicitado().doubleValue(), 2));
				txaCarga.setAudFechaCreacion(new Date());
				txaCarga.setAudFechaModificacion(new Date());
				txaCarga.setAudUsuarioCreacion(cargoFiadoresForm.getUsuarioConectado().getNombreUsuario());
				txaCarga.setAudUsuarioModificacion(txa.getAudUsuarioCreacion());
				txaCarga.setTxaNota(ttrCargaPre.getTtrNombre());
				txaDao.save(txaCarga);
				/*tx.commit();
				txaDao.getSession().flush();
				txaDao.getSession().clear();
				*/
				CtaMxpMovimientoPrestamo mxpCarga = new CtaMxpMovimientoPrestamo();
				mxpCarga.setCtaPrePrestamo(prestamoFiador);
				mxpCarga.setCtaTxaTransaccionxcuentaAsociado(txaCarga);
				mxpCarga.setMxpFecha(new Date());
				mxpCarga.setMxpInteresAcumulado(0.0);
				mxpCarga.setMxpInteresPendiente(0.0);
				mxpCarga.setMxpMora(0.0);
				mxpCarga.setMxpSaldoActual(0.0);
				mxpCarga.setMxpSaldo(Redondeo.roundDouble(prestamoFiador.getPreMontoSolicitado().doubleValue(), 2));
				mxpCarga.setAudFechaCreacion(new Date());
				mxpCarga.setAudFechaModificacion(new Date());
				mxpCarga.setAudUsuarioCreacion(cargoFiadoresForm.getUsuarioConectado().getNombreUsuario());
				mxpCarga.setAudUsuarioModificacion(txa.getAudUsuarioCreacion());
				mxpDao.save(mxpCarga);
				/*tx.commit();
				mxpDao.getSession().flush();
				mxpDao.getSession().clear();
				*/
				
				fiador.setFxpEstado("C");
				fiadoresDao.merge(fiador);
				tx.commit();
				fiadoresDao.getSession().flush();
				fiadoresDao.getSession().clear();
				
				enviarTransaccionAContabilidad(txaCarga, mxpCarga.getAudUsuarioCreacion(), "C", 
						cas, (mxp.getMxpInteresAcumulado() + mxp.getMxpInteresPendiente()), null,request);
			}
			posFia ++;
		}
		mensajes("msg.cargoFiadores.cargoExitoso", request);
		return lista(mapping, form, request, response);
	}
	
	private CtaFxpFiadorPrestamo checkIfAsociado(CtaFxpFiadorPrestamo fiador,HttpServletRequest request) {
		if(fiador.getCtaPxtPersonaExterna()== null){
			return fiador;
		}
		CtaPxtPersonaExternaDAO pxtDao = new CtaPxtPersonaExternaDAO(getSessionHibernate(request));
		CtaPxtPersonaExterna pxt = pxtDao.findById(fiador.getCtaPxtPersonaExterna().getPxtId());
		
		CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
		CtaEtrEmpresaTrabajoDAO etrDao = new CtaEtrEmpresaTrabajoDAO(getSessionHibernate(request));
		/*List empresas = etrDao.findAllActivasConDepartamentos();
		for (Iterator iterator = empresas.iterator(); iterator.hasNext();) {
			CtaEtrEmpresaTrabajo etr = (CtaEtrEmpresaTrabajo) iterator.next();
			*/
		List empresas = etrDao.findByEtrNombre(fiador.getCtaPxtPersonaExterna().getPxtEmpresa());
		if(empresas.size() < 1){
			return fiador;
		}
		CtaEtrEmpresaTrabajo etr = (CtaEtrEmpresaTrabajo) empresas.get(0);
		CtaAscAsociado asociado = asociadoDAO.findAsociadoActivoFromFiador(
				fiador.getCtaPxtPersonaExterna().getPxtCodigoEmpleado(), 
				etr.getEtrNombre().trim().toUpperCase());
		if(asociado == null || asociado.getAscId() == null){
			return fiador;
		}else{
			fiador.setCtaAscAsociado(asociado);
			fiador.setCtaPxtPersonaExterna(null);
			CtaFxpFiadorPrestamoDAO fxpDao = new CtaFxpFiadorPrestamoDAO(getSessionHibernate(request));
			fxpDao.merge(fiador);
			Transaction tx = fxpDao.getSession().beginTransaction();
			/*tx.commit();
			fxpDao.getSession().flush();
			fxpDao.getSession().clear();
			*/
			pxtDao.delete(pxt);
			tx.commit();
			pxtDao.getSession().flush();
			pxtDao.getSession().clear();
			
			fiadoresAAsociados(asociado.getAscCodigo(), etr.getEtrNombre().toUpperCase(), asociado,request);
			
			return fiador;
		}
		//return null;
	}

	private void fiadoresAAsociados(String ascCodigo, String empresa, CtaAscAsociado asociado,HttpServletRequest request) {
		CtaFxpFiadorPrestamoDAO fxpDao = new CtaFxpFiadorPrestamoDAO(getSessionHibernate(request));
		List fiadores = fxpDao.findByCodigoYEmpresa(ascCodigo, empresa);
		for (Iterator iterator = fiadores.iterator(); iterator.hasNext();) {
			CtaFxpFiadorPrestamo fxp = (CtaFxpFiadorPrestamo) iterator.next();
			
			CtaPxtPersonaExternaDAO pxtDao = new CtaPxtPersonaExternaDAO(getSessionHibernate(request));
			CtaPxtPersonaExterna pxt = pxtDao.findById(fxp.getCtaPxtPersonaExterna().getPxtId());
			
			fxp.setCtaAscAsociado(asociado);
			fxp.setCtaPxtPersonaExterna(null);
			fxpDao.merge(fxp);
			Transaction tx = fxpDao.getSession().beginTransaction();
			
			pxtDao.delete(pxt);
			tx.commit();
			pxtDao.getSession().flush();
			pxtDao.getSession().clear();
		}
	}

	private boolean inPosiciones(int[] posiciones, int posFia) {
		for (int i = 0; i < posiciones.length; i++) {
			if(posiciones[i] == posFia){
				return true;
			}
		}
		return false;
	}

	private void enviarTransaccionAContabilidad(CtaTxaTransaccionxcuentaAsociado txa,
			String nombreUsuario, String tipoCuenta, CtaCasCuentaAsociado cas, 
			Double interes, CtaChkChequePrestamo chequePrestamo, HttpServletRequest request) {
		String parametros = "1;";//Seteamos modulo al que pertenece -> CUENTA CORRIENTE
		Integer tc = 0;
		Integer clasificacion = 0;
		Integer relacionInteres = 0;
		
		if(tipoCuenta.equals("A")){//Aportaciones
			tc = 1;
		}
		if(tipoCuenta.equals("B")){//Ahorros
			tc = 2;
			clasificacion = cas.getCtaCahCuentaAhorro().getCtaTahTipoAhorro().getTahId();
		}
		if(tipoCuenta.equals("C")){//Prestamo
			tc = 3;
			if(cas.getCtaPrePrestamo().getCtaTprTipoPrestamo() == null || cas.getCtaPrePrestamo().getCtaTprTipoPrestamo().getTprId()==null){
				clasificacion = 0;
			}else{
				clasificacion = cas.getCtaPrePrestamo().getCtaTprTipoPrestamo().getCtaLprLineaPrestamo().getLprId();
			}
			relacionInteres = 1;
		}
		if(tipoCuenta.equals("D")){//Seguros
			tc = 4;
			clasificacion = cas.getCtaSegSeguros().getCtaTisTipoSeguro().getTisId();
		}
		
		parametros += tc.toString() + ";"; //clasificacion -> Apor, Ahor, Pre, Seg.
		parametros += clasificacion.toString() + ";";//id tipo cuenta
		parametros += txa.getCtaTtrTipoTransaccion().getTtrId().toString() + ";";
		/*parametros += relacionInteres.toString();*/
		
		Double monto = txa.getTxaMonto() - interes;
		
		if(chequePrestamo != null && chequePrestamo.getChkId()!=null){//partida de cheque
			PartidaAutomatica partidaAutomatica =  new PartidaAutomatica();
				if(monto > 0){
					partidaAutomatica.crearPartidaAutomatica(
								parametros+"0;-1",//la ultima concatenacion hace referencia a que no relaciona interes ni empresa
								txa.getTxaMonto(),
								nombreUsuario,2,0,chequePrestamo,0,request);
					
				}
				if(interes > 0){
					partidaAutomatica.crearPartidaAutomatica(
							parametros+"1;-1",//la ultima concatenacion hace referencia a que relaciona interes y no empresa
							interes,
							nombreUsuario,2,null,null,null,request);
				}	
		}else{
			PartidaAutomatica partidaAutomatica =  new PartidaAutomatica();
				if(monto > 0){
					partidaAutomatica.crearPartidaAutomatica(
								parametros+"0;-1",
								txa.getTxaMonto(),
								nombreUsuario,1,null,null,null,request);
				}
				if(interes > 0){
					partidaAutomatica.crearPartidaAutomatica(
							parametros+"1;-1",
							interes,
							nombreUsuario,1,null,null,null,request);
				}	
		}
	}
	
	protected Map getKeyMethodMap() {
		// TODO Auto-generated method stub
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.cargoFiadores.lista", "lista");
		map.put("cmd.cargoFiadores.cargaPrestamos", "cargaPrestamos");
		map.put("cmd.cargoFiadores.cargarListaAsociados", "cargarListaAsociados");
		map.put("cmd.cAPre.cargar", "cargar");
		map.put("cmd.cAPre.cargar2", "cargar2");
		map.put("cmd.cAPre.cargarListaAsociados", "cargarListaAsociados");
		map.put("cmd.cAPre.cargarTodos", "cargarTodos");
		map.put("cmd.cargofiadores.cargarFiadores", "cargarFiadores");
		map.put("cmd.cargoFiadores.regresar", "regresar");
		map.put("cmd.cargoFiadores.cargarAFiadores", "cargarAFiadores");
		return map;
	}
}