/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.procesosEspeciales.struts.action;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.export.JRPdfExporter;
import net.sf.jasperreports.engine.xml.JRXmlLoader;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.hibernate.Transaction;

import com.cetia.sicaco.cuentaCorriente.struts.action.CuentaAhorroAction;
import com.cetia.sicaco.hibernate.ConCueCuenta;
import com.cetia.sicaco.hibernate.ConCueCuentaDAO;
import com.cetia.sicaco.hibernate.CtaAscAsociado;
import com.cetia.sicaco.hibernate.CtaAscAsociadoDAO;
import com.cetia.sicaco.hibernate.CtaCahCuentaAhorro;
import com.cetia.sicaco.hibernate.CtaCahCuentaAhorroDAO;
import com.cetia.sicaco.hibernate.CtaCasCuentaAsociado;
import com.cetia.sicaco.hibernate.CtaCasCuentaAsociadoDAO;
import com.cetia.sicaco.hibernate.CtaFxpFiadorPrestamo;
import com.cetia.sicaco.hibernate.CtaMxaMovimientoAhorro;
import com.cetia.sicaco.hibernate.CtaMxaMovimientoAhorroDAO;
import com.cetia.sicaco.hibernate.CtaMxpMovimientoPrestamo;
import com.cetia.sicaco.hibernate.CtaMxpMovimientoPrestamoDAO;
import com.cetia.sicaco.hibernate.CtaPrePrestamo;
import com.cetia.sicaco.hibernate.CtaPrePrestamoDAO;
import com.cetia.sicaco.hibernate.CtaPxtPersonaExterna;
import com.cetia.sicaco.hibernate.CtaPxtPersonaExternaDAO;
import com.cetia.sicaco.hibernate.CtaTahTipoAhorro;
import com.cetia.sicaco.hibernate.CtaTahTipoAhorroDAO;
import com.cetia.sicaco.hibernate.CtaTtrTipoTransaccion;
import com.cetia.sicaco.hibernate.CtaTxaTransaccionxcuentaAsociado;
import com.cetia.sicaco.hibernate.CtaTxaTransaccionxcuentaAsociadoDAO;
import com.cetia.sicaco.hibernate.CtrEstEstadoDAO;
import com.cetia.sicaco.hibernate.CtrParParametros;
import com.cetia.sicaco.hibernate.CtrParParametrosDAO;
import com.cetia.sicaco.hibernate.HibernateSessionFactory;
import com.cetia.sicaco.procesosEspeciales.struts.form.DistribucionDividendosForm;
import com.cetia.sicaco.struts.DMLAction;
import com.cetia.sicaco.struts.PartidaAutomatica;
import com.mad.utilidades.IntereseYMora;
import com.mad.utilidades.Redondeo;

/** 
 * MyEclipse Struts
 * Creation date: 12-21-2008
 * 
 * XDoclet definition:
 * @struts.action path="/distribucionDividendos" name="distribucionDividendosForm" input="pagina.dml.procesosEspeciales.distribucionDividendos" scope="request" validate="true"
 */
public class DistribucionDividendosAction extends DMLAction {
	private static final String TYPE_MENSAJE_EXITO = "exito";
	private static final String TYPE_MENSAJE_ERROR = "error";
	/*
	 * Generated Methods
	 */
	private String rutaReporte = "/reportesOtros/facturacion/dividendos/";
	private String reporte = "dividendosPeriodo";
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	@SuppressWarnings("unchecked")
	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		CtaTahTipoAhorroDAO tiposCuentasDAO = new CtaTahTipoAhorroDAO(getSessionHibernate(request));
		CtaTahTipoAhorro tipoAportacion = new CtaTahTipoAhorro();
		List<CtaTahTipoAhorro> cuentas = tiposCuentasDAO.findAll();
		tipoAportacion.setTahId(-1);
		tipoAportacion.setTahNombre("Aportaciones");
		tipoAportacion.setTahDescripcion("Cuenta principal del Asociado");
		
		cuentas.add(tipoAportacion);
		ConCueCuentaDAO cueDAO = new ConCueCuentaDAO(getSessionHibernate(request));
		List<ConCueCuenta> listaCuentasA = cueDAO.findByCuePosteable(0);
		List<ConCueCuenta> listaCuentasC = cueDAO.findByCuePosteable(0);
		request.setAttribute("listaCuentasA", listaCuentasA);
		request.setAttribute("listaCuentasC", listaCuentasC);
		request.setAttribute("cuentas", cuentas);
		return mapping.findForward("lista");
	}
	
	public ActionForward distribucion(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws ParseException {
		/*****PROCESO DE DISTRIBUCION DE DIVIDENDOS******/
		/*tomar parametros para calcular unicamente la distribucion * */
		DistribucionDividendosForm distribucionForm = (DistribucionDividendosForm)form;
		String fechaDistri = distribucionForm.getFechaDistribucion();
		distribucionForm.setTotalDistribucion(0.0);
		String mensaje="";
		
		Double TOTALAPORTACIONES = 0.0;
		Double TOTALEXCEDENTES = 0.0;
		Double TOTALINTERESES = 0.0;
		Double PORCENTAJEAPORTACIONES = 0.0;
		Double EXCEDENTESAPORTACIONES = 0.0;
		Double PORCENTAJEINTERESES = new Double(0.0);
		Double EXCEDENTESASOCIADO = 0.0;
		
		CtrParParametrosDAO parametrosDAO = new CtrParParametrosDAO(getSessionHibernate(request));
		CtaCahCuentaAhorroDAO cuAhorroDAO = new CtaCahCuentaAhorroDAO(getSessionHibernate(request));
		CtaPrePrestamoDAO prestamoDAO = new CtaPrePrestamoDAO(getSessionHibernate(request));
		CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
		Transaction tx = asociadoDAO.getSession().beginTransaction();
		try{
			TOTALEXCEDENTES = distribucionForm.getTotalExcedentes();
			
			/****CALCULO APORTACIONES POR SOCIO*****/
			List listaTotalAporXSocio = cuAhorroDAO.findTotalAportacionesPorAsoc(new Integer(fechaDistri.substring(6)));
			asociadoDAO.inicializarEstadoParaDistribuir();/*verificar, quitar cuando exista la tabla de distribuciones por asociado*/
			for (Iterator iterator = listaTotalAporXSocio.iterator(); iterator
					.hasNext();) {
				Object[] itemA = (Object[]) iterator.next();
				Double aporSocio = new Double((Double)itemA[1]);
				Integer M_activo= new Integer(itemA[2].toString());
				if(M_activo > 0){
					TOTALAPORTACIONES += aporSocio;
				}
			}
			
			if(TOTALAPORTACIONES==0){
				mensaje = "No se puede realizar la distribucion pues el total de Aportaciones por asociados es Cero.";
				
				enviarMensajeXML(response, mensaje, TYPE_MENSAJE_EXITO);
				
				return null;
			}
			/******CALCULO PORCENTAJE APORTACIONES******/
			PORCENTAJEAPORTACIONES = (TOTALEXCEDENTES / TOTALAPORTACIONES)/100;//anteriormente no se estaba dividiendo entre 100
			distribucionForm.setPorcAportaciones(PORCENTAJEAPORTACIONES);
			CtrParParametros parametroA = parametrosDAO.findById("PORCENTAJEAPORTACIONES");
			parametroA.setParValorNumber(PORCENTAJEAPORTACIONES);
			parametrosDAO.merge(parametroA);
			request.getSession().setAttribute("PORCENTAJEAPORTACIONES", PORCENTAJEAPORTACIONES);
			
			
			
			/*********REGISTRO DE SU DISTRIBUCION EN APORTACIONES P/SOCIO********/
			/*for (Iterator iterator = listaTotalAporXSocio.iterator(); iterator
					.hasNext();) {
				Object[] itemA = (Object[]) iterator.next();
				Double aporSocio = new Double((Double)itemA[1]);
				Integer M_activo= new Integer(itemA[2].toString());
				
				if(M_activo>0){
					CtaAscAsociado asociado = asociadoDAO.findById(itemA[0]+"");
					if((aporSocio*PORCENTAJEAPORTACIONES)>0.1){
						asociado.setAscDividendoAportaciones(new Float(aporSocio*PORCENTAJEAPORTACIONES));
						asociado.setAscEstadoDistribucion("N");
						System.out.println("Distribucion asociado= "+asociado.getAscCodigo() + "; " + asociado.getAscNombreNit() + "; "
										+ asociado.getAscDividendoAportaciones() +"; "+asociado.getAscDividendoPrestamo() + "; N");
						asociadoDAO.merge(asociado);
						
						EXCEDENTESAPORTACIONES += (aporSocio*PORCENTAJEAPORTACIONES);
					}
				}
				
			}
			EXCEDENTESAPORTACIONES = Double.parseDouble(Redondeo.dRound(EXCEDENTESAPORTACIONES, 2));
			distribucionForm.setTotalDistribucion(EXCEDENTESAPORTACIONES);*/
			List listaTodosAsociados = cuAhorroDAO.findAllAsociados();
			/*en el siguiente for se trabajaba con la lista listaTotalAporXSocio pero se modifico utilizando una lista que devuelve a todos los asociados*/
			for(Iterator iterador = listaTodosAsociados.iterator();iterador.hasNext();){
				Object[] itemA = (Object[])iterador.next();
				String cuenta = new String((String)itemA[1]);
				System.out.println("Find by id:"+itemA[0]+"");
				if(itemA[0] == null)continue;
				CtaAscAsociado asociado = asociadoDAO.findById(itemA[0]+"");
				for(int s=0;s<12;s++){
					Double saldoM = cuAhorroDAO.findSaldosAportacionesMensuales(cuenta, new Integer(fechaDistri.substring(6)), s+1);
					saldoM = saldoM * PORCENTAJEAPORTACIONES;
					EXCEDENTESASOCIADO = EXCEDENTESASOCIADO + saldoM;
					
				}
				System.out.println("EXC AS: "+EXCEDENTESASOCIADO);
				System.out.println("EXC AP: "+EXCEDENTESAPORTACIONES);
				EXCEDENTESAPORTACIONES = EXCEDENTESAPORTACIONES + EXCEDENTESASOCIADO;
				System.out.println("JO:"+ EXCEDENTESAPORTACIONES);
				asociado.setAscDividendoAportaciones(new Float(EXCEDENTESASOCIADO));
				asociado.setAscEstadoDistribucion("N");
				System.out.println("Distribucion asociado= "+asociado.getAscCodigo() + "; " + asociado.getAscNombreNit() + "; "
						+ asociado.getAscDividendoAportaciones() +"; "+asociado.getAscDividendoPrestamo() + "; N");
				asociadoDAO.merge(asociado);
				EXCEDENTESASOCIADO = 0.0;
			}
			
			/****DISTRIBUCION DE INTERESES EN PRESTAMOS*****/
			if(distribucionForm.getTipoDistribucion()==2){
				List listTotalInteresesXAsociado = prestamoDAO.findTotalInteresesPorAsoc(new Integer(fechaDistri.substring(6)));
				System.out.println("Numero de elementos en la lista: "+listTotalInteresesXAsociado.size());
				Iterator<?> iteraI = listTotalInteresesXAsociado.listIterator();
				
				
				/****CALCULO DE TOTAL DE INTERESES EN PRESTAMOS****/
				while(iteraI.hasNext()){
					Object[] itemA = (Object[])iteraI.next();
					Double inter = new Double((Double)itemA[1]);
					TOTALINTERESES += inter;
				}
				
				if(TOTALINTERESES==0){
					mensaje += "\nNo se pudo realizar la distribucion sobre prestamos pues el total de intereses acumulados es Cero.\n";
					
				}else{
					/****CALCULO DE PORCENTAJE EN INTERESES****/
					Double residuo = (TOTALEXCEDENTES-EXCEDENTESAPORTACIONES);
					PORCENTAJEINTERESES = (residuo/TOTALINTERESES)/100;//anteriormente no se estaba dividiendo entre 100
					
					/*********REGISTRO DE DISTRIBUCION DE INTERESES A SOCIO********/
					if(residuo>=1){
						iteraI = listTotalInteresesXAsociado.listIterator(0);
						while(iteraI.hasNext()){
							Object[] itemI = (Object[])iteraI.next();
							Double inter = new Double(itemI[1].toString());
							CtaAscAsociado asociado = asociadoDAO.findById(itemI[0].toString());
							Double totalInteresSocio = inter*PORCENTAJEINTERESES;
							if(totalInteresSocio>0.1){
								asociado.setAscDividendoPrestamo(totalInteresSocio);
								asociado.setAscEstadoDistribucion("N");
								asociadoDAO.merge(asociado);
								
								distribucionForm.setTotalDistribucion(distribucionForm.getTotalDistribucion()+totalInteresSocio);
							}
						}
					}
				}
				
			}
			
			distribucionForm.setPorcIntereses(PORCENTAJEINTERESES);
			request.getSession().setAttribute("PORCENTAJEINTERESES", PORCENTAJEINTERESES);
			CtrParParametros parametroI = parametrosDAO.findById("PORCENTAJEINTERESES");
			parametroI.setParValorNumber(PORCENTAJEINTERESES);
			parametrosDAO.merge(parametroI);
			tx.commit();
			
			mensaje += "Distribucion realizada con exito. Porcentaje en Aportaciones= " + 
								PORCENTAJEAPORTACIONES +";  Porcentaje en Intereses sobre prestamos= " 
								+ PORCENTAJEINTERESES;
			enviarMensajeXML(response, mensaje, TYPE_MENSAJE_EXITO);
		}catch(Exception e){
			enviarMensajeXML(response, "error: " + e.getMessage(), TYPE_MENSAJE_ERROR);
			tx.rollback();
			e.printStackTrace();
		}finally{
			asociadoDAO.getSession().flush();
			asociadoDAO.getSession().clear();
			
		}
		return null;
	}

	public void enviarMensajeXML(HttpServletResponse response, String mensaje,
			String typeMensaje) {
		response.setContentType("txt/xml");
		
		try {
			PrintWriter out = response.getWriter();
			out.println("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
			out.println("<mensaje>");
			out.print("\t<class>");
			out.print(typeMensaje);
			out.println("</class>");
			out.print("\t<texto>");
			out.print(mensaje);
			out.println("</texto>");
			out.println("</mensaje>");
			out.flush();
			out.println();
		} catch (IOException e) {
			log.error("",e);
		}
	}
	
	public ActionForward asignacion(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws ParseException {
		//PROCESO DE DISTRIBUCION DE DIVIDENDOS
		/* 1.	seleccionar todos aquellos asociados activos al momento est_id2
		 * 2.	iterar dicha lista y dentro de esa iterar la lista de tipos de ahorro seleccionados de la app
		 * 3.	calcular el % de esa cuenta, asignarlo, generar movimiento en txa y en mxa
		 * 4.	hacer commit 
		 * 5.	seleccionar todos aquellos asociados inactivos asignarle a cada socio su correspondiente valor de distribucion
		 * 6.	sumar sus distribuciones en cta_asc y hacer partida de abono a distribucion pendiente
		 * */
		DistribucionDividendosForm distribucionForm = (DistribucionDividendosForm)form;
		Date fechaDistri = distribucionForm.getFechaDistribucionD();
		Date fechaMod = new Date();
		Integer[] idTipoAhorros = distribucionForm.getTicIds();
		Double[] porcentajes = distribucionForm.getPorcentaje();
		int numeroCuentas = porcentajes.length;
		CtaCasCuentaAsociadoDAO cuAsociadoDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
		CtaCahCuentaAhorroDAO cuAhorroDAO = new CtaCahCuentaAhorroDAO(getSessionHibernate(request));
		CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
		CtaTxaTransaccionxcuentaAsociadoDAO txaDAO = new CtaTxaTransaccionxcuentaAsociadoDAO(getSessionHibernate(request));
		CtaMxaMovimientoAhorroDAO mxaDAO = new CtaMxaMovimientoAhorroDAO(getSessionHibernate(request));
		
		//dividendosPendientesDeAsignacion = distribucionForm.getTotalDistribucion();/**********************************/
		
		CtaTtrTipoTransaccion tipoTransacc = new CtaTtrTipoTransaccion();
		
		//CuentaAhorroForm ahorroForm = new CuentaAhorroForm();
		CuentaAhorroAction ahorroAction = new CuentaAhorroAction();
		
		tipoTransacc.setTtrId(15);//capitalizacion de dividendos
		Long comprobante = txaDAO.nextComprobante();
		
		Transaction tx = cuAhorroDAO.getSession().beginTransaction();
		Double totalSinDistribuir = 0.0;
		try{
			/*****distribucion a asociados activos e inactivos*****/
			List listaSociosActivos = asociadoDAO.findByAscEstadoDistribucion("N");
			Iterator<CtaAscAsociado> iteraA = listaSociosActivos.listIterator();
			int i;
			String usuario = distribucionForm.getUsuarioConectado().getNombreUsuario();
			while(iteraA.hasNext()){
				CtaAscAsociado asociado = iteraA.next();
				if(asociado.getAscDividendoPrestamo()==null) asociado.setAscDividendoPrestamo(0.0);
				if(asociado.getAscDividendoAportaciones()==null) asociado.setAscDividendoAportaciones(new Float(0.0));
				Double dividendosSocio = asociado.getAscDividendoPrestamo() + asociado.getAscDividendoAportaciones();
				//dividendosPendientesDeAsignacion -= dividendosSocio;
				
				if(dividendosSocio>=0.1){	
					if(asociado.getCtrEstEstado().getEstId()==0 || asociado.getCtrEstEstado().getEstId()==6 || asociado.getCtrEstEstado().getEstId()==8){//asociado activo
						numeroCuentas = idTipoAhorros.length;
						i = 0;
						while(numeroCuentas>0){
							if(porcentajes[i]>0){
								List listaCuentas = cuAsociadoDAO.findByAscAndTipoCuenta3(asociado.getAscId(), idTipoAhorros[i]);
								CtaCasCuentaAsociado cuAsociado = new CtaCasCuentaAsociado();
								
								if(listaCuentas==null || listaCuentas.size()==0)			cuAsociado = cuAsociadoDAO.findPrincipal(asociado.getAscId());
								else{
									Object[] objetos = (Object[])listaCuentas.get(0);
									cuAsociado = (CtaCasCuentaAsociado)objetos[0];
								}
								CtaCahCuentaAhorro cuAhorro = cuAsociado.getCtaCahCuentaAhorro();
									
								//transaccion por abono de distribucion
								CtaTxaTransaccionxcuentaAsociado txa = new CtaTxaTransaccionxcuentaAsociado();
								txa.setCtaCasCuentaAsociado(cuAsociado);
								txa.setCtaTtrTipoTransaccion(tipoTransacc);
								txa.setTxaComprobante(comprobante);
								txa.setTxaFecha(fechaMod);
								txa.setTxaMonto(dividendosSocio*(porcentajes[i]/100));
																
								//auditoria agregada
								txa.setAudFechaCreacion(fechaMod);
								txa.setAudFechaModificacion(fechaMod);
								txa.setAudUsuarioCreacion(usuario);
								txa.setAudUsuarioModificacion(usuario);
								
								txaDAO.save(txa);
								tx.commit();
								
								//movimiento ahorro
								CtaMxaMovimientoAhorro mxa = new CtaMxaMovimientoAhorro();
								mxa.setCtaCahCuentaAhorro(cuAhorro);
								mxa.setCtaTxaTransaccionxcuentaAsociado(txa);
								mxa.setMxaFecha(fechaDistri);
								CtaMxaMovimientoAhorro ultMov =mxaDAO.findUltimoMovimientoAhorroO(cuAhorro.getCahId());
								if(ultMov==null)		mxa.setMxaSaldo(txa.getTxaMonto());
								else{
									mxa.setMxaSaldo((ultMov.getMxaSaldo()==null?0:ultMov.getMxaSaldo()) + txa.getTxaMonto());
								}
								mxa.setMxaMonto(txa.getTxaMonto());
								//ahorroForm.setCtaCahCuentaAhorroH(cuAhorro);
							
								if(idTipoAhorros[i]==-1)mxa.setMxaInteresTran(0.0);
								else{
									mxa.setMxaInteresTran(ahorroAction.calculoInteresTransaccion(cuAhorro.getCahId(),fechaMod,request));
								}
								//auditoria en movimiento
								mxa.setAudFechaCreacion(fechaMod);
								mxa.setAudFechaModificacion(fechaMod);
								mxa.setAudUsuarioCreacion(usuario);
								mxa.setAudUsuarioModificacion(usuario);
										
								mxaDAO.save(mxa);
								tx.commit();
								
								//FIXME Llamar al metodo para generar partida por distribucion de dividendos a asociados activos
								String parametros;
								parametros = "1;";
								PartidaAutomatica partidaAutomatica =  new PartidaAutomatica();
								if(idTipoAhorros[i]==-1){
									parametros += "1;0;"+tipoTransacc.getTtrId() + ";"+"0;";
									partidaAutomatica.crearPartidaAutomatica(parametros+";-1", mxa.getMxaMonto(), 
											usuario, 1, null, null, null,request);
								}else{
									parametros += "2;" + idTipoAhorros[i]+";"+tipoTransacc.getTtrId() + ";" +"0;";
									partidaAutomatica.crearPartidaAutomatica(parametros+";-1", mxa.getMxaMonto(), 
											usuario, 1, null, null, null,request);
								}
							
								//actualizando saldos en cuenta de ahorro
								cuAhorro.setCahSaldoActual(cuAhorro.getCahSaldoActual()+txa.getTxaMonto());
								cuAhorro.setCahInteresAcumulado(cuAhorro.getCahInteresAcumulado()+mxa.getMxaInteresTran());
								cuAhorroDAO.merge(cuAhorro);
								tx.commit();
							}
							
							i ++;
							numeroCuentas --;
						}
						asociado.setAscEstadoDistribucion("S");
						System.out.println("Asociado al que se le asigno =  "+asociado.getAscNombreNit());
						asociadoDAO.merge(asociado);
						tx.commit();
					}else{//asociados inactivos
						CtaPrePrestamoDAO prestamoDAO = new CtaPrePrestamoDAO(getSessionHibernate(request));
						IntereseYMora interesYMora = new IntereseYMora();
						CtaMxpMovimientoPrestamoDAO movPresDAO = new CtaMxpMovimientoPrestamoDAO(getSessionHibernate(request));
						
						List listaPrest = cuAsociadoDAO.findPrestamoByEstadoAsocGarantiaYesNo(asociado.getAscId(), 13,0);
						if(listaPrest != null && listaPrest.size()>0){
							for (Iterator iterator = listaPrest.iterator(); iterator
									.hasNext();) {
								CtaCasCuentaAsociado item = (CtaCasCuentaAsociado) iterator.next();
								CtaPrePrestamo prestamo = item.getCtaPrePrestamo();
								CtaMxpMovimientoPrestamo movimiento = movPresDAO.findUltimoMovimiento(prestamo.getPreId());
				 				if(movimiento == null){
				 					movimiento = new CtaMxpMovimientoPrestamo();
				 				}
				 				interesYMora = interesYMora.actualizaInteres(movimiento, prestamo, item, new Date(),request);
				 				Double totalPrestamo = prestamo.getPreSaldoActualT();
				 				totalPrestamo += interesYMora.getAcumulado() + interesYMora.getPendiente();
				 				
				 				dividendosSocio = abonarPrestamos(totalPrestamo,dividendosSocio, item,comprobante,interesYMora,usuario,movimiento,request);
				 				tx.commit();
				 				if(dividendosSocio > 0 )totalSinDistribuir += dividendosSocio;
				 				else{
				 					asociado.setAscDividendoAportaciones(new Float(0.0));
									asociado.setAscDividendoPrestamo(0.0);
									asociado.setAscEstadoDistribucion("S");
									System.out.println("Asociado al que se le asigno =  "+asociado.getAscNombreNit());
									asociadoDAO.merge(asociado);
									tx.commit();
				 				}
							}
						}else{
							listaPrest = cuAsociadoDAO.findPrestamoByEstadoAsocGarantiaYesNo(asociado.getAscId(), 23,0);//prestamos distribuidos a fiadores
							if(listaPrest !=null && listaPrest.size()>0){//ha distribuido su prestamo a los fiadores, a ellos se les abonara
								for (Iterator iterator = listaPrest.iterator(); iterator
										.hasNext();) {
									CtaCasCuentaAsociado item = (CtaCasCuentaAsociado) iterator.next();
									CtaPrePrestamo prestamo = item.getCtaPrePrestamo();
									
									CtaFxpFiadorPrestamo[] listaFiadores = (CtaFxpFiadorPrestamo[]) prestamo.getCtaFxpFiadorPrestamos().toArray(new CtaFxpFiadorPrestamo[]{});
									int numFiadores = 0;
									for (int j = 0; j < listaFiadores.length; j++) if(listaFiadores[j].getFxpEstado().equals("C"))numFiadores++;
									
									
									//distribuimos el monto entre los fiadores
									Double abonar = 0.0;
									int bandera = 0;
									Double montoFiador = Redondeo.roundDouble(dividendosSocio/numFiadores, 2);
									Double montoDistinto = montoFiador;
									if(numFiadores > 1){
										montoDistinto = dividendosSocio - (montoFiador*(numFiadores-1));
										montoDistinto = Redondeo.roundDouble(montoDistinto, 2);
									}
									
									for (int j = 0; j < listaFiadores.length; j++) {
										if(listaFiadores[j].getFxpEstado().equals("C")){//esta pagando un prestamo
											if(bandera==0){
												bandera=1;
												abonar=montoDistinto;
											}else abonar = montoFiador;
											
											if(listaFiadores[j].getCtaAscAsociado()!=null){//es fiador asociado buscaremos su cuenta
												//FIXME PENDIENTE A LOS CAMBIOS QUE ME DE PACO !!!
												List listaPrestamos = cuAsociadoDAO.findPrestamoByEstadoAsocGarantiaYesNo(listaFiadores[j].getCtaAscAsociado().getAscId(),13,0);
												for (Iterator iterator2 = listaPrestamos.iterator(); iterator2.hasNext();) {
													CtaCasCuentaAsociado cuenta = (CtaCasCuentaAsociado) iterator2.next();
													if(cuenta.getCasPrestamoPaga()==item.getCasCuenta()){//es el prestamo cargado
														CtaPrePrestamo prestamoF = cuenta.getCtaPrePrestamo();
														CtaMxpMovimientoPrestamo movimiento = movPresDAO.findUltimoMovimiento(prestamoF.getPreId());
										 				if(movimiento == null){
										 					movimiento = new CtaMxpMovimientoPrestamo();
										 				}
										 				interesYMora = interesYMora.actualizaInteres(movimiento, prestamoF, cuenta, new Date(),request);
										 				Double totalPrestamo = prestamoF.getPreSaldoActualT();
										 				totalPrestamo += interesYMora.getAcumulado() + interesYMora.getPendiente();
										 				
										 				abonar = abonarPrestamos(totalPrestamo,abonar, cuenta,comprobante,interesYMora,usuario,movimiento,request);
										 				tx.commit();
										 				if(abonar > 0 )totalSinDistribuir += abonar;
										 				else{
										 					asociado.setAscDividendoAportaciones(new Float(0.0));
															asociado.setAscDividendoPrestamo(0.0);
															asociado.setAscEstadoDistribucion("S");
															System.out.println("Asociado al que se le asigno =  "+asociado.getAscNombreNit());
															asociadoDAO.merge(asociado);
															tx.commit();
										 				}
										 				break;
													}
												}
											}else{//es persona externa, que puede ser empleado o definitivamente externo
												CtaPxtPersonaExternaDAO personaExternaDAO = new CtaPxtPersonaExternaDAO(getSessionHibernate(request));
												CtaPxtPersonaExterna personaExterna = listaFiadores[j].getCtaPxtPersonaExterna();
												CtaCasCuentaAsociado cuentaPersonaExterna = (CtaCasCuentaAsociado)cuAsociadoDAO.findByCtaPxtPersonaExterna(personaExterna.getPxtId()).get(0);
												
												CtaPrePrestamo prestamoF = cuentaPersonaExterna.getCtaPrePrestamo();
												CtaMxpMovimientoPrestamo movimiento = movPresDAO.findUltimoMovimiento(prestamoF.getPreId());
								 				if(movimiento == null){
								 					movimiento = new CtaMxpMovimientoPrestamo();
								 				}
								 				interesYMora = interesYMora.actualizaInteres(movimiento, prestamoF, cuentaPersonaExterna, new Date(),request);
								 				Double totalPrestamo = prestamoF.getPreSaldoActualT();
								 				totalPrestamo += interesYMora.getAcumulado() + interesYMora.getPendiente();
								 				
								 				abonar = abonarPrestamos(totalPrestamo,abonar, cuentaPersonaExterna,comprobante,interesYMora,usuario,movimiento,request);
								 				tx.commit();
								 				if(abonar > 0 )totalSinDistribuir += abonar;
								 				else{
								 					asociado.setAscDividendoAportaciones(new Float(0.0));
													asociado.setAscDividendoPrestamo(0.0);
													asociado.setAscEstadoDistribucion("S");
													System.out.println("Asociado al que se le asigno =  "+asociado.getAscNombreNit());
													asociadoDAO.merge(asociado);
													tx.commit();
								 				}
											}
										}
									}
								}
							}else{//no se le distribuira, por lo que entra a pendiente de distribucion
								totalSinDistribuir += dividendosSocio;	
							}
							
						}
					}
				}
			}
			String mensaje = getResources(request).getMessage("errors.asignacionDeDistribucionRealizadaConE");
			
			if(totalSinDistribuir > 0){//partida por dividendos no distribuidos
				PartidaAutomatica partidaAutomatica =  new PartidaAutomatica();
				partidaAutomatica.crearPartidaAutomatica("6", totalSinDistribuir, usuario, 1, null, null, null,request);
				mensaje += "\nQuedo pendiente de distribucion = "+totalSinDistribuir + ". Verificar partida contable.";
			}
			enviarMensajeXML(response, mensaje, TYPE_MENSAJE_EXITO);
			
			tx.commit();
		}catch(Exception e){
			tx.rollback();
			e.printStackTrace();
			enviarMensajeXML(response, "error: " + e.getMessage(), TYPE_MENSAJE_ERROR);
		}finally{
			cuAhorroDAO.getSession().flush();
			cuAhorroDAO.getSession().clear();
			
		}

		return null;
	}
	
	
	public Double abonarPrestamos(Double totalPrestamo, Double dividendosSocio, CtaCasCuentaAsociado cuentaAsoc,
			Long comprobante,IntereseYMora interesYMora,String usuario, CtaMxpMovimientoPrestamo ultMov,HttpServletRequest request){
		CtrEstEstadoDAO estadoDAO = new CtrEstEstadoDAO(getSessionHibernate(request));
		CtaCasCuentaAsociadoDAO cuentaAsociadoDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
		CtaTxaTransaccionxcuentaAsociadoDAO txaDAO = new CtaTxaTransaccionxcuentaAsociadoDAO(getSessionHibernate(request));
		CtaMxpMovimientoPrestamoDAO mxpDAO = new CtaMxpMovimientoPrestamoDAO(getSessionHibernate(request));
		CtaPrePrestamoDAO prestamoDAO = new CtaPrePrestamoDAO(getSessionHibernate(request));
		
		CtaTxaTransaccionxcuentaAsociado txa = new CtaTxaTransaccionxcuentaAsociado();
		CtaMxpMovimientoPrestamo mxp = new CtaMxpMovimientoPrestamo();
		CtaTtrTipoTransaccion tipoTransac = new CtaTtrTipoTransaccion();
		
		Date fechaTrans = new Date();
		Double pendiente = interesYMora.getPendiente();
		Double interesCorriente = interesYMora.getAcumulado();
		Double monto=0.00,abonoInteres=0.00;
				
		/***movimiento de abono y actualizacion de abono a cuenta de prestamo***/
		txa.setCtaCasCuentaAsociado(cuentaAsoc);
		tipoTransac.setTtrId(15);//capitalizacion de dividendos
		txa.setCtaTtrTipoTransaccion(tipoTransac);
		txa.setTxaComprobante(comprobante);
		txa.setTxaFecha(fechaTrans);
		if((dividendosSocio - totalPrestamo)>0)	txa.setTxaMonto(totalPrestamo);
		else	txa.setTxaMonto(totalPrestamo-dividendosSocio);
		
		txa.setAudFechaCreacion(fechaTrans);
		txa.setAudFechaModificacion(fechaTrans);
		txa.setAudUsuarioCreacion(usuario);
		txa.setAudUsuarioModificacion(usuario);
		txaDAO.save(txa);
		
		
		mxp.setCtaPrePrestamo(cuentaAsoc.getCtaPrePrestamo());
		mxp.setCtaTxaTransaccionxcuentaAsociado(txa);
		mxp.setMxpFecha(fechaTrans);
		
		/****Comenzamos abonando los intereses pendientes***/
		if(pendiente<totalPrestamo){
			dividendosSocio -= pendiente;//para la siguiente verificacion
			totalPrestamo -= pendiente;
		}else{
			dividendosSocio -= totalPrestamo;//para la siguiente verificacion
			pendiente -= totalPrestamo;
		}
		cuentaAsoc.getCtaPrePrestamo().setPreMoraMov(0.0);/*cero pues no hay mora para un socio activo solo para liquidados*/
		if(dividendosSocio>=0){
			if(pendiente > 0){
				abonoInteres += (pendiente<totalPrestamo)?pendiente:totalPrestamo;;
				mxp.setMxpInteresPendiente(abonoInteres);
				cuentaAsoc.getCtaPrePrestamo().setPrePendMov((pendiente<totalPrestamo)?0.0:pendiente);
			}else{
				mxp.setMxpInteresPendiente(0.0);
				cuentaAsoc.getCtaPrePrestamo().setPrePendMov(0.0);
			}
			/****Abonamos los intereses acumulados***/
			if(totalPrestamo > 0){
				if(interesCorriente<totalPrestamo){
					dividendosSocio -= interesCorriente;//para la siguiente verificacion
					totalPrestamo -= interesCorriente;
				}else{
					dividendosSocio -= totalPrestamo;//para la siguiente verificacion
					interesCorriente -= totalPrestamo;
				}
				if(dividendosSocio>=0){
					abonoInteres += (interesCorriente<totalPrestamo)?interesCorriente:totalPrestamo;
					
					if(interesCorriente > 0) mxp.setMxpInteresAcumulado(interesCorriente);
					else mxp.setMxpInteresAcumulado(0.0);
					if(totalPrestamo > 0){
						dividendosSocio -= totalPrestamo;
						
						if(dividendosSocio>=0){
							mxp.setMxpSaldoActual(ultMov.getMxpSaldoActual()==null?totalPrestamo:ultMov.getMxpSaldoActual()+totalPrestamo);
							//como el prestamo se cancelo en su totalidad lo colocamos como pagado
							monto = cuentaAsoc.getCtaPrePrestamo().getPreSaldoActualT();
							if(monto > totalPrestamo){
								cuentaAsoc.getCtaPrePrestamo().setPreSaldoActualT(monto-totalPrestamo);
							}else{//es porque son iguales
								cuentaAsoc.getCtaPrePrestamo().setPreSaldoActualT(0.0);
								cuentaAsoc.setCasFechaCierre(new Date());
								cuentaAsoc.setCtrEstEstado(estadoDAO.findById(17));
							}
						}else{
							mxp.setMxpSaldoActual((ultMov.getMxpSaldoActual()==null?
										cuentaAsoc.getCtaPrePrestamo().getPreSaldoActualT()+dividendosSocio:
										ultMov.getMxpSaldoActual())+(cuentaAsoc.getCtaPrePrestamo().getPreSaldoActualT()+dividendosSocio));
							monto = mxp.getMxpSaldoActual()+(cuentaAsoc.getCtaPrePrestamo().getPreSaldoActualT()+dividendosSocio);
							cuentaAsoc.getCtaPrePrestamo().setPreSaldoActualT(dividendosSocio*(-1));
						}
					}else{
						cuentaAsoc.getCtaPrePrestamo().setPreSaldoActualT(0.0);
						cuentaAsoc.setCasFechaCierre(new Date());
						cuentaAsoc.setCtrEstEstado(estadoDAO.findById(17));
					}
				}else{
					mxp.setMxpInteresAcumulado((interesCorriente<totalPrestamo)?(interesCorriente + dividendosSocio):(totalPrestamo + dividendosSocio));
					abonoInteres += mxp.getMxpInteresAcumulado();
					mxp.setMxpSaldoActual(ultMov.getMxpSaldoActual()==null?0:ultMov.getMxpSaldoActual());
					cuentaAsoc.getCtaPrePrestamo().setPrePendMov(cuentaAsoc.getCtaPrePrestamo().getPrePendMov()+ (dividendosSocio*(-1)));
				}
			}
		}else{
			abonoInteres += (pendiente<totalPrestamo)?(pendiente+dividendosSocio):(totalPrestamo+dividendosSocio);
			mxp.setMxpInteresPendiente(abonoInteres);
			mxp.setMxpInteresAcumulado(0.0);
			mxp.setMxpSaldoActual(ultMov.getMxpSaldoActual()==null?0:ultMov.getMxpSaldoActual());
			cuentaAsoc.getCtaPrePrestamo().setPrePendMov(dividendosSocio*(-1) + interesCorriente);
		}
		cuentaAsoc.getCtaPrePrestamo().setPreInteresAcumulado(0.0);
		
		mxp.setAudFechaCreacion(fechaTrans);
		mxp.setAudFechaModificacion(fechaTrans);
		mxp.setAudUsuarioCreacion(usuario);
		mxp.setAudUsuarioModificacion(usuario);
		
		mxpDAO.save(mxp);
		//prestamoDAO.merge(cuentaAsoc.getCtaPrePrestamo());
		//creamos el detalle automatico para los intereses
		PartidaAutomatica partidaAutomatica =  new PartidaAutomatica();
		if(abonoInteres > 0)
			partidaAutomatica.crearPartidaAutomatica("1;3;"+(cuentaAsoc.getCtaPrePrestamo().getCtaTprTipoPrestamo()==null?"-1":cuentaAsoc.getCtaPrePrestamo().getCtaTprTipoPrestamo().getTprId())+"36;1"+";-1", abonoInteres, usuario, 1, null, null, null,request);
		//creamos el detalle automatico para el saldo
		if(monto > 0)
			partidaAutomatica.crearPartidaAutomatica("1;3;"+(cuentaAsoc.getCtaPrePrestamo().getCtaTprTipoPrestamo()==null?"-1":cuentaAsoc.getCtaPrePrestamo().getCtaTprTipoPrestamo().getTprId())+"36;0"+";-1", monto, usuario, 1, null, null, null,request);
		prestamoDAO.merge(cuentaAsoc.getCtaPrePrestamo());
		cuentaAsociadoDAO.merge(cuentaAsoc);
		return dividendosSocio;
	}
	
	
	public ActionForward reporteDistribucion(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		HashMap<String, Object> pars = new HashMap<String, Object>();
		DistribucionDividendosForm distriDividendosForm = (DistribucionDividendosForm)form;
		String pathReporte = getServlet().getServletContext().getRealPath(rutaReporte+reporte+".jrxml");
		//distriDividendosForm.setPorcAportaciones(new Double(request.getSession().getAttribute("PORCENTAJEAPORTACIONES").toString()));
		//distriDividendosForm.setPorcIntereses(new Double(request.getSession().getAttribute("PORCENTAJEINTERESES").toString()));
		CtrParParametrosDAO parametrosDAO = new CtrParParametrosDAO(getSessionHibernate(request));
		//CtrParParametros parametros = new CtrParParametros();
		
		
		String[] fecha = distriDividendosForm.getFechaDistribucion().split("-");//dd-MM-yyyy
		pars.put("anio", fecha[2]);
		pars.put("porcAportaciones", parametrosDAO.findById("PORCENTAJEAPORTACIONES").getParValorNumber());
		pars.put("porcIntereses", parametrosDAO.findById("PORCENTAJEINTERESES").getParValorNumber());
		try{
			Connection con = HibernateSessionFactory.getSession().connection();
			FileInputStream input = new FileInputStream(new File(pathReporte));
			JasperDesign jd = JRXmlLoader.load(input);
			JasperReport jr = JasperCompileManager.compileReport(jd);
			JasperPrint jp = JasperFillManager.fillReport(jr,pars, con);
			response.setHeader("Cache-Control","private");
			response.setHeader("Pragma", "Cache");
			response.setContentType("application/pdf");
			response.setHeader("content-Disposition", "attachment;filename=" + reporte + new SimpleDateFormat("yyyy-MM-dd").format(new Date()) + ".pdf");
	        JRPdfExporter pdfExporter = new JRPdfExporter();
	        pdfExporter.setParameter(JRExporterParameter.JASPER_PRINT, jp);
	        pdfExporter.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());
	        pdfExporter.exportReport();
		}catch(Exception e ){
			e.printStackTrace();
		}
		return null;
	}
	
	public void mensajes(String msg, HttpServletRequest request){
		ActionErrors errors = new ActionErrors();
        errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(msg));
        saveMessages(request, errors);
	}
	
	protected Map<String,String> getKeyMethodMap() {
		Map<String, String> map = new HashMap<String, String>();
		map.put("cmd.autoSeguros.lista", "lista");
		map.put("cmd.distribucionDividendos.asignacion", "asignacion");
		map.put("cmd.distribucionDividendos.distribucion", "distribucion");
		map.put("cmd.distribucionDividendos.reporteDistribucion", "reporteDistribucion");
		return map;
	}
}