/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.procesosEspeciales.struts.action;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.apache.struts.upload.FormFile;
import org.hibernate.Transaction;

import com.cetia.sicaco.hibernate.CtaAscAsociado;
import com.cetia.sicaco.hibernate.CtaAscAsociadoDAO;
import com.cetia.sicaco.hibernate.CtaBxcBeneficiariosCuenta;
import com.cetia.sicaco.hibernate.CtaBxcBeneficiariosCuentaDAO;
import com.cetia.sicaco.hibernate.CtaCasCuentaAsociado;
import com.cetia.sicaco.hibernate.CtaCasCuentaAsociadoDAO;
import com.cetia.sicaco.hibernate.CtaMxsMovimientoSeguros;
import com.cetia.sicaco.hibernate.CtaMxsMovimientoSegurosDAO;
import com.cetia.sicaco.hibernate.CtaSegSeguros;
import com.cetia.sicaco.hibernate.CtaSegSegurosDAO;
import com.cetia.sicaco.hibernate.CtaTinTasaInteres;
import com.cetia.sicaco.hibernate.CtaTinTasaInteresDAO;
import com.cetia.sicaco.hibernate.CtaTisTipoSeguro;
import com.cetia.sicaco.hibernate.CtaTisTipoSeguroDAO;
import com.cetia.sicaco.hibernate.CtaTtrTipoTransaccion;
import com.cetia.sicaco.hibernate.CtaTtrTipoTransaccionDAO;
import com.cetia.sicaco.hibernate.CtaTxaTransaccionxcuentaAsociado;
import com.cetia.sicaco.hibernate.CtaTxaTransaccionxcuentaAsociadoDAO;
import com.cetia.sicaco.hibernate.CtrEstEstado;
import com.cetia.sicaco.hibernate.CtrEstEstadoDAO;
import com.cetia.sicaco.procesosEspeciales.struts.form.CargaAutomaticaSegurosForm;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;

/** 
 * MyEclipse Struts
 * Creation date: 12-01-2008
 * 
 * XDoclet definition:
 * @struts.action path="/cargaAutomaticaSeguros" name="cargaAutomaticaSegurosForm" input="redirectInvalidData" parameter="accion" scope="request" validate="true"
 * @struts.action-forward name="lista" path="pagina-lista.procesosEspeciales.cargaAutomaticaSeguros"
 */
public class CargaAutomaticaSegurosAction extends DMLAction {
	
	public String TABLA_ID = "CtaAscAsociado";
	public String WICH_ONE = "";
	public String CODIGO_ASOCIADO = "";
	public long CAS_ID = (long)0.0;
	public ArrayList<CtaBxcBeneficiariosCuenta> LBXC = new ArrayList<CtaBxcBeneficiariosCuenta>();

	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		CargaAutomaticaSegurosForm autoSeguros = (CargaAutomaticaSegurosForm)form;
		
		CtaTisTipoSeguroDAO tipoSeguroDAO = new CtaTisTipoSeguroDAO(getSessionHibernate(request));
		List lstTis = tipoSeguroDAO.findAll();
		request.setAttribute("lstTis", lstTis);
		
		CtaTinTasaInteresDAO tasaInteresDAO = new CtaTinTasaInteresDAO(getSessionHibernate(request));
		List lstTin = tasaInteresDAO.findAll();
		request.setAttribute("lstTin", lstTin);
		
		//----- Variables de configuracion
		request.setAttribute("form", autoSeguros);
		request.setAttribute("edit", 0);
		request.setAttribute(Constantes.ACCION_KEY, "/cargaAutomaticaSeguros");
		return mapping.findForward("lista");
	}

	public ActionForward redirectInvalidData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		ActionErrors errors = (ActionErrors)request.getSession().getAttribute(Constantes.ERRORS);
		saveMessages(request, errors);
		return lista(mapping, form, request, response);
	}

	public void mensajes(String msg, HttpServletRequest request){
		ActionErrors errors = new ActionErrors();
		errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(msg));
		saveMessages(request, errors);
	}

	public ActionForward cargar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		CargaAutomaticaSegurosForm autoSegurosForm = (CargaAutomaticaSegurosForm)form;
		FormFile file = autoSegurosForm.getArchivo();
		int noEncontrados=0;
		noEncontrados = leerExcel(file,request,noEncontrados, autoSegurosForm);
		log.info("Numero de Codigos no encontrados:" + noEncontrados);
		//----- Variables de configuracion
		autoSegurosForm.setArchivo(null);
		request.setAttribute("form", autoSegurosForm);
		request.setAttribute(Constantes.ACCION_KEY, "/cargaAutomaticaSeguros");
		request.setAttribute("edit", 1);

		return lista(mapping, form, request, response);
	}
	
	public int leerExcel (FormFile file,HttpServletRequest request, int noEncontrados, CargaAutomaticaSegurosForm autoSegurosForm)
	{
//		ComunXLSDAO comunXLSDAO = new ComunXLSDAO();
//		comunXLSDAO.imprimirFilas(file, 0, 175, 180);
		int tisId = autoSegurosForm.getTisId();
		int tinId = autoSegurosForm.getTinId();
		Integer noCuotas = autoSegurosForm.getNoCuotas();
		int medico = 0;
		if(tisId == 8){
			medico = 1;
		}
		
		InputStream inputStream = null;
		try
		{
			inputStream = file.getInputStream();
		}
		catch (IOException e)
		{
			mensajes("error.planilla.fileNotFound", request);
			log.error("archivo no fue encontrado en la direccion proporcionada");
			e.printStackTrace ();
		}

		POIFSFileSystem fileSystem = null;

		try
		{
			fileSystem = new POIFSFileSystem (inputStream);

			HSSFWorkbook      workBook = new HSSFWorkbook (fileSystem);
			HSSFSheet         sheet    = workBook.getSheetAt (0);
			Iterator<HSSFRow> rows     = sheet.rowIterator();
			
			int x = 0;
			CODIGO_ASOCIADO = "";
			while (x<= sheet.getLastRowNum())
			{
				HSSFRow row = rows.next ();
				//if(row.getRowNum() >175 && row.getRowNum() < 180){
					if(verificarFila(row,medico, autoSegurosForm.getEmpOAsoc(),request)){
						//log.warn("valida row#: " + row.getRowNum());
						guardarFila(row,tisId,tinId, autoSegurosForm.getEmpOAsoc(), 
								autoSegurosForm.getUsuarioConectado().getNombreUsuario(),request,noCuotas);
					}else{
						noEncontrados++;
						//log.error("Datos de la fila " + row.getRowNum() + " no son correctos de acuerdo al estandar que deberia llevar el archivo");
					}
				//}
				x++;
			}
			//guardaBen(CODIGO_ASOCIADO);
		}
		catch (IOException e)
		{
			e.printStackTrace ();
		}
		CODIGO_ASOCIADO = "";
		return noEncontrados;
	}
	

	private void guardarFila(HSSFRow row, int tisId, int tinId, String empOAsoc,String usuario,HttpServletRequest request, int noCuotas) {
		Iterator<HSSFCell> cells = row.cellIterator();
		int numCeldas = row.getPhysicalNumberOfCells();

		HSSFCell cell = null;
		Integer posCelda = 0;

		CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
		CtaSegSegurosDAO segurosDAO = new CtaSegSegurosDAO(getSessionHibernate(request));
		CtaCasCuentaAsociadoDAO casDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
		CtaBxcBeneficiariosCuentaDAO bxcDao = new CtaBxcBeneficiariosCuentaDAO(getSessionHibernate(request));
		Transaction tx = segurosDAO.getSession().beginTransaction();
		
		CtaAscAsociado asociado = new CtaAscAsociado();
		//Codigo de Asociado
		cell = row.getCell(posCelda.shortValue());
		String codAsociado = cell.getRichStringCellValue().getString();
		if(empOAsoc.equals("e")){
			asociado = (CtaAscAsociado) asociadoDAO.findByAscCodigo(codAsociado).get(0);
		}else{
			asociado = (CtaAscAsociado) asociadoDAO.findByAscCodigoAsociado(codAsociado).get(0);
		}
		
		//Monto asegurado
		posCelda++;
		cell = row.getCell(posCelda.shortValue());
		Double montoAsegurado = cell.getNumericCellValue();
		
		//Cuota mensual
		posCelda++;
		cell = row.getCell(posCelda.shortValue());
		Double cuotaMensual = cell.getNumericCellValue();
		
		//Certificado
		posCelda++;
		cell = row.getCell(posCelda.shortValue());
		String certificado ="";
		if(cell.getCellType() == HSSFCell.CELL_TYPE_NUMERIC){
			Double certDouble = cell.getNumericCellValue();
			Integer certInteger = certDouble.intValue();
			certificado = certInteger.toString();
		}
		if(cell.getCellType () == HSSFCell.CELL_TYPE_STRING){
			certificado = cell.getRichStringCellValue().getString();
		}
		/*
		//Carnet
		posCelda++;
		String carnet = "";
		cell = row.getCell(posCelda.shortValue());
		if(cell != null){
			if(cell.getCellType() != HSSFCell.CELL_TYPE_BLANK){
				if(cell.getCellType() == HSSFCell.CELL_TYPE_NUMERIC){
					Double carnetDouble = cell.getNumericCellValue();
					carnet = carnetDouble.toString();
				}
				if(cell.getCellType () == HSSFCell.CELL_TYPE_STRING){
					carnet = cell.getRichStringCellValue().getString();
				}
			}
		}
		*/
		//Crear cuenta que asocia al seguro con el asociado
		//Estado activo de seguro es 11 e inactivo es 12
		CtrEstEstadoDAO estadoDAO = new CtrEstEstadoDAO(getSessionHibernate(request));
		CtrEstEstado estadoActivo = estadoDAO.findById(11);
		
		if(!CODIGO_ASOCIADO.equals(asociado.getAscCodigoAsociado())){
			CODIGO_ASOCIADO = asociado.getAscCodigoAsociado();
			//Crear seguro
			CtaSegSeguros seguros = new CtaSegSeguros();
			CtaCasCuentaAsociado cas = new CtaCasCuentaAsociado();
			if(segurosDAO.findBySegCertificado(certificado).size()>0){
				CtaSegSeguros segurosAnt = (CtaSegSeguros) segurosDAO.findBySegCertificado(certificado).get(0);
				CtaCasCuentaAsociado casAnt = casDAO.findbySegId(segurosAnt.getSegId());
				if(casAnt.getCtaAscAsociado().equals(asociado)){
					segurosAnt = meteDatosSeguro(segurosAnt,tinId, tisId, "", cuotaMensual, montoAsegurado,request,noCuotas);
					seguros= segurosAnt;
					segurosDAO.merge(segurosAnt);
					tx.commit();
					segurosDAO.getSession().flush();
					segurosDAO.getSession().clear();
					CAS_ID = casAnt.getCasCuenta();
					cas = casAnt;
				}else{
					seguros.setSegId(segurosDAO.generarId("D"));
					seguros.setSegCertificado(certificado);
					seguros = meteDatosSeguro(seguros, tinId, tisId, "", cuotaMensual, montoAsegurado,request,noCuotas);
					segurosDAO.save(seguros);
					tx.commit();
					segurosDAO.getSession().flush();
					segurosDAO.getSession().clear();
					
					cas = new CtaCasCuentaAsociado();
					cas = guardaCas(cas, asociado, seguros, estadoActivo,request);
				}
			}else{
				seguros = new CtaSegSeguros();
				seguros.setSegId(segurosDAO.generarId("D"));
				seguros.setSegCertificado(certificado);
				seguros = meteDatosSeguro(seguros, tinId, tisId, "", cuotaMensual, montoAsegurado,request,noCuotas);
				segurosDAO.save(seguros);
				tx.commit();
				segurosDAO.getSession().flush();
				segurosDAO.getSession().clear();
				
				cas = new CtaCasCuentaAsociado();
				cas = guardaCas(cas, asociado, seguros, estadoActivo,request);
				
			}
			CtaMxsMovimientoSegurosDAO mxsDao = new CtaMxsMovimientoSegurosDAO(getSessionHibernate(request));
			CtaTxaTransaccionxcuentaAsociadoDAO txaDAO = new CtaTxaTransaccionxcuentaAsociadoDAO(getSessionHibernate(request));
			CtaTxaTransaccionxcuentaAsociado txa = new CtaTxaTransaccionxcuentaAsociado();
			CtaTtrTipoTransaccionDAO ttrDAO = new CtaTtrTipoTransaccionDAO(getSessionHibernate(request));
			CtaTtrTipoTransaccion ttr= ttrDAO.findById(44);
				txa.setCtaCasCuentaAsociado(cas);
				txa.setCtaTtrTipoTransaccion(ttr);
				txa.setTxaComprobante(null);
				txa.setTxaFecha(new Date());
				txa.setTxaMonto(seguros.getSegSaldoIni());
				txa.setAudFechaCreacion(new Date());
				txa.setAudFechaModificacion(new Date());
				txa.setAudUsuarioCreacion(usuario);
				txa.setAudUsuarioModificacion(usuario);
			txaDAO.save(txa);
			
			CtaMxsMovimientoSeguros mxs = new CtaMxsMovimientoSeguros();
			mxs.setCtaSegSeguros(seguros);
			mxs.setCtaTxaTransaccionxcuentaAsociado(txa);
			mxs.setMxsFecha(new Date());
			mxs.setMxsMonto(txa.getTxaMonto());
			double mxsSaldo = seguros.getSegSaldoActual();
			mxs.setMxsSaldo(mxsSaldo);
			mxs.setAudFechaCreacion(new Date());
			mxs.setAudFechaModificacion(new Date());
			mxs.setAudUsuarioCreacion(usuario);
			mxs.setAudUsuarioModificacion(usuario);
			mxsDao.save(mxs);
			tx.commit();
			
		}
		
		//CtaCasCuentaAsociado casCuenta = casDAO.findById(CAS_ID);
		/*//Correlativo
		posCelda++;
		cell = row.getCell(posCelda.shortValue());
		
		//Nombre Completo
		posCelda++;
		String nombreCompleto ="";
		SplitNombre splitNombre = new SplitNombre();
		cell = row.getCell(posCelda.shortValue());
		if(cell.getCellType() == HSSFCell.CELL_TYPE_STRING){
			nombreCompleto = cell.getRichStringCellValue().getString();
			splitNombre = splitNombre.splitNombreCompleto(nombreCompleto);
		}

		//Si no es seguro medico se verifican tambien los porcentajes
		posCelda++;
		Double porcentaje = 0.0;
		cell = row.getCell(posCelda.shortValue());
		if(cell == null ){
			if(tisId == 8){
				porcentaje = 0.0;
			}
		}else{
			if(cell.getCellType() == HSSFCell.CELL_TYPE_BLANK){
				if(tisId == 8){
					porcentaje = 0.0;
				}
			}
			if(cell.getCellType() == HSSFCell.CELL_TYPE_NUMERIC){
				porcentaje = cell.getNumericCellValue();
			}
			if(cell.getCellType () == HSSFCell.CELL_TYPE_STRING){
				String porcentajeString = cell.getRichStringCellValue().getString().trim();
				int i = porcentajeString.indexOf("'");
				if(i >-1){
					porcentajeString = porcentajeString.substring(i+1);
				}
				int j = porcentajeString.indexOf("%");
				if(j > -1){
					porcentajeString = porcentajeString.substring(0, porcentajeString.length()-1);
				}
				if(!Double.valueOf(porcentajeString).isNaN()){
					porcentaje = Redondeo.roundDouble(Double.valueOf(porcentajeString),2);
				}else{
					porcentaje = 0.0;
				}
			}
		}
		
		CtaBenBeneficiariosDAO beneficiariosDAO = new CtaBenBeneficiariosDAO();
		CtaBenBeneficiarios beneficiariosX = new CtaBenBeneficiarios();
		beneficiariosX.setBenApellidoCasada(splitNombre.getApellidoCasada());
		beneficiariosX.setBenPrimerApellido(splitNombre.getPrimerApellido());
		beneficiariosX.setBenPrimerNombre(splitNombre.getPrimerNombre());
		beneficiariosX.setBenSegundoApellido(splitNombre.getSegundoApellido());
		beneficiariosX.setBenSegundoNombre(splitNombre.getSegundoNombre());
		List lben = beneficiariosDAO.findByCriteria(beneficiariosX);
		if(lben.size()>0){
			CtaBxcBeneficiariosCuenta bxc = new CtaBxcBeneficiariosCuenta();
			bxc.setBxcPorcentaje(porcentaje.floatValue());
			bxc.setCtaBenBeneficiarios((CtaBenBeneficiarios)lben.get(0));
			bxc.setCtaCasCuentaAsociado(casCuenta);
			LBXC.add(bxc);
		}else{
			beneficiariosX.setBenEstado("A");
			beneficiariosX.setBenFechaNacimiento(null);
			beneficiariosX.setBenNombreCompleto(nombreCompleto);
			beneficiariosX.setBenSexo("");
			beneficiariosX.setBenTelefono("");
			beneficiariosX.setCtaAscAsociado(asociado);
			beneficiariosX.setSecParParentesco(null);
			beneficiariosDAO.save(beneficiariosX);
			tx.commit();
			beneficiariosDAO.getSession().flush();
			beneficiariosDAO.getSession().clear();
			
			CtaBxcBeneficiariosCuenta bxc = new CtaBxcBeneficiariosCuenta();
			bxc.setBxcPorcentaje(porcentaje.floatValue());
			bxc.setCtaBenBeneficiarios(beneficiariosX);
			bxc.setCtaCasCuentaAsociado(casCuenta);
			LBXC.add(bxc);
		}*/
	}

	private CtaCasCuentaAsociado guardaCas(CtaCasCuentaAsociado cas, CtaAscAsociado asociado,
			CtaSegSeguros seguros, CtrEstEstado estadoActivo,HttpServletRequest request) {
		CtaCasCuentaAsociadoDAO casDao = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
		Transaction tx = casDao.getSession().beginTransaction();
		cas.setCasFechaApertura(new Date());
		cas.setCasPrincipal("N");
		cas.setCasValorApertura(0.0);
		cas.setCtaAscAsociado(asociado);
		cas.setCtaPxtPersonaExterna(null);
		cas.setCtaPrePrestamo(null);
		cas.setCtaCahCuentaAhorro(null);
		cas.setCtaCbaCuentaBancaria(null);
		cas.setCtaSegSeguros(seguros);
		cas.setCtrEstEstado(estadoActivo);
		casDao.save(cas);
		tx.commit();
		casDao.getSession().flush();
		casDao.getSession().clear();
		CAS_ID = cas.getCasCuenta();
		return cas;
	}

	private CtaSegSeguros meteDatosSeguro(CtaSegSeguros segurosAnt,
			Integer tinId, Integer tisId,
			String carnet, Double cuotaMensual, Double montoAsegurado,HttpServletRequest request, int noCuotas) {
		CtaTinTasaInteresDAO tasaInteresDAO = new CtaTinTasaInteresDAO(getSessionHibernate(request));
		CtaTinTasaInteres tasaInteres = tasaInteresDAO.findById(tinId);
		CtaTisTipoSeguroDAO tipoSeguroDAO = new CtaTisTipoSeguroDAO(getSessionHibernate(request));
		CtaTisTipoSeguro tipoSeguro = tipoSeguroDAO.findById(tisId);
		segurosAnt.setCtaTinTasaInteres(tasaInteres);
		segurosAnt.setCtaTisTipoSeguro(tipoSeguro);
		segurosAnt.setSegCarnet(carnet);
		segurosAnt.setSegCuota(cuotaMensual);
		segurosAnt.setSegMonto(montoAsegurado);
		segurosAnt.setSegNumCuotaCancel(0);
		segurosAnt.setSegSaldoActual(cuotaMensual * noCuotas);
		segurosAnt.setSegSaldoIni(cuotaMensual * noCuotas);
		return segurosAnt;
	}

	private boolean verificarFila(HSSFRow row, int medico, String empOAsoc,HttpServletRequest request) {
		Iterator<HSSFCell> cells = row.cellIterator();
		int numCeldas = row.getPhysicalNumberOfCells();
		if(medico == 1){
			numCeldas = numCeldas -1;
		}
		HSSFCell cell = null;
		Integer posCelda = 0;
		
		//Codigo de Asociado
		cell = row.getCell(posCelda.shortValue());
		if(cell == null){
			log.error("fallo codigo asociado null");
			//guardaBen(CODIGO_ASOCIADO);
			return false;
		}else{
			if(cell.getCellType() == HSSFCell.CELL_TYPE_BLANK){
				log.error("fallo codigo asociado blanco");
				//guardaBen(CODIGO_ASOCIADO);
				return false;
			}
		}
		if(cell.getCellType () != HSSFCell.CELL_TYPE_STRING){
			log.error("fallo codigo asociado no string");
			//guardaBen(CODIGO_ASOCIADO);
			return false;
		}else{
			String codigoAsociado = cell.getRichStringCellValue().getString();
			CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
			CtaAscAsociado asociado = new CtaAscAsociado();
			if(empOAsoc.equals("e")){
				asociado.setAscCodigo(codigoAsociado);
			}else{
				asociado.setAscCodigoAsociado(codigoAsociado);
			}
			
			if(asociadoDAO.findByCodigos(asociado, 1,"").size() < 1){
				log.error("Codigo no encontrado: " + codigoAsociado);
				//guardaBen(CODIGO_ASOCIADO);
				return false;
			}
		}
		
		//Monto asegurado
		posCelda++;
		cell = row.getCell(posCelda.shortValue());
		if(cell.getCellType() != HSSFCell.CELL_TYPE_NUMERIC){
			log.error("fallo monto asegurado no numeric");
			return false;
		}
		
		//Cuota mensual
		posCelda++;
		cell = row.getCell(posCelda.shortValue());
		if(cell.getCellType() != HSSFCell.CELL_TYPE_NUMERIC){
			log.error("fallo cuota mensual no numeric");
			return false;
		}
		
		//Certificado
		posCelda++;
		cell = row.getCell(posCelda.shortValue());
		if(cell.getCellType() != HSSFCell.CELL_TYPE_NUMERIC){
			if(cell.getCellType () != HSSFCell.CELL_TYPE_STRING){
				log.error("fallo certificado no string");
				return false;
			}
		}
		/*
		//Carnet
		posCelda++;
		cell = row.getCell(posCelda.shortValue());
		if(cell != null){
			if(cell.getCellType() != HSSFCell.CELL_TYPE_BLANK){
				if(cell.getCellType() != HSSFCell.CELL_TYPE_NUMERIC){
					if(cell.getCellType () != HSSFCell.CELL_TYPE_STRING){
						log.error("fallo carnet no es string");
						return false;
					}
				}
			}
		}
		
		//Correlativo
		posCelda++;
		cell = row.getCell(posCelda.shortValue());
		if(medico !=1){
			if(cell.getCellType() != HSSFCell.CELL_TYPE_NUMERIC){
				log.error("fallo correlativo1 no numeric");
				return false;
			}
		}else{
			if(cell != null){
				if(cell.getCellType() != HSSFCell.CELL_TYPE_BLANK){
					if(cell.getCellType() != HSSFCell.CELL_TYPE_NUMERIC){
						log.error("fallo correlativo2 no numeric");
						return false;
					}
				}
			}
		}
		
		//Nombre Completo
		posCelda++;
		cell = row.getCell(posCelda.shortValue());
		if(cell.getCellType() != HSSFCell.CELL_TYPE_STRING){
			log.error("fallo nombre completo no string");
			return false;
		}

		//Si no es seguro medico se verifican tambien los porcentajes
		posCelda++;
		cell = row.getCell(posCelda.shortValue());
		if(cell == null ){
			if(medico != 1){
				log.error("fallo porcentaje nulo");
				return false;
			}
		}else{
			if(cell.getCellType() == HSSFCell.CELL_TYPE_BLANK){
				if(medico != 1){
					log.error("fallo porcentaje blanco");
					return false;
				}
			}
			if(cell.getCellType() != HSSFCell.CELL_TYPE_NUMERIC){
				if(cell.getCellType () == HSSFCell.CELL_TYPE_STRING){
					String porcentaje = cell.getRichStringCellValue().getString().trim();
					int i = porcentaje.indexOf("'");
					if(i >-1){
						porcentaje = porcentaje.substring(i+1);
					}
					int j = porcentaje.indexOf("%");
					if(j > -1){
						porcentaje = porcentaje.substring(0, porcentaje.length()-1);
					}
					if(Double.valueOf(porcentaje).isNaN()){
						log.error("fallo porcentaje no es numero");
						return false;
					}
				}
			}
		}*/
		return true;
	}
	/*
	public void guardaBen(String ascCod){
		if(!ascCod.trim().equals("")){
			CtaBxcBeneficiariosCuentaDAO bxcDao = new CtaBxcBeneficiariosCuentaDAO();
			Transaction tx = bxcDao.getSession().beginTransaction();
			
			ArrayList beneficiadosXCuenta = (ArrayList) LBXC.clone();
			LBXC.clear();
			if(beneficiadosXCuenta.size() > 0){
				Double suma100 = 0.0;
				for (Iterator iterator = beneficiadosXCuenta.iterator(); iterator
						.hasNext();) {
					CtaBxcBeneficiariosCuenta bxc = (CtaBxcBeneficiariosCuenta) iterator.next();
					suma100 = suma100 + bxc.getBxcPorcentaje();
				}
				if(suma100!=100.0){
					log.error("la suma de los porcentajes de beneficio del asociado: " + ascCod +" es distinta de 100");
				}else{
					List bxcAnt = bxcDao.findByProperty("ctaCasCuentaAsociado.casCuenta", CAS_ID);
					for (Iterator iterator = bxcAnt.iterator(); iterator.hasNext();) {
						CtaBxcBeneficiariosCuenta bxc = (CtaBxcBeneficiariosCuenta) iterator.next();
						bxcDao.delete(bxc);
						tx.commit();
						bxcDao.getSession().flush();
						bxcDao.getSession().clear();
					}
					for (Iterator iterator = beneficiadosXCuenta.iterator(); iterator.hasNext();) {
						CtaBxcBeneficiariosCuenta bxc = (CtaBxcBeneficiariosCuenta) iterator.next();
						bxcDao.save(bxc);
						tx.commit();
						bxcDao.getSession().flush();
						bxcDao.getSession().clear();
					}
				}
			}
		}
	}
	*/
	
	protected Map getKeyMethodMap() {
		// TODO Auto-generated method stub
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.autoSeguros.lista", "lista");
		map.put("cmd.autoSeguros.cargar", "cargar");
		return map;
	}
}