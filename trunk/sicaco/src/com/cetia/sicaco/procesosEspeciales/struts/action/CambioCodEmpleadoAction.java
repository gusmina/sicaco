/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.procesosEspeciales.struts.action;

import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRichTextString;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.apache.struts.upload.FormFile;
import org.hibernate.Transaction;

import com.cetia.sicaco.hibernate.CtaAscAsociado;
import com.cetia.sicaco.hibernate.CtaAscAsociadoDAO;
import com.cetia.sicaco.hibernate.CtaCasCuentaAsociadoDAO;
import com.cetia.sicaco.procesosEspeciales.struts.form.CambioCodEmpleadoForm;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;

/** 
 * MyEclipse Struts
 * Creation date: 11-26-2008
 * 
 * XDoclet definition:
 * @struts.action path="/cambioCodEmpleado" name="cambioCodEmpleadoForm" input="redirectInvalidData" parameter="accion" scope="request" validate="true"
 * @struts.action-forward name="lista" path="pagina-lista.procesosEspeciales.cambioCodEmpleado"
 */
public class CambioCodEmpleadoAction extends DMLAction {
	
	public String TABLA_ID = "CtaAscAsociado";
	public String WICH_ONE = "";

	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		CambioCodEmpleadoForm cCodEmpForm = (CambioCodEmpleadoForm)form;
		
		//----- Variables de configuracion
		request.setAttribute("form", cCodEmpForm);
		request.setAttribute("edit", 0);
		request.setAttribute(Constantes.ACCION_KEY, "/cambioCodEmpleado");
		return mapping.findForward("lista");
	}

	public ActionForward redirectInvalidData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		ActionErrors errors = (ActionErrors)request.getSession().getAttribute(Constantes.ERRORS);
		saveMessages(request, errors);
		return lista(mapping, form, request, response);
	}

	public void mensajes(String msg, HttpServletRequest request){
		ActionErrors errors = new ActionErrors();
		errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(msg));
		saveMessages(request, errors);
	}

	public ActionForward cargar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		CambioCodEmpleadoForm codEmpleadoForm = (CambioCodEmpleadoForm)form;
		CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
//		List lst = asociadoDAO.findAll(codEmpleadoForm.getUsuarioConectado().getMax());
		FormFile file = codEmpleadoForm.getArchivo();
		int noEncontrados=0;
		noEncontrados = leerExcel(file,request,noEncontrados);
		log.info("Numero de Codigos no encontrados:" + noEncontrados);
		//----- Variables de configuracion
		codEmpleadoForm.setArchivo(null);
		request.setAttribute("form", codEmpleadoForm);
		request.setAttribute(Constantes.ACCION_KEY, "/planilla");
		request.setAttribute("edit", 1);
		mensajes("msg.cambioCodASoc.ModificacionExitosa", request);
		return lista(mapping, form, request, response);
	}
	
	public int leerExcel (FormFile file,HttpServletRequest request, int noEncontrados)
	{
		CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
		CtaCasCuentaAsociadoDAO casDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
		Transaction tx = asociadoDAO.getSession().beginTransaction();
		InputStream inputStream = null;
		try
		{
			inputStream = file.getInputStream();
		}
		catch (IOException e)
		{
			mensajes("error.planilla.fileNotFound", request);
			log.error("archivo no fue encontrado en la direccion proporcionada");
			e.printStackTrace ();
		}

		POIFSFileSystem fileSystem = null;

		try
		{
			fileSystem = new POIFSFileSystem (inputStream);

			HSSFWorkbook      workBook = new HSSFWorkbook (fileSystem);
			HSSFSheet         sheet    = workBook.getSheetAt (0);
			Iterator<HSSFRow> rows     = sheet.rowIterator();
			
			while (rows.hasNext ())
			{
				HSSFRow row = rows.next ();

				// once get a row its time to iterate through cells.
				Iterator<HSSFCell> cells = row.cellIterator();
				while (cells.hasNext ())
				{
					HSSFCell cell = cells.next ();
					if(cell.getCellNum() < 2){
						if(cell.getCellType () == HSSFCell.CELL_TYPE_STRING){
							HSSFRichTextString richTextString = cell.getRichStringCellValue ();
							if(richTextString != null && !richTextString.toString().trim().equals("")){
								if(asociadoDAO.findByAscCodigo(richTextString.getString()).size() > 0){
									CtaAscAsociado asociado = (CtaAscAsociado) asociadoDAO.findByAscCodigo(richTextString.getString()).get(0);
									if(cells.hasNext()){
										HSSFCell cellNuevoCodigo = cells.next();
										if(cellNuevoCodigo.getCellType () == HSSFCell.CELL_TYPE_STRING){
											HSSFRichTextString RTSNuevoCod = cellNuevoCodigo.getRichStringCellValue ();
											if(RTSNuevoCod != null && !RTSNuevoCod.toString().trim().equals("")){
												asociado.setAscCodigo(RTSNuevoCod.getString());
												asociadoDAO.merge(asociado);
												tx.commit();
												asociadoDAO.getSession().flush();
												asociadoDAO.getSession().clear();
											}else{
												noEncontrados++;
												//mensajes("error.cCodEmpleado.codigoNuevoNoEncontrado", request);
												break;
											}
										}else{
											noEncontrados++;
											log.error("El codigo de la celda " + row.getRowNum() + ", " + cellNuevoCodigo.getCellNum() + " no es de tipo String");
										}
									}else{
										noEncontrados++;
										//mensajes("error.cCodEmpleado.codigoNuevoNoEncontrado", request);
										break;
									}
								}else{
									noEncontrados++;
									//mensajes("error.cCodEmpleado.asociadoNoEncontrado", request);
									break;
								}
							}else{
								noEncontrados++;
							}
						}else{
							noEncontrados++;
							log.error("El codigo de la celda " + row.getRowNum() + ", " + cell.getCellNum() + " no es de tipo String");
						}
					}
				}
			}
		}
		catch (IOException e)
		{
			e.printStackTrace ();
		}
		return noEncontrados;
	}

	
	protected Map<String, String> getKeyMethodMap() {
		// TODO Auto-generated method stub
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.cambiaCodEmp.lista", "lista");
		map.put("cmd.cambiaCodEmp.cargar", "cargar");
		return map;
	}
}