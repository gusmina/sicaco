/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.procesosEspeciales.struts.action;

import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.hibernate.Transaction;

import com.cetia.sicaco.hibernate.CtaAscAsociado;
import com.cetia.sicaco.hibernate.CtaAscAsociadoDAO;
import com.cetia.sicaco.hibernate.CtaCasCuentaAsociadoDAO;
import com.cetia.sicaco.hibernate.CtaTahTipoAhorro;
import com.cetia.sicaco.hibernate.CtaTahTipoAhorroDAO;
import com.cetia.sicaco.hibernate.CtrParParametrosDAO;
import com.cetia.sicaco.hibernate.SecCelCorreoElectronicoDAO;
import com.cetia.sicaco.hibernate.SecIseInicioSesion;
import com.cetia.sicaco.hibernate.SecIseInicioSesionDAO;
import com.cetia.sicaco.hibernate.SecPerPersona;
import com.cetia.sicaco.hibernate.SecPerPersonaDAO;
import com.cetia.sicaco.procesosEspeciales.struts.form.EnvioCorreoRetiroAhorroForm;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;
import com.cetia.sicaco.struts.UsuarioConectado;
import com.mad.utilidades.ThreadEmail;

/** 
 * MyEclipse Struts
 * Creation date: 01-27-2009
 * 
 * XDoclet definition:
 * @struts.action path="/envioCorreoRetiroAhorro" name="envioCorreoRetiroAhorroForm" parameter="accion" scope="request" validate="true"
 * @struts.action-forward name="plantilla" path="/hola"
 * @struts.action-forward name="redirectInvalidData" path="redirectInvalidData" redirect="true"
 */
public class EnvioCorreoRetiroAhorroAction extends DMLAction {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	
	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		EnvioCorreoRetiroAhorroForm envioCorreoRetiroAhorroForm = (EnvioCorreoRetiroAhorroForm) form;// TODO Auto-generated method stub
		CtaTahTipoAhorroDAO tAhDAO = new CtaTahTipoAhorroDAO(getSessionHibernate(request));
		List listaTipos = tAhDAO.findAPlazos();
		
		//----- Variables de configuracion
		request.setAttribute("form", envioCorreoRetiroAhorroForm);
		request.setAttribute("edit", 0);
		request.setAttribute("listaTah", listaTipos);
		request.setAttribute(Constantes.ACCION_KEY, "/envioCorreoRetiroAhorro");
		return mapping.findForward("lista");
	}
	
	public ActionForward enviarCorreo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		EnvioCorreoRetiroAhorroForm envioCorreoRetiroAhorroForm = (EnvioCorreoRetiroAhorroForm) form;// TODO Auto-generated method stub
		CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
		SecPerPersonaDAO personaDAO = new SecPerPersonaDAO(getSessionHibernate(request));
		SecIseInicioSesionDAO inicioDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
		CtaCasCuentaAsociadoDAO cuentasDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
		CtaTahTipoAhorroDAO tipoDAO = new CtaTahTipoAhorroDAO(getSessionHibernate(request));
		
		
		//debe elegir el tipo de ahorro y  la lista debe tener solo a plazos
		int tipoAhorro = (envioCorreoRetiroAhorroForm.getTahId()==null)?0:envioCorreoRetiroAhorroForm.getTahId();
		ActionErrors errors = new ActionErrors();
		CtaTahTipoAhorro tipo = tipoDAO.findById(tipoAhorro);
		
		List listaAsociado = cuentasDAO.findCuentasAhorroConCierreHoyC(tipoAhorro);
		for (Iterator iterator = listaAsociado.iterator(); iterator.hasNext();) {
			String ascId = (String) iterator.next();
			CtaAscAsociado asociado = asociadoDAO.findById(ascId);
			SecPerPersona persona = asociado.getSecPerPersona();
			SecIseInicioSesion inicio = inicioDAO.findById(envioCorreoRetiroAhorroForm.getUsuarioConectado().getNombreUsuario());
			createNewThreadEmail(inicio.getIseContrasenia(), persona, envioCorreoRetiroAhorroForm.getUsuarioConectado(), 
					errors, tipo.getTahNombre() + "\n Fecha Inicio de Retiro: "+tipo.getTahFechaFin(),request);
		}
		/*Iterator<?> it = listaAsociado.listIterator();
		while(it.hasNext()){
			Object[] item = (Object[])it.next();
			CtaAscAsociado asociado = asociadoDAO.findById(item[0].toString());
			SecPerPersona persona = asociado.getSecPerPersona();
			SecIseInicioSesion inicio = inicioDAO.findActiveSesionByPersona(persona);
			createNewThreadEmail(inicio.getIseContrasenia(), persona, envioCorreoRetiroAhorroForm.getUsuarioConectado(), errors, inicio.getIseNombreUsuario());
			
		}*/
		errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.envio.Exito"));
		return lista(mapping,form,request,response);
	}
	 private void createNewThreadEmail(String password,
				SecPerPersona modelPerPersona, UsuarioConectado attribute,ActionErrors errors,String tipo,HttpServletRequest request) {
			String msg = null;
			String subject = null;
			int puerto = 0;
			String ipServidor = null;
			String correoAdmin = "ADMINISTRADOR@ADMINISTRADOR.COM";
			String correoCliente = null;
			
			if(password != null && modelPerPersona!=null && attribute != null &&  errors != null){
				CtrParParametrosDAO parametrosDAO = new CtrParParametrosDAO(getSessionHibernate(request));
				SecCelCorreoElectronicoDAO secCelCorreoElectronicoDAO = new SecCelCorreoElectronicoDAO(getSessionHibernate(request));
				Transaction tx = parametrosDAO.getSession().beginTransaction();
				try {
					msg = parametrosDAO.findById("MAIL_RETIRO_AHORRO").getParValorString();
					subject = parametrosDAO.findById("MAIL_SUBJECT").getParValorString();
					puerto =  parametrosDAO.findById("MAIL_PUERTO").getParValorNumber().intValue();
					ipServidor =  parametrosDAO.findById("MAIL_SERVIDOR").getParValorString();
					correoCliente = secCelCorreoElectronicoDAO.findCorreoByPerId(modelPerPersona.getPerId());
					tx.commit();
				} catch (Exception e) {
					tx.rollback();
					e.printStackTrace();
					errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.session.email"));
				}finally{
					 parametrosDAO.getSession().flush();
					 parametrosDAO.getSession().clear();
					 
				}
				msg += "\n Tipo de Cuenta: "+tipo;
				if(msg!=null && subject != null && puerto != 0 && ipServidor != null && correoAdmin!= null
						&& correoCliente!=null){
						 new ThreadEmail(
								 ipServidor,puerto,correoAdmin
								 ,new String[]{correoAdmin,correoCliente},msg,
								 subject,new StringBuilder().append(modelPerPersona.getPerPrimerNombre())
								 .append("-").append(modelPerPersona.getPerPrimerApellido()).toString()
								 ,"Administrador"
						).start();
					
				}else{
					errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.session.email"));
				}
			}else{
				errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.session.email"));
			}
		}
	@Override
	protected Map getKeyMethodMap() {
		// TODO Auto-generated method stub
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.enviar.lista", "lista");
		map.put("cmd.enviar.enviarCorreo", "enviarCorreo");
		return map;
	}
}