/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.cuentaCorriente.struts.action;

import java.io.IOException;
import java.text.DecimalFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.hibernate.Transaction;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeImpl;
import org.jmesa.limit.ExportType;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.BasicCellEditor;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.html.HtmlBuilder;

import com.cetia.sicaco.cuentaCorriente.struts.form.ChequePrestamoForm;
import com.cetia.sicaco.cuentaCorriente.struts.form.TipoSeguroForm;
import com.cetia.sicaco.hibernate.CtaCahCuentaAhorro;
import com.cetia.sicaco.hibernate.CtaCasCuentaAsociado;
import com.cetia.sicaco.hibernate.CtaCasCuentaAsociadoDAO;
import com.cetia.sicaco.hibernate.CtaChkChequePrestamo;
import com.cetia.sicaco.hibernate.CtaChkChequePrestamoDAO;
import com.cetia.sicaco.hibernate.CtaDxpDescuentosPrestamo;
import com.cetia.sicaco.hibernate.CtaDxpDescuentosPrestamoDAO;
import com.cetia.sicaco.hibernate.CtaMxpMovimientoPrestamo;
import com.cetia.sicaco.hibernate.CtaMxpMovimientoPrestamoDAO;
import com.cetia.sicaco.hibernate.CtaPrePrestamo;
import com.cetia.sicaco.hibernate.CtaPrePrestamoDAO;
import com.cetia.sicaco.hibernate.CtaRxpRetencionPrestamo;
import com.cetia.sicaco.hibernate.CtaRxpRetencionPrestamoDAO;
import com.cetia.sicaco.hibernate.CtaSegSeguros;
import com.cetia.sicaco.hibernate.CtaTisTipoSeguro;
import com.cetia.sicaco.hibernate.CtaTisTipoSeguroDAO;
import com.cetia.sicaco.hibernate.CtrBanBanco;
import com.cetia.sicaco.hibernate.CtrBanBancoDAO;
import com.cetia.sicaco.hibernate.CtrRckRepositorioCheques;
import com.cetia.sicaco.hibernate.CtrRckRepositorioChequesDAO;
import com.cetia.sicaco.hibernate.SecIseInicioSesion;
import com.cetia.sicaco.hibernate.SecIseInicioSesionDAO;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;
import com.mad.utilidades.IntereseYMora;

/** 
 * MyEclipse Struts
 * Creation date: 09-03-2008
 * 
 * XDoclet definition:
 * @struts.action path="/chequePrestamo" name="chequePrestamoForm" input="redirectInvalidData" parameter="accion" scope="request" validate="true"
 * @struts.action-forward name="lista" path="pagina-lista.cuentaCorriente.chequePrestamo"
 */
public class ChequePrestamoAction extends DMLAction {

	public String TABLA_ID = "ctaChkChequePrestamo";

	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ChequePrestamoForm chequePrestamoForm = (ChequePrestamoForm)form;
		CtaChkChequePrestamoDAO chequePrestamoDAO = new CtaChkChequePrestamoDAO(getSessionHibernate(request));
		
		ActionErrors errors = new ActionErrors();
		
		CtaPrePrestamoDAO prestamoDAO = new CtaPrePrestamoDAO(getSessionHibernate(request));
		CtaPrePrestamo prestamo = prestamoDAO.findById((String)request.getSession().getAttribute("preId"));
		chequePrestamoForm.setPrestamoId(prestamo.getPreId());
		
		//Cargar lista de bancos para el cheque
		CtrBanBancoDAO bancoDAO = new CtrBanBancoDAO(getSessionHibernate(request));
		List lban = bancoDAO.findAll();
		request.setAttribute("lban", lban);

		//Cargar repositorio del cheque, correlativo inicial
		if(lban.size()>0){
			CtrBanBanco banco = (CtrBanBanco) lban.get(0);
			CtrRckRepositorioChequesDAO repositorioChequesDAO = new CtrRckRepositorioChequesDAO(getSessionHibernate(request));
			SecIseInicioSesionDAO sesionDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
			SecIseInicioSesion sesion = sesionDAO.findById(chequePrestamoForm.getUsuarioConectado().getNombreUsuario());
			List rckList = repositorioChequesDAO.findBySyB(banco.getBanId(), 
					sesion.getSecPerPersona().getSecSucSucursal().getSucId());
			request.setAttribute("lrck", rckList);
			if(rckList.size() > 0){
				CtrRckRepositorioCheques rck = (CtrRckRepositorioCheques) rckList.get(0);
				chequePrestamoForm.setChkCorrelativoCheque(rck.getRckCorrActual());
			}else{
				mensajes("msg.chk.noRepositorio", request, new ActionErrors());
			}
		}
		
		//encontrar si esta refinanciando a otro
		CtaCasCuentaAsociadoDAO casDao = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
		CtaCasCuentaAsociado cas = casDao.findByPreId(prestamo.getPreId());
		Double refinanciado = 0.0;
		Double aportaciones = 0.0;
		if(cas.getCasRefinanciado()!= null){
			CtaCasCuentaAsociado casRef = casDao.findById(cas.getCasRefinanciado());
			//Si el prestamo al cual esta refinanciando sigue activo (13) entonces agrega el saldo actual a refinanciado
			if(casRef.getCtrEstEstado().getEstId() == 13){
				refinanciado = casRef.getCtaPrePrestamo().getPreSaldoActualT();
			}
		}
		
		Double montoDesembolso = montoDesembolso(cas.getCasCuenta(),request);
		chequePrestamoForm.setMontoDisponible(montoDesembolso);
		chequePrestamoForm.setMontoDisp(montoDesembolso);
		/*
		//Ver si tiene la nota de aportaciones
		CtaNotNotasDAO notasDAO = new CtaNotNotasDAO();
		List laport = notasDAO.findbyCuentaAndCampo(cas.getCasCuenta(), "Descuento Aportacion");
		for (Iterator iterator = laport.iterator(); iterator.hasNext();) {
			CtaNotNotas notas = (CtaNotNotas) iterator.next();
			aportaciones += Double.valueOf(notas.getNotNota());
		}
		
		chequePrestamoForm.setMontoDisponible(prestamo.getPreMontoSolicitado() 
				- chequePrestamoDAO.sumMontosCheques(prestamo.getPreId())
				- refinanciado - aportaciones - prestamo.getPreOtrasDeducciones());
		chequePrestamoForm.setMontoDisp(chequePrestamoForm.getMontoDisponible());
		*/
		
		
		List lst = chequePrestamoDAO.findByPrestamo(prestamo.getPreId());

		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);

		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
			//---- exporta la tabla
			export(tableFacade);
			return null; 
		} else {
			//---- genera el html de la tabla para ser mostrada
			String html = html(tableFacade, request);
			request.setAttribute(Constantes.LISTA_KEY, html);
		}
		//----- Variables de configuracion
		//request.setAttribute("form", chequePrestamoForm);
		request.setAttribute("edit", 0);
		request.setAttribute(Constantes.ACCION_KEY, "/chequePrestamo");
		return mapping.findForward("lista");
	}

	public Double montoDesembolso(Long casCuenta,HttpServletRequest request) {
		CtaCasCuentaAsociadoDAO casDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
		CtaDxpDescuentosPrestamoDAO descPrestDAO = new CtaDxpDescuentosPrestamoDAO(getSessionHibernate(request));
		Transaction tx = descPrestDAO.getSession().beginTransaction();

		try{
			CtaCasCuentaAsociado cas = casDAO.findById(casCuenta);//Obteniendo la cuenta del prestamo solicitado
			CtaPrePrestamoDAO prestamoDAO = new CtaPrePrestamoDAO(getSessionHibernate(request));//Obteniendo el prestamo solicitado
			CtaPrePrestamo prestamo = prestamoDAO.findById(cas.getCtaPrePrestamo().getPreId());
			
			//Descontando las aportaciones
			Double aportaciones = 0.00;
			aportaciones = prestamo.getPreAportaciones();
			
			//Descontando las otras deducciones y el iva
			Double otrasDeducciones = 0.00,iva=0.00;
			if(prestamo.getPreOtrasDeducciones()!= null){
				otrasDeducciones = prestamo.getPreOtrasDeducciones();
				iva = prestamo.getPreIvaDeducciones();
			}
			
			//Descontando las otras retenciones
			Double otrasRetenciones =0.00;		
			CtaRxpRetencionPrestamoDAO retencionDAO = new CtaRxpRetencionPrestamoDAO(getSessionHibernate(request));		
			List<CtaRxpRetencionPrestamo> retenciones = retencionDAO.findByProperty("ctaPrePrestamo.preId",prestamo.getPreId());
			Iterator iRet = retenciones.iterator();
			
			while(iRet.hasNext()){
				CtaRxpRetencionPrestamo retencion = (CtaRxpRetencionPrestamo) iRet.next();
				otrasRetenciones += retencion.getRxpMonto();
			}
			
			//-------------------------------DESCUENTOS APLICADOS-------------------------------------------
			
			//--------Obteniendo los descuentos asignados a los PRESTAMOS del asociado----------------------
			
			
			List listaDescPrest = (List) descPrestDAO.findByPreIdAndTipoCuenta(prestamo.getPreId(), "C");
			Iterator iDesc = listaDescPrest.iterator();
			
			//Obteniendo los prestamos activos que posee el asociado
			Double descPrest=0.00;
			List<CtaCasCuentaAsociado> listaPrestamos = (List) casDAO.findByAscAndTipoCuenta2(cas.getCtaAscAsociado().getAscId(),"C");
				
			while(iDesc.hasNext()){
				CtaDxpDescuentosPrestamo desc = (CtaDxpDescuentosPrestamo) iDesc.next();
				Iterator iPrest = listaPrestamos.iterator();
				boolean encontrado = false;
				while(iPrest.hasNext()){
					CtaCasCuentaAsociado cuentaPre = (CtaCasCuentaAsociado) iPrest.next();
					CtaPrePrestamo prest = cuentaPre.getCtaPrePrestamo();
					if(desc.getCtaPrePrestamoByPreId2().getPreId()==prest.getPreId()){
						encontrado=true;
						if(desc.getDxpMonto()==null){//Entonces le descontamos todo el monto del prestamo
							//Calcular saldo con los intereses pendientes
							IntereseYMora iYm = new IntereseYMora();
							CtaMxpMovimientoPrestamoDAO mxpDao = new CtaMxpMovimientoPrestamoDAO(getSessionHibernate(request));
							CtaMxpMovimientoPrestamo mxpAnt = mxpDao.findUltimoMovimiento(cuentaPre.getCtaPrePrestamo().getPreId());
							if(mxpAnt == null || mxpAnt.getMxpId() == null){
								mxpAnt = new CtaMxpMovimientoPrestamo();
							}
							iYm = iYm.actualizaInteres(mxpAnt, cuentaPre.getCtaPrePrestamo(), cuentaPre, new Date(),request);
							Double saldoConInteres = cuentaPre.getCtaPrePrestamo().getPreSaldoActualT() + iYm.getAcumulado() + iYm.getPendiente();
							
							descPrest+=saldoConInteres;
						}else descPrest+=desc.getDxpMonto();
					}
				}
				if(!encontrado){//Como no fue encontrado el descuento hay que eliminarlo
					descPrestDAO.delete(desc);
				}
			}
			
			//--------Obteniendo los descuentos asignados a los SEGUROS del asociado-------------------------
			
			List listaDescSeg = (List) descPrestDAO.findByPreIdAndTipoCuenta(prestamo.getPreId(), "D");
			Iterator iDescS = listaDescSeg.iterator();
			
			//Para obtener las cuentas de seguro activas del asociado
			Double descSeg=0.00;
			List listaSeguros = (List) casDAO.findByAscAndTipoCuenta2(cas.getCtaAscAsociado().getAscId(),"D");		
			
			while(iDescS.hasNext()){
				CtaDxpDescuentosPrestamo desc = (CtaDxpDescuentosPrestamo) iDescS.next();
				Iterator iSeg = listaSeguros.iterator();
				boolean encontrado = false;
				while(iSeg.hasNext()){
					CtaCasCuentaAsociado cuentaSeg = (CtaCasCuentaAsociado) iSeg.next();
					CtaSegSeguros seg = cuentaSeg.getCtaSegSeguros();
					if(desc.getCtaSegSeguros().getSegId()==seg.getSegId()){
						encontrado=true;
						if(desc.getDxpMonto()==null){//Entonces le descontamos toda la deuda del seguro
							descSeg+=seg.getSegSaldoActual();
						}else descSeg+=desc.getDxpMonto();
					}
				}
				if(!encontrado){//Como no fue encontrado el descuento hay que eliminarlo
					descPrestDAO.delete(desc);
				}
			}
			
			//-------Obteniendo los abonos asignados a los AHORROS del asociado------------------------------
			
			List listaDescAho = (List) descPrestDAO.findByPreIdAndTipoCuenta(prestamo.getPreId(), "B");		
			Iterator iDescA = listaDescAho.iterator();
			
			//Para obtener las cuentas de ahorro activas del asociado
			Double descAho=0.00;
			List listaAhorros = (List) casDAO.findByAscAndTipoCuenta2(cas.getCtaAscAsociado().getAscId(),"B");		
		
			while(iDescA.hasNext()){
				CtaDxpDescuentosPrestamo desc = (CtaDxpDescuentosPrestamo) iDescA.next();
				Iterator iAho = listaAhorros.iterator();
				boolean encontrado = false;
				while(iAho.hasNext()){
					CtaCasCuentaAsociado cuentaAho = (CtaCasCuentaAsociado) iAho.next();
					CtaCahCuentaAhorro aho = cuentaAho.getCtaCahCuentaAhorro();
					if(desc.getCtaCahCuentaAhorro().getCahId()==aho.getCahId()){
						encontrado=true;
						descAho+=desc.getDxpMonto();
					}
				}
				if(!encontrado){//Como no fue encontrado el descuento hay que eliminarlo
					descPrestDAO.delete(desc);
				}
			}
		
			//Verificando que el prestamo este refinanciando otro		
			Double refinanciando = 0.0;
			if(cas.getCasRefinanciado() != null){
				CtaCasCuentaAsociado casRef = casDAO.findById(cas.getCasRefinanciado());
				IntereseYMora iYm = new IntereseYMora();
				CtaMxpMovimientoPrestamoDAO mxpDao = new CtaMxpMovimientoPrestamoDAO(getSessionHibernate(request));
				CtaMxpMovimientoPrestamo mxp = mxpDao.findUltimoMovimiento(casRef.getCtaPrePrestamo().getPreId());
				if(mxp == null || mxp.getMxpId() == null){
					mxp = new CtaMxpMovimientoPrestamo();
				}
				iYm = iYm.actualizaInteres(mxp, casRef.getCtaPrePrestamo(), casRef, new Date(),request);
				Double ref = casRef.getCtaPrePrestamo().getPreSaldoActualT() + iYm.getAcumulado() + iYm.getPendiente();
				
				DecimalFormat df = new DecimalFormat("0.00");
				refinanciando = new Double(df.format(ref));
			}
			//Si hubieron delete de descuentos hago commit
			tx.commit();
			//Obteniendo el liquido a recibir
			Double monto = 0.00;
			monto = prestamo.getPreMontoSolicitado() 
					- refinanciando - aportaciones 
					- otrasDeducciones - iva - otrasRetenciones 
					- descPrest - descSeg - descAho;
			
			//Actualizo el liquido a recibir del prestamo por si se encontraron descuentos registrados
			//que ya no se pueden asignar porque las cuentas fueron cerradas
			Transaction tx2 = prestamoDAO.getSession().beginTransaction();
			DecimalFormat df = new DecimalFormat("0.00");
			Double montoFormateado = new Double(df.format(monto));
			prestamo.setPreLiquidoARecibir(montoFormateado);
			prestamoDAO.merge(prestamo);
			tx2.commit();
			
			descPrestDAO.getSession().flush();
			descPrestDAO.getSession().clear();
			
			prestamoDAO.getSession().flush();
			prestamoDAO.getSession().clear();

			return montoFormateado;
		}catch (Exception e) {
			// TODO: handle exception
			tx.rollback();
			return 0.00;
		}

	}

	//---- metodo que genera el html de la tabla del jmesa
	private String html(final TableFacade tableFacade, final HttpServletRequest request) {
		tableFacade.setColumnProperties("chkEmitidoA", "chkMontoEmitido",
				"chkRazon","chkId");
		Table table = tableFacade.getTable();
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.chk.caption");

		Row row = table.getRow();
		Column nombreColumna = row.getColumn("chkEmitidoA");
		nombreColumna.setTitleKey("tbl.chk.chkEmitidoA");

		nombreColumna = row.getColumn("chkMontoEmitido");
		nombreColumna.setTitleKey("tbl.chk.chkMontoEmitido");

		nombreColumna = row.getColumn("chkRazon");
		nombreColumna.setTitleKey("tbl.chk.chkRazon");

		nombreColumna = row.getColumn("chkId");
		nombreColumna.setTitleKey("tbl.chk.acciones");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtaChkChequePrestamo chequePrestamo = (CtaChkChequePrestamo)item;

				HtmlBuilder html = new HtmlBuilder();
				value = "eliminar";
				String link = tableFacade.getWebContext().getContextPath();
				html.a().onclick("handlerDeleteButton("+ chequePrestamo.getChkId()+ ");").id("deleteButtonId").close();
				html.append(value);
				html.aEnd();				
				return html.toString();		
			}

		});

		return tableFacade.render();
	}

	//---- metodo que genera los exports, el formato que tendran
	private void export(final TableFacade tableFacade) {
		tableFacade.setColumnProperties("tahNombre", "ctaLahLineaAhorro.lahNombre",
				"ctaPlmPlanMeses.plmNombre","tahId");
		Table table = tableFacade.getTable();
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.tah.caption");

		Row row = table.getRow();
		Column nombreColumna = row.getColumn("tahNombre");
		nombreColumna.setTitleKey("tbl.tah.tahNombre");

		nombreColumna = row.getColumn("ctaLahLineaAhorro.lahNombre");
		nombreColumna.setTitleKey("tbl.tah.lahNombreLinea");

		nombreColumna = row.getColumn("ctaPlmPlanMeses.plmNombre");
		nombreColumna.setTitleKey("tbl.tah.plmNombreMes");

		tableFacade.render();
	}

	public ActionForward guardar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ChequePrestamoForm chequePrestamoForm = (ChequePrestamoForm)form;
		CtaChkChequePrestamoDAO chequePrestamoDAO = new CtaChkChequePrestamoDAO(getSessionHibernate(request));
		CtaPrePrestamoDAO prestamoDAO = new CtaPrePrestamoDAO(getSessionHibernate(request));
		CtaPrePrestamo prestamo = prestamoDAO.findById(chequePrestamoForm.getPrestamoId());
		CtrRckRepositorioChequesDAO repositorioChequesDAO = new CtrRckRepositorioChequesDAO(getSessionHibernate(request));
		CtrRckRepositorioCheques rck = null;
		
		if(!camposVacios(chequePrestamoForm,request)){
			Transaction tx = chequePrestamoDAO.getSession().beginTransaction();
			try{
				Float smck = chequePrestamoDAO.sumMontosCheques(chequePrestamoForm.getPrestamoId());
				if((smck + chequePrestamoForm.getChkMontoEmitido()) <= prestamo.getPreMontoSolicitado()){
					CtrBanBancoDAO bancoDAO = new CtrBanBancoDAO(getSessionHibernate(request));
					CtrBanBanco banco = bancoDAO.findById(chequePrestamoForm.getCtrBanBanco().getBanId());
					SecIseInicioSesionDAO sesionDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
					SecIseInicioSesion sesion = sesionDAO.findById(chequePrestamoForm.getUsuarioConectado().getNombreUsuario());
					rck = repositorioChequesDAO.findById(chequePrestamoForm.getRckId());
					if(rck == null){
						mensajes("msg.chk.noCorrelativo", request, new ActionErrors());
						return lista(mapping, chequePrestamoForm, request, response);
					}else{
						chequePrestamoForm.setChkCorrelativoCheque(rck.getRckCorrActual());
					}
					chequePrestamoForm.setChkFecha(new Date());
					chequePrestamoForm.setChkLugar(sesion.getSecPerPersona().getSecSucSucursal().getSucDireccion());
					chequePrestamoForm.setCtaPrePrestamo(prestamo);
					chequePrestamoDAO.save(chequePrestamoForm.getChequePrestamoH());
				}else{
					mensajes("errors.chk.sobrepasa",request, new ActionErrors());
					return lista(mapping, form, request, response);
				}
			}catch(Exception e){
				tx.rollback();
				e.printStackTrace();
			}finally{
				tx.commit();
				
				rck.setRckCorrActual(rck.getRckCorrActual() + 1);
				repositorioChequesDAO.merge(rck);
				tx.commit();
				
				repositorioChequesDAO.getSession().flush();
				repositorioChequesDAO.getSession().clear();
				
			}
		}
		return lista(mapping,chequePrestamoForm,request,response);
	} 

	private boolean camposVacios(ChequePrestamoForm chequePrestamoForm, HttpServletRequest request) {
		boolean bool = false;
		ActionErrors errors = new ActionErrors();
		if(chequePrestamoForm.getChequePrestamoH().getChkEmitidoA() == null 
				|| chequePrestamoForm.getChequePrestamoH().getChkEmitidoA().trim().equals("")){
			mensajes("error.chk.emitidoAVacio", request, errors);
			bool = true;
		}
		if(chequePrestamoForm.getChequePrestamoH().getChkMontoEmitido() <= 0.0 ){
			mensajes("error.chk.montoEmitidoNegativo", request, errors);
			bool = true;
		}
		if(chequePrestamoForm.getChequePrestamoH().getChkRazon() == null 
				|| chequePrestamoForm.getChequePrestamoH().getChkRazon().trim().equals("")){
			mensajes("error.chk.razonVacia", request, errors);
			bool = true;
		}
		return bool;
	}

	public ActionForward cargarDatos(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		TipoSeguroForm tipoSeguroForm = (TipoSeguroForm)form;
		CtaTisTipoSeguroDAO tipoSeguroDAO = new CtaTisTipoSeguroDAO(getSessionHibernate(request));
		tipoSeguroForm.setTipoSeguroH(tipoSeguroDAO.findById(tipoSeguroForm.getTisId()));
		
		List lst = tipoSeguroDAO.findAll();

		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);

		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
			//---- exporta la tabla
			export(tableFacade);
			return null; 
		} else {
			//---- genera el html de la tabla para ser mostrada
			String html = html(tableFacade, request);
			request.setAttribute(Constantes.LISTA_KEY, html);
		}
		//----- Variables de configuracion
		request.setAttribute("form", tipoSeguroForm);
		request.setAttribute("edit", 1);
		request.setAttribute(Constantes.ACCION_KEY, "/tipoSeguro");
		return mapping.findForward("lista");
	}

	public ActionForward redirectInvalidData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		ActionErrors errors = (ActionErrors)request.getSession().getAttribute(Constantes.ERRORS);
		saveMessages(request, errors);
		return lista(mapping, form, request, response);
	}

	public void mensajes(String msg, HttpServletRequest request, ActionErrors errors){
		if(errors.size()<1){
			errors = new ActionErrors();
		}
		errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(msg));
		saveMessages(request, errors);
	}
	
	public ActionForward eliminar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ChequePrestamoForm chequePrestamoForm = (ChequePrestamoForm)form;
		CtaChkChequePrestamoDAO chequePrestamoDAO = new CtaChkChequePrestamoDAO(getSessionHibernate(request));
		
		CtaPrePrestamoDAO prestamoDAO = new CtaPrePrestamoDAO(getSessionHibernate(request));
		CtaPrePrestamo prestamo = prestamoDAO.findById(chequePrestamoForm.getPrestamoId());
		
		Transaction tx = chequePrestamoDAO.getSession().beginTransaction();
		try{
			CtaChkChequePrestamo chequePrestamo = chequePrestamoDAO.findById(chequePrestamoForm.getChkId2());
			chequePrestamoDAO.delete(chequePrestamo);
		}catch(Exception e){
			tx.rollback();
			e.printStackTrace();
		}finally{
			tx.commit();
			try{
				prestamo.setPreLiquidoARecibir(
						(prestamo.getPreMontoSolicitado() 
							- chequePrestamoDAO.sumMontosCheques(
								chequePrestamoForm.getPrestamoId())));
				prestamoDAO.merge(prestamo);
			}catch (Exception e) {
				tx.rollback();
				e.printStackTrace();
			}finally{
				tx.commit();
				prestamoDAO.getSession().flush();
				prestamoDAO.getSession().clear();
				
			}
		}
		mensajes("msg.tis.eliminacionExitosa", request, new ActionErrors());
		return lista(mapping,chequePrestamoForm,request,response);
	} 
	
	public ActionForward salvar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		TipoSeguroForm tipoSeguroForm = (TipoSeguroForm)form;
		CtaTisTipoSeguroDAO tipoSeguroDAO = new CtaTisTipoSeguroDAO(getSessionHibernate(request));
		CtaTisTipoSeguro tipoSeguro = tipoSeguroDAO.findById(tipoSeguroForm.getTisId());
		Transaction tx = tipoSeguroDAO.getSession().beginTransaction();
		try{
			if(tipoSeguroForm.getTipoSeguroH().getTisNombre().equals(tipoSeguro.getTisNombre())){
				tipoSeguroForm.setCtaPlmPlanMeses(null);
				tipoSeguroDAO.merge(tipoSeguroForm.getTipoSeguroH());
			}else{
				if(tipoSeguroDAO.findByTisNombre(tipoSeguroForm.getTipoSeguroH().getTisNombre()).isEmpty()){
					tipoSeguroForm.setCtaPlmPlanMeses(null);
					tipoSeguroDAO.merge(tipoSeguroForm.getTipoSeguroH());
				}else{
					//mensajes("errors.tisNombreRepetido",request);
					return lista(mapping, form, request, response);
				}
			}
		}catch(Exception e){
			tx.rollback();
			e.printStackTrace();
		}finally{
			tx.commit();
			tipoSeguroDAO.getSession().flush();
			tipoSeguroDAO.getSession().clear();
			
		}
		//mensajes("msg.tis.modificacionExitosa",request);
		return lista(mapping,new TipoSeguroForm(),request,response);
	} 
	
	public ActionForward cancelar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		return lista(mapping, form, request, response);
	}
	
	public ActionForward cargarRepositorio(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		ChequePrestamoForm chequeForm = (ChequePrestamoForm)form;
		String texto = "";
		CtrBanBancoDAO bancoDAO = new CtrBanBancoDAO(getSessionHibernate(request));
		HtmlBuilder htmlBuilder = new HtmlBuilder();
		CtrBanBanco banco = bancoDAO.findById(chequeForm.getCtrBanBanco().getBanId());
		CtrRckRepositorioChequesDAO rckDao = new CtrRckRepositorioChequesDAO(getSessionHibernate(request));
		SecIseInicioSesionDAO sesionDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
		SecIseInicioSesion sesion = sesionDAO.findById(chequeForm.getUsuarioConectado().getNombreUsuario());
		List rckList = rckDao.findBySyB(banco.getBanId(), sesion.getSecPerPersona().getSecSucSucursal().getSucId());
		htmlBuilder.td(0).close();
		htmlBuilder.div().id("valoresBanco").close();
		htmlBuilder.select().name("rckId").id("rckId");
		htmlBuilder.onchange("loadCorrelativo();");
		htmlBuilder.close();
		int x = 0;
		Integer correlativo = 0;
		for (Iterator iterator = rckList.iterator(); iterator.hasNext();) {
			CtrRckRepositorioCheques rck = (CtrRckRepositorioCheques) iterator.next();
			if(x<1){
				correlativo = rck.getRckCorrActual();
				x++;
			}
			htmlBuilder.option().value(rck.getRckId().toString()).close().append(rck.getRckNombre()).optionEnd();
		}
		htmlBuilder.selectEnd();
		texto = htmlBuilder.toString();
		try{
			response.getWriter().write(texto);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (RuntimeException e) {
			log.error("Error runtime", e);
		} catch (IOException e) {
			log.error(e);
		}
		return null;
	}
	
	public ActionForward cargarCorrelativo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		ChequePrestamoForm chequeForm = (ChequePrestamoForm)form;
		CtrBanBancoDAO bancoDAO = new CtrBanBancoDAO(getSessionHibernate(request));
		CtrBanBanco banco = bancoDAO.findById(chequeForm.getCtrBanBanco().getBanId());
		CtrRckRepositorioChequesDAO rckDao = new CtrRckRepositorioChequesDAO(getSessionHibernate(request));
		SecIseInicioSesionDAO sesionDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
		SecIseInicioSesion sesion = sesionDAO.findById(chequeForm.getUsuarioConectado().getNombreUsuario());
		if(chequeForm.getRckId() == null){
			List rckList = rckDao.findBySyB(banco.getBanId(), sesion.getSecPerPersona().getSecSucSucursal().getSucId());
			if(rckList.size()>0){
				CtrRckRepositorioCheques rck = (CtrRckRepositorioCheques) rckList.get(0); 
				chequeForm.setRckId(rck.getRckId());
			}
		}
		String texto = "";
		HtmlBuilder htmlBuilder = new HtmlBuilder();
		htmlBuilder.input().type("text").readonly().styleClass("exclude")
			.name("chkCorrelativoCheque").id("chkCorrelativoId");
		if(chequeForm.getRckId() == null){
			htmlBuilder.value("No hay cheques disponibles").size("25");
		}else{
			CtrRckRepositorioCheques rck = rckDao.findById(chequeForm.getRckId());
			htmlBuilder.value(rck.getRckCorrActual().toString()).size("15");
		}
		htmlBuilder.close();
		texto = htmlBuilder.toString();
		try{
			response.getWriter().write(texto);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (RuntimeException e) {
			log.error("Error runtime", e);
		} catch (IOException e) {
			log.error(e);
		}
		return null;
	}
	
	protected Map getKeyMethodMap() {
		// TODO Auto-generated method stub
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.chk.lista", "lista");
		map.put("cmd.chk.guardar", "guardar");
		map.put("cmd.tis.redirectInvalidData", "redirectInvalidData");
		map.put("cmd.tis.cargarDatos", "cargarDatos");
		map.put("cmd.tis.eliminar", "eliminar");
		map.put("cmd.tis.salvar", "salvar");
		map.put("cmd.tis.cancelar", "cancelar");
		map.put("cmd.chk.cargarRepositorio", "cargarRepositorio");
		map.put("cmd.chk.cargarCorrelativo", "cargarCorrelativo");
		return map;
	}
}