/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.cuentaCorriente.struts.action;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.hibernate.Transaction;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeImpl;
import org.jmesa.limit.ExportType;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.BasicCellEditor;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.html.HtmlBuilder;

import com.cetia.sicaco.cuentaCorriente.struts.form.NotaGenericForm;
import com.cetia.sicaco.cuentaCorriente.struts.form.PrestamoForm;
import com.cetia.sicaco.hibernate.CtaCasCuentaAsociado;
import com.cetia.sicaco.hibernate.CtaCasCuentaAsociadoDAO;
import com.cetia.sicaco.hibernate.CtaNotNotas;
import com.cetia.sicaco.hibernate.CtaNotNotasDAO;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;

/** 
 * MyEclipse Struts
 * Creation date: 10-30-2008
 * 
 * XDoclet definition:
 * @struts.action path="/nota" name="notaGenericForm" scope="request"
 */
public class NotaAction extends DMLAction {
	
	public static final String TABLA_ID = "ctaNotNota";
	
	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		CtaCasCuentaAsociadoDAO casCuentaAsociadoDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
		CtaNotNotasDAO notasDAO = new CtaNotNotasDAO(getSessionHibernate(request));
		NotaGenericForm nxpForm = (NotaGenericForm)form;
		CtaCasCuentaAsociado cuenta = (CtaCasCuentaAsociado)casCuentaAsociadoDAO.findByProperty("ctaPrePrestamo.preId", nxpForm.getPreId()).get(0);
		nxpForm.setPerId(cuenta.getCtaAscAsociado().getSecPerPersona().getPerId());
		List lst = notasDAO.findByProperty("casCuenta", cuenta.getCasCuenta());
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
        	//---- exporta la tabla
        //    export(tableFacade);
            return null; 
        } else {
        	String html = html(tableFacade, request,nxpForm);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
		request.setAttribute("prestamo", cuenta.getCtaPrePrestamo());
		request.setAttribute("asociado", cuenta.getCtaAscAsociado());
		request.setAttribute("notaGenericForm", form);
		request.setAttribute(Constantes.ACCION_KEY, "/nota");
		return mapping.findForward("lista");
	}
	
	private String html(final TableFacade tableFacade, final HttpServletRequest request, final NotaGenericForm form) {
		tableFacade.setColumnProperties("notNota");
		Table table = tableFacade.getTable();
		
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.preNot.caption");
		
		Row row = table.getRow();
		Column nombreColumna = row.getColumn("notNota");
		nombreColumna.setTitleKey("tbl.pre.notNota");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property,rowcount);
				CtaNotNotas nota = (CtaNotNotas) item;
				NotaGenericForm form = (NotaGenericForm) request.getAttribute("notaGenericForm");
				HtmlBuilder html = new HtmlBuilder();
				// ---- Generar link para entrar a edicion
				String link = tableFacade.getWebContext().getContextPath();
				link += "/cuentaCorriente/nota.do?notId="+ nota.getNotId() + "&preId="+form.getPreId()+"&accion=cargarDatos&mdf=true&estadoPrestamo="+form.getEstadoPrestamo();
				html.a().href().quote().append(link).quote().close();
				if(nota.getNotCampo()!=null){
					html.append(nota.getNotCampo() + ": " + nota.getNotNota());
				}else{
					html.append(nota.getNotNota());
				}
				html.aEnd();
				value = html;

				return value.toString();
			}
		});
		
		return tableFacade.render();
	}
	
	public ActionForward guardarNota(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String listaResponse = "";
		String listaErrores ="";
		NotaGenericForm ngrForm = (NotaGenericForm) form;
		ArrayList<String> errors = new ArrayList<String>();
		HashMap<Long, String> mapa = (HashMap<Long, String>)request.getSession().getAttribute("listaNotas");
		if(ngrForm .getNotNota().trim().equals("") || ngrForm .getNotNota()== null){
			errors.add(getResources(request).getMessage("errors.pre.nota"));
		}
		if(!errors.isEmpty()){
			listaErrores=construirListaErrores(errors);
		}else{
			mapa.put(System.currentTimeMillis(),ngrForm .getNotNota());
			request.getSession().setAttribute("listaNotas", mapa);
		}
		listaResponse =construirListaNotas(mapa,request);
		try {
			response.getWriter().write(listaErrores+listaResponse);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	}
	
	public ActionForward eliminarNota(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		NotaGenericForm ngrForm = (NotaGenericForm) form;
		HashMap<Long, String> mapa = (HashMap<Long,String>)request.getSession().getAttribute("listaNotas");
		if (ngrForm.getPosicionNotas() != null) {
			int size = ngrForm.getPosicionNotas().length;
			int i = 0;
			while (i < size) {
				mapa.remove(ngrForm.getPosicionNotas()[i]);
				i++;
			}
		}
		try {
			request.getSession().setAttribute("listaNotas",mapa);
			response.getWriter().write(construirListaNotas(mapa, request));
			response.getWriter().flush();
			response.getWriter().close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	}
	
	private String construirListaNotas(HashMap<Long, String> mapa,HttpServletRequest request){
		String html = "<table class=\"tableone\" summary=\"\"><caption>"
				+ getResources(request).getMessage("lbl.notPreTbl.titulo")
				+ "</caption>";
		html = html
				+ "<thead><tr><th class=\"th1\" scope=\"col\">&nbsp;</th><th class=\"th1\" scope=\"col\">"
				+ getResources(request).getMessage("lbl.pre.nota")
				+ "</th></tr></thead><tbody><tr><td colspan=\"2\"><div class=\"innerb\"><table class=\"tabletwo\">";
		long i;
		Iterator<Long> iterator = mapa.keySet().iterator();

		while (iterator.hasNext()) {
			i = iterator.next().longValue();
			String nota = (String) mapa.get(i);
			html = html
					+ "<tr><th class=\"td1\" scope=\"row\"><input type=\"checkbox\" name=\"posicionNotas\" class=\"posicionNotas\" value=\""
					+ i + "\"/></th>" + "<td class=\"td1\">"+ nota + "</td></tr>";
		}
		html = html + "</table></div></td></tr></tbody></table>";
		return html;
	}
	
	private String construirListaErrores(ArrayList<String> errors){
		String errores = "<table align=\"center\"><tr><td colspan=\"2\"><span style=\"font-size: 14px;color: red;font-style: italic;\">Se han encontrado los siguientes errores:</span></td></tr>";
		Iterator<String> it = errors.iterator();
		while(it.hasNext()){
			errores=errores+"<tr><td><span style=\"font-size: 12px;color: red;font-style: italic;\">"+ 
			it.next()
			+"</span></td></tr>";
		}
		errores=errores+"</table>";
		return errores;
	}
	
	public ActionForward regresarToPrestamo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		PrestamoForm prestamoForm = new PrestamoForm();
		NotaGenericForm nxpForm = (NotaGenericForm) form;
		prestamoForm.setPreId(nxpForm.getPreId());
		request.setAttribute("form", prestamoForm);
		return mapping.findForward("forwardToPrestamo");
	}
	
	public ActionForward guardar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		CtaCasCuentaAsociadoDAO casCuentaAsociadoDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
		CtaNotNotasDAO notasDAO = new CtaNotNotasDAO(getSessionHibernate(request));
		NotaGenericForm nxpForm = (NotaGenericForm) form;
		CtaNotNotas nota = nxpForm.getNotaH();
		CtaCasCuentaAsociado cuenta = (CtaCasCuentaAsociado)casCuentaAsociadoDAO.findByProperty("ctaPrePrestamo.preId", nxpForm.getPreId()).get(0);
		nota.setCasCuenta(cuenta.getCasCuenta());
		nota.setNotFecha(new Date());
		nota.setNotId(notasDAO.nextId());
		Transaction t = notasDAO.getSession().beginTransaction();
		try{
			notasDAO.save(nota);
			t.commit();
		}catch(Exception e){
			t.rollback();
			e.printStackTrace();
		}finally{
			notasDAO.getSession().flush();
			notasDAO.getSession().clear();
			
		}
		return lista(mapping, form, request, response);
	}
	
	public ActionForward cargarDatos(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		NotaGenericForm notaGenericForm = (NotaGenericForm) form;
		CtaNotNotasDAO notasDAO = new CtaNotNotasDAO(getSessionHibernate(request));
		notaGenericForm.setNotaH(notasDAO.findById(notaGenericForm.getNotId()));
		return lista(mapping,form, request, response);
	}
	
	public ActionForward redirectInvalidData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ActionErrors errors = (ActionErrors)request.getSession().getAttribute(Constantes.ERRORS);
		saveMessages(request, errors);
		return lista(mapping,form, request, response);
	}	
	
	public ActionForward regresarToPrestamoList(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		return mapping.findForward("toPrestamosList");
	}
	
	public ActionForward cargarNotas(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
//		try {
//			Thread.currentThread().sleep(10);
//		} catch (InterruptedException e1) {
//			e1.printStackTrace();
//		}
		String listaResponse = "";
		String listaErrores ="";
		NotaGenericForm notaForm = (NotaGenericForm) form;
		HashMap<Long, String> mapa = (HashMap<Long, String>)request.getSession().getAttribute("listaNotas");
		if(mapa == null){
			mapa = new HashMap<Long, String>();
		}
		CtaCasCuentaAsociadoDAO casCuentaAsociadoDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
		CtaCasCuentaAsociado cas = casCuentaAsociadoDAO.findByPreId(notaForm.getPreId());
		if(cas!=null){
			CtaNotNotasDAO	notasDAO = new CtaNotNotasDAO(getSessionHibernate(request));
			List perList = notasDAO.findbyCuenta(cas.getCasCuenta());
			int add = 0;
			for (Iterator iterator = perList.iterator(); iterator.hasNext();) {
				CtaNotNotas nota = (CtaNotNotas) iterator.next();
				mapa.put(System.currentTimeMillis() + add, nota.getNotNota());
				add++;
			}
		}
		listaResponse = construirListaNotas(mapa, request);
		try {
			String var = listaResponse;
			response.getWriter().write(var);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	}
	
	protected Map getKeyMethodMap() {
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.notPre.lista", "lista");
		map.put("cmd.notPre.regresar", "guardarNota");
		map.put("cmd.prestamo.guardarNota", "guardarNota");
		map.put("cmd.prestamo.eliminarNota", "eliminarNota");
		map.put("cmd.notPre.redirectInvalidData", "redirectInvalidData");
		map.put("cmd.notPre.guardar", "guardar");
		map.put("cmd.notPre.regresar", "regresarToPrestamo");
		map.put("cmd.notPre.cargarDatos", "cargarDatos");
		map.put("cmd.notPre.cargarNotas", "cargarNotas");
		map.put("cmd.notPre.regresarToPrestamoList", "regresarToPrestamoList");	
		return map;
	} 
}