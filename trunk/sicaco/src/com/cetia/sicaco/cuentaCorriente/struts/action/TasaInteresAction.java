/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.cuentaCorriente.struts.action;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.hibernate.Transaction;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeImpl;
import org.jmesa.limit.ExportType;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.BasicCellEditor;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.html.HtmlBuilder;

import com.cetia.sicaco.cuentaCorriente.struts.form.TasaInteresForm;
import com.cetia.sicaco.hibernate.CtaHtsHistorialTasa;
import com.cetia.sicaco.hibernate.CtaHtsHistorialTasaDAO;
import com.cetia.sicaco.hibernate.CtaTinTasaInteres;
import com.cetia.sicaco.hibernate.CtaTinTasaInteresDAO;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;

/** 
 * MyEclipse Struts
 * Creation date: 08-07-2008
 * 
 * XDoclet definition:
 * @struts.action path="/tasaInteres" name="tasaInteresForm" input="/cuentaCorriente/tasaInteresDML.jsp" scope="request" validate="true"
 *<forward name="lista" path="pagina-lista.cuentaCorriente.tasaInteres" />
 *<forward name="redirectInvalidData" path="/tasaInteres.do?accion=redirectInvalidData"
 */
public class TasaInteresAction extends DMLAction {
	
	public String TABLA_ID = "ctaTinTasaInteres";
	
	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		TasaInteresForm tasaInteresForm = (TasaInteresForm) form;
		CtaTinTasaInteresDAO ctaTinTasaInteresDAO = new CtaTinTasaInteresDAO(getSessionHibernate(request));
		List lst = ctaTinTasaInteresDAO.findAll();
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);
		
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
		request.setAttribute("form", tasaInteresForm);
		request.setAttribute("mdf", "false");
		request.setAttribute("disableTasa", 0);
		request.setAttribute(Constantes.ACCION_KEY, "/tasaInteres");
		return mapping.findForward("lista");
	}
	
	//---- metodo que genera el html de la tabla del jmesa
	private String html(final TableFacade tableFacade, final HttpServletRequest request) {
		tableFacade.setColumnProperties("tinNombre", "tinDescripcion","tinTasa","tinId");
		Table table = tableFacade.getTable();
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.tin.caption");
		
		Row row = table.getRow();
		Column nombreColumna = row.getColumn("tinNombre");
		nombreColumna.setTitleKey("tbl.tin.tinNombre");
		
		nombreColumna = row.getColumn("tinDescripcion");
		nombreColumna.setTitleKey("tbl.tin.tinDescripcion");
		
		nombreColumna = row.getColumn("tinTasa");
		nombreColumna.setTitleKey("tbl.tin.tinTasa");
		
		nombreColumna = row.getColumn("tinId");
		nombreColumna.setTitleKey("tbl.tin.acciones");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtaTinTasaInteres tasaInteres = (CtaTinTasaInteres)item;
				HtmlBuilder html = new HtmlBuilder();
				value = "Editar";
				String link = tableFacade.getWebContext().getContextPath();
				link += "/cuentaCorriente/tasaInteres.do?tinId="+tasaInteres.getTinId()+
					"&accion=cargarDatos";
				html.a().href().quote().append(link).quote().append("class=\"linkEditar\"").title(value.toString()).close();
				/*html.a().href().quote().append(link).quote().close();
				html.append(value);*/
				html.aEnd();				
				return html.toString();		
			}
		});
		
		return tableFacade.render();
	}
	
	//---- metodo que genera los exports, el formato que tendran
	 private void export(final TableFacade tableFacade) {
		 tableFacade.setColumnProperties("tinNombre", "tinDescripcion","tinTasa");
			Table table = tableFacade.getTable();;
					
			//---- Titulo de la tabla
			table.setCaptionKey("tbl.tin.caption");
			
			Row row = table.getRow();
			Column nombreColumna = row.getColumn("tinNombre");
			nombreColumna.setTitleKey("tbl.tin.tinNombre");
			
			nombreColumna = row.getColumn("tinDescripcion");
			nombreColumna.setTitleKey("tbl.tin.tinDescripcion");
			
			nombreColumna = row.getColumn("tinTasa");
			nombreColumna.setTitleKey("tbl.tin.tinTasa");
			
		tableFacade.render();
	}
	
	 public ActionForward guardar(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {
			TasaInteresForm tasaInteresForm = (TasaInteresForm)form;
			CtaTinTasaInteresDAO tasaInteresDAO = new CtaTinTasaInteresDAO(getSessionHibernate(request));
			Transaction tx = tasaInteresDAO.getSession().beginTransaction();
			CtaTinTasaInteres tin = null;
			if(tasaInteresDAO.findByTinNombre(tasaInteresForm.getCtaTinTasaInteresH().getTinNombre()).isEmpty()){
				tasaInteresForm.getCtaTinTasaInteresH().setTinId(tasaInteresDAO.nextId());
				tin = tasaInteresForm.getCtaTinTasaInteresH();
				tasaInteresDAO.save(tin);
			}else{
				mensajes("errors.tinNombreRepetido",request);
				return lista(mapping, tasaInteresForm, request, response);
			}
			tx.commit();
				
			//Se guarda el registro del historial
			CtaHtsHistorialTasaDAO historialTasaDAO = new CtaHtsHistorialTasaDAO(getSessionHibernate(request));
			CtaHtsHistorialTasa historialTasa = new CtaHtsHistorialTasa();
			historialTasa.setCtaTinTasaInteres(tin);
			historialTasa.setHtsFechaIni(new Date());
			historialTasa.setHtsTasa((double) tasaInteresForm.getCtaTinTasaInteresH().getTinTasa());
			historialTasaDAO.save(historialTasa);
			tx.commit();
			tasaInteresDAO.getSession().flush();
			tasaInteresDAO.getSession().clear();
			
			return lista(mapping,new TasaInteresForm(),request,response);
		} 
	 
	 public ActionForward salvar(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {
		TasaInteresForm tasaInteresForm = (TasaInteresForm)form;
		CtaTinTasaInteresDAO tasaInteresDAO = new CtaTinTasaInteresDAO(getSessionHibernate(request));
		CtaTinTasaInteres tin = tasaInteresDAO.findById(tasaInteresForm.getTinId()); 
		Transaction tx = tasaInteresDAO.getSession().beginTransaction();
		if(tasaInteresForm.getTinId() == 16){
			if(tasaInteresForm.getTinNombre() != tin.getTinNombre()){
				mensajes("errors.tinCredito",request);
				return cargarDatos(mapping, tasaInteresForm, request, response);
			}
		}
		if(tasaInteresDAO.findByTinNombre(tasaInteresForm.getCtaTinTasaInteresH().getTinNombre()).isEmpty()){
			salvarTasa(tin,tasaInteresForm,request);
		}else{
			if(!tin.getTinNombre().equals(tasaInteresForm.getTinNombre())){
				mensajes("errors.tinNombreRepetido",request);
				return cargarDatos(mapping, tasaInteresForm, request, response);
			}else{
				salvarTasa(tin, tasaInteresForm,request);
			}
		}
		
		return lista(mapping,new TasaInteresForm(),request,response);
	} 
	 
	 private void salvarTasa(CtaTinTasaInteres tin,
			TasaInteresForm tasaInteresForm,HttpServletRequest request) {
		CtaTinTasaInteresDAO tasaInteresDAO = new CtaTinTasaInteresDAO(getSessionHibernate(request));
		Transaction tx = tasaInteresDAO.getSession().beginTransaction();
		tin.setTinTasa(tasaInteresForm.getTinTasa());
		tin.setTinNombre(tasaInteresForm.getTinNombre());
		tin.setTinDescripcion(tasaInteresForm.getTinDescripcion());
		tasaInteresDAO.merge(tin);
		tx.commit();
		tasaInteresDAO.getSession().flush();
		tasaInteresDAO.getSession().clear();
		
		//Se guarda el registro del historial
		CtaHtsHistorialTasaDAO historialTasaDAO = new CtaHtsHistorialTasaDAO(getSessionHibernate(request));
		CtaHtsHistorialTasa htsAnterior = historialTasaDAO.findLatest(tin.getTinId());
		if(htsAnterior.getHtsTasa().floatValue() != tin.getTinTasa()){
			htsAnterior.setHtsFechaFin(new Date());
			historialTasaDAO.merge(htsAnterior);
			tx.commit();
			tasaInteresDAO.getSession().flush();
			tasaInteresDAO.getSession().clear();
			
			CtaHtsHistorialTasa historialTasa = new CtaHtsHistorialTasa();
			historialTasa.setCtaTinTasaInteres(tin);
			historialTasa.setHtsFechaIni(new Date());
			historialTasa.setHtsTasa((double) tin.getTinTasa());
			historialTasaDAO.save(historialTasa);
			tx.commit();
		}
		tasaInteresDAO.getSession().flush();
		tasaInteresDAO.getSession().clear();
		
	}

	public ActionForward cargarDatos(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {
	 	TasaInteresForm tasaInteresForm = (TasaInteresForm) form;
		CtaTinTasaInteresDAO ctaTinTasaInteresDAO = new CtaTinTasaInteresDAO(getSessionHibernate(request));
		CtaTinTasaInteres tin = ctaTinTasaInteresDAO.findById(tasaInteresForm.getTinId());
		tasaInteresForm.setCtaTinTasaInteresH(tin);
		
		List lst = ctaTinTasaInteresDAO.findAll();
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);
		
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
		request.setAttribute("form", tasaInteresForm);
		request.setAttribute("mdf", "true");
		request.setAttribute("disableTasa", 1);
		request.setAttribute(Constantes.ACCION_KEY, "/tasaInteres");
		return mapping.findForward("lista");
	}
	 
	 public ActionForward cancelar(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {
	 	TasaInteresForm tasaInteresForm = new TasaInteresForm();
		return lista(mapping, tasaInteresForm, request, response);
	} 
 
	public ActionForward redirectInvalidData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		ActionErrors errors = (ActionErrors)request.getSession().getAttribute(Constantes.ERRORS);
		saveMessages(request, errors);
		return lista(mapping, form, request, response);
	}
	
	public void mensajes(String msg, HttpServletRequest request){
		ActionErrors errors = new ActionErrors();
        errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(msg));
        saveMessages(request, errors);
	}
		
	
	protected Map getKeyMethodMap() {
		// TODO Auto-generated method stub
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.tin.lista", "lista");
		map.put("cmd.tin.guardar", "guardar");
		map.put("cmd.tin.salvar", "salvar");
		map.put("cmd.tin.cancelar", "cancelar");
		map.put("cmd.tin.cargarDatos", "cargarDatos");
		map.put("cmd.tin.redirectInvalidData", "redirectInvalidData");
		return map;
	}
}