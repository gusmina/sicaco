/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.cuentaCorriente.struts.action;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.hibernate.Transaction;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeImpl;
import org.jmesa.limit.ExportType;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.html.HtmlBuilder;

import com.cetia.sicaco.cuentaCorriente.struts.form.PrestamoForm;
import com.cetia.sicaco.cuentaCorriente.struts.form.ReferenciaComercialForm;
import com.cetia.sicaco.hibernate.CtaCasCuentaAsociado;
import com.cetia.sicaco.hibernate.CtaCasCuentaAsociadoDAO;
import com.cetia.sicaco.hibernate.CtaRcoReferenciasComerciales;
import com.cetia.sicaco.hibernate.CtaRcoReferenciasComercialesDAO;
import com.cetia.sicaco.hibernate.SecIseInicioSesion;
import com.cetia.sicaco.hibernate.SecIseInicioSesionDAO;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;
import com.mad.utilidades.Format;

public class ReferenciaComercialAction extends DMLAction {

	public static final String TABLA_ID = "ctaRcoReferenciasComerciales";
	
	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		CtaRcoReferenciasComercialesDAO referenciaComercialesDAO= new CtaRcoReferenciasComercialesDAO(getSessionHibernate(request));
		CtaCasCuentaAsociadoDAO cuentaAsociadoDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
 		ReferenciaComercialForm referenciaComercialForm = (ReferenciaComercialForm)form;
 		CtaCasCuentaAsociado casCuenta = cuentaAsociadoDAO.findByPreId(referenciaComercialForm.getPreId());
 		referenciaComercialForm.setPerId(casCuenta.getCtaAscAsociado().getSecPerPersona().getPerId());
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(referenciaComercialesDAO.findByProperty("ctaPrePrestamo.preId", referenciaComercialForm.getPreId()));
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
        	//---- exporta la tabla
        //    export(tableFacade);
            return null; 
        } else {
        	String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
		request.setAttribute("prestamo", casCuenta.getCtaPrePrestamo());
		request.setAttribute("asociado", casCuenta.getCtaAscAsociado());
		request.setAttribute("referenciaComercialForm", form);
		request.setAttribute(Constantes.ACCION_KEY, "/referenciaComercial");
		return mapping.findForward("lista");
	}
	
	private String html(final TableFacade tableFacade, final HttpServletRequest request) {
		tableFacade.setColumnProperties("rcoReferencia","rcoSucursal","rcoMonto","rcoEstado");
		Table table = tableFacade.getTable();
		
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.rco.caption");
		
		Row row = table.getRow();
		Column nombreColumna = row.getColumn("rcoReferencia");
		nombreColumna.setTitleKey("tbl.rco.nombreEmpresa");
		
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				CtaRcoReferenciasComerciales rco = (CtaRcoReferenciasComerciales) item;
				ReferenciaComercialForm form = (ReferenciaComercialForm)request.getAttribute("referenciaComercialForm");
				HtmlBuilder html = new HtmlBuilder();
				//---- Generar link para entrar a edicion
				String link = tableFacade.getWebContext().getContextPath();
				link += "/cuentaCorriente/referenciaComercial.do?rcoId="+rco.getRcoId()+"&accion=cargarDatos&mdf=true&estadoPrestamo="+form.getEstadoPrestamo();
				html.a().href().quote().append(link).quote().close();
				html.append(rco.getRcoReferencia());
				html.aEnd();				
				return html.toString();
			}
		});
		
		nombreColumna = row.getColumn("rcoSucursal");
		nombreColumna.setTitleKey("tbl.rco.sucursal");
		
		nombreColumna = row.getColumn("rcoMonto");
		nombreColumna.setTitleKey("tbl.rco.monto");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){
			
			public Object getValue(Object item, String property, int rowcount) {
				CtaRcoReferenciasComerciales rco = (CtaRcoReferenciasComerciales)item;
				return Format.formatDinero(rco.getRcoMonto());
			}
			
		});
		
		nombreColumna = row.getColumn("rcoEstado");
		nombreColumna.setTitleKey("tbl.rco.estadoCredito");
		
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				String value;
				CtaRcoReferenciasComerciales rco = (CtaRcoReferenciasComerciales) item;
				if(rco.getRcoEstado().equals("A")){
					value = "Referencia Activa";
				}else{
					value = "Referencia Inactiva";
				}
				return value;
			}
		});
		
		return tableFacade.render();
	}

	public ActionForward guardarRefComercial(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String listaResponse = "";
		String listaErrores ="";
		ReferenciaComercialForm rcoForm = (ReferenciaComercialForm)form;
		ArrayList<String> errors = new ArrayList<String>();
		HashMap<Long, CtaRcoReferenciasComerciales> mapa = (HashMap<Long, CtaRcoReferenciasComerciales>)request.getSession().getAttribute("listaReferenciasComerciales");
		errors = validarRefComercial(rcoForm.getReferenciasComercialesH(), errors,request);
		if(!errors.isEmpty()){
			listaErrores=construirListaErrores(errors);
		}else{
			mapa.put(System.currentTimeMillis(),rcoForm.getReferenciasComercialesH());
			request.getSession().setAttribute("listaReferenciasComerciales", mapa);
		}
		listaResponse =construirListaReferenciasComerciales(mapa,request);
		try {
			response.getWriter().write(listaErrores+listaResponse);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	}
	
	public ActionForward eliminarRco(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ReferenciaComercialForm rcoForm = (ReferenciaComercialForm)form;
		HashMap<Long, CtaRcoReferenciasComerciales> mapa = (HashMap<Long,CtaRcoReferenciasComerciales>)request.getSession().getAttribute("listaReferenciasComerciales");
		if (rcoForm .getPosicionRco() != null) {
			int size = rcoForm .getPosicionRco().length;
			int i = 0;
			while (i < size) {
				mapa.remove(rcoForm .getPosicionRco()[i]);
				i++;
			}
		}
		try {
			request.getSession().setAttribute("listaReferenciasComerciales",mapa);
			response.getWriter().write(construirListaReferenciasComerciales(mapa, request));
			response.getWriter().flush();
			response.getWriter().close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	}
	
	private String construirListaReferenciasComerciales(HashMap<Long, CtaRcoReferenciasComerciales> mapa,HttpServletRequest request){
		String html = "<table class=\"tableone\" summary=\"\"><caption>"
				+ getResources(request).getMessage("lbl.rcoTbl.titulo")
				+ "</caption>";
		html = html
				+ "<thead><tr><th class=\"th1\" scope=\"col\">&nbsp;</th><th class=\"th1\" scope=\"col\">"
				+ getResources(request).getMessage("lbl.rco.nombreEmpresa")
				+ "</th><th class=\"th1\" scope=\"col\">"
				+ getResources(request).getMessage("lbl.rco.sucursal")
				+ "</th><th class=\"th1\" scope=\"col\">"
				+ getResources(request).getMessage("lbl.rco.monto")
				+ "</th></tr></thead><tbody><tr><td colspan=\"5\"><div class=\"innerb\"><table class=\"tabletwo\">";
		long i;
		Iterator<Long> iterator = mapa.keySet().iterator();

		while (iterator.hasNext()) {
			i = iterator.next().longValue();
			CtaRcoReferenciasComerciales rf = (CtaRcoReferenciasComerciales) mapa
					.get(i);
			html = html
					+ "<tr><th class=\"td1\" scope=\"row\"><input type=\"checkbox\" name=\"posicionRco\" class=\"posicionRco\" value=\""
					+ i + "\"/></th>" + "<td class=\"td1\">"
					+ rf.getRcoReferencia() + "</td><td class=\"td1\">"
					+ rf.getRcoSucursal() + "</td><td class=\"td1\">"
					+ new Double(rf.getRcoMonto()) + "</td></tr>";
		}
		html = html + "</table></div></td></tr></tbody></table>";
		return html;
	}
	
	private ArrayList<String> validarRefComercial(CtaRcoReferenciasComerciales referenciasComerciales,ArrayList<String> errors,HttpServletRequest request){
		if(referenciasComerciales.getRcoSucursal().trim().equals("") || referenciasComerciales.getRcoSucursal() == null){
			errors.add(getResources(request).getMessage("errors.rco.RcoSucursalRequired"));
		}
		if(referenciasComerciales.getRcoReferencia().trim().equals("") || referenciasComerciales.getRcoReferencia() == null){
			errors.add(getResources(request).getMessage("errors.rco.RcoReferenciaRequired"));
		}
		if(referenciasComerciales.getRcoConcepto().trim().equals("") || referenciasComerciales.getRcoConcepto() == null){
			errors.add(getResources(request).getMessage("errors.rco.RcoConceptoRequired"));
		}
		if(referenciasComerciales.getRcoMonto() <= 0){
			errors.add(getResources(request).getMessage("errors.rco.rcoMontoIncorrecto"));
		}
		return errors;
	}
	
	private String construirListaErrores(ArrayList<String> errors){
		String errores = "<table align=\"center\"><tr><td colspan=\"2\"><span style=\"font-size: 14px;color: red;font-style: italic;\">Se han encontrado los siguientes errores:</span></td></tr>";
		Iterator<String> it = errors.iterator();
		while(it.hasNext()){
			errores=errores+"<tr><td><span style=\"font-size: 12px;color: red;font-style: italic;\">"+ 
			it.next()
			+"</span></td></tr>";
		}
		errores=errores+"</table>";
		return errores;
	}
	
	public ActionForward cargarRefComercial(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
//		try {
//			Thread.currentThread().sleep(10);
//		} catch (InterruptedException e1) {
//			e1.printStackTrace();
//		}
		String listaResponse = "";
		ReferenciaComercialForm rcoForm = (ReferenciaComercialForm) form;
		HashMap<Long, CtaRcoReferenciasComerciales> mapa2 = (HashMap<Long, CtaRcoReferenciasComerciales>)request.getSession().getAttribute("listaReferenciasComerciales");
		CtaRcoReferenciasComercialesDAO referenciasComercialesDAO = new CtaRcoReferenciasComercialesDAO(getSessionHibernate(request));
		List<CtaRcoReferenciasComerciales> lista = referenciasComercialesDAO.findByProperty("ctaPrePrestamo.preId", rcoForm.getPreId());
		Iterator<CtaRcoReferenciasComerciales> iterator = lista.iterator();
		int add = 0;
		while(iterator.hasNext()){
				CtaRcoReferenciasComerciales referenciasComerciales = (CtaRcoReferenciasComerciales) iterator.next();
				mapa2.put(System.currentTimeMillis() + add, referenciasComerciales);
				add++;
		}
		listaResponse =construirListaReferenciasComerciales(mapa2,request);
		try {
			String var = listaResponse;
			response.getWriter().write(var);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	}
	
	public ActionForward regresarToPrestamo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		SecIseInicioSesionDAO sesionDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
		PrestamoForm prestamoForm = new PrestamoForm();
		ReferenciaComercialForm rcoForm = (ReferenciaComercialForm) form;
		prestamoForm.setPreId(rcoForm.getPreId());
		SecIseInicioSesion sesion = sesionDAO.findById(rcoForm.getUsuarioConectado().getNombreUsuario());
		if((sesion.getSecRolRoles().getRolNombre().equals("COMITECRED") || sesion.getSecRolRoles().getRolNombre().equals("CONSADMIN")) && !sesion.getSecPerPersona().getPerId().equals(rcoForm.getPerId())){
			request.setAttribute("rol", "iddkfq");
		}
		request.setAttribute("prestamoForm", prestamoForm);
		return mapping.findForward("forwardToPrestamo");
	}
	
	public ActionForward cargarDatos(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		CtaRcoReferenciasComercialesDAO referenciasComercialesDAO = new CtaRcoReferenciasComercialesDAO(getSessionHibernate(request));
		ReferenciaComercialForm rcoForm = (ReferenciaComercialForm) form;
		rcoForm.setReferenciasComercialesH(referenciasComercialesDAO.findById(rcoForm.getRcoId()));
		return lista(mapping, form, request, response);
	}
	
	public ActionForward modificar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ActionErrors mensaje = new ActionErrors();
		CtaRcoReferenciasComercialesDAO referenciasComercialesDAO = new CtaRcoReferenciasComercialesDAO(getSessionHibernate(request));
		ReferenciaComercialForm rcoForm = (ReferenciaComercialForm) form;
		Transaction tx = referenciasComercialesDAO.getSession().beginTransaction();
		try{
			CtaRcoReferenciasComerciales referencia = referenciasComercialesDAO.findById(rcoForm.getRcoId());
			referencia.setRcoEstado(rcoForm.getRcoEstado());
			referenciasComercialesDAO.merge(referencia);
			tx.commit();
			mensaje.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("lbl.pre.modificacionExitoSol"));
			saveMessages(request, mensaje);
		}catch (Exception e) {
			tx.rollback();
			e.printStackTrace();
		}finally{
			referenciasComercialesDAO.getSession().flush();
			referenciasComercialesDAO.getSession().clear();
			
		}		
		return lista(mapping, form, request, response);
	}
	
	public ActionForward regresarToPrestamoList(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		return mapping.findForward("toPrestamosList");
	}
	
	protected Map<String, String> getKeyMethodMap() {
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.rco.lista","lista");
		map.put("cmd.rco.guardar","guardarRefComercial");
		map.put("cmd.rco.eliminar","eliminarRco");
		map.put("cmd.rco.cancelar","lista");
		map.put("cmd.pre.cargarRefComercial", "cargarRefComercial");
		map.put("cmd.rco.regresar", "regresarToPrestamo");
		map.put("cmd.rco.modificar", "modificar");
		map.put("cmd.rco.cargarDatos", "cargarDatos");
		map.put("cmd.rco.regresarToPrestamoList", "regresarToPrestamoList");	
		return map;
	}
}