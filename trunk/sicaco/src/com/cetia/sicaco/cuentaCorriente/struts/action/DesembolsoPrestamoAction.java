/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.cuentaCorriente.struts.action;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeImpl;
import org.jmesa.limit.ExportType;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.BasicCellEditor;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.editor.DateCellEditor;
import org.jmesa.view.html.HtmlBuilder;

import com.cetia.sicaco.cuentaCorriente.struts.form.DesembolsoPrestamoForm;
import com.cetia.sicaco.cuentaCorriente.struts.form.SegurosForm;
import com.cetia.sicaco.hibernate.ConCueCuenta;
import com.cetia.sicaco.hibernate.ConCueCuentaDAO;
import com.cetia.sicaco.hibernate.CtaAscAsociado;
import com.cetia.sicaco.hibernate.CtaAscAsociadoDAO;
import com.cetia.sicaco.hibernate.CtaBenBeneficiarios;
import com.cetia.sicaco.hibernate.CtaBenBeneficiariosDAO;
import com.cetia.sicaco.hibernate.CtaBxcBeneficiariosCuenta;
import com.cetia.sicaco.hibernate.CtaBxcBeneficiariosCuentaDAO;
import com.cetia.sicaco.hibernate.CtaCahCuentaAhorro;
import com.cetia.sicaco.hibernate.CtaCahCuentaAhorroDAO;
import com.cetia.sicaco.hibernate.CtaCasCuentaAsociado;
import com.cetia.sicaco.hibernate.CtaCasCuentaAsociadoDAO;
import com.cetia.sicaco.hibernate.CtaCbaCuentaBancaria;
import com.cetia.sicaco.hibernate.CtaChkChequePrestamo;
import com.cetia.sicaco.hibernate.CtaChkChequePrestamoDAO;
import com.cetia.sicaco.hibernate.CtaDexDescuentosExternos;
import com.cetia.sicaco.hibernate.CtaDexDescuentosExternosDAO;
import com.cetia.sicaco.hibernate.CtaDxpDescuentosPrestamo;
import com.cetia.sicaco.hibernate.CtaDxpDescuentosPrestamoDAO;
import com.cetia.sicaco.hibernate.CtaFxpFiadorPrestamo;
import com.cetia.sicaco.hibernate.CtaFxpFiadorPrestamoDAO;
import com.cetia.sicaco.hibernate.CtaGarGarantia;
import com.cetia.sicaco.hibernate.CtaGarGarantiaDAO;
import com.cetia.sicaco.hibernate.CtaLprLineaPrestamo;
import com.cetia.sicaco.hibernate.CtaLprLineaPrestamoDAO;
import com.cetia.sicaco.hibernate.CtaMxaMovimientoAhorro;
import com.cetia.sicaco.hibernate.CtaMxaMovimientoAhorroDAO;
import com.cetia.sicaco.hibernate.CtaMxpMovimientoPrestamo;
import com.cetia.sicaco.hibernate.CtaMxpMovimientoPrestamoDAO;
import com.cetia.sicaco.hibernate.CtaMxsMovimientoSeguros;
import com.cetia.sicaco.hibernate.CtaMxsMovimientoSegurosDAO;
import com.cetia.sicaco.hibernate.CtaNotNotas;
import com.cetia.sicaco.hibernate.CtaNotNotasDAO;
import com.cetia.sicaco.hibernate.CtaPrePrestamo;
import com.cetia.sicaco.hibernate.CtaPrePrestamoDAO;
import com.cetia.sicaco.hibernate.CtaPxtPersonaExterna;
import com.cetia.sicaco.hibernate.CtaPxtPersonaExternaDAO;
import com.cetia.sicaco.hibernate.CtaRcoReferenciasComerciales;
import com.cetia.sicaco.hibernate.CtaRcoReferenciasComercialesDAO;
import com.cetia.sicaco.hibernate.CtaRpeReferenciasPersonales;
import com.cetia.sicaco.hibernate.CtaRpeReferenciasPersonalesDAO;
import com.cetia.sicaco.hibernate.CtaRxpRetencionPrestamo;
import com.cetia.sicaco.hibernate.CtaRxpRetencionPrestamoDAO;
import com.cetia.sicaco.hibernate.CtaSegSeguros;
import com.cetia.sicaco.hibernate.CtaSegSegurosDAO;
import com.cetia.sicaco.hibernate.CtaStbSolTransBanc;
import com.cetia.sicaco.hibernate.CtaStbSolTransBancDAO;
import com.cetia.sicaco.hibernate.CtaTisTipoSeguroDAO;
import com.cetia.sicaco.hibernate.CtaTprTipoPrestamo;
import com.cetia.sicaco.hibernate.CtaTprTipoPrestamoDAO;
import com.cetia.sicaco.hibernate.CtaTtrTipoTransaccion;
import com.cetia.sicaco.hibernate.CtaTtrTipoTransaccionDAO;
import com.cetia.sicaco.hibernate.CtaTxaTransaccionxcuentaAsociado;
import com.cetia.sicaco.hibernate.CtaTxaTransaccionxcuentaAsociadoDAO;
import com.cetia.sicaco.hibernate.CtrBanBanco;
import com.cetia.sicaco.hibernate.CtrBanBancoDAO;
import com.cetia.sicaco.hibernate.CtrEstEstado;
import com.cetia.sicaco.hibernate.CtrEstEstadoDAO;
import com.cetia.sicaco.hibernate.CtrRckRepositorioCheques;
import com.cetia.sicaco.hibernate.CtrRckRepositorioChequesDAO;
import com.cetia.sicaco.hibernate.HibernateSessionFactory;
import com.cetia.sicaco.hibernate.OrdOcoOrdenDeCompra;
import com.cetia.sicaco.hibernate.OrdOcoOrdenDeCompraDAO;
import com.cetia.sicaco.hibernate.SecIseInicioSesion;
import com.cetia.sicaco.hibernate.SecIseInicioSesionDAO;
import com.cetia.sicaco.hibernate.SecPerPersona;
import com.cetia.sicaco.hibernate.SecPerPersonaDAO;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;
import com.cetia.sicaco.struts.PartidaAutomatica;
import com.mad.utilidades.ElapsedTime;
import com.mad.utilidades.ExportReport;
import com.mad.utilidades.IntereseYMora;
import com.mad.utilidades.ReportFile;
import com.mad.utilidades.compresion.ZipFile;

/** 
 * MyEclipse Struts
 * Creation date: 09-25-2008
 * 
 * XDoclet definition:
 * @struts.action path="/desembolsoPrestamo" name="desembolsoPrestamoForm" input="redirectInvalidData" parameter="accion" scope="request" validate="true"
 * @struts.action-forward name="lista" path="pagina-lista.cuentaCorriente.desembolsoPrestamo"
 */
public class DesembolsoPrestamoAction extends DMLAction {

	public String TABLA_ID = "ctaPrePrestamo";
	public int pos = 0;
	public int TAM_LISTA_DESEMBOLSO = 0;

	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		DesembolsoPrestamoForm desembolsoForm = (DesembolsoPrestamoForm)form;
		pos = 0;
		
		//Cargar lista de bancos para el cheque
		CtrBanBancoDAO bancoDAO = new CtrBanBancoDAO(getSessionHibernate(request));
		List lban = bancoDAO.findAll();
		request.getSession().setAttribute("lban", lban);

		//Cargar repositorio del cheque, correlativo inicial
		if(lban.size()>0){
			CtrBanBanco banco = (CtrBanBanco) lban.get(0);
			CtrRckRepositorioChequesDAO repositorioChequesDAO = new CtrRckRepositorioChequesDAO(getSessionHibernate(request));
			SecIseInicioSesionDAO sesionDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
			SecIseInicioSesion sesion = sesionDAO.findById(desembolsoForm.getUsuarioConectado().getNombreUsuario());
			String suc = sesion.getSecPerPersona().getSecSucSucursal().getSucId().toString();
//			System.out.println("Suc: "+sesion.getSecPerPersona().getSecSucSucursal().getSucId());
			List rckList = repositorioChequesDAO.findBySyB(banco.getBanId(), 
					sesion.getSecPerPersona().getSecSucSucursal().getSucId());
			request.getSession().setAttribute("lrck", rckList);
			if(rckList.size() > 0){
				CtrRckRepositorioCheques rck = (CtrRckRepositorioCheques) rckList.get(0);
				desembolsoForm.setChkCorrelativoCheque(rck.getRckCorrActual().toString());
			}else{
				mensajes("msg.chk.noRepositorio", request, new ActionErrors());
			}
		}

		CtaLprLineaPrestamoDAO lineaPrestamoDAO = new CtaLprLineaPrestamoDAO(getSessionHibernate(request));
		List lstLineaPre = lineaPrestamoDAO.findAll();
		
		CtaTprTipoPrestamoDAO tipoPrestamoDAO = new CtaTprTipoPrestamoDAO(getSessionHibernate(request));
		List lstTipoPre = tipoPrestamoDAO.findAll();
		
		CtaCasCuentaAsociadoDAO cuentaAsociadoDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
		CtrEstEstadoDAO estadoDAO = new CtrEstEstadoDAO(getSessionHibernate(request));
		CtrEstEstado estado = estadoDAO.findById(15);
		List lst = cuentaAsociadoDAO.findByEstadoForDesembolso(estado);
		TAM_LISTA_DESEMBOLSO = lst.size();
		desembolsoForm.setTamListaDesembolso(lst.size());
		
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);

		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
			//---- exporta la tabla
			export(tableFacade);
			return null; 
		} else {
			//---- genera el html de la tabla para ser mostrada
			String html = html(tableFacade, request);
			request.setAttribute("_lista2", html);
		}
		//----- Variables de configuracion
		
		request.setAttribute("lstLineaPre", lstLineaPre);
		request.setAttribute("lstTipoPre", lstTipoPre);
		request.setAttribute("form", desembolsoForm);
		request.setAttribute("edit", 0);
		request.setAttribute(Constantes.ACCION_KEY, "/desembolsoPrestamo");
		return mapping.findForward("lista");
	}
	
	//---- metodo que genera el html de la tabla del jmesa
	private String html(final TableFacade tableFacade, final HttpServletRequest request) {
        tableFacade.setColumnProperties("ctaAscAsociado.ascId", "ctaPrePrestamo.preId",
                                        "casFechaApertura","casFechaCierre","casValorApertura",
                                        "casPrincipal","ctrEstEstado.estId");
        Table table = tableFacade.getTable();
        //---- Titulo de la tabla
        table.setCaptionKey("tbl.desembolso.caption");
       
        Row row = table.getRow();
        Column nombreColumna = row.getColumn("ctaAscAsociado.ascId");
        nombreColumna.setTitleKey("tbl.desembolso.asociado");
        nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

            public Object getValue(Object item, String property, int rowcount) {
                Object value = new BasicCellEditor().getValue(item, property, rowcount);
                CtaCasCuentaAsociado cuentaAsociado = (CtaCasCuentaAsociado)item;
                CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
                CtaAscAsociado asociado = asociadoDAO.findById(cuentaAsociado.getCtaAscAsociado().getAscId());
                SecPerPersonaDAO personaDAO = new SecPerPersonaDAO(getSessionHibernate(request));
                SecPerPersona persona = personaDAO.findById(asociado.getSecPerPersona().getPerId());
                String asocInfo = asociado.getAscCodigo() + " - " + persona.getPerPrimerApellido() + ", " + persona.getPerPrimerNombre() +" "+persona.getPerSegundoNombre(); 
                return asocInfo;           
            }
           
        });
       
        nombreColumna = row.getColumn("ctaPrePrestamo.preId");
        nombreColumna.setTitleKey("tbl.desembolso.prestamo");
       
        nombreColumna = row.getColumn("casFechaApertura");
        nombreColumna.setTitleKey("tbl.desembolso.casFechaApertura");
        nombreColumna.getCellRenderer().setCellEditor(new DateCellEditor("dd-MMM-yyyy"));
        
        nombreColumna = row.getColumn("casFechaCierre");
        nombreColumna.setTitleKey("tbl.desembolso.descuentos");
        nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

            public Object getValue(Object item, String property, int rowcount) {
                CtaCasCuentaAsociado cuentaAsociado = (CtaCasCuentaAsociado)item;
                ChequePrestamoAction chequePrestamoAction = new ChequePrestamoAction();
                Double montoDesembolso = chequePrestamoAction.montoDesembolso(cuentaAsociado.getCasCuenta(),request);
                Double descuentos = cuentaAsociado.getCtaPrePrestamo().getPreMontoSolicitado()-montoDesembolso;
                DecimalFormat df = new DecimalFormat("0.00");
                
                return df.format(descuentos);
            }
           
        });
        
        nombreColumna = row.getColumn("casValorApertura");
        nombreColumna.setTitleKey("tbl.desembolso.aDesembolsar");
        nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

            public Object getValue(Object item, String property, int rowcount) {
                CtaCasCuentaAsociado cuentaAsociado = (CtaCasCuentaAsociado)item;
                ChequePrestamoAction chequePrestamoAction = new ChequePrestamoAction();
                Double montoDesembolso = chequePrestamoAction.montoDesembolso(cuentaAsociado.getCasCuenta(),request);
                DecimalFormat df = new DecimalFormat("0.00");

                return df.format(montoDesembolso) + "<input type=\"hidden\" value=\"" + df.format(montoDesembolso) +"\" id=\"cc"+ pos +"\"/>";
            }
           
        });
        
        nombreColumna = row.getColumn("casPrincipal");
        nombreColumna.setTitleKey("tbl.desembolso.sinComision");
        nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

            public Object getValue(Object item, String property, int rowcount) {
                Object value = new BasicCellEditor().getValue(item, property, rowcount);
                CtaCasCuentaAsociado cuentaAsociado = (CtaCasCuentaAsociado)item;
                ChequePrestamoAction chequePrestamoAction = new ChequePrestamoAction();
                Double montoDesembolso = chequePrestamoAction.montoDesembolso(cuentaAsociado.getCasCuenta(),request);
                CtaPrePrestamoDAO prestamoDAO = new CtaPrePrestamoDAO(getSessionHibernate(request));
                CtaPrePrestamo prestamo = prestamoDAO.findById(cuentaAsociado.getCtaPrePrestamo().getPreId());
                CtaTprTipoPrestamoDAO tipoPrestamoDAO = new CtaTprTipoPrestamoDAO(getSessionHibernate(request));
                CtaTprTipoPrestamo tipoPrestamo = tipoPrestamoDAO.findById(prestamo.getCtaTprTipoPrestamo().getTprId());
                CtaLprLineaPrestamoDAO lineaPrestamoDAO = new CtaLprLineaPrestamoDAO(getSessionHibernate(request));
                CtaLprLineaPrestamo lineaPrestamo = lineaPrestamoDAO.findById(tipoPrestamo.getCtaLprLineaPrestamo().getLprId());
                Double sinComision = montoDesembolso - prestamo.getPreMontoSolicitado()*(lineaPrestamo.getLprComision()/100);
                DecimalFormat df = new DecimalFormat("0.00");
                return  df.format(sinComision) + "<input type=\"hidden\" value=\"" + df.format(sinComision) +"\" id=\"sc"+ pos +"\"/>";
            }
           
        });
       
        nombreColumna = row.getColumn("ctrEstEstado.estId");
        nombreColumna.setTitleKey("tbl.desembolso.checkbox");
        nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

            public Object getValue(Object item, String property, int rowcount) {
                Object value = new BasicCellEditor().getValue(item, property, rowcount);
                CtaCasCuentaAsociado cuentaAsociado = (CtaCasCuentaAsociado)item;
                HtmlBuilder html = new HtmlBuilder();
               	html.input().type("checkbox").name("posiciones").value(""+cuentaAsociado.getCasCuenta()).id("pos"+pos);
               	html.onclick("desembolso("+ TAM_LISTA_DESEMBOLSO +");").close();
				pos++;
               	return html.toString();
            }
           
        });
        
        return tableFacade.render();
    }
   
    //---- metodo que genera los exports, el formato que tendran
	private void export(final TableFacade tableFacade) {
		tableFacade.setColumnProperties("benPrimerNombre", "secParParentesco.parDescripcion",
                    "benSexo","benFechaNacimiento");
		Table table = tableFacade.getTable();
         //---- Titulo de la tabla
        table.setCaptionKey("tbl.ben.caption");
       
        Row row = table.getRow();
        Column nombreColumna = row.getColumn("benPrimerNombre");
        nombreColumna.setTitleKey("tbl.ben.benNombre");
       
        nombreColumna = row.getColumn("secParParentesco.parDescripcion");
        nombreColumna.setTitleKey("tbl.ben.parentescoNombre");
       
        nombreColumna = row.getColumn("benSexo");
        nombreColumna.setTitleKey("tbl.ben.benSexo");
       
       
        nombreColumna = row.getColumn("benFechaNacimiento");
        nombreColumna.setTitleKey("tbl.ben.benFechaNacimiento");
           
        tableFacade.render();
    }
     
	public ActionForward buscar(ActionMapping mapping, ActionForm form,
 			HttpServletRequest request, HttpServletResponse response) {
 		DesembolsoPrestamoForm desembolsoForm = (DesembolsoPrestamoForm)form;

 		pos = 0;

 		CtaLprLineaPrestamoDAO lineaPrestamoDAO = new CtaLprLineaPrestamoDAO(getSessionHibernate(request));
 		List lstLineaPre = lineaPrestamoDAO.findAll();
 		
 		CtaTprTipoPrestamoDAO tipoPrestamoDAO = new CtaTprTipoPrestamoDAO(getSessionHibernate(request));
 		List lstTipoPre = tipoPrestamoDAO.findAll();
 		
 		CtaCasCuentaAsociadoDAO cuentaAsociadoDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
 		CtrEstEstadoDAO estadoDAO = new CtrEstEstadoDAO(getSessionHibernate(request));
 		CtrEstEstado estado = estadoDAO.findById(15);
 		List lst = cuentaAsociadoDAO.busqueda(desembolsoForm,request);
 		
 		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
 		tableFacade.setItems(lst);

 		//---- Genera los tipos de formas con que se podran exportar los datos
 		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
 		tableFacade.setStateAttr("restore");
 		Limit limit = tableFacade.getLimit();
 		if (limit.isExported()) {
 			//---- exporta la tabla
 			export(tableFacade);
 			return null; 
 		} else {
 			//---- genera el html de la tabla para ser mostrada
 			String html = html(tableFacade, request);
 			request.setAttribute("_lista2", html);
 		}
 		//----- Variables de configuracion
 		
 		request.setAttribute("lstLineaPre", lstLineaPre);
 		request.setAttribute("lstTipoPre", lstTipoPre);
 		desembolsoForm = new DesembolsoPrestamoForm();
 		request.setAttribute("form", desembolsoForm);
 		request.setAttribute("edit", 0);
 		request.setAttribute(Constantes.ACCION_KEY, "/desembolsoPrestamo");
 		
 		return mapping.findForward("lista");
 	}

	public ActionForward desembolsar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		DesembolsoPrestamoForm desembolsoPrestamoForm = (DesembolsoPrestamoForm)form;
		
		CtaCasCuentaAsociadoDAO cuentaAsociadoDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
		CtrEstEstadoDAO estadoDAO = new CtrEstEstadoDAO(getSessionHibernate(request));
		CtaPrePrestamoDAO prestamoDAO = new CtaPrePrestamoDAO(getSessionHibernate(request));
		CtaTxaTransaccionxcuentaAsociadoDAO txaDAO = new CtaTxaTransaccionxcuentaAsociadoDAO(getSessionHibernate(request));
		CtaMxpMovimientoPrestamoDAO movimientoPrestamoDAO = new CtaMxpMovimientoPrestamoDAO(getSessionHibernate(request));
		CtaTtrTipoTransaccionDAO tipoTransaccionDAO = new CtaTtrTipoTransaccionDAO(getSessionHibernate(request));
		CtaStbSolTransBancDAO stbDao = new CtaStbSolTransBancDAO(getSessionHibernate(request));
		ConCueCuentaDAO cuentaContableDAO = new ConCueCuentaDAO(getSessionHibernate(request));
		CtaDxpDescuentosPrestamoDAO descPrestDAO = new CtaDxpDescuentosPrestamoDAO(getSessionHibernate(request));
		
		//Cargo por apertura de prestamo
		CtaTtrTipoTransaccion tipoTranAperPre = tipoTransaccionDAO.findById(20);//20 = Cargo por Apertura Prestamo
		
		//Cargo por lo se va a los cheques
		CtaTtrTipoTransaccion tipoTransaccion2 = tipoTransaccionDAO.findById(7);//7 = Cargo por Desembolso a Cheques
		
		//Peticion de Transaccion Electronica
		CtaTtrTipoTransaccion tipoTranELectro = tipoTransaccionDAO.findById(26);//26 = Peticion de Transaccion Electronica

		//Abono por financiamiento
		CtaTtrTipoTransaccion tipoTranAbonoFinan = tipoTransaccionDAO.findById(17);//17 = Abono por financiamiento
		
		//Cancelacion de Prestamo
		CtaTtrTipoTransaccion tipoTranCancPre = tipoTransaccionDAO.findById(19);//19 = Cancelacion de Prestamo		
		
		Transaction txCas = cuentaAsociadoDAO.getSession().beginTransaction();
		Transaction txPre = prestamoDAO.getSession().beginTransaction();
		Transaction txDesc = descPrestDAO.getSession().beginTransaction();
		Transaction txTran = txaDAO.getSession().beginTransaction();
		
		if(desembolsoPrestamoForm.getPosiciones() == null || desembolsoPrestamoForm.getPosiciones().length < 1){
			mensajes("error.desembolso.escoger", request);
			return lista(mapping, desembolsoPrestamoForm, request, response);
		}
		Integer[] listaSelected = desembolsoPrestamoForm.getPosiciones();
		
		ArrayList<String> errores = new ArrayList<String>();
		ArrayList<String> exito = new ArrayList<String>();
		
		for (int i = 0; i < listaSelected.length; i++) {
			CtaCasCuentaAsociado cuentaAsociado = cuentaAsociadoDAO.findById((long) listaSelected[i]);
			boolean error = false;
			error = validarDesembolso((long)listaSelected[i],request);
			String preId = cuentaAsociado.getCtaPrePrestamo().getPreId(); //Prestamo que se va a desembolsar
			
			if(error==true){
				errores.add(preId);
			}else{
				try{					
					cuentaAsociado.setCtaPxtPersonaExterna(null);
					cuentaAsociadoDAO.merge(cuentaAsociado);
					CtaPrePrestamo prestamo = prestamoDAO.findById(cuentaAsociado.getCtaPrePrestamo().getPreId());
					
					//Realizo la transaccion 20 = Cargo por apertura de prestamo
					CtaTxaTransaccionxcuentaAsociado txa = new CtaTxaTransaccionxcuentaAsociado();
					txa.setCtaCasCuentaAsociado(cuentaAsociado);
					txa.setTxaFecha(new Date());
					txa.setTxaComprobante(txaDAO.nextComprobante());				
					txa.setTxaMonto(prestamo.getPreMontoSolicitado());
					txa.setAudFechaCreacion(new Date());
					txa.setAudFechaModificacion(new Date());
					txa.setAudUsuarioCreacion(desembolsoPrestamoForm.getUsuarioConectado().getNombreUsuario());
					txa.setAudUsuarioModificacion(desembolsoPrestamoForm.getUsuarioConectado().getNombreUsuario());
	
					txa.setCtaTtrTipoTransaccion(tipoTranAperPre);
					txaDAO.save(txa);
					
					enviarTransaccionAContabilidad(txa, txa.getAudUsuarioCreacion(), "C", 
							cuentaAsociado, 0.0, null,request);
					
					//Registro el movimiento del prestamo de apertura
					CtaMxpMovimientoPrestamo movimientoPrestamo = new CtaMxpMovimientoPrestamo();
					movimientoPrestamo.setCtaPrePrestamo(prestamo);
					movimientoPrestamo.setCtaTxaTransaccionxcuentaAsociado(txa);
					movimientoPrestamo.setMxpFecha(new Date());
					movimientoPrestamo.setMxpInteresPendiente(0.0);
					movimientoPrestamo.setMxpInteresAcumulado(0.0);
					movimientoPrestamo.setMxpMora(0.0);
					movimientoPrestamo.setMxpSaldoActual(0.0);
					movimientoPrestamo.setMxpSaldo(prestamo.getPreSaldoActualT());
					movimientoPrestamo.setAudFechaCreacion(new Date());
					movimientoPrestamo.setAudFechaModificacion(new Date());
					movimientoPrestamo.setAudUsuarioCreacion(desembolsoPrestamoForm.getUsuarioConectado().getNombreUsuario());
					movimientoPrestamo.setAudUsuarioModificacion(desembolsoPrestamoForm.getUsuarioConectado().getNombreUsuario());
					movimientoPrestamoDAO.save(movimientoPrestamo);
					
					
					//Asegurandome que el prestamo lleve los datos correctos				
					prestamo.setPreSaldoActualT(prestamo.getPreMontoSolicitado());
					prestamo.setPrePendMov(0.0);
					prestamo.setPreMoraMov(0.0);
					prestamo.setPreFechaSolicitud(new Date());
					prestamoDAO.merge(prestamo);
					
					//Se setea estado activo para el prestamo
					cuentaAsociado.setCtrEstEstado(estadoDAO.findById(13));
					cuentaAsociado.setCasFechaCierre(ElapsedTime.obtenerFechaMeses(new Date(), cuentaAsociado.getCtaPrePrestamo().getCtaTprTipoPrestamo().getCtaPlmPlanMeses().getPlmDuracion()));
					cuentaAsociadoDAO.merge(cuentaAsociado);				
					
					
					//VERIFICANDO EL LIQUIDO A RECIBIR
					ChequePrestamoAction chequePrestamoAction = new ChequePrestamoAction();
					Double montoDesembolso = chequePrestamoAction.montoDesembolso(cuentaAsociado.getCasCuenta(),request);
					DecimalFormat df = new DecimalFormat("0.00");
					Double montoD = new Double(df.format(montoDesembolso));
					
					if(montoD>0){//Tengo liquido a recibir y debe ser enviado a la cuenta bancaria del asociado
						CtaCbaCuentaBancaria cuentaBancaria = prestamo.getCtaCbaCuentaBancaria();
						
						//Generando la transaccion 26 = Peticion de Transaccion Electronica
						CtaTxaTransaccionxcuentaAsociado txa2 = new CtaTxaTransaccionxcuentaAsociado();
						txa2.setCtaCasCuentaAsociado(cuentaAsociado);
						txa2.setTxaFecha(new Date());
						txa2.setTxaComprobante(txa.getTxaComprobante());
						txa2.setTxaMonto(montoD);
						txa2.setAudFechaCreacion(new Date());
						txa2.setAudFechaModificacion(new Date());
						txa2.setAudUsuarioCreacion(desembolsoPrestamoForm.getUsuarioConectado().getNombreUsuario());
						txa2.setAudUsuarioModificacion(desembolsoPrestamoForm.getUsuarioConectado().getNombreUsuario());
						
						txa2.setCtaTtrTipoTransaccion(tipoTranELectro);
						txaDAO.save(txa2);
	
						//Enviando la Peticion de Transaccion Electronica
						CtaStbSolTransBanc stb = new CtaStbSolTransBanc();
						stb.setCtaCahCuentaAhorro(null);
						stb.setCtaCbaCuentaBancaria(cuentaBancaria);
						stb.setInvPcbProveedorCuentaBancaria(null);
						stb.setStbFechaSol(new Date());
						stb.setPreId(prestamo.getPreId());
						stb.setStbMonto(montoD);
	
						CtaAscAsociado asociado = cuentaAsociado.getCtaAscAsociado();
						String nombreAsociado = asociado.getSecPerPersona().getPerPrimerNombre() + " " +
						asociado.getSecPerPersona().getPerSegundoNombre() + " " +
						asociado.getSecPerPersona().getPerPrimerApellido() + " " +
						asociado.getSecPerPersona().getPerSegundoApellido();
						
						stb.setStbNombreAsociado(nombreAsociado);
						stb.setStbRazon("Deposito Pago Prestamo Electronico");
						stb.setStbTipoAhorro(cuentaBancaria.getCtaTcuTipoCuenta().getTcuNombre());
						stb.setStbEstado("N");//Setear estado N de no efectuada
						stbDao.save(stb);
					}
					
					//APLICANDO LOS DEMAS DESCUENTOS
	
					//ABONO A OTRAS DEDUCCIONES
					Double montoDeducciones = 0.00;
					montoDeducciones = prestamo.getPreOtrasDeducciones();
					if(montoDeducciones>0){
						Double montoIva = 0.00;
						montoIva = prestamo.getPreIvaDeducciones();
						PartidaAutomatica partidaAutomatica =  new PartidaAutomatica();
						//CueCodigoCuenta=51302 CueCodigoNombre=VARIOS (Otras Deducciones)
						ConCueCuenta cuenta = (ConCueCuenta) cuentaContableDAO.findByCueCodigoCuenta("51302").get(0);
						partidaAutomatica.crearPartidaAutomaticaCC(cuenta.getCueId().toString(), montoDeducciones, "A", desembolsoPrestamoForm.getUsuarioConectado().getNombreUsuario(), "Otras deducciones",request);
						
						//CueCodigoCuenta=21602 CueCodigoNombre=D.F. POR VENTAS CONSUMIDORES FINALES (Iva Deducciones)
						ConCueCuenta cuenta2 = (ConCueCuenta) cuentaContableDAO.findByCueCodigoCuenta("21602").get(0);
						partidaAutomatica.crearPartidaAutomaticaCC(cuenta2.getCueId().toString(), montoIva, "A", desembolsoPrestamoForm.getUsuarioConectado().getNombreUsuario(), "Iva sobre deducciones",request);
					}
					
	////////////////ABONO A APORTACIONES
					Double montoAportacion = 0.00;
					montoAportacion = prestamo.getPreAportaciones();
					
					if(montoAportacion>0){					
						CtaCahCuentaAhorroDAO aportacionDAO = new CtaCahCuentaAhorroDAO(getSessionHibernate(request));
						CtaCasCuentaAsociado cuentaAportacion = obtenerCuentaDeAportacion(cuentaAsociado.getCtaAscAsociado().getAscId(),request);
						CtaCahCuentaAhorro aportacion = cuentaAportacion.getCtaCahCuentaAhorro();
						aportacion.setCahSaldoActual(aportacion.getCahSaldoActual() + montoAportacion);
						aportacionDAO.merge(aportacion);
						
						//Generando la transaccion 17 = Abono por financiamiento
						CtaTxaTransaccionxcuentaAsociado txa4 = new CtaTxaTransaccionxcuentaAsociado();
						txa4.setCtaCasCuentaAsociado(cuentaAportacion);
						txa4.setTxaFecha(new Date());
						txa4.setTxaComprobante(null);
						txa4.setTxaMonto(montoAportacion);
						txa4.setAudFechaCreacion(new Date());
						txa4.setAudFechaModificacion(new Date());
						txa4.setAudUsuarioCreacion(desembolsoPrestamoForm.getUsuarioConectado().getNombreUsuario());
						txa4.setAudUsuarioModificacion(desembolsoPrestamoForm.getUsuarioConectado().getNombreUsuario());
						
						txa4.setCtaTtrTipoTransaccion(tipoTranAbonoFinan);
						txaDAO.save(txa4);
						
						enviarTransaccionAContabilidad(txa4, txa4.getAudUsuarioCreacion(), "A", 
								cuentaAportacion, 0.0, null,request);
						
						CtaMxaMovimientoAhorroDAO movimientoAhorroDAO = new CtaMxaMovimientoAhorroDAO(getSessionHibernate(request));
						CtaMxaMovimientoAhorro movimientoAhorro = new CtaMxaMovimientoAhorro();
						movimientoAhorro.setCtaCahCuentaAhorro(aportacion);
						movimientoAhorro.setCtaTxaTransaccionxcuentaAsociado(txa4);
						movimientoAhorro.setMxaFecha(new Date());
						movimientoAhorro.setMxaSaldo(aportacion.getCahSaldoActual());
						movimientoAhorro.setMxaMonto(montoAportacion);
						movimientoAhorro.setAudFechaCreacion(new Date());
						movimientoAhorro.setAudFechaModificacion(new Date());
						movimientoAhorro.setAudUsuarioCreacion(desembolsoPrestamoForm.getUsuarioConectado().getNombreUsuario());
						movimientoAhorro.setAudUsuarioModificacion(desembolsoPrestamoForm.getUsuarioConectado().getNombreUsuario());
						movimientoAhorroDAO.save(movimientoAhorro);				
					}
					
////////////////////ABONANDO LOS OTROS PRESTAMOS 
					List listaDescPrest = (List) descPrestDAO.findByPreIdAndTipoCuenta(prestamo.getPreId(), "C"); //descPrestDAO.findByProperty("ctaPrePrestamoByPreId.preId", prestamo.getPreId());
					Iterator iDPre =  listaDescPrest.iterator();
					
					while(iDPre.hasNext()){
						CtaDxpDescuentosPrestamo desc = (CtaDxpDescuentosPrestamo) iDPre.next();
						CtaCasCuentaAsociado cuentaPre = cuentaAsociadoDAO.findById(desc.getCasCuenta());
						CtaPrePrestamo pre = new CtaPrePrestamo(); 
						pre = prestamoDAO.findById(cuentaPre.getCtaPrePrestamo().getPreId());
						
						Double saldoConInteres = 0.00;
						IntereseYMora iYm = new IntereseYMora();
						CtaMxpMovimientoPrestamo mxpAnt = movimientoPrestamoDAO.findUltimoMovimiento(cuentaPre.getCtaPrePrestamo().getPreId());
						if(mxpAnt == null || mxpAnt.getMxpId() == null){
							mxpAnt = new CtaMxpMovimientoPrestamo();
						}
						iYm = iYm.actualizaInteres(mxpAnt, cuentaPre.getCtaPrePrestamo(), cuentaPre, new Date(),request);
						saldoConInteres = cuentaPre.getCtaPrePrestamo().getPreSaldoActualT() + iYm.getAcumulado() + iYm.getPendiente();
						Double saldoConI = new Double(df.format(saldoConInteres));
						Double dxpMonto = 0.00;
						if(desc.getDxpMonto()!=null){
							dxpMonto = new Double(df.format(desc.getDxpMonto()));
						}else{
							desc.setDxpMonto(saldoConI);
						}
	
						//Actualizo la tabla de descuentos con la suma de los intereses pagados
						
						desc.setDxpInteresPagado(iYm.getPendiente()+iYm.getAcumulado());
						descPrestDAO.merge(desc);
						
						if(desc.getDxpMonto()==null || (dxpMonto==saldoConI)){//Se va a cancelar el prestamo
							//Generando la transaccion 19 = Cancelacion de Prestamo
							CtaTxaTransaccionxcuentaAsociado txa3 = new CtaTxaTransaccionxcuentaAsociado();
							txa3.setCtaCasCuentaAsociado(cuentaPre);
							txa3.setTxaFecha(new Date());
							txa3.setTxaComprobante(null);
							txa3.setTxaMonto(saldoConI);
							txa3.setAudFechaCreacion(new Date());
							txa3.setAudFechaModificacion(new Date());
							txa3.setAudUsuarioCreacion(desembolsoPrestamoForm.getUsuarioConectado().getNombreUsuario());
							txa3.setAudUsuarioModificacion(desembolsoPrestamoForm.getUsuarioConectado().getNombreUsuario());
							
							txa3.setCtaTtrTipoTransaccion(tipoTranCancPre);
							txaDAO.save(txa3);
							
							enviarTransaccionAContabilidad(txa3, txa3.getAudUsuarioCreacion(), 
									"C", cuentaPre,(iYm.getPendiente()+iYm.getAcumulado()), null,request);
							
							//Registro el movimiento de abono de liquidacion de prestamo				
							CtaMxpMovimientoPrestamo movPreLiq = new CtaMxpMovimientoPrestamo();
							movPreLiq.setCtaPrePrestamo(cuentaPre.getCtaPrePrestamo());
							movPreLiq.setCtaTxaTransaccionxcuentaAsociado(txa3);
							movPreLiq.setMxpFecha(new Date());
							movPreLiq.setMxpInteresPendiente(iYm.getPendiente());
							movPreLiq.setMxpInteresAcumulado(iYm.getAcumulado());
							movPreLiq.setMxpMora(0.0);
							movPreLiq.setMxpSaldoActual(mxpAnt.getMxpSaldoActual()+cuentaPre.getCtaPrePrestamo().getPreSaldoActualT());
							movPreLiq.setMxpSaldo(0.00);
							movPreLiq.setAudFechaCreacion(new Date());
							movPreLiq.setAudFechaModificacion(new Date());
							movPreLiq.setAudUsuarioCreacion(desembolsoPrestamoForm.getUsuarioConectado().getNombreUsuario());
							movPreLiq.setAudUsuarioModificacion(desembolsoPrestamoForm.getUsuarioConectado().getNombreUsuario());
							movimientoPrestamoDAO.save(movPreLiq);
							
							//Liberando los fiadores
							ArrayList fiadores = new ArrayList();
							CtaFxpFiadorPrestamoDAO fiadorPrestamoDAO = new CtaFxpFiadorPrestamoDAO(getSessionHibernate(request));
							fiadores.addAll(fiadorPrestamoDAO.findByProperty("ctaPrePrestamo.preId", pre.getPreId()));
							
							for (Iterator iterator = fiadores.iterator(); iterator.hasNext();) {
								CtaFxpFiadorPrestamo fiador = (CtaFxpFiadorPrestamo) iterator.next();
								fiador.setFxpEstado("S");
								fiadorPrestamoDAO.merge(fiador);												
							}					
							
							//Cambiando el estado a PAGADO (17) del prestamo a refinanciar
							if(pre.getPreCredito() == null || (!pre.getPreCredito().equals("O") && !pre.getPreCredito().equals("F"))){
								cuentaPre.setCasFechaCierre(new Date());
								cuentaPre.setCtrEstEstado(estadoDAO.findById(17));
								cuentaAsociadoDAO.merge(cuentaPre);												
							}					
							cuentaPre.setCtrEstEstado(estadoDAO.findById(17));
							cuentaAsociadoDAO.merge(cuentaPre);
							
							//Si tipo prestamo es NULL, es un Credito y se maneja de la siguiente forma
							if(pre.getPreCredito() != null && (pre.getPreCredito().equals("O") || pre.getPreCredito().equals("F"))){
								OrdOcoOrdenDeCompraDAO compraDAO = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
								List ordeneDebe = compraDAO.findTodasLasQueDebe(cuentaPre.getCtaAscAsociado().getAscId());
								Double montoOrdenes = 0.0;//prestamo.getPreMontoSolicitado() - prestamo.getPreSaldoActualT();
								montoOrdenes = pagarOrdenes(ordeneDebe,saldoConI,request);
								pre.setPreCuota(0.0);
							}					
							
							//Reflejando el movimiento de liquidacion en el prestamo refinanciado					
							pre.setPreSaldoActualT(0.00);
							prestamoDAO.merge(pre);
							
						}else{//Sólo se abona el monto del descuento
							Double montoActualizable=new Double(df.format(desc.getDxpMonto()));
							
							//Generando la transaccion 17 = Abono por financiamiento
							CtaTxaTransaccionxcuentaAsociado txa3 = new CtaTxaTransaccionxcuentaAsociado();
							txa3.setCtaCasCuentaAsociado(cuentaPre);
							txa3.setTxaFecha(new Date());
							txa3.setTxaComprobante(null);
							txa3.setTxaMonto(montoActualizable);
							txa3.setAudFechaCreacion(new Date());
							txa3.setAudFechaModificacion(new Date());
							txa3.setAudUsuarioCreacion(desembolsoPrestamoForm.getUsuarioConectado().getNombreUsuario());
							txa3.setAudUsuarioModificacion(desembolsoPrestamoForm.getUsuarioConectado().getNombreUsuario());
							
							txa3.setCtaTtrTipoTransaccion(tipoTranAbonoFinan);
							txaDAO.save(txa3);
							
							//Registro el movimiento de abono de liquidacion de prestamo				
							CtaMxpMovimientoPrestamo movPreAbo = new CtaMxpMovimientoPrestamo();
							movPreAbo.setCtaPrePrestamo(cuentaPre.getCtaPrePrestamo());
							movPreAbo.setCtaTxaTransaccionxcuentaAsociado(txa3);
							movPreAbo.setMxpFecha(new Date());
							movPreAbo.setMxpMora(0.00);
							movPreAbo.setMxpSaldoActual(mxpAnt.getMxpSaldoActual()+cuentaPre.getCtaPrePrestamo().getPreSaldoActualT());
							movPreAbo.setMxpSaldo(0.00);
							movPreAbo.setAudFechaCreacion(new Date());
							movPreAbo.setAudFechaModificacion(new Date());
							movPreAbo.setAudUsuarioCreacion(desembolsoPrestamoForm.getUsuarioConectado().getNombreUsuario());
							movPreAbo.setAudUsuarioModificacion(desembolsoPrestamoForm.getUsuarioConectado().getNombreUsuario());
						
							//Forma normal
							/**
							 * ESTE BLOQUE CORRESPONDE AL MANEJO DE MORA, ACTUALMENTE SE MANEJA COMO UN PORCENTAJE QUE SE 
							 * DEBE AGREGAR AL PORCENTAJE DE INTERES DEL PRESTAMO.
							 * if(iYm.getMora() != null && iYm.getMora()<= montoActualizable){
								mxp.setMxpMora(iYm.getMora());
								montoActualizable = montoActualizable - iYm.getMora(); */
								if(iYm.getPendiente() <= montoActualizable){
									pre.setPreMoraMov(0.0);
									movPreAbo.setMxpInteresPendiente(iYm.getPendiente());
									montoActualizable = montoActualizable - iYm.getPendiente();
									if(iYm.getAcumulado() <= montoActualizable){
										pre.setPrePendMov(0.0);
										movPreAbo.setMxpInteresAcumulado(iYm.getAcumulado());
										montoActualizable = montoActualizable - iYm.getAcumulado();
										if(montoActualizable == 0.0){
											//mxp.setMxpSaldoActual(pre.getPreMontoSolicitado() - pre.getPreSaldoActualT());
											movPreAbo.setMxpSaldoActual(mxpAnt.getMxpSaldoActual());
											movPreAbo.setMxpSaldo(mxpAnt.getMxpSaldo());
										}else{
											if(montoActualizable < pre.getPreSaldoActualT()){
												movPreAbo.setMxpSaldoActual(mxpAnt.getMxpSaldoActual()/*(pre.getPreMontoSolicitado() - pre.getPreSaldoActualT())*/ + montoActualizable);
												movPreAbo.setMxpSaldo(mxpAnt.getMxpSaldo() - montoActualizable);
												//Si tipo pre es NULL, es un Credito y se maneja de la siguiente forma
												if(pre.getPreCredito() != null && (pre.getPreCredito().equals("O") || pre.getPreCredito().equals("F"))){
													OrdOcoOrdenDeCompraDAO compraDAO = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
													List ordeneDebe = compraDAO.findTodasLasQueDebe(cuentaPre.getCtaAscAsociado().getAscId());
													Double montoOrdenes = 0.0;//pre.getPreMontoSolicitado() - pre.getPreSaldoActualT();
													montoOrdenes = pagarOrdenes(ordeneDebe,montoActualizable,request);
												}
												pre.setPreSaldoActualT(pre.getPreSaldoActualT()-montoActualizable/*pre.getPreMontoSolicitado() - mxp.getMxpSaldoActual()*/);
											}else{//liquidamos el pre
												if(montoActualizable >= pre.getPreSaldoActualT()){
													CtaFxpFiadorPrestamoDAO fiadorPrestamoDAO = new CtaFxpFiadorPrestamoDAO(getSessionHibernate(request));
													ArrayList fiadores = new ArrayList();
													fiadores.addAll(fiadorPrestamoDAO.findByProperty("ctaPrePrestamo.preId", pre.getPreId()));
													
													Transaction tx1 = fiadorPrestamoDAO.getSession().beginTransaction();
													for (Iterator iterator2 = fiadores.iterator(); iterator2.hasNext();) {
														CtaFxpFiadorPrestamo fiador = (CtaFxpFiadorPrestamo) iterator2.next();
														fiador.setFxpEstado("S");
														fiadorPrestamoDAO.merge(fiador);												
													}
													tx1.commit();											
													if(pre.getPreCredito() == null || (!pre.getPreCredito().equals("O") && !pre.getPreCredito().equals("F"))){
														cuentaPre.setCasFechaCierre(new Date());
														cuentaPre.setCtrEstEstado(estadoDAO.findById(17));
														cuentaAsociadoDAO.merge(cuentaPre);
													}
													
													//Si tipo pre es NULL, es un Credito y se maneja de la siguiente forma
													if(pre.getPreCredito() != null && (pre.getPreCredito().equals("O") || pre.getPreCredito().equals("F"))){
														OrdOcoOrdenDeCompraDAO compraDAO = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
														List ordeneDebe = compraDAO.findTodasLasQueDebe(cuentaPre.getCtaAscAsociado().getAscId());
														Double montoOrdenes = 0.0;//pre.getPreMontoSolicitado() - pre.getPreSaldoActualT();
														montoOrdenes = pagarOrdenes(ordeneDebe,montoActualizable,request);
														pre.setPreCuota(0.0);
													}
													if(montoActualizable > pre.getPreSaldoActualT()){
														//siEsMayor(montoActualizable, pre, cuentaPre, mxpAnt,comprobante);
													}
													//mxp.setMxpSaldoActual((double) pre.getPreMontoSolicitado());
													movPreAbo.setMxpSaldoActual(mxpAnt.getMxpSaldoActual()+mxpAnt.getMxpSaldo());
													pre.setPreSaldoActualT(0.00);
												}
											}
										}
									}else{
										pre.setPrePendMov(iYm.getAcumulado() - montoActualizable);
										movPreAbo.setMxpInteresAcumulado(montoActualizable);
										//mxp.setMxpSaldoActual(pre.getPreMontoSolicitado() - pre.getPreSaldoActualT());
										movPreAbo.setMxpSaldoActual(mxpAnt.getMxpSaldoActual());
									}
								}else{
									pre.setPrePendMov((iYm.getPendiente()-montoActualizable) + iYm.getAcumulado());
									movPreAbo.setMxpInteresPendiente(montoActualizable);
									movPreAbo.setMxpInteresAcumulado(0.0);
									//mxp.setMxpSaldoActual(pre.getPreMontoSolicitado() - pre.getPreSaldoActualT());
									movPreAbo.setMxpSaldoActual(mxpAnt.getMxpSaldoActual());
								}
							/**}else{ ESTE BLOQUE CORRESPONDE AL MANEJO DE MORA, ACTUALMENTE SE MANEJA COMO UN PORCENTAJE QUE SE 
							 * DEBE AGREGAR AL PORCENTAJE DE INTERES DEL PRESTAMO.
								if(mxpAnt.getMxpMora() != null){
									prestamo.setPrePendMov(iYm.getPendiente() + iYm.getAcumulado());
									prestamo.setPreMoraMov(iYm.getMora() - montoActualizable);
									mxp.setMxpMora(montoActualizable);
									mxp.setMxpInteresPendiente(0.0);
									mxp.setMxpInteresAcumulado(0.0);
									mxp.setMxpSaldoActual(prestamo.getPreMontoSolicitado() - prestamo.getPreSaldoActualT());
									if(prestamo.getPreCredito() != null && (prestamo.getPreCredito().equals("O") || prestamo.getPreCredito().equals("F"))){
										mxp.setMxpSaldo(prestamo.getPreSaldoActualT());
									}else{
										mxp.setMxpSaldo(prestamo.getPreSaldoActualT()-mxp.getMxpSaldoActual());
									}
								}else{
									prestamo.setPrePendMov(iYm.getPendiente() + iYm.getAcumulado());
									prestamo.setPreMoraMov(iYm.getMora());
									mxp.setMxpMora(0.0);
									mxp.setMxpInteresPendiente(0.0);
									mxp.setMxpInteresAcumulado(0.0);
									mxp.setMxpSaldoActual(prestamo.getPreMontoSolicitado() - prestamo.getPreSaldoActualT());
									if(prestamo.getPreCredito() != null && (prestamo.getPreCredito().equals("O") || prestamo.getPreCredito().equals("F"))){
										mxp.setMxpSaldo(prestamo.getPreSaldoActualT());
									}else{
										mxp.setMxpSaldo(prestamo.getPreSaldoActualT()-mxp.getMxpSaldoActual());
									}
								}
							}*/
							movPreAbo.setMxpSaldo(pre.getPreSaldoActualT());
							/*if(prestamo.getPreCredito() != null && (prestamo.getPreCredito().equals("O") || prestamo.getPreCredito().equals("F"))){
								mxp.setMxpSaldo(prestamo.getPreSaldoActualT()-mxp.getMxpSaldoActual());
							}else{
								mxp.setMxpSaldo(prestamo.getPreSaldoActualT());
							}*/
							movimientoPrestamoDAO.save(movPreAbo);
							//prestamo.setPreSaldoActualT(mxp.getMxpSaldoActual());
							prestamoDAO.merge(pre);
							
							enviarTransaccionAContabilidad(txa3, txa3.getAudUsuarioCreacion(), "C", cuentaPre,
									(iYm.getPendiente()+iYm.getAcumulado()), null,request);
						}
					}
	
	////////////////REFINANCIAMIENTO
					if(cuentaAsociado.getCasRefinanciado()!=null){
						Double refinanciando = 0.00;
						CtaCasCuentaAsociado casRef = cuentaAsociadoDAO.findById(cuentaAsociado.getCasRefinanciado());
						IntereseYMora iYm = new IntereseYMora();
						CtaMxpMovimientoPrestamoDAO mxpDao = new CtaMxpMovimientoPrestamoDAO(getSessionHibernate(request));
						CtaMxpMovimientoPrestamo mxp = mxpDao.findUltimoMovimiento(casRef.getCtaPrePrestamo().getPreId());
						if(mxp == null || mxp.getMxpId() == null){
							mxp = new CtaMxpMovimientoPrestamo();
						}
						iYm = iYm.actualizaInteres(mxp, casRef.getCtaPrePrestamo(), casRef, new Date(),request);
						refinanciando = casRef.getCtaPrePrestamo().getPreSaldoActualT() + iYm.getAcumulado() + iYm.getPendiente();
						
						CtaPrePrestamo preRef = prestamoDAO.findById(casRef.getCtaPrePrestamo().getPreId());
						
						//Guardando el refinanciamiento como descuento
						CtaDxpDescuentosPrestamo descRef = new CtaDxpDescuentosPrestamo();
						descRef.setCtaCahCuentaAhorro(null);
						descRef.setCtaSegSeguros(null);
						descRef.setDxpMonto(new Double(df.format(refinanciando)));
						descRef.setDxpInteresPagado(new Double(df.format(refinanciando-casRef.getCtaPrePrestamo().getPreSaldoActualT())));
						descRef.setDxpId(descPrestDAO.nextId());
						descRef.setCasCuenta(casRef.getCasCuenta());
						descRef.setCtaPrePrestamoByPreId(prestamo);
						descRef.setCtaPrePrestamoByPreId2(preRef);
						
						descPrestDAO.save(descRef);
						
						//Generando la transaccion 19 = Cancelacion de Prestamo
						CtaTxaTransaccionxcuentaAsociado txa3 = new CtaTxaTransaccionxcuentaAsociado();
						txa3.setCtaCasCuentaAsociado(casRef);
						txa3.setTxaFecha(new Date());
						txa3.setTxaComprobante(null);
						txa3.setTxaMonto(refinanciando);
						txa3.setAudFechaCreacion(new Date());
						txa3.setAudFechaModificacion(new Date());
						txa3.setAudUsuarioCreacion(desembolsoPrestamoForm.getUsuarioConectado().getNombreUsuario());
						txa3.setAudUsuarioModificacion(desembolsoPrestamoForm.getUsuarioConectado().getNombreUsuario());
						
						txa3.setCtaTtrTipoTransaccion(tipoTranCancPre);
						txaDAO.save(txa3);
						
						enviarTransaccionAContabilidad(txa3, txa3.getAudUsuarioCreacion(), "C", casRef, 
								descRef.getDxpInteresPagado(), null,request);
						
						//Registro el movimiento de abono de liquidacion de prestamo				
						CtaMxpMovimientoPrestamo movPreRef = new CtaMxpMovimientoPrestamo();
						movPreRef.setCtaPrePrestamo(casRef.getCtaPrePrestamo());
						movPreRef.setCtaTxaTransaccionxcuentaAsociado(txa3);
						movPreRef.setMxpFecha(new Date());
						movPreRef.setMxpInteresPendiente(iYm.getPendiente());
						movPreRef.setMxpInteresAcumulado(iYm.getAcumulado());
						movPreRef.setMxpMora(0.0);
						movPreRef.setMxpSaldoActual(mxp.getMxpSaldoActual()+casRef.getCtaPrePrestamo().getPreSaldoActualT());
						movPreRef.setMxpSaldo(0.00);
						movPreRef.setAudFechaCreacion(new Date());
						movPreRef.setAudFechaModificacion(new Date());
						movPreRef.setAudUsuarioCreacion(desembolsoPrestamoForm.getUsuarioConectado().getNombreUsuario());
						movPreRef.setAudUsuarioModificacion(desembolsoPrestamoForm.getUsuarioConectado().getNombreUsuario());
						movimientoPrestamoDAO.save(movPreRef);
						
						
						//Liberando los fiadores
						//Liberando los fiadores
						ArrayList fiadores = new ArrayList();
						CtaFxpFiadorPrestamoDAO fiadorPrestamoDAO = new CtaFxpFiadorPrestamoDAO(getSessionHibernate(request));
						fiadores.addAll(fiadorPrestamoDAO.findByProperty("ctaPrePrestamo.preId", preRef.getPreId()));											
						
						for (Iterator iterator = fiadores.iterator(); iterator.hasNext();) {
							CtaFxpFiadorPrestamo fiador = (CtaFxpFiadorPrestamo) iterator.next();
							fiador.setFxpEstado("S");
							fiadorPrestamoDAO.merge(fiador);												
						}					
						
						//Cambiando el estado a PAGADO (17) del prestamo a refinanciar
						if(preRef.getPreCredito() == null || (!preRef.getPreCredito().equals("O") && !preRef.getPreCredito().equals("F"))){
							casRef.setCasFechaCierre(new Date());
							casRef.setCtrEstEstado(estadoDAO.findById(17));
							cuentaAsociadoDAO.merge(casRef);												
						}					
						casRef.setCtrEstEstado(estadoDAO.findById(17));
						cuentaAsociadoDAO.merge(casRef);
						
						//Si tipo prestamo es NULL, es un Credito y se maneja de la siguiente forma
						if(preRef.getPreCredito() != null && (preRef.getPreCredito().equals("O") || preRef.getPreCredito().equals("F"))){
							OrdOcoOrdenDeCompraDAO compraDAO = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
							List ordeneDebe = compraDAO.findTodasLasQueDebe(casRef.getCtaAscAsociado().getAscId());
							Double montoOrdenes = 0.0;//prestamo.getPreMontoSolicitado() - prestamo.getPreSaldoActualT();
							montoOrdenes = pagarOrdenes(ordeneDebe,refinanciando,request);
							preRef.setPreCuota(0.0);
						}					
						
						//Reflejando el movimiento de liquidacion en el prestamo refinanciado					
						preRef.setPreSaldoActualT(0.00);
						prestamoDAO.merge(preRef);
						
					}
					
	////////////////ABONANDO LOS SEGUROS
					CtaSegSegurosDAO seguroDAO = new CtaSegSegurosDAO(getSessionHibernate(request));
					List listaDescSeg = (List) descPrestDAO.findByPreIdAndTipoCuenta(prestamo.getPreId(), "D");
					Iterator iDesc =  listaDescSeg.iterator();
					while(iDesc.hasNext()){
						CtaDxpDescuentosPrestamo desc = (CtaDxpDescuentosPrestamo) iDesc.next();
						CtaCasCuentaAsociado cuentaSeg = cuentaAsociadoDAO.findById(desc.getCasCuenta());
						CtaSegSeguros seguro = new CtaSegSeguros(); 
						seguro = seguroDAO.findById(cuentaSeg.getCtaSegSeguros().getSegId());
					
						Double dxpMonto = 0.00;
						if(desc.getDxpMonto()==null)  {
							dxpMonto = new Double(df.format(seguro.getSegSaldoActual()));
							//Actualizo el monto del descuento
							desc.setDxpMonto(dxpMonto);
							descPrestDAO.merge(desc);							
						}
						else dxpMonto = new Double(df.format(desc.getDxpMonto()));
						
						
						//Generando la transaccion 17 = Abono por financiamiento
						CtaTxaTransaccionxcuentaAsociado txa3 = new CtaTxaTransaccionxcuentaAsociado();
						txa3.setCtaCasCuentaAsociado(cuentaSeg);
						txa3.setTxaFecha(new Date());
						txa3.setTxaComprobante(null);
						txa3.setTxaMonto(dxpMonto);
						txa3.setAudFechaCreacion(new Date());
						txa3.setAudFechaModificacion(new Date());
						txa3.setAudUsuarioCreacion(desembolsoPrestamoForm.getUsuarioConectado().getNombreUsuario());
						txa3.setAudUsuarioModificacion(desembolsoPrestamoForm.getUsuarioConectado().getNombreUsuario());
						
						txa3.setCtaTtrTipoTransaccion(tipoTranAbonoFinan);
						txaDAO.save(txa3);					
						
						enviarTransaccionAContabilidad(txa3, txa3.getAudUsuarioCreacion(), "D", cuentaSeg, 0.0, null,request);
						
						CtaMxsMovimientoSegurosDAO mxsDAO = new CtaMxsMovimientoSegurosDAO(getSessionHibernate(request));
						CtaMxsMovimientoSeguros mxs = new CtaMxsMovimientoSeguros();
						mxs.setCtaSegSeguros(seguro);
						mxs.setCtaTxaTransaccionxcuentaAsociado(txa3);
						mxs.setMxsFecha(new Date());
						mxs.setMxsMonto(dxpMonto);
						mxs.setMxsSaldo(seguro.getSegSaldoActual() - dxpMonto/*seguro.getSegSaldoIni() - seguro.getSegSaldoActual()*/);
						mxs.setAudFechaCreacion(new Date());
						mxs.setAudFechaModificacion(new Date());
						mxs.setAudUsuarioCreacion(desembolsoPrestamoForm.getUsuarioConectado().getNombreUsuario());
						mxs.setAudUsuarioModificacion(desembolsoPrestamoForm.getUsuarioConectado().getNombreUsuario());
						mxsDAO.save(mxs);
						
						seguro.setSegSaldoActual(seguro.getSegSaldoActual() - dxpMonto);
						seguroDAO.merge(seguro);
						
					}
	////////////////ABONANDO A LOS AHORROS
					CtaCahCuentaAhorroDAO ahorroDAO = new CtaCahCuentaAhorroDAO(getSessionHibernate(request));
					CtaMxaMovimientoAhorroDAO movimientoAhorroDAO = new CtaMxaMovimientoAhorroDAO(getSessionHibernate(request));
					List listaDescAho = (List) descPrestDAO.findByPreIdAndTipoCuenta(prestamo.getPreId(), "B");
					Iterator iDescAho =  listaDescAho.iterator();
					while(iDescAho.hasNext()){
						CtaDxpDescuentosPrestamo desc = (CtaDxpDescuentosPrestamo) iDescAho.next();
						CtaCasCuentaAsociado cuentaAho = cuentaAsociadoDAO.findById(desc.getCasCuenta());
						CtaCahCuentaAhorro ahorro = new CtaCahCuentaAhorro(); 
						ahorro = ahorroDAO.findById(cuentaAho.getCtaCahCuentaAhorro().getCahId());
						
						if(desc.getDxpMonto()>0){
							//Generando la transaccion 17 = Abono por financiamiento
							CtaTxaTransaccionxcuentaAsociado txa3 = new CtaTxaTransaccionxcuentaAsociado();
							txa3.setCtaCasCuentaAsociado(cuentaAho);
							txa3.setTxaFecha(new Date());
							txa3.setTxaComprobante(null);
							txa3.setTxaMonto(desc.getDxpMonto());
							txa3.setAudFechaCreacion(new Date());
							txa3.setAudFechaModificacion(new Date());
							txa3.setAudUsuarioCreacion(desembolsoPrestamoForm.getUsuarioConectado().getNombreUsuario());
							txa3.setAudUsuarioModificacion(desembolsoPrestamoForm.getUsuarioConectado().getNombreUsuario());
							
							txa3.setCtaTtrTipoTransaccion(tipoTranAbonoFinan);
							txaDAO.save(txa3);
							
							enviarTransaccionAContabilidad(txa3, txa3.getAudUsuarioCreacion(), "B", cuentaAho, 0.0, null,request);
							
							//Registrando el movimiento de Ahorro
							CtaMxaMovimientoAhorro movimientoAhorro = new CtaMxaMovimientoAhorro();
							movimientoAhorro.setCtaCahCuentaAhorro(ahorro);
							movimientoAhorro.setCtaTxaTransaccionxcuentaAsociado(txa3);
							movimientoAhorro.setMxaFecha(new Date());
							CuentaAhorroAction cuentaAhorroAction = new CuentaAhorroAction();
							movimientoAhorro.setMxaInteresTran(cuentaAhorroAction.calculoInteresTransaccion(ahorro.getCahId(), new Date(),request));
							movimientoAhorro.setMxaMonto(desc.getDxpMonto());
							movimientoAhorro.setMxaSaldo(ahorro.getCahSaldoActual()+desc.getDxpMonto());
							movimientoAhorro.setAudFechaCreacion(new Date());
							movimientoAhorro.setAudFechaModificacion(new Date());
							movimientoAhorro.setAudUsuarioCreacion(desembolsoPrestamoForm.getUsuarioConectado().getNombreUsuario());
							movimientoAhorro.setAudUsuarioModificacion(desembolsoPrestamoForm.getUsuarioConectado().getNombreUsuario());
							movimientoAhorroDAO.save(movimientoAhorro);
							
							ahorro.setCahSaldoActual(ahorro.getCahSaldoActual() + desc.getDxpMonto());
							ahorroDAO.merge(ahorro);
						}
					}
					
	////////////////OTRAS RETENCIONES
					CtaRxpRetencionPrestamoDAO retencionDAO = new CtaRxpRetencionPrestamoDAO(getSessionHibernate(request));
					List<CtaRxpRetencionPrestamo> retenciones = retencionDAO.findByProperty("ctaPrePrestamo.preId",prestamo.getPreId());
					Iterator iRet = retenciones.iterator();
					
					while(iRet.hasNext()){
						CtaRxpRetencionPrestamo retencion = (CtaRxpRetencionPrestamo) iRet.next();
						
						ConCueCuenta cuenta = (ConCueCuenta) cuentaContableDAO.findByCueCodigoCuenta("2140303").get(0);
						PartidaAutomatica partidaAutomatica =  new PartidaAutomatica();
						partidaAutomatica.crearPartidaAutomaticaCC(cuenta.getCueId().toString(), retencion.getRxpMonto(), "A", desembolsoPrestamoForm.getUsuarioConectado().getNombreUsuario(), "Otras retenciones",request);
					}
					
	////////////////ALMACENO EN LA BASE TODO EL DESEMBOLSO
					txCas.commit();
					txPre.commit();
					txDesc.commit();
					txTran.commit();
					exito.add(preId);
				}catch (Exception e) {
					txCas.rollback();
					txPre.rollback();
					txDesc.rollback();
					txTran.rollback();
					e.printStackTrace();
				}

			}
		}
		
		cuentaAsociadoDAO.getSession().flush();
		cuentaAsociadoDAO.getSession().clear();
		
		prestamoDAO.getSession().flush();
		prestamoDAO.getSession().clear();
		
		descPrestDAO.getSession().flush();
		descPrestDAO.getSession().clear();		
		
		request.setAttribute(Constantes.ACCION_KEY, "/desembolsoPrestamo");
		
		request.setAttribute("errores", errores);
		request.getSession().setAttribute("exito", exito);		
		return mapping.findForward("liqPre");
	} 
	
	public boolean validarDesembolso(long cuenta,HttpServletRequest request) {
			boolean error = false;
			CtaCasCuentaAsociadoDAO casDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
			CtaCasCuentaAsociado cas = casDAO.findById(cuenta);
			CtaPrePrestamoDAO prestamoDAO = new CtaPrePrestamoDAO(getSessionHibernate(request));//Obteniendo el prestamo solicitado
			CtaPrePrestamo prestamo = prestamoDAO.findById(cas.getCtaPrePrestamo().getPreId());
			
			//Descontando las aportaciones
			Double aportaciones = 0.00;
			aportaciones = prestamo.getPreAportaciones();
			if(aportaciones>0){
				CtaCasCuentaAsociado cuentaAportacion = obtenerCuentaDeAportacion(cas.getCtaAscAsociado().getAscId(),request);
				if(cuentaAportacion==null){
					//COLOCAR ERROR
					error = true;
					return error;
				}
			}
			
			//Descontando las otras deducciones y el iva
			Double otrasDeducciones = 0.00,iva=0.00;
			if(prestamo.getPreOtrasDeducciones()!= null){
				otrasDeducciones = prestamo.getPreOtrasDeducciones();
				iva = prestamo.getPreIvaDeducciones();
			}
			
			//Descontando las otras retenciones
			Double otrasRetenciones =0.00;		
			CtaRxpRetencionPrestamoDAO retencionDAO = new CtaRxpRetencionPrestamoDAO(getSessionHibernate(request));		
			List<CtaRxpRetencionPrestamo> retenciones = retencionDAO.findByProperty("ctaPrePrestamo.preId",prestamo.getPreId());
			Iterator iRet = retenciones.iterator();
			
			while(iRet.hasNext()){
				CtaRxpRetencionPrestamo retencion = (CtaRxpRetencionPrestamo) iRet.next();
				otrasRetenciones += retencion.getRxpMonto();
			}
			
			//-------------------------------DESCUENTOS APLICADOS-------------------------------------------
			
			//--------Obteniendo los descuentos asignados a los PRESTAMOS del asociado----------------------
			
			CtaDxpDescuentosPrestamoDAO descPrestDAO = new CtaDxpDescuentosPrestamoDAO(getSessionHibernate(request));
			List listaDescPrest = (List) descPrestDAO.findByPreIdAndTipoCuenta(prestamo.getPreId(), "C");
			Iterator iDesc = listaDescPrest.iterator();
			
			//Obteniendo los prestamos activos que posee el asociado
			Double descPrest=0.00;
			List<CtaCasCuentaAsociado> listaPrestamos = (List) casDAO.findByAscAndTipoCuenta2(cas.getCtaAscAsociado().getAscId(),"C");
				
			while(iDesc.hasNext()){
				CtaDxpDescuentosPrestamo desc = (CtaDxpDescuentosPrestamo) iDesc.next();
				Iterator iPrest = listaPrestamos.iterator();
				boolean encontrado = false;
				while(iPrest.hasNext()){
					CtaCasCuentaAsociado cuentaPre = (CtaCasCuentaAsociado) iPrest.next();
					CtaPrePrestamo prest = cuentaPre.getCtaPrePrestamo();
					if(desc.getCtaPrePrestamoByPreId2().getPreId()==prest.getPreId()){
						encontrado=true;
						//Calcular saldo con los intereses pendientes
						IntereseYMora iYm = new IntereseYMora();
						CtaMxpMovimientoPrestamoDAO mxpDao = new CtaMxpMovimientoPrestamoDAO(getSessionHibernate(request));
						CtaMxpMovimientoPrestamo mxpAnt = mxpDao.findUltimoMovimiento(cuentaPre.getCtaPrePrestamo().getPreId());
						if(mxpAnt == null || mxpAnt.getMxpId() == null){
							mxpAnt = new CtaMxpMovimientoPrestamo();
						}
						iYm = iYm.actualizaInteres(mxpAnt, cuentaPre.getCtaPrePrestamo(), cuentaPre, new Date(),request);
						Double saldoConInteres = cuentaPre.getCtaPrePrestamo().getPreSaldoActualT() + iYm.getAcumulado() + iYm.getPendiente();
						
						DecimalFormat df = new DecimalFormat("0.00");
						Double saldoFormateado = new Double(df.format(saldoConInteres));
												
						if(desc.getDxpMonto()==null){//Entonces le descontamos todo el saldo del prestamo						
							descPrest+=saldoConInteres;
						}else{
							Double dxpMonto = new Double(df.format(desc.getDxpMonto()));
							if(saldoFormateado<dxpMonto){
								//COLOCAR ERROR
								error = true;
								return error;
							}
							descPrest+=desc.getDxpMonto();
						}
					}
				}
				if(!encontrado){//Como no fue encontrado el descuento hay que eliminarlo
					descPrestDAO.delete(desc);
				}
			}
			
			//--------Obteniendo los descuentos asignados a los SEGUROS del asociado-------------------------
			
			List listaDescSeg = (List) descPrestDAO.findByPreIdAndTipoCuenta(prestamo.getPreId(), "D");
			Iterator iDescS = listaDescSeg.iterator();
			
			//Para obtener las cuentas de seguro activas del asociado
			Double descSeg=0.00;
			List listaSeguros = (List) casDAO.findByAscAndTipoCuenta2(cas.getCtaAscAsociado().getAscId(),"D");		
			
			while(iDescS.hasNext()){
				CtaDxpDescuentosPrestamo desc = (CtaDxpDescuentosPrestamo) iDescS.next();
				Iterator iSeg = listaSeguros.iterator();
				boolean encontrado = false;
				while(iSeg.hasNext()){
					CtaCasCuentaAsociado cuentaSeg = (CtaCasCuentaAsociado) iSeg.next();
					CtaSegSeguros seg = cuentaSeg.getCtaSegSeguros();
					if(desc.getCtaSegSeguros().getSegId()==seg.getSegId()){
						encontrado=true;
						if(desc.getDxpMonto()==null){//Entonces le descontamos toda la deuda del seguro
							descSeg+=seg.getSegSaldoActual();
						}else{
							if(seg.getSegSaldoActual()<desc.getDxpMonto()){
								//COLOCAR ERROR
								error=true;
								return error;
							}
							descSeg+=desc.getDxpMonto();
						}
					}
				}
				if(!encontrado){//Como no fue encontrado el descuento hay que eliminarlo
					descPrestDAO.delete(desc);
				}
			}
			
			//-------Obteniendo los abonos asignados a los AHORROS del asociado------------------------------
			
			List listaDescAho = (List) descPrestDAO.findByPreIdAndTipoCuenta(prestamo.getPreId(), "B");		
			Iterator iDescA = listaDescAho.iterator();
			
			//Para obtener las cuentas de ahorro activas del asociado
			Double descAho=0.00;
			List listaAhorros = (List) casDAO.findByAscAndTipoCuenta2(cas.getCtaAscAsociado().getAscId(),"B");		
		
			while(iDescA.hasNext()){
				CtaDxpDescuentosPrestamo desc = (CtaDxpDescuentosPrestamo) iDescA.next();
				Iterator iAho = listaAhorros.iterator();
				boolean encontrado = false;
				while(iAho.hasNext()){
					CtaCasCuentaAsociado cuentaAho = (CtaCasCuentaAsociado) iAho.next();
					CtaCahCuentaAhorro aho = cuentaAho.getCtaCahCuentaAhorro();
					if(desc.getCtaCahCuentaAhorro().getCahId()==aho.getCahId()){
						encontrado=true;
						descAho+=desc.getDxpMonto();
					}
				}
				if(!encontrado){//Como no fue encontrado el descuento hay que eliminarlo
					descPrestDAO.delete(desc);
				}
			}
		
			//Verificando que el prestamo este refinanciando otro		
			Double refinanciando = 0.0;
			if(cas.getCasRefinanciado() != null){
				CtaCasCuentaAsociado casRef = casDAO.findById(cas.getCasRefinanciado());
				IntereseYMora iYm = new IntereseYMora();
				CtaMxpMovimientoPrestamoDAO mxpDao = new CtaMxpMovimientoPrestamoDAO(getSessionHibernate(request));
				CtaMxpMovimientoPrestamo mxp = mxpDao.findUltimoMovimiento(casRef.getCtaPrePrestamo().getPreId());
				if(mxp == null || mxp.getMxpId() == null){
					mxp = new CtaMxpMovimientoPrestamo();
				}
				iYm = iYm.actualizaInteres(mxp, casRef.getCtaPrePrestamo(), casRef, new Date(),request);
				Double ref = casRef.getCtaPrePrestamo().getPreSaldoActualT() + iYm.getAcumulado() + iYm.getPendiente();
				
				DecimalFormat df = new DecimalFormat("0.00");
				refinanciando = new Double(df.format(ref));
			}
			//Si hubieron delete de descuentos hago commit
			//tx.commit();
			//Obteniendo el liquido a recibir
			Double monto = 0.00;
			monto = prestamo.getPreMontoSolicitado() 
					- refinanciando - aportaciones 
					- otrasDeducciones - iva - otrasRetenciones 
					- descPrest - descSeg - descAho;
			
			//Actualizo el liquido a recibir del prestamo por si se encontraron descuentos registrados
			//que ya no se pueden asignar porque las cuentas fueron cerradas
			Transaction tx2 = prestamoDAO.getSession().beginTransaction();
			DecimalFormat df = new DecimalFormat("0.00");
			Double montoFormateado = new Double(df.format(monto));
			prestamo.setPreLiquidoARecibir(montoFormateado);
			prestamoDAO.merge(prestamo);
			tx2.commit();

			if(montoFormateado<0){
				//COLOCAR ERROR
				error=true;
				return error;
			}else{
				//REVISO SI TIENE CUENTA BANCARIA
				if(montoFormateado>0 && prestamo.getCtaCbaCuentaBancaria()==null){
					//COLOCAR ERROR
					error=true;
					return error;
				}
			}
		return error;
	}
	
	private boolean encuentraPosicion(int[] posiciones, Integer benId) {
		for(int i=0; i<posiciones.length;i++){
			if(posiciones[i] == benId){
				return true;
			}
		}
		return false;
	}
	
	public ActionForward finalizar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		request.getSession().removeAttribute("exito");
		return lista(mapping, form, request, response);
	}
	
	public ActionForward generarReporte(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		DesembolsoPrestamoForm desembolsoPrestamoForm = (DesembolsoPrestamoForm) request.getSession().getAttribute("desembolsoPrestamoForm");
		
		CtaDxpDescuentosPrestamoDAO descDAO = new CtaDxpDescuentosPrestamoDAO(getSessionHibernate(request));
		Transaction tx = descDAO.getSession().beginTransaction();
		ServletContext servletContext = getServlet().getServletContext();
		String pathReportes = servletContext
				.getRealPath("/reportesOtros/facturacion/liquidacion_prestamo/liquidacion_prestamo.jasper");
		
		String pathSubReportes = servletContext
		.getRealPath("/reportesOtros/facturacion/liquidacion_prestamo");
		
		String carpetaReportes = servletContext.getRealPath("/");
		String carpetaOriginal = carpetaReportes + "/liqPrest/";

		// Creamos la carpeta temporal
		carpetaReportes = carpetaReportes + "/repPrest/"
				+ ((new SimpleDateFormat("yyyyMMddHHmmss")).format(new Date()))
				+ "/";
		File file = new File(carpetaReportes);
		file.mkdirs();
		
		ArrayList<String> exito = (ArrayList<String>) request.getSession().getAttribute("exito");
		
		String jdbcDriver = "com.mysql.jdbc.Driver";
		try {
			Class.forName(jdbcDriver);
		} catch (ClassNotFoundException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		String url = HibernateSessionFactory.getConfiguration().getProperty("connection.url");
		String user = HibernateSessionFactory.getConfiguration().getProperty("connection.username");
		String pass = HibernateSessionFactory.getConfiguration().getProperty("connection.password");
		
		Connection con=null;
		try {
			con = DriverManager.getConnection(url, user, pass);
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

		
		
		for(int i=0; i<exito.size();i++){
			String preId = (String) exito.get(i);
			//System.out.println("preId="+preId);
			ReportFile rep = new ReportFile();
			rep.setPathJasper(pathReportes);
			
			rep.addParameter("SUBREPORT_DIR", pathSubReportes);
			rep.addParameter("PRE_ID",preId);

			try {
				ExportReport export = new ExportReport();
				export.setReportFile(rep);
				tx.commit();
				descDAO.getSession().flush();
				descDAO.getSession().clear();
//				System.out.println("Waiting for the database to flush....");
//				Thread.sleep(1000);
//				System.out.print(" Done!");
				
								
				export.exportReportPDF(carpetaReportes
							+ "liquidacion_prestamo_"
							+ preId + ".pdf", con);

			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
		// Comprimimos el archivo
		ZipFile zip = new ZipFile();
		File fileZip = new File(carpetaOriginal);
		if (!fileZip.exists()) {
			fileZip.mkdirs();
		}
		try {
			String liqPrest = carpetaOriginal
					+ "";
			String fileName = ((new SimpleDateFormat("yyyyMMddHHmmss"))
					.format(new Date())) + ".zip";
			File dirPrest = new File(liqPrest);
			if(!dirPrest.exists()) {
				dirPrest.mkdirs();
			}
			dirPrest = new File(liqPrest+fileName);
			zip.zip(liqPrest+fileName,carpetaReportes);
			zip.deleteDir(carpetaReportes);
			
			enviarFileResponse(response, fileName, dirPrest);
		} catch (FileNotFoundException e) {
			log.error("", e);
		} catch (IOException e) {
			log.error("", e);
		}	

		
		return lista(mapping, form, request, response);
	}
	
	public void enviarFileResponse(HttpServletResponse response,
			String fileName, File archivo) throws FileNotFoundException,
			IOException {
		//Cambiamos el response para que se puedan bajar los archivos
		response.setContentType("application/octet-stream");
		response.setHeader("content-Disposition", "attachment;filename="+fileName);
		response.setBufferSize((int)archivo.length());
		// Obtenemos el response para poder enviar el archivo
		FileInputStream stream = new FileInputStream(archivo);
		PrintWriter out = response.getWriter();
		int n = -1;
		while ((n = stream.read()) != -1) {
			out.write(n);
		}
		out.flush();
		out.close();
	}
	
	
	private void enviarTransaccionAContabilidad(CtaTxaTransaccionxcuentaAsociado txa,
			String nombreUsuario, String tipoCuenta, CtaCasCuentaAsociado cas, 
			Double interes, CtaChkChequePrestamo chequePrestamo,HttpServletRequest request) {
		Integer tc = 0;
		Integer clasificacion = -1;
		Integer relacionInteres = 0;
		if(tipoCuenta.equals("A")){
			tc = 1;
			clasificacion = 0;
			relacionInteres = 0;
		}
		if(tipoCuenta.equals("B")){
			tc = 2;
			clasificacion = cas.getCtaCahCuentaAhorro().getCtaTahTipoAhorro().getTahId();
			relacionInteres = 0;
		}
		if(tipoCuenta.equals("C")){
			tc = 3;
			if(cas.getCtaPrePrestamo().getCtaTprTipoPrestamo() == null || cas.getCtaPrePrestamo().getCtaTprTipoPrestamo().getTprId()==null){
				clasificacion = 0;
			}else{
				clasificacion = cas.getCtaPrePrestamo().getCtaTprTipoPrestamo().getCtaLprLineaPrestamo().getLprId();
			}
		}
		if(tipoCuenta.equals("D")){
			tc = 4;
			clasificacion = cas.getCtaSegSeguros().getCtaTisTipoSeguro().getTisId();			
		}
		Double monto = txa.getTxaMonto() - interes;
		if(monto > 0){
			String parametros ="1;";
			parametros += tc.toString() + ";";
			parametros += clasificacion.toString() + ";";
			parametros += txa.getCtaTtrTipoTransaccion().getTtrId().toString() + ";";		
			parametros += relacionInteres.toString();
			PartidaAutomatica partidaAutomatica =  new PartidaAutomatica();
			if(chequePrestamo != null && chequePrestamo.getChkId()!=null){
				partidaAutomatica.crearPartidaAutomatica(
						parametros+";-1",
						txa.getTxaMonto(),
						nombreUsuario,1,0,chequePrestamo,0,request);
			}else{
				partidaAutomatica.crearPartidaAutomatica(
						parametros+";-1",
						monto,
						nombreUsuario,1,null,null,null,request);
			}
		}
		if(interes > 0){
			relacionInteres = 1;
			String parametros2 ="1;";
			parametros2 += tc.toString() + ";";
			parametros2 += clasificacion.toString() + ";";
			parametros2 += txa.getCtaTtrTipoTransaccion().getTtrId().toString() + ";";		
			parametros2 += relacionInteres.toString();
			PartidaAutomatica partidaAutomatica =  new PartidaAutomatica();
			partidaAutomatica.crearPartidaAutomatica(
					parametros2+";-1",
					interes,
					nombreUsuario,1,null,null,null,request);
		}
	}

	
	public ActionForward redirectInvalidData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		ActionErrors errors = (ActionErrors)request.getSession().getAttribute(Constantes.ERRORS);
		saveMessages(request, errors);
		return lista(mapping, form, request, response);
	}

	
	public void mensajes(String msg, HttpServletRequest request){
		ActionErrors errors = new ActionErrors();
		errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(msg));
		saveMessages(request, errors);
	}
	
	
	public ActionForward salvar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		SegurosForm segurosForm = (SegurosForm)form;
		CtaSegSegurosDAO segurosDAO = new CtaSegSegurosDAO(getSessionHibernate(request));
		
		
		if(segurosForm.getPosiciones().length > 0){
			if(segurosForm.getCtaTisTipoSeguro().getTisId() != 8){
				Double porcTotal = 0.0;
				for(int i=0;i < segurosForm.getValores().length;i++){
					Double object = segurosForm.getValores()[i];
					porcTotal += object;
				}
				if(porcTotal != 100.0){
					mensajes("error.seguros.porcentajeEquivocado", request);
					return lista(mapping, segurosForm, request, response);
				}
			}
		}else{
			mensajes("error.seguros.beneficiarios", request);
			return lista(mapping, segurosForm, request, response);
		}
		
		CtaSegSeguros seguros = segurosDAO.findById(segurosForm.getSegId());
		
		Transaction tx = segurosDAO.getSession().beginTransaction();
		try{
			CtaTisTipoSeguroDAO tipoSeguroDAO = new CtaTisTipoSeguroDAO(getSessionHibernate(request));
			
			CtrEstEstadoDAO estadoDAO = new CtrEstEstadoDAO(getSessionHibernate(request));
			if(segurosForm.getNoBasico()){
				seguros.setSegMonto(segurosForm.getSegMonto2());
			}
			seguros.setSegCarnet(segurosForm.getSegCarnet());
			seguros.setSegCertificado(segurosForm.getSegCertificado());
			
			segurosForm.getSegurosH().setCtaTinTasaInteres(null);
			segurosDAO.merge(seguros);
		}catch(Exception e){
			tx.rollback();
			e.printStackTrace();
		}finally{
			tx.commit();
			segurosDAO.getSession().flush();
			segurosDAO.getSession().clear();
			
			CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
			CtaAscAsociado asociado = asociadoDAO.findById(segurosForm.getAscId());
			
			CtaCasCuentaAsociadoDAO cuentaAsociadoDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
			CtaCasCuentaAsociado cuentaAsociado = cuentaAsociadoDAO.findbySegId(seguros.getSegId());
			
			CtaBenBeneficiariosDAO beneficiariosDAO = new CtaBenBeneficiariosDAO(getSessionHibernate(request));
			List lstBen = beneficiariosDAO.findByProperty("ctaAscAsociado.ascId", segurosForm.getAscId());
			
			CtaBxcBeneficiariosCuentaDAO beneficiariosCuentaDAO = new CtaBxcBeneficiariosCuentaDAO(getSessionHibernate(request));
			
			int pos = 0;
			for (Iterator iterator = lstBen.iterator(); iterator.hasNext();) {
				CtaBenBeneficiarios beneficiarios = (CtaBenBeneficiarios) iterator.next();
				if(encuentraPosicion(segurosForm.getPosiciones(),beneficiarios.getBenId())){
					CtaBxcBeneficiariosCuenta beneficiariosCuenta = new CtaBxcBeneficiariosCuenta();
					if(segurosForm.getCtaTisTipoSeguro().getTisId()!=8){
						Float porcent = segurosForm.getValores()[pos].floatValue();
						beneficiariosCuenta.setBxcPorcentaje(porcent);
					}else{
						float porcent = 0;
						beneficiariosCuenta.setBxcPorcentaje(porcent);
					}
					beneficiariosCuenta.setCtaBenBeneficiarios(beneficiarios);
					beneficiariosCuenta.setCtaCasCuentaAsociado(cuentaAsociado);
					
					int idBenxCuenta = beneficiariosCuentaDAO.findByCuentaYBeneficiario(beneficiariosCuenta);
					if(idBenxCuenta == -1){
						beneficiariosCuentaDAO.save(beneficiariosCuenta);
					}else{
						beneficiariosCuenta.setBxcId(idBenxCuenta);
						beneficiariosCuentaDAO.merge(beneficiariosCuenta);
					}
					
					tx.commit();
				}
				pos++;
			}
		}
		return lista(mapping, form, request, response);
	}
	
	
	public ActionForward cargarTipoPrestamo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		DesembolsoPrestamoForm desembolsoPrestamoForm = (DesembolsoPrestamoForm)form;
		
		CtaTprTipoPrestamoDAO tipoPrestamoDAO = new CtaTprTipoPrestamoDAO(getSessionHibernate(request));
		List lstTipoPre = tipoPrestamoDAO.findByLinea(desembolsoPrestamoForm.getLinea());
		
		try{
			String texto = construirSelectTipoPrestamo(lstTipoPre);
			response.getWriter().write(texto);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (RuntimeException e) {
			log.error("Error runtime", e);
		} catch (IOException e) {
			log.error(e);
		}
		return null;
	}
	
	
	private String construirSelectTipoPrestamo(List lstTipoPre) {
		HtmlBuilder htmlBuilder = new HtmlBuilder();
		htmlBuilder.select().name("tipoPrestamoId").value("${form.tipoPrestamoId}").styleClass("obligatorio").id("tipoPrestamoIdId").close();
		htmlBuilder.option().value("-1").close().append("...").optionEnd();
		for (Iterator iterator = lstTipoPre.iterator(); iterator.hasNext();) {
			CtaTprTipoPrestamo tipoPrestamo = (CtaTprTipoPrestamo) iterator.next();
			htmlBuilder.option().value(""+tipoPrestamo.getTprId()).close().append(tipoPrestamo.getTprNombre()).optionEnd();
		}
		htmlBuilder.selectEnd();
		return htmlBuilder.toString();
	}
	
	
	public ActionForward desembolsarComision(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		DesembolsoPrestamoForm desembolsoPrestamoForm = (DesembolsoPrestamoForm)form;
		
		/*CtaCasCuentaAsociadoDAO cuentaAsociadoDAO = new CtaCasCuentaAsociadoDAO();
		CtrEstEstadoDAO estadoDAO = new CtrEstEstadoDAO();
		CtaPrePrestamoDAO prestamoDAO = new CtaPrePrestamoDAO();
		CtaTxaTransaccionxcuentaAsociadoDAO txaDAO = new CtaTxaTransaccionxcuentaAsociadoDAO();
		CtaMxpMovimientoPrestamoDAO movimientoPrestamoDAO = new CtaMxpMovimientoPrestamoDAO();
		CtaChkChequePrestamoDAO chequePrestamoDAO = new CtaChkChequePrestamoDAO();
		CtaTtrTipoTransaccionDAO tipoTransaccionDAO = new CtaTtrTipoTransaccionDAO();
		
		//cargo por desembolso al asociado
		CtaTtrTipoTransaccion tipoTransaccion = tipoTransaccionDAO.findById(20);
		
		//cargo por lo se va a los cheques
		CtaTtrTipoTransaccion tipoTransaccion2 = tipoTransaccionDAO.findById(7);
		
		//Abono a Cetia por cobro de comision de manejo del prestamo
		CtaTtrTipoTransaccion tipoTransaccion3 = tipoTransaccionDAO.findById(9);
		
		//peticion de transaccion electronica
		CtaTtrTipoTransaccion tipoTransaccion4 = tipoTransaccionDAO.findById(26);
		
		Transaction tx = cuentaAsociadoDAO.getSession().beginTransaction();
		
		if(desembolsoPrestamoForm.getPosiciones() == null || desembolsoPrestamoForm.getPosiciones().length < 1){
			mensajes("error.desembolso.escoger", request);
			return lista(mapping, desembolsoPrestamoForm, request, response);
		}
		Integer[] listaSelected = desembolsoPrestamoForm.getPosiciones();
		for (int i = 0; i < listaSelected.length; i++) {
			CtaCasCuentaAsociado cuentaAsociado = cuentaAsociadoDAO.findById((long) listaSelected[i]);
			cuentaAsociado.setCtaPxtPersonaExterna(null);
			cuentaAsociadoDAO.merge(cuentaAsociado);
			
			//monto a desembolsar al asociado
			Double montoDesembolso = ChequePrestamoAction.montoDesembolso(cuentaAsociado.getCasCuenta());
			
			CtaTxaTransaccionxcuentaAsociado txa = new CtaTxaTransaccionxcuentaAsociado();
			txa.setCtaCasCuentaAsociado(cuentaAsociado);
			txa.setTxaFecha(new Date());
			txa.setTxaComprobante(txaDAO.nextComprobante());
			CtaPrePrestamo prestamo = prestamoDAO.findById(cuentaAsociado.getCtaPrePrestamo().getPreId());
			CtaTprTipoPrestamoDAO tipoPrestamoDAO = new CtaTprTipoPrestamoDAO();
			CtaTprTipoPrestamo tipoPrestamo = tipoPrestamoDAO.findById(prestamo.getCtaTprTipoPrestamo().getTprId());
			CtaLprLineaPrestamoDAO lineaPrestamoDAO = new CtaLprLineaPrestamoDAO();
			CtaLprLineaPrestamo lineaPrestamo = lineaPrestamoDAO.findById(tipoPrestamo.getCtaLprLineaPrestamo().getLprId());
			Double totalComision = prestamo.getPreMontoSolicitado() * (lineaPrestamo.getLprComision()/100);
			montoDesembolso = montoDesembolso - totalComision;
			txa.setTxaMonto(prestamo.getPreMontoSolicitado() * ((100 - lineaPrestamo.getLprComision())/100));
			//txa.setTxaMonto(prestamo.getPreMontoSolicitado());
			//txa.setCtaTtrTipoTransaccion(tipoTransaccion);
			txa.setAudFechaCreacion(new Date());
			txa.setAudFechaModificacion(new Date());
			txa.setAudUsuarioCreacion(desembolsoPrestamoForm.getUsuarioConectado().getNombreUsuario());
			txa.setAudUsuarioModificacion(desembolsoPrestamoForm.getUsuarioConectado().getNombreUsuario());
			//txaDAO.save(txa);
			//tx.commit();
			
			CtaTxaTransaccionxcuentaAsociado txa3 = new CtaTxaTransaccionxcuentaAsociado();
			txa3.setCtaCasCuentaAsociado(cuentaAsociado);
			txa3.setTxaFecha(new Date());
			txa3.setTxaComprobante(txaDAO.nextComprobante());
			txa3.setTxaMonto(prestamo.getPreMontoSolicitado() * (lineaPrestamo.getLprComision()/100));
			txa3.setCtaTtrTipoTransaccion(tipoTransaccion3);
			txa3.setAudFechaCreacion(new Date());
			txa3.setAudFechaModificacion(new Date());
			txa3.setAudUsuarioCreacion(desembolsoPrestamoForm.getUsuarioConectado().getNombreUsuario());
			txa3.setAudUsuarioModificacion(desembolsoPrestamoForm.getUsuarioConectado().getNombreUsuario());
			//txaDAO.save(txa3);
			//Transaction tx2 = txaDAO.getSession().beginTransaction();
			//tx2.commit();
			//enviarTransaccionAContabilidad(txa3, desembolsoPrestamoForm.getUsuarioConectado().getNombreUsuario(), "C", cuentaAsociado, 0.0, null);
			
			//Obteniendo la cuenta a la que se va el desembolso
			if(prestamo.getCasCuenta() != null){
				CtaCasCuentaAsociado casDesembolso = cuentaAsociadoDAO.findById(prestamo.getCasCuenta());
				if(casDesembolso.getCtaCbaCuentaBancaria() != null &&
						casDesembolso.getCtaCbaCuentaBancaria().getCbaId() != null){
					
					//finalizar transaccion
					txa.setCtaTtrTipoTransaccion(tipoTransaccion4);
					txaDAO.save(txa);
					tx.commit();
					
					txaDAO.save(txa3);
					Transaction tx2 = txaDAO.getSession().beginTransaction();
					tx2.commit();
					enviarTransaccionAContabilidad(txa3, desembolsoPrestamoForm.getUsuarioConectado().getNombreUsuario(), "C", cuentaAsociado, 0.0, null);
					
					//finalizada
					
					CtaCbaCuentaBancariaDAO cbaDao = new CtaCbaCuentaBancariaDAO();
					CtaCbaCuentaBancaria cba = cbaDao.findById(casDesembolso.getCtaCbaCuentaBancaria().getCbaId());
					
					CtaStbSolTransBancDAO stbDao = new CtaStbSolTransBancDAO();
					CtaStbSolTransBanc stb = new CtaStbSolTransBanc();
					stb.setCtaCahCuentaAhorro(null);
					stb.setCtaCbaCuentaBancaria(cba);
					stb.setInvPcbProveedorCuentaBancaria(null);
					stb.setStbFechaSol(new Date());
					stb.setStbMonto(montoDesembolso);
					stb.setPreId(prestamo.getPreId());
					SecIseInicioSesionDAO sesionDAO = new SecIseInicioSesionDAO();
					//SecIseInicioSesion sesion = sesionDAO.findById(txa.getAudUsuarioCreacion());
					//Aqui se pondra quien realiza la transaccion en este caso
					stb.setStbNombreAsociado(txa.getAudUsuarioCreacion());
					stb.setStbRazon("Deposito pago Prestamo electronico");
					stb.setStbTipoAhorro(cba.getCtaTcuTipoCuenta().getTcuNombre());
					//Setear estado N de no efectuada
					stb.setStbEstado("N");
					stbDao.save(stb);
					
					//Se setea estado de espera de desembolso, id: 24
					cuentaAsociado.setCtrEstEstado(estadoDAO.findById(24));
					cuentaAsociadoDAO.merge(cuentaAsociado);
					Transaction txStb = cuentaAsociadoDAO.getSession().beginTransaction();
					txStb.commit();
					cuentaAsociadoDAO.getSession().flush();
					cuentaAsociadoDAO.getSession().clear();
					
					return lista(mapping, form, request, response);
				}else{
					
					//finalizar transaccion
					txa.setCtaTtrTipoTransaccion(tipoTransaccion);
					txaDAO.save(txa);
					tx.commit();
					
					txaDAO.save(txa3);
					Transaction tx2 = txaDAO.getSession().beginTransaction();
					tx2.commit();
					enviarTransaccionAContabilidad(txa3, desembolsoPrestamoForm.getUsuarioConectado().getNombreUsuario(), "C", cuentaAsociado, 0.0, null);
					
					//finalizada
					
					CtaCahCuentaAhorroDAO ahorroDAO = new CtaCahCuentaAhorroDAO();
					CtaCahCuentaAhorro ahorro = ahorroDAO.findById(casDesembolso.getCtaCahCuentaAhorro().getCahId());
					CtaMxaMovimientoAhorroDAO movimientoAhorroDAO = new CtaMxaMovimientoAhorroDAO();
					CtaChkChequePrestamo cheque = new CtaChkChequePrestamo();
					//Validacion para intereses, esto por los ahorros, ya que las aportaciones no tienen
					if(ahorro.getCahId().substring(0, 1).equals("B")){
						Double nuevoInteres = CuentaAsociadoAction.getTotalInteresesAhorro(ahorro.getCahId());
						ahorro.setCahInteresAcumulado(nuevoInteres);
					}
					CtaTtrTipoTransaccionDAO ttrDAO = new CtaTtrTipoTransaccionDAO();
					ahorro.setCahSaldoActual(ahorro.getCahSaldoActual() + montoDesembolso);
					ahorroDAO.merge(ahorro);
					
					CtaMxaMovimientoAhorro movimientoAhorro = new CtaMxaMovimientoAhorro();
					movimientoAhorro.setCtaCahCuentaAhorro(ahorro);
					movimientoAhorro.setCtaTxaTransaccionxcuentaAsociado(txa);
					movimientoAhorro.setMxaFecha(new Date());
					movimientoAhorro.setMxaMonto(montoDesembolso);
					movimientoAhorro.setMxaSaldo(ahorro.getCahSaldoActual());
					movimientoAhorro.setAudFechaCreacion(new Date());
					movimientoAhorro.setAudFechaModificacion(new Date());
					movimientoAhorro.setAudUsuarioCreacion(txa.getAudUsuarioCreacion());
					movimientoAhorro.setAudUsuarioModificacion(txa.getAudUsuarioCreacion());
					movimientoAhorroDAO.save(movimientoAhorro);
					Transaction tx1 = movimientoAhorroDAO.getSession().beginTransaction();
					tx1.commit();
					enviarTransaccionAContabilidad(txa, desembolsoPrestamoForm.getUsuarioConectado().getNombreUsuario(), "C", cuentaAsociado, 0.0, null);
				}
			}else{
				
				//finalizar transaccion
				txa.setCtaTtrTipoTransaccion(tipoTransaccion);
				txaDAO.save(txa);
				tx.commit();
				
				txaDAO.save(txa3);
				Transaction tx2 = txaDAO.getSession().beginTransaction();
				tx2.commit();
				enviarTransaccionAContabilidad(txa3, desembolsoPrestamoForm.getUsuarioConectado().getNombreUsuario(), "C", cuentaAsociado, 0.0, null);
				
				//finalizada
				
				CtaChkChequePrestamo chequePrestamo = new CtaChkChequePrestamo();
				CtrRckRepositorioChequesDAO rckDao = new CtrRckRepositorioChequesDAO();
				CtrRckRepositorioCheques rck = rckDao.findById(desembolsoPrestamoForm.getRckId());
				chequePrestamo.setChkCorrelativoCheque(rck.getRckCorrActual());
				CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO();
				CtaAscAsociado asociado = asociadoDAO.findById(cuentaAsociado.getCtaAscAsociado().getAscId());
				SecPerPersonaDAO personaDAO = new SecPerPersonaDAO();
				SecPerPersona persona = personaDAO.findById(asociado.getSecPerPersona().getPerId());
				chequePrestamo.setChkEmitidoA(persona.getPerPrimerNombre() + " " + persona.getPerSegundoNombre() + " " + 
						persona.getPerPrimerApellido() + " " + persona.getPerSegundoApellido());
				chequePrestamo.setChkFecha(new Date());
				SecIseInicioSesionDAO sesionDAO = new SecIseInicioSesionDAO();
				SecIseInicioSesion sesion = sesionDAO.findById(desembolsoPrestamoForm.getUsuarioConectado().getNombreUsuario());
				
				chequePrestamo.setChkLugar(sesion.getSecPerPersona().getSecSucSucursal().getSucDireccion());
				chequePrestamo.setChkMontoEmitido(montoDesembolso.floatValue());
				chequePrestamo.setChkRazon("Desembolso de Prestamo");
				chequePrestamo.setCtaPrePrestamo(prestamo);
				chequePrestamo.setCtrBanBanco(rck.getCtrCckControlCheques().getCtrBanBanco());
				chequePrestamoDAO.save(chequePrestamo);
				Transaction txCh = chequePrestamoDAO.getSession().beginTransaction();
				txCh.commit();
				
				rck.setRckCorrActual(rck.getRckCorrActual() + 1);
				if(rck.getRckCorrActual()>rck.getRckCorrFin()){
					rck.setRckEstado("I");
				}
				rckDao.merge(rck);
				txCh.commit();
				
				enviarTransaccionAContabilidad(txa, desembolsoPrestamoForm.getUsuarioConectado().getNombreUsuario(), "C", cuentaAsociado, 0.0, chequePrestamo);
			}
			if(chequePrestamoDAO.findByPrestamo(prestamo.getPreId()).size()>0){
				List cheques = chequePrestamoDAO.findByPrestamo(prestamo.getPreId());
				for (Iterator iterator = cheques.iterator(); iterator.hasNext();) {
					CtaChkChequePrestamo chequePrestamo = (CtaChkChequePrestamo) iterator.next();
					CtaTxaTransaccionxcuentaAsociado txa2 = new CtaTxaTransaccionxcuentaAsociado();
					txa2.setCtaCasCuentaAsociado(cuentaAsociado);
					txa2.setTxaFecha(new Date());
					txa2.setTxaMonto((double) chequePrestamo.getChkMontoEmitido());
					txa2.setCtaTtrTipoTransaccion(tipoTransaccion2);
					txa2.setTxaComprobante(txa.getTxaComprobante());
					txa2.setAudFechaCreacion(new Date());
					txa2.setAudFechaModificacion(new Date());
					txa2.setAudUsuarioCreacion(desembolsoPrestamoForm.getUsuarioConectado().getNombreUsuario());
					txa2.setAudUsuarioModificacion(desembolsoPrestamoForm.getUsuarioConectado().getNombreUsuario());
					txaDAO.save(txa2);
					Transaction tx4 = txaDAO.getSession().beginTransaction();
					tx4.commit();
					enviarTransaccionAContabilidad(txa2, desembolsoPrestamoForm.getUsuarioConectado().getNombreUsuario(), "C", cuentaAsociado, 0.0, chequePrestamo);
				}
			}
			
			CtaMxpMovimientoPrestamo movimientoPrestamo = new CtaMxpMovimientoPrestamo();
			movimientoPrestamo.setCtaPrePrestamo(prestamo);
			movimientoPrestamo.setCtaTxaTransaccionxcuentaAsociado(txa);
			movimientoPrestamo.setMxpFecha(new Date());
			movimientoPrestamo.setMxpInteresPendiente(0.0);
			movimientoPrestamo.setMxpInteresAcumulado(0.0);
			movimientoPrestamo.setMxpMora(0.0);
			movimientoPrestamo.setMxpSaldoActual(0.0);
			movimientoPrestamo.setAudFechaCreacion(new Date());
			movimientoPrestamo.setAudFechaModificacion(new Date());
			movimientoPrestamo.setAudUsuarioCreacion(desembolsoPrestamoForm.getUsuarioConectado().getNombreUsuario());
			movimientoPrestamo.setAudUsuarioModificacion(desembolsoPrestamoForm.getUsuarioConectado().getNombreUsuario());
			movimientoPrestamoDAO.save(movimientoPrestamo);
			
			prestamo.setPreSaldoActualT(prestamo.getPreMontoSolicitado());
			prestamo.setPrePendMov(0.0);
			prestamo.setPreMoraMov(0.0);
			prestamoDAO.merge(prestamo);
			
			//Se setea estado activo para el prestamo
			cuentaAsociado.setCtrEstEstado(estadoDAO.findById(13));
			cuentaAsociado.setCasFechaCierre(ElapsedTime.obtenerFechaMeses(new Date(), cuentaAsociado.getCtaPrePrestamo().getCtaTprTipoPrestamo().getCtaPlmPlanMeses().getPlmDuracion()));
			cuentaAsociadoDAO.merge(cuentaAsociado);
			
			Transaction tx5 = prestamoDAO.getSession().beginTransaction();
			tx5.commit();
			
		}
		
		cuentaAsociadoDAO.getSession().flush();
		cuentaAsociadoDAO.getSession().clear();
		cuentaAsociadoDAO.getSession().close();*/
		
		return lista(mapping, form, request, response);
		
	}
	
	
	public CtaCasCuentaAsociado obtenerCuentaDeAportacion(String ascId,HttpServletRequest request){
		CtaCasCuentaAsociadoDAO casDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
		CtaCasCuentaAsociado cuentaAportacion = null;
		List lcas = (List) casDAO.findByAscAndTipoCuenta(ascId,"B");
		for (Iterator iterator = lcas.iterator(); iterator.hasNext();) {
			CtaCasCuentaAsociado cuentaAsociado = (CtaCasCuentaAsociado) iterator.next();
			if(cuentaAsociado.getCtaCahCuentaAhorro().getCahId().substring(0, 1).equals("A")){
				return cuentaAsociado;
			}
		}
		return cuentaAportacion;
	}
	
	
	public ActionForward limpieza(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		DesembolsoPrestamoForm desembolsoPrestamoForm = (DesembolsoPrestamoForm)form;
		
		CtaCasCuentaAsociadoDAO cuentaAsociadoDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
		CtrEstEstadoDAO estadoDAO = new CtrEstEstadoDAO(getSessionHibernate(request));
		CtrEstEstado estado = estadoDAO.findById(15);
		List lst = cuentaAsociadoDAO.findByEstado(estado);
		
		for (Iterator iterator = lst.iterator(); iterator.hasNext();) {
			CtaCasCuentaAsociado cas = (CtaCasCuentaAsociado) iterator.next();
			CtaPrePrestamoDAO prestamoDAO = new CtaPrePrestamoDAO(getSessionHibernate(request));
			CtaPrePrestamo prestamo = prestamoDAO.findById(cas.getCtaPrePrestamo().getPreId());

			CtaFxpFiadorPrestamoDAO fxpDAO = new CtaFxpFiadorPrestamoDAO(getSessionHibernate(request));
			List listaFxp = fxpDAO.findByProperty("ctaPrePrestamo.preId", prestamo.getPreId());
			for (Iterator iterator2 = listaFxp.iterator(); iterator2.hasNext();) {
				CtaFxpFiadorPrestamo fxp = (CtaFxpFiadorPrestamo) iterator2.next();
				String pxtId = "";
				if(fxp.getCtaPxtPersonaExterna() != null){
					pxtId = fxp.getCtaPxtPersonaExterna().getPxtId();
				}
				//Elimino la union de persona externa con el prestamo
				fxpDAO.delete(fxp);
				Transaction txFxp = fxpDAO.getSession().beginTransaction();
				txFxp.commit();

				if(pxtId != null && !pxtId.equals("")){
					CtaPxtPersonaExternaDAO externaDAO = new CtaPxtPersonaExternaDAO(getSessionHibernate(request));
					CtaPxtPersonaExterna pxt = externaDAO.findById(pxtId);
					//Elimino la persona externa
					externaDAO.delete(pxt);
					Transaction txPxt = externaDAO.getSession().beginTransaction();
					txPxt.commit();
				}
			}
			
			CtaChkChequePrestamoDAO chkDao = new CtaChkChequePrestamoDAO(getSessionHibernate(request));
			List listChk = chkDao.findByPrestamo(prestamo.getPreId());
			for (Iterator iterator2 = listChk.iterator(); iterator2.hasNext();) {
				CtaChkChequePrestamo chk = (CtaChkChequePrestamo) iterator2.next();
				chkDao.delete(chk);
				Transaction txChk = chkDao.getSession().beginTransaction();
				txChk.commit();
			}
			
			CtaDexDescuentosExternosDAO dexDao = new CtaDexDescuentosExternosDAO(getSessionHibernate(request));
			List listDex = dexDao.findByProperty("ctaPrePrestamo.preId", prestamo.getPreId());
			for (Iterator iterator2 = listDex.iterator(); iterator2.hasNext();) {
				CtaDexDescuentosExternos dex = (CtaDexDescuentosExternos) iterator2.next();
				dexDao.delete(dex);
				Transaction txDex = dexDao.getSession().beginTransaction();
				txDex.commit();
			}
			
			CtaGarGarantiaDAO garDao = new CtaGarGarantiaDAO(getSessionHibernate(request));
			List listGar = garDao.findByProperty("ctaPrePrestamo.preId", prestamo.getPreId());
			for (Iterator iterator2 = listGar.iterator(); iterator2.hasNext();) {
				CtaGarGarantia gar = (CtaGarGarantia) iterator2.next();
				garDao.delete(gar);
				Transaction txGar = garDao.getSession().beginTransaction();
				txGar.commit();
			}
			
			CtaRcoReferenciasComercialesDAO rcoDao = new CtaRcoReferenciasComercialesDAO(getSessionHibernate(request));
			List listRco = rcoDao.findByProperty("ctaPrePrestamo.preId", prestamo.getPreId());
			for (Iterator iterator2 = listRco.iterator(); iterator2.hasNext();) {
				CtaRcoReferenciasComerciales rco = (CtaRcoReferenciasComerciales) iterator2.next();
				rcoDao.delete(rco);
				Transaction txRco = rcoDao.getSession().beginTransaction();
				txRco.commit();
			}
			
			CtaRpeReferenciasPersonalesDAO rpeDao = new CtaRpeReferenciasPersonalesDAO(getSessionHibernate(request));
			List listRpe = rpeDao.findByProperty("ctaPrePrestamo.preId", prestamo.getPreId());
			for (Iterator iterator2 = listRpe.iterator(); iterator2.hasNext();) {
				CtaRpeReferenciasPersonales rpe = (CtaRpeReferenciasPersonales) iterator2.next();
				rpeDao.delete(rpe);
				Transaction txRpe = rpeDao.getSession().beginTransaction();
				txRpe.commit();
			}
			
			//Elimino las notas pegadas a Cas cuenta
			CtaNotNotasDAO notasDAO = new CtaNotNotasDAO(getSessionHibernate(request));
			List listNotas = notasDAO.findbyCuenta(cas.getCasCuenta());
			for (Iterator iterator2 = listNotas.iterator(); iterator2.hasNext();) {
				CtaNotNotas notas = (CtaNotNotas) iterator2.next();
				notasDAO.delete(notas);
				Transaction txNotas = notasDAO.getSession().beginTransaction();
				txNotas.commit();
			}
			
			//Elimino la cuenta del asociado
			cuentaAsociadoDAO.delete(cas);
			Transaction tx2 = cuentaAsociadoDAO.getSession().beginTransaction();
			tx2.commit();
			
			//Elimino el prestamo
			prestamoDAO.delete(prestamo);
			Transaction tx = prestamoDAO.getSession().beginTransaction();
			tx.commit();
			
			cuentaAsociadoDAO.getSession().flush();
			cuentaAsociadoDAO.getSession().clear();
			
		}
		return lista(mapping, desembolsoPrestamoForm, request, response);
	}
	
	
	public ActionForward cargarRepositorio(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		DesembolsoPrestamoForm desembolsoForm = (DesembolsoPrestamoForm)form;
		//ChequePrestamoForm chequeForm = (ChequePrestamoForm)form;
		String texto = "";
		CtrBanBancoDAO bancoDAO = new CtrBanBancoDAO(getSessionHibernate(request));
		HtmlBuilder htmlBuilder = new HtmlBuilder();
		CtrBanBanco banco = bancoDAO.findById(desembolsoForm.getBanId());
		CtrRckRepositorioChequesDAO rckDao = new CtrRckRepositorioChequesDAO(getSessionHibernate(request));
		SecIseInicioSesionDAO sesionDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
		SecIseInicioSesion sesion = sesionDAO.findById(desembolsoForm.getUsuarioConectado().getNombreUsuario());
		List rckList = rckDao.findBySyB(banco.getBanId(), sesion.getSecPerPersona().getSecSucSucursal().getSucId());
		htmlBuilder.td(0).close();
		htmlBuilder.div().id("valoresBanco").close();
		htmlBuilder.select().name("rckId").id("rckId");
		htmlBuilder.onchange("loadCorrelativo();");
		htmlBuilder.close();
		int x = 0;
		Integer correlativo = 0;
		for (Iterator iterator = rckList.iterator(); iterator.hasNext();) {
			CtrRckRepositorioCheques rck = (CtrRckRepositorioCheques) iterator.next();
			if(x<1){
				correlativo = rck.getRckCorrActual();
				x++;
			}
			htmlBuilder.option().value(rck.getRckId().toString()).close().append(rck.getRckNombre()).optionEnd();
		}
		htmlBuilder.selectEnd();
		texto = htmlBuilder.toString();
		try{
			response.getWriter().write(texto);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (RuntimeException e) {
			log.error("Error runtime", e);
		} catch (IOException e) {
			log.error(e);
		}
		return null;
	}
	
	
	public ActionForward cargarCorrelativo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		DesembolsoPrestamoForm desembolsoForm = (DesembolsoPrestamoForm)form;
		//ChequePrestamoForm chequeForm = (ChequePrestamoForm)form;
		CtrBanBancoDAO bancoDAO = new CtrBanBancoDAO(getSessionHibernate(request));
		CtrBanBanco banco = bancoDAO.findById(desembolsoForm.getBanId());
		CtrRckRepositorioChequesDAO rckDao = new CtrRckRepositorioChequesDAO(getSessionHibernate(request));
		SecIseInicioSesionDAO sesionDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
		SecIseInicioSesion sesion = sesionDAO.findById(desembolsoForm.getUsuarioConectado().getNombreUsuario());
		if(desembolsoForm.getRckId() == null){
			List rckList = rckDao.findBySyB(banco.getBanId(), sesion.getSecPerPersona().getSecSucSucursal().getSucId());
			if(rckList.size()>0){
				CtrRckRepositorioCheques rck = (CtrRckRepositorioCheques) rckList.get(0); 
				desembolsoForm.setRckId(rck.getRckId());
			}
		}
		String texto = "";
		HtmlBuilder htmlBuilder = new HtmlBuilder();
		htmlBuilder.input().type("text").readonly().styleClass("exclude")
			.name("chkCorrelativoCheque").id("chkCorrelativoId");
		if(desembolsoForm.getRckId() == null){
			htmlBuilder.value("No hay cheques disponibles").size("25");
		}else{
			CtrRckRepositorioCheques rck = rckDao.findById(desembolsoForm.getRckId());
			htmlBuilder.value(rck.getRckCorrActual().toString()).size("15");
		}
		htmlBuilder.close();
		texto = htmlBuilder.toString();
		try{
			response.getWriter().write(texto);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (RuntimeException e) {
			log.error("Error runtime", e);
		} catch (IOException e) {
			log.error(e);
		}
		return null;
	}
	
	
	public void mensajes(String msg, HttpServletRequest request, ActionErrors errors){
		if(errors.size()<1){
			errors = new ActionErrors();
		}
		errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(msg));
		saveMessages(request, errors);
	}
	
	
	private Double pagarOrdenes(List ordeneDebe, double monto,HttpServletRequest request) {
		Double montoActualizable = monto;
		OrdOcoOrdenDeCompraDAO compraDAO = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
		Transaction tx = compraDAO.getSession().beginTransaction();
		for (Iterator iterator = ordeneDebe.iterator(); iterator.hasNext();) {
			OrdOcoOrdenDeCompra compra = (OrdOcoOrdenDeCompra) iterator.next();
			if(montoActualizable == 0.00) return 0.00;
			
			if(montoActualizable >= compra.getOcoSaldo()){
				compra.setOcoSaldo(0.00);
				compra.setOcoPagado(compra.getOcoPagado()+compra.getOcoSaldo());
				montoActualizable-=compra.getOcoSaldo();
				
				if(compra.getOcoEstado().equals("C") || compra.getOcoEstado().equals("R")){
					compra.setOcoEstado("P");
					compra.setAudFechaModificacion(new Date());
				}
				if(compra.getOcoEstado().equals("F")){
					compra.setOcoEstado("G");
					compra.setAudFechaModificacion(new Date());
				}
				if(compra.getOcoEstado().equals("D")){
					compra.setOcoEstado("S");
					compra.setAudFechaModificacion(new Date());
				}				
			}else{
				compra.setOcoSaldo(compra.getOcoSaldo()-montoActualizable);
				compra.setOcoPagado(compra.getOcoPagado()+montoActualizable);
				montoActualizable=0.00;
			}
			compraDAO.merge(compra);
			tx.commit();
			compraDAO.getSession().flush();
			compraDAO.getSession().clear();
		}
		return montoActualizable;
	}	
	
	protected Map getKeyMethodMap() {
		// TODO Auto-generated method stub
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.desembolso.lista", "lista");
		map.put("cmd.desembolso.buscar", "buscar");
		map.put("cmd.desembolso.cargarTipoPrestamo", "cargarTipoPrestamo");
		map.put("cmd.desembolso.desembolsar", "desembolsar");
		map.put("cmd.desembolso.desembolsarComision", "desembolsarComision");
		map.put("cmd.desembolso.limpieza", "limpieza");
		map.put("cmd.desembolso.cargarRepositorio", "cargarRepositorio");
		map.put("cmd.desembolso.cargarCorrelativo", "cargarCorrelativo");
		map.put("cmd.desembolso.finalizar", "finalizar");
		map.put("cmd.desembolso.generarReporte", "generarReporte");
		return map;
	}
}
