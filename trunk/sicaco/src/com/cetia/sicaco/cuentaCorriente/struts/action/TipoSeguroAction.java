/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.cuentaCorriente.struts.action;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.hibernate.Transaction;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeImpl;
import org.jmesa.limit.ExportType;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.BasicCellEditor;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.editor.DateCellEditor;
import org.jmesa.view.html.HtmlBuilder;

import com.cetia.sicaco.cuentaCorriente.struts.form.TipoSeguroForm;
import com.cetia.sicaco.hibernate.CtaPlmPlanMesesDAO;
import com.cetia.sicaco.hibernate.CtaTisTipoSeguro;
import com.cetia.sicaco.hibernate.CtaTisTipoSeguroDAO;
import com.cetia.sicaco.hibernate.CtrParParametrosDAO;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;
import com.mad.utilidades.ElapsedTime;

/** 
 * MyEclipse Struts
 * Creation date: 09-01-2008
 * 
 * XDoclet definition:
 * @struts.action path="/tipoSeguro" name="tipoSeguroForm" input="redirectInvalidData" parameter="accion" scope="request" validate="true"
 * @struts.action-forward name="lista" path="pagina-lista.cuentaCorriente.tipoSeguro"
 */
public class TipoSeguroAction extends DMLAction {

	public String TABLA_ID = "ctaTisTipoSeguro";
	private String LIST_PLAN_MES="lstPlmPlanMes";

	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		TipoSeguroForm tipoSeguroForm = (TipoSeguroForm)form;
		CtaTisTipoSeguroDAO tipoSeguroDAO = new CtaTisTipoSeguroDAO(getSessionHibernate(request));

		CtaPlmPlanMesesDAO ctaPlmPlanMesesDAO = new CtaPlmPlanMesesDAO(getSessionHibernate(request));

		List lst = tipoSeguroDAO.findAll();
		List lstPlmPlanMes = ctaPlmPlanMesesDAO.findAll();
/*
		CtaTntTipoNotaDAO tipoNotaDAO = new CtaTntTipoNotaDAO(getSessionHibernate(request));
		List lstTnt = tipoNotaDAO.findAll();
		request.setAttribute("lstTnt", lstTnt);
*/
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);

		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
			//---- exporta la tabla
			export(tableFacade);
			return null; 
		} else {
			//---- genera el html de la tabla para ser mostrada
			String html = html(tableFacade, request);
			request.setAttribute(Constantes.LISTA_KEY, html);
		}
		//----- Variables de configuracion
		request.setAttribute(LIST_PLAN_MES, lstPlmPlanMes);
		request.setAttribute("form", tipoSeguroForm);
		request.setAttribute("edit", 0);
		request.setAttribute(Constantes.ACCION_KEY, "/tipoSeguro");
		return mapping.findForward("lista");
	}

	//---- metodo que genera el html de la tabla del jmesa
	private String html(final TableFacade tableFacade, final HttpServletRequest request) {
		tableFacade.setColumnProperties("tisNombre", "tisPoliza", "tisInicioPoliza",
				"tisFinPoliza", "tisDescripcion","tisId");
		Table table = tableFacade.getTable();
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.tis.caption");

		Row row = table.getRow();
		Column nombreColumna = row.getColumn("tisNombre");
		nombreColumna.setTitleKey("tbl.tis.tisNombre");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtaTisTipoSeguro tipoSeguro = (CtaTisTipoSeguro)item;

				HtmlBuilder html = new HtmlBuilder();
				String link = tableFacade.getWebContext().getContextPath();
				link += "/cuentaCorriente/tipoSeguro.do?accion=cargarDatos&tisId=" + tipoSeguro.getTisId();
				html.a().href(link).close();
				html.append(value);
				html.aEnd();				
				return html.toString();		
			}
		});

		nombreColumna = row.getColumn("tisDescripcion");
		nombreColumna.setTitleKey("tbl.tis.tisDescripcion");

		nombreColumna = row.getColumn("tisPoliza");
		nombreColumna.setTitleKey("tbl.tis.tisPoliza");
		
		nombreColumna = row.getColumn("tisInicioPoliza");
		nombreColumna.setTitleKey("tbl.tis.tisInicioPoliza");
		nombreColumna.getCellRenderer().setCellEditor(new DateCellEditor("dd-MMM-yyyy"));

		nombreColumna = row.getColumn("tisFinPoliza");
		nombreColumna.setTitleKey("tbl.tis.tisFinPoliza");
		nombreColumna.getCellRenderer().setCellEditor(new DateCellEditor("dd-MMM-yyyy"));
		
		nombreColumna = row.getColumn("tisId");
		nombreColumna.setTitleKey("tbl.tis.acciones");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtaTisTipoSeguro tipoSeguro = (CtaTisTipoSeguro)item;

				HtmlBuilder html = new HtmlBuilder();
				value = "Eliminar";
				//String link = tableFacade.getWebContext().getContextPath();
				html.a().onclick("handlerDeleteButton("+ tipoSeguro.getTisId()+ ");").append("class=\"linkEliminar\"").title(value.toString()).id("deleteButtonId").close();
				//html.append(value);
				html.aEnd();				
				return html.toString();		
			}

		});

		return tableFacade.render();
	}

	//---- metodo que genera los exports, el formato que tendran
	private void export(final TableFacade tableFacade) {
		tableFacade.setColumnProperties("tahNombre", "ctaLahLineaAhorro.lahNombre",
				"ctaPlmPlanMeses.plmNombre","tahId");
		Table table = tableFacade.getTable();
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.tah.caption");

		Row row = table.getRow();
		Column nombreColumna = row.getColumn("tahNombre");
		nombreColumna.setTitleKey("tbl.tah.tahNombre");

		nombreColumna = row.getColumn("ctaLahLineaAhorro.lahNombre");
		nombreColumna.setTitleKey("tbl.tah.lahNombreLinea");

		nombreColumna = row.getColumn("ctaPlmPlanMeses.plmNombre");
		nombreColumna.setTitleKey("tbl.tah.plmNombreMes");

		tableFacade.render();
	}

	public ActionForward guardar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		TipoSeguroForm tipoSeguroForm = (TipoSeguroForm)form;
		CtaTisTipoSeguroDAO tipoSeguroDAO = new CtaTisTipoSeguroDAO(getSessionHibernate(request));

		Transaction tx = tipoSeguroDAO.getSession().beginTransaction();
		try{
			if(tipoSeguroDAO.findByTisNombre(tipoSeguroForm.getTipoSeguroH().getTisNombre()).isEmpty()){
				tipoSeguroForm.setCtaPlmPlanMeses(null);
				CtrParParametrosDAO parametrosDAO = new CtrParParametrosDAO(getSessionHibernate(request));
				
				tipoSeguroForm.setTisFinPoliza(
						ElapsedTime.obtenerFechaMeses(
								tipoSeguroForm.getTisInicioPoliza(),
								parametrosDAO.findById("ANHO_POLIZA").getParValorNumber().intValue()));
				/*
				CtaTntTipoNotaDAO tipoNotaDAO = new CtaTntTipoNotaDAO(getSessionHibernate(request));
				CtaTntTipoNota tipoNota = tipoNotaDAO.findById(tipoSeguroForm.getCtaTntTipoNota().getTntId());
				tipoSeguroForm.setCtaTntTipoNota(tipoNota);*/
				tipoSeguroForm.setCtaTntTipoNota(null);
				tipoSeguroForm.setTisCostoAnual(0.0);
				tipoSeguroForm.setTisMontoBasico(0.0);
				tipoSeguroDAO.save(tipoSeguroForm.getTipoSeguroH());
			}else{
				mensajes("errors.tisNombreRepetido",request);
				return lista(mapping, form, request, response);
			}
		}catch(Exception e){
			tx.rollback();
			e.printStackTrace();
		}finally{
			tx.commit();
			tipoSeguroDAO.getSession().flush();
			tipoSeguroDAO.getSession().clear();
			
		}
		TipoSeguroForm tipoSeguroForm2 = new TipoSeguroForm();
		return lista(mapping,tipoSeguroForm2,request,response);
	} 

	public ActionForward cargarDatos(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		TipoSeguroForm tipoSeguroForm = (TipoSeguroForm)form;
		CtaTisTipoSeguroDAO tipoSeguroDAO = new CtaTisTipoSeguroDAO(getSessionHibernate(request));
		tipoSeguroForm.setTipoSeguroH(tipoSeguroDAO.findById(tipoSeguroForm.getTisId()));
		/*
		CtaTntTipoNotaDAO tipoNotaDAO = new CtaTntTipoNotaDAO(getSessionHibernate(request));
		List lstTnt = tipoNotaDAO.findAll();
		request.setAttribute("lstTnt", lstTnt);
		*/
		List lst = tipoSeguroDAO.findAll();

		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);

		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
			//---- exporta la tabla
			export(tableFacade);
			return null; 
		} else {
			//---- genera el html de la tabla para ser mostrada
			String html = html(tableFacade, request);
			request.setAttribute(Constantes.LISTA_KEY, html);
		}
		//----- Variables de configuracion
		request.setAttribute("form", tipoSeguroForm);
		request.setAttribute("edit", 1);
		request.setAttribute(Constantes.ACCION_KEY, "/tipoSeguro");
		return mapping.findForward("lista");
	}


	public ActionForward redirectInvalidData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		ActionErrors errors = (ActionErrors)request.getSession().getAttribute(Constantes.ERRORS);
		saveMessages(request, errors);
		return lista(mapping, form, request, response);
	}

	public void mensajes(String msg, HttpServletRequest request){
		ActionErrors errors = new ActionErrors();
		errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(msg));
		saveMessages(request, errors);
	}
	
	public ActionForward eliminar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		TipoSeguroForm tipoSeguroForm = (TipoSeguroForm)form;
		CtaTisTipoSeguroDAO tipoSeguroDAO = new CtaTisTipoSeguroDAO(getSessionHibernate(request));

		Transaction tx = tipoSeguroDAO.getSession().beginTransaction();
		try{
			CtaTisTipoSeguro tipoSeguro = tipoSeguroDAO.findById(tipoSeguroForm.getTisId2());
			if(tipoSeguro.getCtaSegSeguroses().size() > 0){
				mensajes("errors.tis.tieneHijos",request);
				return lista(mapping, form, request, response);
			}else{
				tipoSeguroDAO.delete(tipoSeguro);
			}
		}catch(Exception e){
			tx.rollback();
			e.printStackTrace();
		}finally{
			tx.commit();
			tipoSeguroDAO.getSession().flush();
			tipoSeguroDAO.getSession().clear();
			
		}
		mensajes("msg.tis.eliminacionExitosa", request);
		TipoSeguroForm tipoSeguroForm2 = new TipoSeguroForm();
		return lista(mapping,tipoSeguroForm2,request,response);
	} 
	
	public ActionForward salvar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		TipoSeguroForm tipoSeguroForm = (TipoSeguroForm)form;
		CtaTisTipoSeguroDAO tipoSeguroDAO = new CtaTisTipoSeguroDAO(getSessionHibernate(request));
		CtaTisTipoSeguro tipoSeguro = tipoSeguroDAO.findById(tipoSeguroForm.getTisId());
		Transaction tx = tipoSeguroDAO.getSession().beginTransaction();
		try{
			if(tipoSeguroForm.getTipoSeguroH().getTisNombre().equals(tipoSeguro.getTisNombre())){
				tipoSeguroForm.setCtaPlmPlanMeses(null);
				CtrParParametrosDAO parametrosDAO = new CtrParParametrosDAO(getSessionHibernate(request));
				
				tipoSeguroForm.setTisFinPoliza(
						ElapsedTime.obtenerFechaMeses(
								tipoSeguroForm.getTisInicioPoliza(),
								parametrosDAO.findById("ANHO_POLIZA").getParValorNumber().intValue()));
				/*
				CtaTntTipoNotaDAO tipoNotaDAO = new CtaTntTipoNotaDAO(getSessionHibernate(request));
				CtaTntTipoNota tipoNota = tipoNotaDAO.findById(tipoSeguroForm.getCtaTntTipoNota().getTntId());
				tipoSeguroForm.setCtaTntTipoNota(tipoNota);*/
				tipoSeguroForm.setCtaTntTipoNota(null);
				tipoSeguroForm.setTisCostoAnual(0.0);
				tipoSeguroForm.setTisMontoBasico(0.0);
				tipoSeguroDAO.merge(tipoSeguroForm.getTipoSeguroH());
			}else{
				if(tipoSeguroDAO.findByTisNombre(tipoSeguroForm.getTipoSeguroH().getTisNombre()).isEmpty()){
					tipoSeguroForm.setCtaPlmPlanMeses(null);
					/*
					CtaTntTipoNotaDAO tipoNotaDAO = new CtaTntTipoNotaDAO(getSessionHibernate(request));
					CtaTntTipoNota tipoNota = tipoNotaDAO.findById(tipoSeguroForm.getCtaTntTipoNota().getTntId());
					tipoSeguroForm.setCtaTntTipoNota(tipoNota);*/
					tipoSeguroForm.setCtaTntTipoNota(null);
					tipoSeguroForm.setTisCostoAnual(0.0);
					tipoSeguroForm.setTisMontoBasico(0.0);
					tipoSeguroDAO.merge(tipoSeguroForm.getTipoSeguroH());
				}else{
					mensajes("errors.tisNombreRepetido",request);
					return lista(mapping, form, request, response);
				}
			}
		}catch(Exception e){
			tx.rollback();
			e.printStackTrace();
		}finally{
			tx.commit();
			tipoSeguroDAO.getSession().flush();
			tipoSeguroDAO.getSession().clear();
			
		}
		mensajes("msg.tis.modificacionExitosa",request);
		TipoSeguroForm tipoSeguroForm2 = new TipoSeguroForm();
		return lista(mapping,tipoSeguroForm2,request,response);
	} 
	
	public ActionForward cancelar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		return lista(mapping, form, request, response);
	}

	
	protected Map getKeyMethodMap() {
		// TODO Auto-generated method stub
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.tis.lista", "lista");
		map.put("cmd.tis.guardar", "guardar");
		map.put("cmd.tis.redirectInvalidData", "redirectInvalidData");
		map.put("cmd.tis.cargarDatos", "cargarDatos");
		map.put("cmd.tis.eliminar", "eliminar");
		map.put("cmd.tis.salvar", "salvar");
		map.put("cmd.tis.cancelar", "cancelar");
		return map;
	}
}