/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.cuentaCorriente.struts.action;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.hibernate.Transaction;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeImpl;
import org.jmesa.limit.ExportType;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.BasicCellEditor;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.editor.DateCellEditor;
import org.jmesa.view.html.HtmlBuilder;

import com.cetia.sicaco.cuentaCorriente.struts.form.NotaSeguroForm;
import com.cetia.sicaco.hibernate.CtaCasCuentaAsociado;
import com.cetia.sicaco.hibernate.CtaCasCuentaAsociadoDAO;
import com.cetia.sicaco.hibernate.CtaNotNotas;
import com.cetia.sicaco.hibernate.CtaNotNotasDAO;
import com.cetia.sicaco.hibernate.CtaSegSeguros;
import com.cetia.sicaco.hibernate.CtaSegSegurosDAO;
import com.cetia.sicaco.hibernate.CtaTisTipoSeguro;
import com.cetia.sicaco.hibernate.CtaTisTipoSeguroDAO;
import com.cetia.sicaco.hibernate.CtaTntTipoNota;
import com.cetia.sicaco.hibernate.CtaTntTipoNotaDAO;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;

/** 
 * MyEclipse Struts
 * Creation date: 10-02-2008
 * 
 * XDoclet definition:
 * @struts.action path="/notaSeguro" name="notaSeguroForm" input="redirectInvalidData" parameter="accion" scope="request" validate="true"
 * @struts.action-forward name="lista" path="pagina-lista.cuentaCorriente.notaSeguro"
 */
public class NotaSeguroAction extends DMLAction {

	public String TABLA_ID = "CtaNotNotas";

	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		NotaSeguroForm notaSeguroForm = (NotaSeguroForm)form;
		long casc = Long.parseLong(request.getAttribute("cuentaAsc").toString());
		notaSeguroForm.setCuentaAsc(casc);
		
		CtaSegSegurosDAO segurosDAO = new CtaSegSegurosDAO(getSessionHibernate(request));
		CtaSegSeguros seguros = segurosDAO.findByCasCuenta(casc);
		
		CtaTisTipoSeguroDAO tipoSeguroDAO = new CtaTisTipoSeguroDAO(getSessionHibernate(request));
		CtaTisTipoSeguro tipoSeguro = tipoSeguroDAO.findById(seguros.getCtaTisTipoSeguro().getTisId());
		
		CtaNotNotasDAO notasDAO = new CtaNotNotasDAO(getSessionHibernate(request));
		
		List lst = notasDAO.findbyCuenta(casc);


		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);

		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
			//---- exporta la tabla
			export(tableFacade);
			return null; 
		} else {
			//---- genera el html de la tabla para ser mostrada
			String html = html(tableFacade, request);
			request.setAttribute(Constantes.LISTA_KEY, html);
		}
		//----- Variables de configuracion
		request.setAttribute("form", notaSeguroForm);
		request.setAttribute("edit", 0);
		request.setAttribute(Constantes.ACCION_KEY, "/notaSeguro");
		return mapping.findForward("lista");
	}

	//---- metodo que genera el html de la tabla del jmesa
	private String html(final TableFacade tableFacade, final HttpServletRequest request) {
		tableFacade.setColumnProperties("notCampo", "notNota", "notFecha", "notId");
		Table table = tableFacade.getTable();
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.nseg.caption");

		Row row = table.getRow();
		Column nombreColumna = row.getColumn("notCampo");
		nombreColumna.setTitleKey("tbl.nseg.notCampo");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtaNotNotas notas = (CtaNotNotas)item;
				
				HtmlBuilder html = new HtmlBuilder();
				String link = tableFacade.getWebContext().getContextPath();
				link += "/cuentaCorriente/notaSeguro.do?accion=cargarDatos&notId=" + notas.getNotId();
				html.a().href(link).close();
				html.append(value);
				html.aEnd();				
				return html.toString();		
			}
		});

		nombreColumna = row.getColumn("notNota");
		nombreColumna.setTitleKey("tbl.nseg.notNota");

		nombreColumna = row.getColumn("notFecha");
		nombreColumna.setTitleKey("tbl.nseg.notFecha");
		nombreColumna.getCellRenderer().setCellEditor(new DateCellEditor("dd-MMM-yyyy"));

		nombreColumna = row.getColumn("notId");
		nombreColumna.setTitleKey("tbl.nseg.accion");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtaNotNotas notas = (CtaNotNotas)item;

				HtmlBuilder html = new HtmlBuilder();
				value = "eliminar";
				String link = tableFacade.getWebContext().getContextPath();
				html.a().onclick("handlerDeleteButton("+ notas.getNotId()+ ");").id("deleteButtonId").close();
				html.append(value);
				html.aEnd();				
				return html.toString();		
			}

		});

		return tableFacade.render();
	}

	//---- metodo que genera los exports, el formato que tendran
	private void export(final TableFacade tableFacade) {
		tableFacade.setColumnProperties("notCampo", "notNota", "notFecha", "notId");
		Table table = tableFacade.getTable();
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.nseg.caption");

		Row row = table.getRow();
		Column nombreColumna = row.getColumn("notCampo");
		nombreColumna.setTitleKey("tbl.nseg.notCampo");

		nombreColumna = row.getColumn("notNota");
		nombreColumna.setTitleKey("tbl.nseg.notNota");

		nombreColumna = row.getColumn("notFecha");
		nombreColumna.setTitleKey("tbl.nseg.notFecha");
		nombreColumna.getCellRenderer().setCellEditor(new DateCellEditor("dd-MMM-yyyy"));

		tableFacade.render();
	}

	public ActionForward guardar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		NotaSeguroForm notaSeguroForm = (NotaSeguroForm)form;
		CtaNotNotasDAO notasDAO = new CtaNotNotasDAO(getSessionHibernate(request));
		
		if(vacios(notaSeguroForm, request)){
			request.setAttribute("cuentaAsc", notaSeguroForm.getCuentaAsc());
			return lista(mapping, notaSeguroForm, request, response);
		}
		
		Transaction tx = notasDAO.getSession().beginTransaction();
		try{
			notaSeguroForm.setNotFecha(new Date());
			CtaCasCuentaAsociadoDAO cuentaAsociadoDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
			CtaCasCuentaAsociado cuentaAsociado = cuentaAsociadoDAO.findById(notaSeguroForm.getCuentaAsc());
			notaSeguroForm.setCasCuenta(cuentaAsociado.getCasCuenta());
			CtaTntTipoNotaDAO tipoNotaDAO = new CtaTntTipoNotaDAO(getSessionHibernate(request));
			CtaSegSegurosDAO segurosDAO = new CtaSegSegurosDAO(getSessionHibernate(request));
			CtaSegSeguros seguros = segurosDAO.findByCasCuenta(notaSeguroForm.getCuentaAsc());
			CtaTisTipoSeguroDAO tipoSeguroDAO = new CtaTisTipoSeguroDAO(getSessionHibernate(request));
			CtaTisTipoSeguro tipoSeguro = tipoSeguroDAO.findById(seguros.getCtaTisTipoSeguro().getTisId());
			CtaTntTipoNota tipoNota = tipoNotaDAO.findById(tipoSeguro.getCtaTntTipoNota().getTntId());
			notaSeguroForm.setCtaTntTipoNota(tipoNota);
			notaSeguroForm.setNotId(notasDAO.nextId());
			notasDAO.save(notaSeguroForm.getNotasH());
		}catch(Exception e){
			tx.rollback();
			e.printStackTrace();
		}finally{
			tx.commit();
			notasDAO.getSession().flush();
			notasDAO.getSession().clear();
			
		}
		request.setAttribute("cuentaAsc", notaSeguroForm.getCuentaAsc());
		return lista(mapping,notaSeguroForm,request,response);
	} 

	public ActionForward cargarDatos(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		NotaSeguroForm notaSeguroForm = (NotaSeguroForm)form;
		//long casc = Long.parseLong(request.getAttribute("cuentaAsc").toString());
		//notaSeguroForm.setCuentaAsc(casc);
		
		CtaSegSegurosDAO segurosDAO = new CtaSegSegurosDAO(getSessionHibernate(request));
		CtaSegSeguros seguros = segurosDAO.findByCasCuenta(notaSeguroForm.getCuentaAsc());
		
		CtaTisTipoSeguroDAO tipoSeguroDAO = new CtaTisTipoSeguroDAO(getSessionHibernate(request));
		CtaTisTipoSeguro tipoSeguro = tipoSeguroDAO.findById(seguros.getCtaTisTipoSeguro().getTisId());
		
		CtaNotNotasDAO notasDAO = new CtaNotNotasDAO(getSessionHibernate(request));
		CtaNotNotas notas = notasDAO.findById(notaSeguroForm.getNotId());
		notaSeguroForm.setNotasH(notas);
		
		List lst = notasDAO.findbyCuenta(notaSeguroForm.getCuentaAsc());


		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);

		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
			//---- exporta la tabla
			export(tableFacade);
			return null; 
		} else {
			//---- genera el html de la tabla para ser mostrada
			String html = html(tableFacade, request);
			request.setAttribute(Constantes.LISTA_KEY, html);
		}
		//----- Variables de configuracion
		request.setAttribute("form", notaSeguroForm);
		request.setAttribute("edit", 1);
		request.setAttribute(Constantes.ACCION_KEY, "/notaSeguro");
		return mapping.findForward("lista");
	}


	public ActionForward redirectInvalidData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		ActionErrors errors = (ActionErrors)request.getSession().getAttribute(Constantes.ERRORS);
		saveMessages(request, errors);
		return lista(mapping, form, request, response);
	}

	public void mensajes(String msg, HttpServletRequest request, ActionErrors errors){
		errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(msg));
		saveMessages(request, errors);
	}
	
	public ActionForward eliminar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		NotaSeguroForm notaSeguroForm = (NotaSeguroForm)form;
		
		CtaNotNotasDAO notasDAO = new CtaNotNotasDAO(getSessionHibernate(request));

		Transaction tx = notasDAO.getSession().beginTransaction();
		try{
			CtaNotNotas notas = notasDAO.findById(notaSeguroForm.getNotId2());
			notasDAO.delete(notas);
		}catch(Exception e){
			tx.rollback();
			e.printStackTrace();
		}finally{
			tx.commit();
			notasDAO.getSession().flush();
			notasDAO.getSession().clear();
			
		}
		ActionErrors errors = new ActionErrors();
		mensajes("msg.eliminacionExitosa", request,errors);
		notaSeguroForm.setNotNota("");
		notaSeguroForm.setNotCampo("");
		request.setAttribute("cuentaAsc", notaSeguroForm.getCuentaAsc());
		return lista(mapping,notaSeguroForm,request,response);
	} 
	
	public ActionForward salvar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		NotaSeguroForm notaSeguroForm = (NotaSeguroForm)form;
		if(vacios(notaSeguroForm, request)){
			request.setAttribute("cuentaAsc", notaSeguroForm.getCuentaAsc());
			return lista(mapping, notaSeguroForm, request, response);
		}
		CtaNotNotasDAO notasDAO = new CtaNotNotasDAO(getSessionHibernate(request));

		Transaction tx = notasDAO.getSession().beginTransaction();
		try{
			CtaNotNotas notas = notasDAO.findById(notaSeguroForm.getNotId2());
			notas.setNotCampo(notaSeguroForm.getNotCampo());
			notas.setNotNota(notaSeguroForm.getNotNota());
			notasDAO.merge(notas);
		}catch(Exception e){
			tx.rollback();
			e.printStackTrace();
		}finally{
			tx.commit();
			notasDAO.getSession().flush();
			notasDAO.getSession().clear();
			
		}
		ActionErrors errors = new ActionErrors();
		mensajes("msg.modificacionExitosa", request, errors);
		notaSeguroForm.setNotNota("");
		notaSeguroForm.setNotCampo("");
		request.setAttribute("cuentaAsc", notaSeguroForm.getCuentaAsc());
		return lista(mapping,notaSeguroForm,request,response);
	} 
	
	private boolean vacios(NotaSeguroForm notaSeguroForm, HttpServletRequest request) {
		ActionErrors errors = new ActionErrors();
		boolean b = false;
		if(notaSeguroForm.getNotCampo() == null || notaSeguroForm.getNotCampo().trim().equals("")){
			mensajes("error.nseg.notCampo", request,errors);
			b = true;
		}
		if(notaSeguroForm.getNotNota() == null || notaSeguroForm.getNotNota().trim().equals("")){
			mensajes("error.nseg.notNota", request,errors);
			b = true;
		}
		return b;
	}

	public ActionForward cancelar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		NotaSeguroForm notaSeguroForm = (NotaSeguroForm)form;
		return lista(mapping, notaSeguroForm, request, response);
	}
	
	public ActionForward regresar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		NotaSeguroForm notaSeguroForm = (NotaSeguroForm)form;
		
		CtaCasCuentaAsociadoDAO cuentaAsociadoDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
		CtaCasCuentaAsociado cuentaAsociado = cuentaAsociadoDAO.findById(notaSeguroForm.getCuentaAsc());
		
		request.setAttribute("segId", cuentaAsociado.getCtaSegSeguros().getSegId());
		request.setAttribute("ascId", cuentaAsociado.getCtaAscAsociado().getAscId());
		
		return mapping.findForward("regresar");
	}

	
	protected Map getKeyMethodMap() {
		// TODO Auto-generated method stub
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.nseg.lista", "lista");
		map.put("cmd.nseg.guardar", "guardar");
		map.put("cmd.nseg.redirectInvalidData", "redirectInvalidData");
		map.put("cmd.nseg.cargarDatos", "cargarDatos");
		map.put("cmd.nseg.eliminar", "eliminar");
		map.put("cmd.nseg.salvar", "salvar");
		map.put("cmd.nseg.cancelar", "cancelar");
		map.put("cmd.nseg.regresar", "regresar");
		return map;
	}
}