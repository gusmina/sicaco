/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.asociados.struts.action;

import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletContext;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.hibernate.Transaction;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeFactory;
import org.jmesa.facade.TableFacadeImpl;
import org.jmesa.limit.ExportType;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.BasicCellEditor;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.editor.DateCellEditor;
import org.jmesa.view.html.HtmlBuilder;

import com.cetia.sicaco.asociados.struts.form.TransaccionAsociadoForm;
import com.cetia.sicaco.cuentaCorriente.struts.action.CuentaAhorroAction;
import com.cetia.sicaco.cuentaCorriente.struts.action.CuentaAsociadoAction;
import com.cetia.sicaco.hibernate.ConCpaConceptoPartida;
import com.cetia.sicaco.hibernate.ConCueCuenta;
import com.cetia.sicaco.hibernate.ConDpaDetallePartida;
import com.cetia.sicaco.hibernate.ConPcoPartidaContable;
import com.cetia.sicaco.hibernate.CtaAscAsociado;
import com.cetia.sicaco.hibernate.CtaAscAsociadoDAO;
import com.cetia.sicaco.hibernate.CtaCahCuentaAhorro;
import com.cetia.sicaco.hibernate.CtaCahCuentaAhorroDAO;
import com.cetia.sicaco.hibernate.CtaCasCuentaAsociado;
import com.cetia.sicaco.hibernate.CtaCasCuentaAsociadoDAO;
import com.cetia.sicaco.hibernate.CtaCbaCuentaBancaria;
import com.cetia.sicaco.hibernate.CtaCbaCuentaBancariaDAO;
import com.cetia.sicaco.hibernate.CtaChkChequePrestamo;
import com.cetia.sicaco.hibernate.CtaChkChequePrestamoDAO;
import com.cetia.sicaco.hibernate.CtaFxpFiadorPrestamo;
import com.cetia.sicaco.hibernate.CtaFxpFiadorPrestamoDAO;
import com.cetia.sicaco.hibernate.CtaMxaMovimientoAhorro;
import com.cetia.sicaco.hibernate.CtaMxaMovimientoAhorroDAO;
import com.cetia.sicaco.hibernate.CtaMxpMovimientoPrestamo;
import com.cetia.sicaco.hibernate.CtaMxpMovimientoPrestamoDAO;
import com.cetia.sicaco.hibernate.CtaMxsMovimientoSeguros;
import com.cetia.sicaco.hibernate.CtaMxsMovimientoSegurosDAO;
import com.cetia.sicaco.hibernate.CtaPrePrestamo;
import com.cetia.sicaco.hibernate.CtaPrePrestamoDAO;
import com.cetia.sicaco.hibernate.CtaSegSeguros;
import com.cetia.sicaco.hibernate.CtaSegSegurosDAO;
import com.cetia.sicaco.hibernate.CtaStbSolTransBanc;
import com.cetia.sicaco.hibernate.CtaStbSolTransBancDAO;
import com.cetia.sicaco.hibernate.CtaTprTipoPrestamo;
import com.cetia.sicaco.hibernate.CtaTprTipoPrestamoDAO;
import com.cetia.sicaco.hibernate.CtaTtrTipoTransaccionDAO;
import com.cetia.sicaco.hibernate.CtaTxaTransaccionxcuentaAsociado;
import com.cetia.sicaco.hibernate.CtaTxaTransaccionxcuentaAsociadoDAO;
import com.cetia.sicaco.hibernate.CtrBanBanco;
import com.cetia.sicaco.hibernate.CtrBanBancoDAO;
import com.cetia.sicaco.hibernate.CtrEstEstadoDAO;
import com.cetia.sicaco.hibernate.CtrRckRepositorioCheques;
import com.cetia.sicaco.hibernate.CtrRckRepositorioChequesDAO;
import com.cetia.sicaco.hibernate.HibernateSessionFactory;
import com.cetia.sicaco.hibernate.OrdOcoOrdenDeCompra;
import com.cetia.sicaco.hibernate.OrdOcoOrdenDeCompraDAO;
import com.cetia.sicaco.hibernate.SecIseInicioSesion;
import com.cetia.sicaco.hibernate.SecIseInicioSesionDAO;
import com.cetia.sicaco.hibernate.SecPerPersona;
import com.cetia.sicaco.hibernate.SecPerPersonaDAO;
import com.cetia.sicaco.hibernate.SecSucSucursal;
import com.cetia.sicaco.hibernate.SecSucSucursalDAO;
import com.cetia.sicaco.procesosEspeciales.struts.form.CorreccionCapitalForm;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;
import com.cetia.sicaco.struts.PartidaAutomatica;
import com.mad.utilidades.ElapsedTime;
import com.mad.utilidades.ExportReport;
import com.mad.utilidades.Format;
import com.mad.utilidades.IntereseYMora;
import com.mad.utilidades.Redondeo;
import com.mad.utilidades.ReportFile;

/** 
 * MyEclipse Struts
 * Creation date: 08-11-2008
 * 
 * XDoclet definition:
 * @struts.action path="/transaccionAsociado" name="transaccionAsociadoForm" parameter="accion" scope="request"
 * @struts.action-forward name="lista" path="pagina-lista.asociados.transaccionAsociado"
 */
public class TransaccionAsociadoAction extends DMLAction {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	
	public static final String TABLA_ID = "ctaTxcTransaccionCuenta";
	public static final String ASC_ID = "ctaCasCuentaAsociado.ctaAscAsociado.ascId";
	public String USUARIO = "";
	public Long COMPROBANTE = null;

	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		TransaccionAsociadoForm transaccionAsociadoForm = (TransaccionAsociadoForm) form;
		if(transaccionAsociadoForm.getImprimirReporte()>0){
			if(transaccionAsociadoForm.getImprimirReporte()== 1){
				request.setAttribute("botonImprimir", 1);
			}
			if(transaccionAsociadoForm.getImprimirReporte() == 2){
				request.setAttribute("botonImprimir", 2);
			}
		}else{
			request.getSession().removeAttribute("mxpIdTrans");
			request.getSession().removeAttribute("comprobante");
		}
		
		CtaTxaTransaccionxcuentaAsociadoDAO transaccionCuentaDAO = new CtaTxaTransaccionxcuentaAsociadoDAO(getSessionHibernate(request));
		/*List lst = transaccionCuentaDAO.findByProperty(ASC_ID,transaccionAsociadoForm.getAscId());*/
		
		CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
		CtaAscAsociado asociado = asociadoDAO.findById(transaccionAsociadoForm.getAscId());
 		request.setAttribute("ctaAsociado", asociado);
 		SecPerPersonaDAO personaDAO = new SecPerPersonaDAO(getSessionHibernate(request));
 		SecPerPersona persona = personaDAO.findById(asociado.getSecPerPersona().getPerId());
 		request.setAttribute("secPersona", persona);
		//paginacion roberto
 		TableFacade tableFacade = TableFacadeFactory.createTableFacade(TABLA_ID ,request );
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		int totalRows = transaccionCuentaDAO.getTotalRowCountTransaccionxAsociado(transaccionAsociadoForm.getAscId());
		tableFacade.setTotalRows(totalRows);
		int rowStart = limit.getRowSelect().getRowStart();
		int rowEnd = limit.getRowSelect().getRowEnd();
		List<CtaTxaTransaccionxcuentaAsociado>lst = transaccionCuentaDAO.findAllTransaccionXAsociado(rowStart, rowEnd, transaccionAsociadoForm.getAscId());
		tableFacade.setItems(lst);
 		/*
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		*/
		if (limit.isExported()) {
        	//---- exporta la tabla
        //    export(tableFacade);
            return null; 
        } else {
        	String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
		request.setAttribute(Constantes.ACCION_KEY, "/transaccionAsociado");
		request.setAttribute("form", transaccionAsociadoForm);
		request.getSession().setAttribute("tmpLst", new ArrayList());
		
		request.getSession().setAttribute("listaTransacciones",null);
		
		return mapping.findForward("lista");
	}
	
	public ActionForward buscar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		TransaccionAsociadoForm transaccionAsociadoForm = (TransaccionAsociadoForm) form;
		CtaTxaTransaccionxcuentaAsociadoDAO transaccionCuentaDAO = new CtaTxaTransaccionxcuentaAsociadoDAO(getSessionHibernate(request));
		List lista = transaccionCuentaDAO.findEntreFechasParaCuenta(transaccionAsociadoForm.getCasCuenta(), transaccionAsociadoForm.getFechaInicioD(), transaccionAsociadoForm.getFechaFinD());
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lista);
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
        	//---- exporta la tabla
        //    export(tableFacade);
            return null; 
        } else {
        	String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
		request.setAttribute(Constantes.ACCION_KEY, "/transaccionAsociado");
		request.setAttribute("form", transaccionAsociadoForm);
		return mapping.findForward("lista");
	}
	
	private String html(final TableFacade tableFacade, final HttpServletRequest request) {
		tableFacade.setColumnProperties("txaComprobante","ttrId","txaMonto","txaFecha");
		Table table = tableFacade.getTable();
		
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.txcTransacciones.caption");
		
		Row row = table.getRow();
		Column nombreColumna = row.getColumn("txaComprobante");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtaTxaTransaccionxcuentaAsociado transaccionCuenta = (CtaTxaTransaccionxcuentaAsociado)item;
				String val = "";
				Long comprobante = transaccionCuenta.getTxaComprobante();
				if (comprobante == null) return "";
				if(comprobante < 0 ){
					comprobante=comprobante*-1;
					SimpleDateFormat sdf2 = new SimpleDateFormat("yyyyMMdd");
					
					Date d;
					try {
						d = sdf2.parse(comprobante.toString());
						SimpleDateFormat sdf = new SimpleDateFormat("ddMMyyyy");
						val = sdf.format(d);
					} catch (ParseException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					
					return val;
				}
				Integer numero =0;
				numero = transaccionCuenta.getCtaTtrTipoTransaccion().getTtrId();
				Integer reporte= 0; 
				if(numero == 21 || numero ==38  || numero ==22 || numero ==26 || numero == 4){ //retiros 
					reporte  = 1;
				}
				if(numero == 13 || numero ==41 || numero ==33) // abonos
					reporte =2;
				if(numero == 14 || numero ==18  || numero ==24 || numero ==28 
						|| numero == 5 || numero ==23){ //Correccion 
					reporte  = 3;
				}
				 
				
				value = "<u>"+comprobante.toString()+"</u>";
				HtmlBuilder html2 = new HtmlBuilder(); 
				html2.a().style("cursor: pointer;").onclick("imprimir('"+ comprobante.toString()+ "', '"+ reporte.toString()+"');").id("changeId").close();
				html2.append(value);
				html2.aEnd().ulEnd();
				return html2.toString();
//				return comprobante.toString();
				
			}
		});
		
		
		
		
		nombreColumna.setTitleKey("tbl.txcTransacciones.codigo");
		/*
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtaTxaTransaccionxcuentaAsociado transaccionCuenta = (CtaTxaTransaccionxcuentaAsociado)item;
				HtmlBuilder html = new HtmlBuilder();
				value = transaccionCuenta.getTxaComprobante();
				//---- Generar link para entrar a edicion
				String link = tableFacade.getWebContext().getContextPath();
				link += "/asociados/transaccionAsociado.do?&ascId="+transaccionCuenta.getTxaId()+"&accion=dml";
				html.a().href().quote().append(link).quote().close();
				html.append(value);
				html.aEnd();				
				return html.toString();	
			}
		});
		*/
		nombreColumna = row.getColumn("ttrId");
		nombreColumna.setTitleKey("tbl.txcTransacciones.tipo");
		
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtaTxaTransaccionxcuentaAsociado transaccionCuenta = (CtaTxaTransaccionxcuentaAsociado)item;
				CtaTtrTipoTransaccionDAO tipoTransaccionDAO = new CtaTtrTipoTransaccionDAO(getSessionHibernate(request));
				CtaCasCuentaAsociadoDAO casDao = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
				CtaCasCuentaAsociado cas = casDao.findById(transaccionCuenta.getCtaCasCuentaAsociado().getCasCuenta());
				String val = "";
				if(cas.getCtaCahCuentaAhorro() != null){
					if(cas.getCtaCahCuentaAhorro().getCahId().substring(0, 1).equals("A")){
						val = "Aportacion - ";
					}else{
						val = cas.getCtaCahCuentaAhorro().getCtaTahTipoAhorro().getTahNombre() + " - ";
					}
				}
				if(cas.getCtaPrePrestamo() != null){
					if(cas.getCtaPrePrestamo().getCtaTprTipoPrestamo() == null){
						val = "Credito - ";
					}else{
						CtaTprTipoPrestamoDAO tipoPrestamoDAO = new CtaTprTipoPrestamoDAO(getSessionHibernate(request));
						CtaTprTipoPrestamo tpr = tipoPrestamoDAO.findById(cas.getCtaPrePrestamo().getCtaTprTipoPrestamo().getTprId());
						val = tpr.getCtaLprLineaPrestamo().getLprNombre() + " - ";
					}
				}
				if(cas.getCtaSegSeguros() != null){
					val = cas.getCtaSegSeguros().getCtaTisTipoSeguro().getTisNombre();
				}
				val += tipoTransaccionDAO.findById(transaccionCuenta.getCtaTtrTipoTransaccion().getTtrId()).getTtrNombre();
				return val;
			}
		});
		
		nombreColumna = row.getColumn("txaMonto");
		nombreColumna.setTitleKey("tbl.txcTransacciones.monto");

		nombreColumna = row.getColumn("txaFecha");
		nombreColumna.setTitleKey("tbl.txcTransacciones.fecha");
		nombreColumna.getCellRenderer().setCellEditor(new DateCellEditor("dd-MMM-yyyy"));
		
		return tableFacade.render();
	}
	
	public ActionForward regresar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		return mapping.findForward("regresar");
	}
	
	public ActionForward cargarListaCuentasAsociado(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
			TransaccionAsociadoForm transaccionAsociadoForm = (TransaccionAsociadoForm)form;
			CtaCasCuentaAsociadoDAO cuentaAsociadoDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
			List<?> cuentas = null;
			String cuentaT = transaccionAsociadoForm.getTipoCuenta();
			try{
				cuentas = cuentaAsociadoDAO.findAllCuentasAsociado(transaccionAsociadoForm.getAscId(), cuentaT);
				// Construimos una lista para el response
				String listaResponse = contruirListaCuentas(cuentas,cuentaT);
				response.setCharacterEncoding("UTF-8");
				response.getWriter().write(listaResponse);
				response.getWriter().flush();
				response.getWriter().close();
			} catch (RuntimeException e) {
				log.error("Error runtime", e);
			} catch (IOException e) {
				log.error(e);
			}
			return null;
	}
	
	private String contruirListaCuentas(List<?> listaCuentas,String cuentaT){
		String lista = "<span style=\"font-size: 10px;color: red;font-style: italic;\">"
		+ "Debe seleccionar un tipo de cuenta</span>";
		if(listaCuentas != null && !listaCuentas.isEmpty()){
			lista ="<select name=\"casCuenta\" class=\"obligatorio\">";
			Iterator<?> it = listaCuentas.iterator();
			while(it.hasNext()){
				CtaCasCuentaAsociado casCuenta = (CtaCasCuentaAsociado) it.next();
				if(cuentaT.equals("A")){
					lista+="<option value=\""+ casCuenta.getCasCuenta() +"\">Aportaci&oacute;n - "+ casCuenta.getCtaCahCuentaAhorro().getCahId()+"</option>";
				}
				if(cuentaT.equals("B")){
					lista+="<option value=\""+ casCuenta.getCasCuenta() +"\">"+ casCuenta.getCtaCahCuentaAhorro().getCtaTahTipoAhorro().getTahNombre()  +" - "+ casCuenta.getCtaCahCuentaAhorro().getCahId()+"</option>";
				}
				if(cuentaT.equals("C")){//prestamos
					lista+="<option value=\""+ casCuenta.getCasCuenta() +"\">" + casCuenta.getCtaPrePrestamo().getCtaTprTipoPrestamo().getCtaLprLineaPrestamo().getLprNombre() +" - "+casCuenta.getCtaPrePrestamo().getPreReferencia()+"</option>";
				}
				if(cuentaT.equals("D")){
					lista+="<option value=\""+ casCuenta.getCasCuenta() +"\">"+ casCuenta.getCtaSegSeguros().getCtaTisTipoSeguro().getTisNombre() +" - "+casCuenta.getCtaSegSeguros().getSegId()+"</option>";
				}
			}
			lista+="</select>";
		}
		return lista;
	}	
	
	public ActionForward nuevaTran(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		TransaccionAsociadoForm  transaccionAsociadoForm = (TransaccionAsociadoForm)form;
		
		HashMap<Long, TransacObj> mapa = (HashMap<Long, TransacObj>)request.getSession().getAttribute("listaTransacciones");
		if(mapa == null || mapa.size()<1){
			mapa = new HashMap<Long, TransacObj>();
		}
		String listaResponse = construirListaTransacciones(mapa, request);
		request.setAttribute("listaT", listaResponse);
		transaccionAsociadoForm.setTablaT(listaResponse);

		CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
		CtaAscAsociado asociado = asociadoDAO.findById(transaccionAsociadoForm.getAscId());
 		request.setAttribute("ctaAsociado", asociado);
 		SecPerPersonaDAO personaDAO = new SecPerPersonaDAO(getSessionHibernate(request));
 		SecPerPersona persona = personaDAO.findById(asociado.getSecPerPersona().getPerId());
 		request.setAttribute("secPersona", persona);
		
		CtaTxaTransaccionxcuentaAsociadoDAO transaccionCuentaDAO = new CtaTxaTransaccionxcuentaAsociadoDAO(getSessionHibernate(request));
		List lst = transaccionCuentaDAO.findByProperty(ASC_ID,transaccionAsociadoForm.getAscId());
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
        	//---- exporta la tabla
        //    export(tableFacade);
            return null; 
        } else {
        	String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
		transaccionAsociadoForm.setTxaComprobante(transaccionCuentaDAO.nextComprobante());
		request.setAttribute(Constantes.ACCION_KEY, "/transaccionAsociado");
		transaccionAsociadoForm.setAscId2(transaccionAsociadoForm.getAscId());
		request.setAttribute("form", transaccionAsociadoForm);
		request.setAttribute("setFuente", 0);
		
		return mapping.findForward("dml");
	}
	
	public ActionForward cargarHtml(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		TransaccionAsociadoForm transaccionAsociadoForm = (TransaccionAsociadoForm)form;
		String texto = "";
		HtmlBuilder htmlBuilder = new HtmlBuilder();
		htmlBuilder.table(0).align("center").border("0").close().tr(0).close();
		if(transaccionAsociadoForm.getFuente() == 1){
			htmlBuilder.td(0).close().append("<label>Disponible</label>").tdEnd();
			htmlBuilder.td(0).close().div().id("cantDispId").close();
			htmlBuilder.input().type("text").name("cantidadDisponible").id("cantDisp").size("10").close();
			htmlBuilder.divEnd().tdEnd();
			htmlBuilder.trEnd(0).tr(0);
		}
		if(transaccionAsociadoForm.getFuente() == 2){
			CtrBanBancoDAO bancoDAO = new CtrBanBancoDAO(getSessionHibernate(request));
			List lban = bancoDAO.findAll();
			htmlBuilder.td(0).close().append("<label>Banco</label>").tdEnd();
			htmlBuilder.td(0).close().select().name("banId").id("banId").close();
			for (Iterator iterator = lban.iterator(); iterator.hasNext();) {
				CtrBanBanco banco = (CtrBanBanco) iterator.next();
				htmlBuilder.option().value(banco.getBanId().toString()).close().append(banco.getBanNombre()).optionEnd();
			}
			htmlBuilder.selectEnd();
			htmlBuilder.td(0).close().append("<label>Numero Cheque</label>").tdEnd();
			htmlBuilder.td(0).close().input().type("text").size("15")
				.name("chequeNum").id("chequeNum").close().tdEnd();
			htmlBuilder.trEnd(0).tr(0);
			htmlBuilder.td(0).close().append("<label>Disponible</label>").tdEnd();
			htmlBuilder.td(0).close().div().id("cantDispId").close();
			htmlBuilder.input().type("text").name("cantidadDisponible").id("cantDisp").size("10").close();
			htmlBuilder.divEnd().tdEnd();
			htmlBuilder.trEnd(0).tr(0);
		}
		if(transaccionAsociadoForm.getFuente() == 3){
			double disponible=0.0;
			htmlBuilder.td(0).close().append("<label>Cuenta</label>").tdEnd();
			htmlBuilder.td(0).colspan("2").close().select();
			htmlBuilder.onchange("cargarDisponible();");
			htmlBuilder.name("cuentaFuente").id("cuentaFuente").close();
			CtaCasCuentaAsociadoDAO casDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
			int c = 0;
			List lcas = (List) casDAO.findByAscAndTipoCuenta(transaccionAsociadoForm.getAscId2(),"B");
			for (Iterator iterator = lcas.iterator(); iterator.hasNext();) {
				CtaCasCuentaAsociado cuentaAsociado = (CtaCasCuentaAsociado) iterator.next();
				if(cuentaAsociado.getCtaCahCuentaAhorro().getCahId().substring(0, 1).equals("B")){
					if(cuentaAsociado.getCtrEstEstado().getEstId()==9){
						c ++;
						if(c < 2){
							CuentaAhorroAction cahAction = new CuentaAhorroAction();
							//Double penalidad = cahAction.calculoPenalidad(cuentaAsociado.getCtaCahCuentaAhorro());
							disponible = cuentaAsociado.getCtaCahCuentaAhorro().getCahSaldoActual()/* - penalidad*/;
						}
						htmlBuilder.option().value(cuentaAsociado.getCasCuenta().toString()).close();
						if(cuentaAsociado.getCtaCahCuentaAhorro().getCtaTahTipoAhorro()== null){
							htmlBuilder.append(cuentaAsociado.getCtaCahCuentaAhorro().getCahId() + " - Default");
						}else{
							htmlBuilder.append(cuentaAsociado.getCtaCahCuentaAhorro().getCahId() + " - "
									+ cuentaAsociado.getCtaCahCuentaAhorro().getCtaTahTipoAhorro().getTahNombre());
						}
						htmlBuilder.optionEnd();
					}
				}
			}
			htmlBuilder.selectEnd().tdEnd();
			htmlBuilder.td(0).close().append("<label>Disponible</label>").tdEnd();
			htmlBuilder.td(0).close().div().id("cantDispId").close();
			htmlBuilder.input().type("text").readonly().id("cantDisp").size("10").value(Format.formatDinero(disponible)).close();
			htmlBuilder.divEnd().tdEnd();
			htmlBuilder.trEnd(0).tr(0);
		}
		if(transaccionAsociadoForm.getFuente() == 4){
			CtrBanBancoDAO bancoDAO = new CtrBanBancoDAO(getSessionHibernate(request));
			List lban = bancoDAO.findAll();
			htmlBuilder.td(0).close().append("<label>Banco</label>").tdEnd();
			htmlBuilder.td(0).close().select().name("banId").id("banId").close();
			for (Iterator iterator = lban.iterator(); iterator.hasNext();) {
				CtrBanBanco banco = (CtrBanBanco) iterator.next();
				htmlBuilder.option().value(banco.getBanId().toString()).close().append(banco.getBanNombre()).optionEnd();
			}
			htmlBuilder.selectEnd().tdEnd();
			htmlBuilder.trEnd(0).tr(0);
			htmlBuilder.td(0).close().append("<label>Disponible</label>").tdEnd();
			htmlBuilder.td(0).close().div().id("cantDispId").close();
			htmlBuilder.input().type("text").name("cantidadDisponible").id("cantDisp").size("10").close();
			htmlBuilder.divEnd().tdEnd();
			htmlBuilder.trEnd(0).tr(0);
		}
		htmlBuilder.trEnd(0).tableEnd(1);
		texto = htmlBuilder.toString();
		try{
			response.setCharacterEncoding("UTF-8");
			response.getWriter().write(texto);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (RuntimeException e) {
			log.error("Error runtime", e);
		} catch (IOException e) {
			log.error(e);
		}
		return null;
	}
	
	public ActionForward cargarHtml2(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		TransaccionAsociadoForm transaccionAsociadoForm = (TransaccionAsociadoForm)form;
		String texto = "";
		HtmlBuilder htmlBuilder = new HtmlBuilder();
		htmlBuilder.table(0).align("center").border("0").close().tr(0).close();
		if(transaccionAsociadoForm.getDestino() == 2){
			CtrBanBancoDAO bancoDAO = new CtrBanBancoDAO(getSessionHibernate(request));
			List lban = bancoDAO.findAll();
			htmlBuilder.td(0).close().append("<label>Banco</label>").tdEnd();
			htmlBuilder.td(0).close().select().name("banIdD").id("banIdD");
			htmlBuilder.onchange("cargarRepositorioYCorrelativo();");
			htmlBuilder.close();
			int x = 0;
			int banId = 0;
			for (Iterator iterator = lban.iterator(); iterator.hasNext();) {
				CtrBanBanco banco = (CtrBanBanco) iterator.next();
				if(x<1){
					banId = banco.getBanId();
					x++;
				}
				htmlBuilder.option().value(banco.getBanId().toString()).close().append(banco.getBanNombre()).optionEnd();
			}
			htmlBuilder.selectEnd();
			htmlBuilder.tdEnd();
			//Select del repositorio
			CtrBanBanco banco = bancoDAO.findById(banId);
			CtrRckRepositorioChequesDAO rckDao = new CtrRckRepositorioChequesDAO(getSessionHibernate(request));
			SecIseInicioSesionDAO sesionDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
			SecIseInicioSesion sesion = sesionDAO.findById(transaccionAsociadoForm.getUsuarioConectado().getNombreUsuario());
			List rckList = rckDao.findBySyB(banId, sesion.getSecPerPersona().getSecSucSucursal().getSucId());
			htmlBuilder.td(0).close().append("<label>Repositorio</label>").tdEnd();
			htmlBuilder.td(0).close();
			htmlBuilder.div().id("valoresBanco").close();
			htmlBuilder.select().name("rckId").id("rckId");
			htmlBuilder.onchange("cargarCorrelativo();");
			htmlBuilder.close();
			x = 0;
			Integer correlativo = 0;
			for (Iterator iterator = rckList.iterator(); iterator.hasNext();) {
				CtrRckRepositorioCheques rck = (CtrRckRepositorioCheques) iterator.next();
				if(x<1){
					correlativo = rck.getRckCorrActual();
					x++;
				}
				htmlBuilder.option().value(rck.getRckId().toString()).close().append(rck.getRckNombre()).optionEnd();
			}
			htmlBuilder.selectEnd();
			htmlBuilder.tdEnd().trEnd(0);
			
			htmlBuilder.tr(0);
			htmlBuilder.td(0).close().append("<label>Numero Cheque</label>").tdEnd();
			htmlBuilder.td(0).close();
			htmlBuilder.div().id("valoresCheque").close();
				htmlBuilder.input().type("text")
					.name("chequeNumD").id("chequeNumD").readonly();
					if(correlativo == null || correlativo <= 0){
						htmlBuilder.value("No hay repositorio activo para este banco").size("25");
					}else{
						htmlBuilder.value(correlativo.toString()).size("15");
					}
				htmlBuilder.close();
			htmlBuilder.divEnd();
			htmlBuilder.tdEnd();
			htmlBuilder.trEnd(0).tr(0).close();
		}
		if(transaccionAsociadoForm.getDestino() == 3){
			CtaCasCuentaAsociadoDAO casDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
			List lcas = (List) casDAO.findByAscAndTipoCuenta(transaccionAsociadoForm.getAscId2(),"B");
			for (Iterator iterator = lcas.iterator(); iterator.hasNext();) {
				CtaCasCuentaAsociado cuentaAsociado = (CtaCasCuentaAsociado) iterator.next();
				if(cuentaAsociado.getCtaCahCuentaAhorro().getCahId().substring(0, 1).equals("A")){
					htmlBuilder.input().type("hidden").value(cuentaAsociado.getCasCuenta().toString()).
						name("cuentaDestino").id("cuentaDestino").close();
				}
			}
		}
		if(transaccionAsociadoForm.getDestino() == 4){
			htmlBuilder.td(0).close().append("<label>Cuenta</label>").tdEnd();
			htmlBuilder.td(0).colspan("2").close().select()
				.name("cuentaDestino").id("cuentaDestino").close();
			CtaCasCuentaAsociadoDAO casDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
			List lcas = (List) casDAO.findByAscAndTipoCuenta(transaccionAsociadoForm.getAscId2(),"B");
			for (Iterator iterator = lcas.iterator(); iterator.hasNext();) {
				CtaCasCuentaAsociado cuentaAsociado = (CtaCasCuentaAsociado) iterator.next();
				if(cuentaAsociado.getCtaCahCuentaAhorro().getCahId().substring(0, 1).equals("B")){
					if(cuentaAsociado.getCtrEstEstado().getEstId()==9){
						htmlBuilder.option().value(cuentaAsociado.getCasCuenta().toString()).close();
						if(cuentaAsociado.getCtaCahCuentaAhorro().getCtaTahTipoAhorro()== null){
							htmlBuilder.append(cuentaAsociado.getCtaCahCuentaAhorro().getCahId() + " - Default");
						}else{
							htmlBuilder.append(cuentaAsociado.getCtaCahCuentaAhorro().getCahId() + " - "
								+ cuentaAsociado.getCtaCahCuentaAhorro().getCtaTahTipoAhorro().getTahNombre());
						}
						htmlBuilder.optionEnd();
					}
				}
			}
			htmlBuilder.selectEnd();
		}
		if(transaccionAsociadoForm.getDestino() == 5){
			htmlBuilder.td(0).close().append("<label>Prestamo</label>").tdEnd();
			htmlBuilder.td(0).colspan("2").close().select()
				.onchange("cargarDisponibleDestino(3);")
				.name("cuentaDestino").id("cuentaDestino").close();
			CtaCasCuentaAsociadoDAO casDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
			List lcas = (List) casDAO.findByAscAndTipoCuenta2(transaccionAsociadoForm.getAscId2(),"C");
			for (Iterator iterator = lcas.iterator(); iterator.hasNext();) {
				CtaCasCuentaAsociado cuentaAsociado = (CtaCasCuentaAsociado) iterator.next();
				if(cuentaAsociado.getCtrEstEstado().getEstId()==13){
					htmlBuilder.option().value(cuentaAsociado.getCasCuenta().toString()).close();
					//if(cuentaAsociado.getCtaPrePrestamo().getCtaTprTipoPrestamo()!=null){
						CtaTprTipoPrestamoDAO tipoPrestamoDAO = new CtaTprTipoPrestamoDAO(getSessionHibernate(request));
						CtaTprTipoPrestamo tpr = tipoPrestamoDAO.findById(cuentaAsociado.getCtaPrePrestamo().getCtaTprTipoPrestamo().getTprId());
						htmlBuilder.append(cuentaAsociado.getCtaPrePrestamo().getPreId() + " - "
								+ tpr.getCtaLprLineaPrestamo().getLprNombre());
					/*}else{
						htmlBuilder.append(cuentaAsociado.getCtaPrePrestamo().getPreId() + " - "
								+ "Credito");
					}*/
					htmlBuilder.optionEnd();
				}
			}
			htmlBuilder.selectEnd();
			htmlBuilder.tdEnd();
			htmlBuilder.td(0).close();
			htmlBuilder.div().id("dispDest");
			htmlBuilder.append("<label>Saldo: $");
			htmlBuilder.input().type("text").name("dispo").id("dispo").readonly();
			if(lcas.size()>0){
				CtaCasCuentaAsociado cas = (CtaCasCuentaAsociado) lcas.get(0);
				//Calcular saldo con los intereses pendientes
				IntereseYMora iYm = new IntereseYMora();
				CtaMxpMovimientoPrestamoDAO mxpDao = new CtaMxpMovimientoPrestamoDAO(getSessionHibernate(request));
				CtaMxpMovimientoPrestamo mxpAnt = mxpDao.findUltimoMovimiento(cas.getCtaPrePrestamo().getPreId());
				if(mxpAnt == null || mxpAnt.getMxpId() == null){
					mxpAnt = new CtaMxpMovimientoPrestamo();
				}
				iYm = iYm.actualizaInteres(mxpAnt, cas.getCtaPrePrestamo(), cas, new Date(),request);
				Double saldoConInteres = cas.getCtaPrePrestamo().getPreSaldoActualT() + iYm.getAcumulado() + iYm.getPendiente(); 
				htmlBuilder.value(Redondeo.roundDouble(saldoConInteres,2).toString());
			}else{
				htmlBuilder.value("No existe prestamo");
			}
			htmlBuilder.end();
			htmlBuilder.append("</label>");
			htmlBuilder.divEnd();
			htmlBuilder.tdEnd();
		}
		if(transaccionAsociadoForm.getDestino() == 6){
			htmlBuilder.td(0).close().append("<label>Seguro</label>").tdEnd();
			htmlBuilder.td(0).colspan("2").close().select()
				.onchange("cargarDisponibleDestino(4);")
				.name("cuentaDestino").id("cuentaDestino").close();
			CtaCasCuentaAsociadoDAO casDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
			List lcas = (List) casDAO.findByAscAndTipoCuenta(transaccionAsociadoForm.getAscId2(),"D");
			for (Iterator iterator = lcas.iterator(); iterator.hasNext();) {
				CtaCasCuentaAsociado cuentaAsociado = (CtaCasCuentaAsociado) iterator.next();
				if(cuentaAsociado.getCtrEstEstado().getEstId()==11){
					htmlBuilder.option().value(cuentaAsociado.getCasCuenta().toString()).close();
					htmlBuilder.append(cuentaAsociado.getCtaSegSeguros().getSegId() + " - "
							+ cuentaAsociado.getCtaSegSeguros().getCtaTisTipoSeguro().getTisNombre());
					htmlBuilder.optionEnd();
				}
			}
			htmlBuilder.selectEnd().tdEnd();
			htmlBuilder.td(0).close();
			htmlBuilder.div().id("dispDest");
			htmlBuilder.append("<label>Saldo: $");
			htmlBuilder.input().type("text").name("dispo").id("dispo").readonly();
			if(lcas.size()>0){
				CtaCasCuentaAsociado cas = (CtaCasCuentaAsociado) lcas.get(0);
				htmlBuilder.value(Redondeo.roundDouble(cas.getCtaSegSeguros().getSegSaldoActual(),2).toString());
			}else{
				htmlBuilder.value("No existe seguro");
			}
			htmlBuilder.end();
			htmlBuilder.append("</label>");
			htmlBuilder.divEnd();
			htmlBuilder.tdEnd();
		}
		if(transaccionAsociadoForm.getDestino() == 7){
			CtrBanBancoDAO bancoDAO = new CtrBanBancoDAO(getSessionHibernate(request));
			List lban = bancoDAO.findAll();
			htmlBuilder.td(0).close().append("<label>Banco</label>").tdEnd();
			htmlBuilder.td(0).close().select().name("banIdD").id("banIdD");
			htmlBuilder.onchange("cargarCuentas();").close();
			for (Iterator iterator = lban.iterator(); iterator.hasNext();) {
				CtrBanBanco banco = (CtrBanBanco) iterator.next();
				htmlBuilder.option().value(banco.getBanId().toString()).close().append(banco.getBanNombre()).optionEnd();
			}
			htmlBuilder.selectEnd().tdEnd();
			htmlBuilder.trEnd(0).tr(0).close();
			htmlBuilder.td(0).close().append("<label>Cuenta</label>").tdEnd();
			htmlBuilder.td(0).close();
			htmlBuilder.div().id("bancarias").close();
			if(lban.size() > 0){
				htmlBuilder.select().name("cuentaBan").id("cuentaBanId").close();
				CtaCbaCuentaBancariaDAO cuentaBancariaDAO = new CtaCbaCuentaBancariaDAO(getSessionHibernate(request));
				CtrBanBanco banco = (CtrBanBanco) lban.get(0);
				List cuentasBancarias = cuentaBancariaDAO.findByAscAndBanco(transaccionAsociadoForm.getAscId2(),banco.getBanId());
				for (Iterator iterator = cuentasBancarias.iterator(); iterator
						.hasNext();) {
					CtaCbaCuentaBancaria cba = (CtaCbaCuentaBancaria) iterator.next();
					htmlBuilder.option().value(cba.getCbaId().toString()).close().append(cba.getCbaCuenta()).optionEnd();
				}
				htmlBuilder.selectEnd();
			}else{
				htmlBuilder.append("No hay cuentas que mostrar");
			}
			htmlBuilder.divEnd().tdEnd();
		}
		htmlBuilder.trEnd(0).tableEnd(1);
		texto = htmlBuilder.toString();
		try{
			response.setCharacterEncoding("UTF-8");
			response.getWriter().write(texto);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (RuntimeException e) {
			log.error("Error runtime", e);
		} catch (IOException e) {
			log.error(e);
		}
		return null;
	}
	
	public ActionForward cancelar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		TransaccionAsociadoForm transaccionAsociadoForm = (TransaccionAsociadoForm) form;
		return lista(mapping, transaccionAsociadoForm, request, response);
	}
	
	public ActionForward realizarTransaccion(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		TransaccionAsociadoForm transaccionAsociadoForm = (TransaccionAsociadoForm) form;
		int mxpIdTrans = 0;
		Long comprobante = null;
		CuentaAhorroAction cuentaAhorroAction = new CuentaAhorroAction();
		CuentaAsociadoAction cuentaAsociadoAction = new CuentaAsociadoAction();
		USUARIO = transaccionAsociadoForm.getUsuarioConectado().getNombreUsuario();
		HashMap<Long, TransacObj> mapa = (HashMap<Long, TransacObj>)request.getSession().getAttribute("listaTransacciones");
		if(mapa == null || mapa.size()< 1){
			mensajes("errors.tranDml.nulo", transaccionAsociadoForm, request, response);
			transaccionAsociadoForm.setDestino(-1);
			transaccionAsociadoForm.setFuente(-1);
			return nuevaTran(mapping, transaccionAsociadoForm, request, response);
		}else{
			CtaTxaTransaccionxcuentaAsociadoDAO txaDAO = new CtaTxaTransaccionxcuentaAsociadoDAO(getSessionHibernate(request));
			CtaCasCuentaAsociadoDAO casDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
			Transaction tx = txaDAO.getSession().beginTransaction();
			comprobante = txaDAO.nextComprobante();
			//COMPROBANTE = comprobante;
			Collection valoresMapa = mapa.values();
			for (Iterator iterator = valoresMapa.iterator(); iterator.hasNext();) {
				TransacObj transacObj = (TransacObj) iterator.next();
				CtaTxaTransaccionxcuentaAsociado txa = new CtaTxaTransaccionxcuentaAsociado();
				CtaTtrTipoTransaccionDAO tipoTransaccionDAO = new CtaTtrTipoTransaccionDAO(getSessionHibernate(request));
				CtaCasCuentaAsociado cas =  casDAO.findById((long) transacObj.getCas());
				
				txa.setCtaCasCuentaAsociado(cas);
				txa.setTxaFecha(new Date());
				txa.setTxaComprobante(comprobante);
				txa.setTxaMonto(transacObj.getMonto());
				txa.setTxaNota(transacObj.getNota());
				txa.setCtaNotNotas(null);
				txa.setTxaCheque(transacObj.getCheque());
				txa.setCtaTtrTipoTransaccion(tipoTransaccionDAO.findById(transacObj.getTtr()));
				txa.setAudFechaCreacion(new Date());
				txa.setAudFechaModificacion(new Date());
				txa.setAudUsuarioCreacion(transaccionAsociadoForm.getUsuarioConectado().getNombreUsuario());
				txa.setAudUsuarioModificacion(transaccionAsociadoForm.getUsuarioConectado().getNombreUsuario());
				if(transaccionAsociadoForm.getDestino() == 7){
					txa.setTxaEstado("P");
				}
				txaDAO.save2(txa);

				tx.commit();
				txaDAO.getSession().flush();
				txaDAO.getSession().clear();
				
				//Abono a aportacion
				if(transacObj.getCuenta().equals("A")){
					CtaCahCuentaAhorroDAO aportacionDAO = new CtaCahCuentaAhorroDAO(getSessionHibernate(request));
					CtaCahCuentaAhorro aportacion = aportacionDAO.findById(cas.getCtaCahCuentaAhorro().getCahId());
					
					aportacion.setCahSaldoActual(aportacion.getCahSaldoActual() + transacObj.getMonto());
					aportacionDAO.merge(aportacion);
					
					CtaMxaMovimientoAhorroDAO movimientoAhorroDAO = new CtaMxaMovimientoAhorroDAO(getSessionHibernate(request));
					CtaMxaMovimientoAhorro movimientoAhorro = new CtaMxaMovimientoAhorro();
					Transaction tx1 = movimientoAhorroDAO.getSession().beginTransaction();
					movimientoAhorro.setCtaCahCuentaAhorro(aportacion);
					movimientoAhorro.setCtaTxaTransaccionxcuentaAsociado(txa);
					movimientoAhorro.setMxaFecha(new Date());
					movimientoAhorro.setMxaSaldo(aportacion.getCahSaldoActual());
					movimientoAhorro.setMxaMonto(transacObj.getMonto());
					movimientoAhorro.setAudFechaCreacion(new Date());
					movimientoAhorro.setAudFechaModificacion(new Date());
					movimientoAhorro.setAudUsuarioCreacion(transaccionAsociadoForm.getUsuarioConectado().getNombreUsuario());
					movimientoAhorro.setAudUsuarioModificacion(transaccionAsociadoForm.getUsuarioConectado().getNombreUsuario());
					movimientoAhorroDAO.save(movimientoAhorro);
					
					tx1.commit();
					movimientoAhorroDAO.getSession().flush();
					movimientoAhorroDAO.getSession().clear();
					
					enviarTransaccionAContabilidad(txa, USUARIO, "A", cas, 0.0, null,request);
				}
				
				//Abono o Cargo a ahorros
				if(transacObj.getCuenta().equals("B")){
					CtaCahCuentaAhorroDAO ahorroDAO = new CtaCahCuentaAhorroDAO(getSessionHibernate(request));
					Transaction tran = ahorroDAO.getSession().beginTransaction();
					CtaMxaMovimientoAhorroDAO movimientoAhorroDAO = new CtaMxaMovimientoAhorroDAO(getSessionHibernate(request));
					CtaTtrTipoTransaccionDAO ttrDAO = new CtaTtrTipoTransaccionDAO(getSessionHibernate(request));
					
					CtaCahCuentaAhorro ahorro = ahorroDAO.findById(cas.getCtaCahCuentaAhorro().getCahId());
					CtaChkChequePrestamoDAO chequeDao = new CtaChkChequePrestamoDAO(getSessionHibernate(request));
					Transaction tx2 = chequeDao.getSession().beginTransaction();
					CtaChkChequePrestamo cheque = new CtaChkChequePrestamo();
					
					Double nuevoInteres = cuentaAsociadoAction.getTotalInteresesAhorro(ahorro.getCahId(),request);
					
					ahorro.setCahInteresAcumulado(nuevoInteres);
					//verificamos si es abono
					if(ttrDAO.findById(transacObj.getTtr()).getTtrUso().equals("A")){
						ahorro.setCahSaldoActual(ahorro.getCahSaldoActual() + transacObj.getMonto());
					}else{
						ahorro.setCahSaldoActual(ahorro.getCahSaldoActual() - transacObj.getMonto());
					}
					ahorroDAO.merge(ahorro);
					tran.commit();
					
					
					//Movimiento por el cargo/abono
					Transaction tx1 = movimientoAhorroDAO.getSession().beginTransaction();
					CtaMxaMovimientoAhorro movimientoAhorro = new CtaMxaMovimientoAhorro();
					movimientoAhorro.setCtaCahCuentaAhorro(ahorro);
					movimientoAhorro.setCtaTxaTransaccionxcuentaAsociado(txa);
					movimientoAhorro.setMxaFecha(new Date());
					movimientoAhorro.setMxaInteresTran(cuentaAhorroAction.calculoInteresTransaccion(ahorro.getCahId(), new Date(),request));
					movimientoAhorro.setMxaMonto(transacObj.getMonto());
					movimientoAhorro.setMxaSaldo(ahorro.getCahSaldoActual());
					movimientoAhorro.setAudFechaCreacion(new Date());
					movimientoAhorro.setAudFechaModificacion(new Date());
					movimientoAhorro.setAudUsuarioCreacion(transaccionAsociadoForm.getUsuarioConectado().getNombreUsuario());
					movimientoAhorro.setAudUsuarioModificacion(transaccionAsociadoForm.getUsuarioConectado().getNombreUsuario());
					movimientoAhorroDAO.save(movimientoAhorro);
					
					tx1.commit();
					movimientoAhorroDAO.getSession().flush();
					movimientoAhorroDAO.getSession().clear();
					if(!ttrDAO.findById(transacObj.getTtr()).getTtrUso().equals("A")){
						mxpIdTrans = movimientoAhorro.getMxaId();
					}
					
					if(transacObj.getCheque()!= null && !transacObj.getCheque().trim().equals("") && txa.getCtaTtrTipoTransaccion().getTtrId()!=41 ){
						SecPerPersonaDAO personaDAO = new SecPerPersonaDAO(getSessionHibernate(request));
						Integer correlativoDelCheque = Integer.valueOf(transacObj.getCorrelativoCheque());
						SecIseInicioSesionDAO sesionDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
						SecIseInicioSesion sesion = sesionDAO.findById(USUARIO);
						if(ttrDAO.findById(transacObj.getTtr()).getTtrUso().equals("C")){
							CtrRckRepositorioChequesDAO rckDao = new CtrRckRepositorioChequesDAO(getSessionHibernate(request));
							SecPerPersona usuario = personaDAO.findById(sesion.getSecPerPersona().getPerId());
							SecSucSucursalDAO sucursalDAO = new SecSucSucursalDAO(getSessionHibernate(request));
							SecSucSucursal sucursal = sucursalDAO.findById(usuario.getSecSucSucursal().getSucId());
							int sucId = sucursal.getSucId();
							int banId = transacObj.getBanId();
							CtrRckRepositorioCheques rck = rckDao.findById(transacObj.getRckId());
							correlativoDelCheque = rck.getRckCorrActual();
						}
						
						cheque.setChkCorrelativoCheque(correlativoDelCheque);
						CtaAscAsociado asociado = cas.getCtaAscAsociado();
						
						SecPerPersona persona = personaDAO.findById(asociado.getSecPerPersona().getPerId());
						cheque.setChkEmitidoA(persona.getPerPrimerNombre() + " " + persona.getPerSegundoNombre() +
								" " + persona.getPerPrimerApellido() + " " + persona.getPerSegundoApellido());
						cheque.setChkFecha(new Date());
						
						cheque.setChkLugar(sesion.getSecPerPersona().getSecSucSucursal().getSucDireccion());
						cheque.setChkMontoEmitido(movimientoAhorro.getMxaMonto().floatValue());
						cheque.setChkRazon("");
						cheque.setCtaPrePrestamo(null);
						CtrBanBancoDAO bancoDAO = new CtrBanBancoDAO(getSessionHibernate(request));
						cheque.setCtrBanBanco(bancoDAO.findById(transacObj.getBanId()));
						
						chequeDao.save(cheque);
						
						tx2.commit();
						chequeDao.getSession().flush();
						chequeDao.getSession().clear();
						
						if(ttrDAO.findById(transacObj.getTtr()).getTtrUso().equals("C")){
							CtrRckRepositorioChequesDAO rckDao = new CtrRckRepositorioChequesDAO(getSessionHibernate(request));
							Transaction tx3 = rckDao.getSession().beginTransaction();
							SecPerPersona usuario = personaDAO.findById(sesion.getSecPerPersona().getPerId());
							SecSucSucursalDAO sucursalDAO = new SecSucSucursalDAO(getSessionHibernate(request));
							SecSucSucursal sucursal = sucursalDAO.findById(usuario.getSecSucSucursal().getSucId());
							int sucId = sucursal.getSucId();
							int banId = transacObj.getBanId();
							CtrRckRepositorioCheques rck = rckDao.findById(transacObj.getRckId());
							rck.setRckCorrActual(rck.getRckCorrActual() + 1);
							rckDao.merge(rck);
							tx3.commit();
							rckDao.getSession().flush();
							rckDao.getSession().clear();
						}
					}else{
						cheque = null;
					}
					if(!txa.getTxaEstado().equals("P")){
						if(txa.getCtaTtrTipoTransaccion().getTtrId().equals(38)){
							enviarTransaccionAContabilidadEspecial(txa, USUARIO, "P", cas, 0.0, cheque,request);
						}else{
							enviarTransaccionAContabilidad(txa, USUARIO, "B", cas, 0.0, cheque,request);
						}
					}else{
						if(!txa.getCtaTtrTipoTransaccion().getTtrId().equals(38)){
							enviarAsolTransBanc(txa, movimientoAhorro, transaccionAsociadoForm.getCuentaBan(), 
									transacObj.getPenalidad(),request);
						}						
					}
				}
				
				//Abono a Prestamo
				if(transacObj.getCuenta().equals("C")){
					CtaPrePrestamoDAO prestamoDAO = new CtaPrePrestamoDAO(getSessionHibernate(request));
					CtaPrePrestamo prestamo = prestamoDAO.findById(cas.getCtaPrePrestamo().getPreId());
					Transaction transaction = prestamoDAO.getSession().beginTransaction();
					CtaMxpMovimientoPrestamoDAO mxpDAO = new CtaMxpMovimientoPrestamoDAO(getSessionHibernate(request));
					CtaMxpMovimientoPrestamo mxp = new CtaMxpMovimientoPrestamo();
					CtaMxpMovimientoPrestamo mxpAnt;
					IntereseYMora iYm = new IntereseYMora(0.0,0.0,0.0,0.0);
					if(prestamo.getPreCredito() == null || (!prestamo.getPreCredito().equals("O") && !prestamo.getPreCredito().equals("F"))){
						iYm.setPorcInteres(prestamo.getCtaTprTipoPrestamo().getCtaTinTasaInteres().getTinTasa());
					}
					mxpAnt = mxpDAO.findUltimoMovimiento(prestamo.getPreId());
					if(mxpAnt==null){
						mxpAnt = new CtaMxpMovimientoPrestamo();
						mxpAnt.setMxpSaldoActual(0.00);
						System.out.println("El movimiento anterior es nulo");
						iYm.setMora(prestamo.getPreMoraMov());
						iYm.setPendiente(prestamo.getPrePendMov());
						iYm.setAcumulado(0.0);
						//prestamo.setPrePendMov(prestamo.getPreSaldoActualT() - prestamo.getPreLiquidoARecibir());
						//prestamo.setPreSaldoActualT(prestamo.getPreLiquidoARecibir());
					}
					iYm = iYm.actualizaInteres(mxpAnt, prestamo, cas, new Date(),request);
					mxp.setCtaPrePrestamo(prestamo);
					mxp.setCtaTxaTransaccionxcuentaAsociado(txa);
					mxp.setMxpFecha(new Date());
					mxp.setAudFechaCreacion(new Date());
					mxp.setAudFechaModificacion(new Date());
					mxp.setAudUsuarioCreacion(transaccionAsociadoForm.getUsuarioConectado().getNombreUsuario());
					mxp.setAudUsuarioModificacion(transaccionAsociadoForm.getUsuarioConectado().getNombreUsuario());
					mxp.setMxpMora(0.00);//Lo agregué para que no deje null en la base porque ya no se asigna la mora
					double montoActualizable = transacObj.getMonto();					
					//Forma normal
					/**
					 * ESTE BLOQUE CORRESPONDE AL MANEJO DE MORA, ACTUALMENTE SE MANEJA COMO UN PORCENTAJE QUE SE 
					 * DEBE AGREGAR AL PORCENTAJE DE INTERES DEL PRESTAMO.
					 * if(iYm.getMora() != null && iYm.getMora()<= montoActualizable){
						mxp.setMxpMora(iYm.getMora());
						montoActualizable = montoActualizable - iYm.getMora(); */
						if(iYm.getPendiente() <= montoActualizable){
							prestamo.setPreMoraMov(0.0);
							mxp.setMxpInteresPendiente(iYm.getPendiente());
							montoActualizable = montoActualizable - iYm.getPendiente();
							if(iYm.getAcumulado() <= montoActualizable){
								prestamo.setPrePendMov(0.0);
								mxp.setMxpInteresAcumulado(iYm.getAcumulado());
								montoActualizable = montoActualizable - iYm.getAcumulado();
								if(montoActualizable == 0.0){
									//mxp.setMxpSaldoActual(prestamo.getPreMontoSolicitado() - prestamo.getPreSaldoActualT());
									mxp.setMxpSaldoActual(mxpAnt.getMxpSaldoActual());
									mxp.setMxpSaldo(mxpAnt.getMxpSaldo());
								}else{
									if(montoActualizable < prestamo.getPreSaldoActualT()){
										mxp.setMxpSaldoActual(mxpAnt.getMxpSaldoActual()/*(prestamo.getPreMontoSolicitado() - prestamo.getPreSaldoActualT())*/ + montoActualizable);
										mxp.setMxpSaldo(mxpAnt.getMxpSaldo() - montoActualizable);
										//Si tipo prestamo es NULL, es un Credito y se maneja de la siguiente forma
										if(prestamo.getPreCredito() != null && (prestamo.getPreCredito().equals("O") || prestamo.getPreCredito().equals("F"))){
											OrdOcoOrdenDeCompraDAO compraDAO = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
											List ordeneDebe = compraDAO.findTodasLasQueDebe(cas.getCtaAscAsociado().getAscId());
											Double montoOrdenes = 0.0;//prestamo.getPreMontoSolicitado() - prestamo.getPreSaldoActualT();
											montoOrdenes = pagarOrdenes(ordeneDebe,montoActualizable,request);
										}
										prestamo.setPreSaldoActualT(prestamo.getPreSaldoActualT()-montoActualizable/*prestamo.getPreMontoSolicitado() - mxp.getMxpSaldoActual()*/);
									}else{//liquidamos el prestamo
										if(montoActualizable >= prestamo.getPreSaldoActualT()){
											ArrayList fiadores = new ArrayList();
											fiadores.addAll(prestamo.getCtaFxpFiadorPrestamos());
											CtaFxpFiadorPrestamoDAO fiadorPrestamoDAO = new CtaFxpFiadorPrestamoDAO(getSessionHibernate(request));											
											Transaction tx1 = fiadorPrestamoDAO.getSession().beginTransaction();
											for (Iterator iterator2 = fiadores.iterator(); iterator2.hasNext();) {
												CtaFxpFiadorPrestamo fiador = (CtaFxpFiadorPrestamo) iterator2.next();
												fiador.setFxpEstado("S");
												fiadorPrestamoDAO.merge(fiador);												
											}
											tx1.commit();											
											if(prestamo.getPreCredito() == null || (!prestamo.getPreCredito().equals("O") && !prestamo.getPreCredito().equals("F"))){
												Transaction tx2 = casDAO.getSession().beginTransaction();
												cas.setCasFechaCierre(new Date());
												CtrEstEstadoDAO estadoDAO = new CtrEstEstadoDAO(getSessionHibernate(request));
												cas.setCtrEstEstado(estadoDAO.findById(17));
												casDAO.merge(cas);												
												tx2.commit();
											}
											
											//Si tipo prestamo es NULL, es un Credito y se maneja de la siguiente forma
											if(prestamo.getPreCredito() != null && (prestamo.getPreCredito().equals("O") || prestamo.getPreCredito().equals("F"))){
												OrdOcoOrdenDeCompraDAO compraDAO = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
												List ordeneDebe = compraDAO.findTodasLasQueDebe(cas.getCtaAscAsociado().getAscId());
												Double montoOrdenes = 0.0;//prestamo.getPreMontoSolicitado() - prestamo.getPreSaldoActualT();
												montoOrdenes = pagarOrdenes(ordeneDebe,montoActualizable,request);
												prestamo.setPreCuota(0.0);
											}
											if(montoActualizable > prestamo.getPreSaldoActualT()){
												siEsMayor(montoActualizable, prestamo, cas, mxpAnt,comprobante,request);
											}
											//mxp.setMxpSaldoActual((double) prestamo.getPreMontoSolicitado());
											mxp.setMxpSaldoActual(mxpAnt.getMxpSaldoActual()+mxpAnt.getMxpSaldo());
											prestamo.setPreSaldoActualT(0.00);
										}
									}
								}
							}else{
								prestamo.setPrePendMov(iYm.getAcumulado() - montoActualizable);
								mxp.setMxpInteresAcumulado(montoActualizable);
								//mxp.setMxpSaldoActual(prestamo.getPreMontoSolicitado() - prestamo.getPreSaldoActualT());
								mxp.setMxpSaldoActual(mxpAnt.getMxpSaldoActual());
							}
						}else{
							prestamo.setPrePendMov((iYm.getPendiente()-montoActualizable) + iYm.getAcumulado());
							mxp.setMxpInteresPendiente(montoActualizable);
							mxp.setMxpInteresAcumulado(0.0);
							//mxp.setMxpSaldoActual(prestamo.getPreMontoSolicitado() - prestamo.getPreSaldoActualT());
							mxp.setMxpSaldoActual(mxpAnt.getMxpSaldoActual());
						}
					/**}else{ ESTE BLOQUE CORRESPONDE AL MANEJO DE MORA, ACTUALMENTE SE MANEJA COMO UN PORCENTAJE QUE SE 
					 * DEBE AGREGAR AL PORCENTAJE DE INTERES DEL PRESTAMO.
						if(mxpAnt.getMxpMora() != null){
							prestamo.setPrePendMov(iYm.getPendiente() + iYm.getAcumulado());
							prestamo.setPreMoraMov(iYm.getMora() - montoActualizable);
							mxp.setMxpMora(montoActualizable);
							mxp.setMxpInteresPendiente(0.0);
							mxp.setMxpInteresAcumulado(0.0);
							mxp.setMxpSaldoActual(prestamo.getPreMontoSolicitado() - prestamo.getPreSaldoActualT());
							if(prestamo.getPreCredito() != null && (prestamo.getPreCredito().equals("O") || prestamo.getPreCredito().equals("F"))){
								mxp.setMxpSaldo(prestamo.getPreSaldoActualT());
							}else{
								mxp.setMxpSaldo(prestamo.getPreSaldoActualT()-mxp.getMxpSaldoActual());
							}
						}else{
							prestamo.setPrePendMov(iYm.getPendiente() + iYm.getAcumulado());
							prestamo.setPreMoraMov(iYm.getMora());
							mxp.setMxpMora(0.0);
							mxp.setMxpInteresPendiente(0.0);
							mxp.setMxpInteresAcumulado(0.0);
							mxp.setMxpSaldoActual(prestamo.getPreMontoSolicitado() - prestamo.getPreSaldoActualT());
							if(prestamo.getPreCredito() != null && (prestamo.getPreCredito().equals("O") || prestamo.getPreCredito().equals("F"))){
								mxp.setMxpSaldo(prestamo.getPreSaldoActualT());
							}else{
								mxp.setMxpSaldo(prestamo.getPreSaldoActualT()-mxp.getMxpSaldoActual());
							}
						}
					}*/
					mxp.setMxpSaldo(prestamo.getPreSaldoActualT());
					/*if(prestamo.getPreCredito() != null && (prestamo.getPreCredito().equals("O") || prestamo.getPreCredito().equals("F"))){
						mxp.setMxpSaldo(prestamo.getPreSaldoActualT()-mxp.getMxpSaldoActual());
					}else{
						mxp.setMxpSaldo(prestamo.getPreSaldoActualT());
					}*/
					mxpDAO.save(mxp);
					//prestamo.setPreSaldoActualT(mxp.getMxpSaldoActual());
					prestamoDAO.merge(prestamo);
					
					enviarTransaccionAContabilidad(txa, USUARIO, "C", cas, 
							(mxp.getMxpInteresAcumulado() + mxp.getMxpInteresPendiente() + mxp.getMxpMora()), null,request);
				
					
					prestamoDAO.getSession().flush();
					prestamoDAO.getSession().clear();
					
					transaction.commit();
				}
				
				//Abono a Seguros
				if(transacObj.getCuenta().equals("D")){
					CtaSegSegurosDAO segurosDAO = new CtaSegSegurosDAO(getSessionHibernate(request));
					CtaSegSeguros seguros = segurosDAO.findById(cas.getCtaSegSeguros().getSegId());
					Transaction tx1 = segurosDAO.getSession().beginTransaction();
					double montoActualizable2 = transacObj.getMonto();
					if(montoActualizable2 < seguros.getSegSaldoActual()){
						CtaMxsMovimientoSegurosDAO mxsDAO = new CtaMxsMovimientoSegurosDAO(getSessionHibernate(request));
						Transaction ts = mxsDAO.getSession().beginTransaction();
						CtaMxsMovimientoSeguros mxs = new CtaMxsMovimientoSeguros();
						mxs.setCtaSegSeguros(seguros);
						mxs.setCtaTxaTransaccionxcuentaAsociado(txa);
						mxs.setMxsFecha(new Date());
						mxs.setMxsMonto(montoActualizable2);
						mxs.setMxsSaldo(seguros.getSegSaldoActual() - montoActualizable2);//seguros.getSegSaldoIni() - seguros.getSegSaldoActual()
						mxs.setAudFechaCreacion(new Date());
						mxs.setAudFechaModificacion(new Date());
						mxs.setAudUsuarioCreacion(transaccionAsociadoForm.getUsuarioConectado().getNombreUsuario());
						mxs.setAudUsuarioModificacion(transaccionAsociadoForm.getUsuarioConectado().getNombreUsuario());
						mxsDAO.save(mxs);
						ts.commit();
						seguros.setSegSaldoActual(seguros.getSegSaldoActual() - montoActualizable2);
						segurosDAO.merge(seguros);
						tx1.commit();
						segurosDAO.getSession().flush();
						segurosDAO.getSession().clear();
						
						enviarTransaccionAContabilidad(txa, USUARIO, "D", cas, 0.0, null,request);
					}else{						
						if(montoActualizable2 > seguros.getSegSaldoActual()){
							montoActualizable2 = montoActualizable2 - seguros.getSegSaldoActual();
							
							CtaCasCuentaAsociado principal = casDAO.findPrincipal(cas.getCtaAscAsociado().getAscId());
							CtaCahCuentaAhorroDAO ahorroDAO = new CtaCahCuentaAhorroDAO(getSessionHibernate(request));
							CtaCahCuentaAhorro ahorro = ahorroDAO.findById(principal.getCtaCahCuentaAhorro().getCahId());
							Transaction txah = ahorroDAO.getSession().beginTransaction();
							ahorro.setCahSaldoActual(ahorro.getCahSaldoActual() + montoActualizable2);
							ahorro.setCahInteresAcumulado(cuentaAsociadoAction.getTotalInteresesAhorro(ahorro.getCahId(),request));
							ahorroDAO.merge(ahorro);
							txah.commit();
							
							//Guardo transaccion de cuenta Principal
							CtaTxaTransaccionxcuentaAsociado txaPrincipal = new CtaTxaTransaccionxcuentaAsociado();
							txaPrincipal.setCtaCasCuentaAsociado(principal);
							txaPrincipal.setCtaTtrTipoTransaccion(tipoTransaccionDAO.findById(11));
							txaPrincipal.setTxaComprobante(comprobante);
							txaPrincipal.setTxaFecha(new Date());
							txaPrincipal.setTxaMonto(montoActualizable2);
							txaPrincipal.setCtaNotNotas(null);
							txaPrincipal.setTxaNota("Abono a Ahorro Descuentos (" + principal.getCtaCahCuentaAhorro().getCahId() + ")");
							txaPrincipal.setAudFechaCreacion(new Date());
							txaPrincipal.setAudFechaModificacion(new Date());
							txaPrincipal.setAudUsuarioCreacion(transaccionAsociadoForm.getUsuarioConectado().getNombreUsuario());
							txaPrincipal.setAudUsuarioModificacion(transaccionAsociadoForm.getUsuarioConectado().getNombreUsuario());
							txaDAO.save(txaPrincipal);
							txah.commit();
							//Movimiento de ahorro cuenta Principal
							CtaMxaMovimientoAhorroDAO mxaDAO = new CtaMxaMovimientoAhorroDAO(getSessionHibernate(request));
							Transaction tmxa = mxaDAO.getSession().beginTransaction();
							CtaMxaMovimientoAhorro movimientoPrincipal = new CtaMxaMovimientoAhorro();
							movimientoPrincipal.setCtaCahCuentaAhorro(ahorro);
							movimientoPrincipal.setCtaTxaTransaccionxcuentaAsociado(txaPrincipal);
							movimientoPrincipal.setMxaFecha(new Date());
							movimientoPrincipal.setMxaInteresTran(cuentaAhorroAction.calculoInteresTransaccion(ahorro.getCahId(), new Date(),request));
							movimientoPrincipal.setMxaMonto(montoActualizable2);
							movimientoPrincipal.setMxaSaldo(ahorro.getCahSaldoActual() + montoActualizable2);
							movimientoPrincipal.setAudFechaCreacion(new Date());
							movimientoPrincipal.setAudFechaModificacion(new Date());
							movimientoPrincipal.setAudUsuarioCreacion(transaccionAsociadoForm.getUsuarioConectado().getNombreUsuario());
							movimientoPrincipal.setAudUsuarioModificacion(transaccionAsociadoForm.getUsuarioConectado().getNombreUsuario());
							mxaDAO.save(movimientoPrincipal);
							tmxa.commit();
						
							//ahorro.setCahInteresAcumulado(ahorro.getCahInteresAcumulado() + movimientoPrincipal.getMxaInteresTran());
							//ahorroDAO.merge(ahorro);
							mxaDAO.getSession().flush();
							mxaDAO.getSession().clear();
							enviarTransaccionAContabilidad(txaPrincipal, USUARIO, "B", principal, 0.0, null,request);
						}
						txa.setTxaMonto(seguros.getSegSaldoActual()/*seguros.getSegSaldoIni() - seguros.getSegSaldoActual()*/);
						txaDAO.merge(txa);
						
						enviarTransaccionAContabilidad(txa, USUARIO, "D", cas, 0.0, null,request);
						
						seguros.setSegSaldoActual(0.00);
						segurosDAO.merge(seguros);
						
						CtaMxsMovimientoSegurosDAO mxsDAO = new CtaMxsMovimientoSegurosDAO(getSessionHibernate(request));
						CtaMxsMovimientoSeguros mxs = new CtaMxsMovimientoSeguros();
						mxs.setCtaSegSeguros(seguros);
						mxs.setCtaTxaTransaccionxcuentaAsociado(txa);
						mxs.setMxsFecha(new Date());
						mxs.setMxsMonto(seguros.getSegSaldoActual()/*montoActualizable2*/);
						mxs.setMxsSaldo(0.00/*seguros.getSegSaldoIni()*/);
						mxs.setAudFechaCreacion(new Date());
						mxs.setAudFechaModificacion(new Date());
						mxs.setAudUsuarioCreacion(transaccionAsociadoForm.getUsuarioConectado().getNombreUsuario());
						mxs.setAudUsuarioModificacion(transaccionAsociadoForm.getUsuarioConectado().getNombreUsuario());
						mxsDAO.save(mxs);
						
						
						tx1.commit();
					}
				}
				
			}
			txaDAO.getSession().flush();
			txaDAO.getSession().clear();
			
			
		}
		mensajes("exito.tranDML.transaccionExitosa", transaccionAsociadoForm, request, response);
		request.getSession().setAttribute("comprobante", comprobante);
		transaccionAsociadoForm.setImprimirReporte(1);//Comprobante ingreso
		//imprimirReporte2(mapping, transaccionAsociadoForm, request, response);
		
		Collection valoresMapa2 = mapa.values();
		for (Iterator iterator = valoresMapa2.iterator(); iterator.hasNext();) {
			TransacObj transacObj = (TransacObj) iterator.next();
			CtaTtrTipoTransaccionDAO ttrDAO = new CtaTtrTipoTransaccionDAO(getSessionHibernate(request));
			if(!ttrDAO.findById(transacObj.getTtr()).getTtrUso().equals("A")){
				SecIseInicioSesionDAO sesionDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
				//SecIseInicioSesion sesion = sesionDAO.findById(USUARIO);
				try {
					//imprimirReporte(mapping,form,request,mxpIdTrans, sesion.getSecPerPersona().getSecSucSucursal().getSucNombre(), response);
					request.getSession().setAttribute("mxpIdTrans", /*mxpIdTrans*/comprobante);
					request.getSession().setAttribute("comprobante", comprobante);
					transaccionAsociadoForm.setImprimirReporte(2);//Comprobante Retiro
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
		USUARIO = "";
		return lista(mapping, transaccionAsociadoForm, request, response);
	}

	private void enviarAsolTransBanc(CtaTxaTransaccionxcuentaAsociado txa,
			CtaMxaMovimientoAhorro movimientoAhorro, String cuentaBan, Double penalidad,HttpServletRequest request) {
		CtaStbSolTransBancDAO solTransBancDAO = new CtaStbSolTransBancDAO(getSessionHibernate(request));
		Transaction tx = solTransBancDAO.getSession().beginTransaction();
		CtaStbSolTransBanc solTransBanc = new CtaStbSolTransBanc();
		CtaCahCuentaAhorroDAO cuentaAhorroDAO = new CtaCahCuentaAhorroDAO(getSessionHibernate(request));
		CtaCahCuentaAhorro cuentaAhorro = cuentaAhorroDAO.findById(movimientoAhorro.getCtaCahCuentaAhorro().getCahId());
		solTransBanc.setCtaCahCuentaAhorro(cuentaAhorro);
		solTransBanc.setStbEstado("N");
		solTransBanc.setStbFechaSol(new Date());
		solTransBanc.setStbMonto(movimientoAhorro.getMxaMonto());
		CtaCasCuentaAsociadoDAO casDao = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
		CtaCasCuentaAsociado cas = casDao.findbyCahId(cuentaAhorro.getCahId());
		CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
		CtaAscAsociado asociado = asociadoDAO.findById(cas.getCtaAscAsociado().getAscId());
		String nombreAsociado = asociado.getSecPerPersona().getPerPrimerNombre() + " " +
			asociado.getSecPerPersona().getPerSegundoNombre() + " " +
			asociado.getSecPerPersona().getPerPrimerApellido() + " " +
			asociado.getSecPerPersona().getPerSegundoApellido();
		solTransBanc.setStbNombreAsociado(nombreAsociado);
		solTransBanc.setStbRazon("Deposito pago ahorros electronicos");
		CtaCbaCuentaBancariaDAO bancariaDAO = new CtaCbaCuentaBancariaDAO(getSessionHibernate(request));
		CtaCbaCuentaBancaria bancaria = bancariaDAO.findById(cuentaBan);
		solTransBanc.setCtaCbaCuentaBancaria(bancaria);
		solTransBanc.setStbTipoAhorro(bancaria.getCtaTcuTipoCuenta().getTcuNombre());
		solTransBanc.setInvPcbProveedorCuentaBancaria(null);
		solTransBanc.setStbPenalidad(penalidad);
		solTransBancDAO.save(solTransBanc);
		
		
		tx.commit();
		solTransBancDAO.getSession().flush();
		solTransBancDAO.getSession().clear();
	}

	/*
	private ActionForward imprimirReporte(Integer mxaId, String sucNombre, HttpServletResponse response) throws Exception{
		ActionForward forward = null;
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
		try{
			HashMap<String, Object> map = new HashMap<String, Object>();
			Date fechaActual = new Date();
			String nombreReporte = "compRetAhorro";
			String nombreReporte2 = "compRetiroAh";
			String pathReporte = "";//ruta reporte
			ServletContext servletContext = getServlet().getServletContext();
			pathReporte = servletContext
			.getRealPath("/reportesOtros/facturacion/"+nombreReporte+"/"+nombreReporte2+".Jrxml");
			Connection con = HibernateSessionFactory.getSession().connection();
			FileInputStream input = new FileInputStream(new File(pathReporte));
			
			JasperDesign jd = JRXmlLoader.load(input);
			JasperReport jr = JasperCompileManager.compileReport(jd);
			
			map.put("mxaId",mxaId);
			map.put("sucNombre", sucNombre);
			JasperPrint jp = JasperFillManager.fillReport(jr, map, con);
			
			//EXPORT A PDF
			response.setHeader("Cache-Control","private");
			response.setHeader("Pragma", "Cache");
			response.setContentType("application/pdf");
			response.setHeader("content-Disposition", "attachment;filename=" + nombreReporte + dateFormat.format(fechaActual) + ".pdf");
	        JRPdfExporter pdf = new JRPdfExporter();
	        pdf.setParameter(JRExporterParameter.JASPER_PRINT, jp);	        pdf.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());
	        pdf.exportReport();
			
		}catch(Exception e){
			e.printStackTrace();
			log.error("Se produjo un error al tratar de generar el reporte...", e);
		}
		return null;
	}
*/
	//Comprobante ingreso 2
	public ActionForward imprimirReporte2(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		TransaccionAsociadoForm transaccionForm = (TransaccionAsociadoForm)form;
		try{
			Date fechaActual = new Date();
			//ReportesOrdenForm rOrdenForm = (ReportesOrdenForm) form;
			
			response.setHeader("Cache-Control","private");
			response.setHeader("Pragma", "Cache");
			String pathReporte = "";//ruta reporte
			String nombreReporte = "";
			ExportReport exportar = null;
			ReportFile reporte = new ReportFile();
			ServletContext servletContext = getServlet().getServletContext();
			
			nombreReporte = "comprobante";
			pathReporte = servletContext
			.getRealPath("/reportesOtros/facturacion/"+nombreReporte+"/"+nombreReporte+".jasper");
//			Long comprobante = (Long)request.getSession().getAttribute("comprobante");
			Long comprobante = transaccionForm.getComprobante();
			reporte.addParameter("txaComprobante",comprobante);
			
			SecIseInicioSesionDAO sesionDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
			SecIseInicioSesion sesion = sesionDAO.findById(transaccionForm.getUsuarioConectado().getNombreUsuario());
			reporte.addParameter("sucNombre",sesion.getSecPerPersona().getSecSucSucursal().getSucNombre());
			
			reporte.setPathJasper(pathReporte);
			exportar = new ExportReport(reporte);//reporte a exportar
			
			//Conexion jdbc normal
			String jdbcDriver = "com.mysql.jdbc.Driver";
			Class.forName(jdbcDriver);
			String url = HibernateSessionFactory.getConfiguration().getProperty("connection.url");
			String user = HibernateSessionFactory.getConfiguration().getProperty("connection.username");
			String pass = HibernateSessionFactory.getConfiguration().getProperty("connection.password");

			Connection con = DriverManager.getConnection(url, user, pass);


			//Connection con = HibernateSessionFactory.getSession().connection();
			//System.out.println(JRPropertiesMap.class.getPackage().getImplementationVersion());
			byte[] repCompilado = exportar.exportReportPDF(con);
			//exportar.exportReportPDF("algunPdf.pdf", con);
			
			response.setContentType("application/pdf");
			response.setContentLength(repCompilado.length);
			response.setHeader("content-Disposition", "attachment;filename="+nombreReporte+"-"+fechaActual.getTime()+".pdf");
			//response.setHeader("content-Disposition", "attachment;filename="+nombreReporte+"-"+rForm.getFechaReporte()+".pdf");
			ServletOutputStream outputStream = response.getOutputStream();
			outputStream.write(repCompilado, 0, repCompilado.length);
			outputStream.flush();
			outputStream.close();
			
		}catch(Exception e){
			e.printStackTrace();
			log.error("Se produjo un error al tratar de generar el reporte...", e);
			System.out.println("Se produjo un error al tratar de generar el reporte...\n");
		}
		return null;
	}

	//Retiro ahorro 1 
	public ActionForward imprimirReporte(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		TransaccionAsociadoForm transaccionForm = (TransaccionAsociadoForm)form;
		try{
			Date fechaActual = new Date();
			//ReportesOrdenForm rOrdenForm = (ReportesOrdenForm) form;
			
			response.setHeader("Cache-Control","private");
			response.setHeader("Pragma", "Cache");
			String pathReporte = "";//ruta reporte
			String nombreReporte = "";
			ExportReport exportar = null;
			ReportFile reporte = new ReportFile();
			ServletContext servletContext = getServlet().getServletContext();
			
			nombreReporte = "compRetiroAh";
			pathReporte = servletContext
			.getRealPath("/reportesOtros/facturacion/compRetAhorro/compRetiroAh.jasper");
			/*int mxaId = (Integer) request.getSession().getAttribute("mxpIdTrans");
			reporte.addParameter("mxaId",mxaId);*/
			
			/***************/
			//Long comprobante = (Long)request.getSession().getAttribute("comprobante");
			Long comprobante = transaccionForm.getComprobante();
//			System.out.println("Comprobante:" +comprobante);
			reporte.addParameter("txaComprobante",comprobante);
			SecIseInicioSesionDAO sesionDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
			SecIseInicioSesion sesion = sesionDAO.findById(transaccionForm.getUsuarioConectado().getNombreUsuario());
			SecPerPersonaDAO perDAO = new SecPerPersonaDAO(getSessionHibernate(request));
			SecPerPersona per = perDAO.findById(sesion.getSecPerPersona().getPerId());
			SecSucSucursalDAO sucDAO= new SecSucSucursalDAO(getSessionHibernate(request));
			SecSucSucursal suc = sucDAO.findById(per.getSecSucSucursal().getSucId());
			String nombreUsuario = per.getPerPrimerNombre()+" "+per.getPerSegundoNombre()+" "+per.getPerPrimerApellido();
			String sucursal = suc.getSucNombre();
			reporte.addParameter("nombre_usuario", nombreUsuario);
			reporte.addParameter("sucNombre",sucursal);
			reporte.setPathJasper(pathReporte);
			exportar = new ExportReport(reporte);//reporte a exportar
			
			//Conexion jdbc normal
			String jdbcDriver = "com.mysql.jdbc.Driver";
			Class.forName(jdbcDriver);
			String url = HibernateSessionFactory.getConfiguration().getProperty("connection.url");
			String user = HibernateSessionFactory.getConfiguration().getProperty("connection.username");
			String pass = HibernateSessionFactory.getConfiguration().getProperty("connection.password");

			Connection con = DriverManager.getConnection(url, user, pass);


			//Connection con = HibernateSessionFactory.getSession().connection();
			//System.out.println(JRPropertiesMap.class.getPackage().getImplementationVersion());
			byte[] repCompilado = exportar.exportReportPDF(con);
			//exportar.exportReportPDF("algunPdf.pdf", con);
			
			response.setContentType("application/pdf");
			response.setContentLength(repCompilado.length);
			response.setHeader("content-Disposition", "attachment;filename="+nombreReporte+"-"+fechaActual.getTime()+".pdf");
			//response.setHeader("content-Disposition", "attachment;filename="+nombreReporte+"-"+rForm.getFechaReporte()+".pdf");
			ServletOutputStream outputStream = response.getOutputStream();
			outputStream.write(repCompilado, 0, repCompilado.length);
			outputStream.flush();
			outputStream.close();
			
		}catch(Exception e){
			e.printStackTrace();
			log.error("Se produjo un error al tratar de generar el reporte...", e);
			System.out.println("Se produjo un error al tratar de generar el reporte...\n");
		}
		return null;
	}
	
	
	public ActionForward imprimirReporte3(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
//		CorreccionCapitalForm capitalForm = (CorreccionCapitalForm)form;
		try{
			Date fechaActual = new Date();
			TransaccionAsociadoForm rOrdenForm = (TransaccionAsociadoForm) form;
			
			response.setHeader("Cache-Control","private");
			response.setHeader("Pragma", "Cache");
			String pathReporte = "";//ruta reporte
			String nombreReporte = "";
			ExportReport exportar = null;
			ReportFile reporte = new ReportFile();
			ServletContext servletContext = getServlet().getServletContext();
			
			nombreReporte = "comprobante";
			pathReporte = servletContext
			.getRealPath("/reportesOtros/facturacion/compRetAhorro/tran.jasper");
//			Long comprobante = (Long)request.getSession().getAttribute("comprobante");
			Long comprobante = rOrdenForm.getComprobante();
			reporte.addParameter("comp",comprobante);
			
			SecIseInicioSesionDAO sesionDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
			SecIseInicioSesion sesion = sesionDAO.findById(rOrdenForm.getUsuarioConectado().getNombreUsuario());
//			reporte.addParameter("sucNombre",sesion.getSecPerPersona().getSecSucSucursal().getSucNombre());
			
			reporte.setPathJasper(pathReporte);
			exportar = new ExportReport(reporte);//reporte a exportar
			
			//Conexion jdbc normal
			String jdbcDriver = "com.mysql.jdbc.Driver";
			Class.forName(jdbcDriver);
			String url = HibernateSessionFactory.getConfiguration().getProperty("connection.url");
			String user = HibernateSessionFactory.getConfiguration().getProperty("connection.username");
			String pass = HibernateSessionFactory.getConfiguration().getProperty("connection.password");

			Connection con = DriverManager.getConnection(url, user, pass);


			//Connection con = HibernateSessionFactory.getSession().connection();
			//System.out.println(JRPropertiesMap.class.getPackage().getImplementationVersion());
			byte[] repCompilado = exportar.exportReportPDF(con);
			//exportar.exportReportPDF("algunPdf.pdf", con);
			
			response.setContentType("application/pdf");
			response.setContentLength(repCompilado.length);
			response.setHeader("content-Disposition", "attachment;filename="+nombreReporte+"-"+fechaActual.getTime()+".pdf");
			//response.setHeader("content-Disposition", "attachment;filename="+nombreReporte+"-"+rForm.getFechaReporte()+".pdf");
			ServletOutputStream outputStream = response.getOutputStream();
			outputStream.write(repCompilado, 0, repCompilado.length);
			outputStream.flush();
			outputStream.close();
			
		}catch(Exception e){
			e.printStackTrace();
			log.error("Se produjo un error al tratar de generar el reporte...", e);
			System.out.println("Se produjo un error al tratar de generar el reporte...\n");
		}
		return null;
	}
	
	private void siEsMayor(double montoActualizable, CtaPrePrestamo prestamo,
			CtaCasCuentaAsociado cas, CtaMxpMovimientoPrestamo mxpAnt,
			Long comprobante,HttpServletRequest request) {
		CuentaAsociadoAction cuentaAsociadoAction = new  CuentaAsociadoAction();
		CuentaAhorroAction cuentaAhorroAction = new CuentaAhorroAction();
		CtaCasCuentaAsociadoDAO casDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
		CtaTtrTipoTransaccionDAO tipoTransaccionDAO = new CtaTtrTipoTransaccionDAO(getSessionHibernate(request));
		Transaction tx = casDAO.getSession().beginTransaction();
		CtaTxaTransaccionxcuentaAsociadoDAO txaDAO = new CtaTxaTransaccionxcuentaAsociadoDAO(getSessionHibernate(request));
		
		if(mxpAnt == null || mxpAnt.getMxpId() == null){
			montoActualizable = montoActualizable - prestamo.getPreSaldoActualT();
		}else{
			montoActualizable = montoActualizable - prestamo.getPreSaldoActualT();
		}
		if(montoActualizable > 0.0){
			CtaCasCuentaAsociado principal = casDAO.findPrincipal(cas.getCtaAscAsociado().getAscId());
			CtaCahCuentaAhorroDAO ahorroDAO = new CtaCahCuentaAhorroDAO(getSessionHibernate(request));
			CtaCahCuentaAhorro ahorro = ahorroDAO.findById(principal.getCtaCahCuentaAhorro().getCahId());
			ahorro.setCahSaldoActual(ahorro.getCahSaldoActual() + montoActualizable);
			ahorro.setCahInteresAcumulado(cuentaAsociadoAction.getTotalInteresesAhorro(ahorro.getCahId(),request));
			ahorroDAO.merge(ahorro);
			
			//Guardo transaccion de cuenta Principal
			CtaTxaTransaccionxcuentaAsociado txaPrincipal = new CtaTxaTransaccionxcuentaAsociado();
			txaPrincipal.setCtaCasCuentaAsociado(principal);
			txaPrincipal.setCtaTtrTipoTransaccion(tipoTransaccionDAO.findById(11));
			txaPrincipal.setTxaComprobante(comprobante);
			txaPrincipal.setTxaFecha(new Date());
			txaPrincipal.setTxaMonto(montoActualizable);
			txaPrincipal.setCtaNotNotas(null);
			txaPrincipal.setTxaNota("Abono a Ahorro Descuentos (" + principal.getCtaCahCuentaAhorro().getCahId() + ")");
			txaPrincipal.setAudFechaCreacion(new Date());
			txaPrincipal.setAudFechaModificacion(new Date());
			txaPrincipal.setAudUsuarioCreacion(USUARIO);
			txaPrincipal.setAudUsuarioModificacion(USUARIO);
			txaDAO.save(txaPrincipal);
			
			//Movimiento de ahorro cuenta Principal
			CtaMxaMovimientoAhorroDAO mxaDAO = new CtaMxaMovimientoAhorroDAO(getSessionHibernate(request));
			CtaMxaMovimientoAhorro movimientoPrincipal = new CtaMxaMovimientoAhorro();
			movimientoPrincipal.setCtaCahCuentaAhorro(ahorro);
			movimientoPrincipal.setCtaTxaTransaccionxcuentaAsociado(txaPrincipal);
			movimientoPrincipal.setMxaFecha(new Date());
			movimientoPrincipal.setMxaInteresTran(cuentaAhorroAction.calculoInteresTransaccion(ahorro.getCahId(), new Date(),request));
			movimientoPrincipal.setMxaMonto(montoActualizable);
			movimientoPrincipal.setMxaSaldo(ahorro.getCahSaldoActual() + montoActualizable);
			movimientoPrincipal.setAudFechaCreacion(new Date());
			movimientoPrincipal.setAudFechaModificacion(new Date());
			movimientoPrincipal.setAudUsuarioCreacion(USUARIO);
			movimientoPrincipal.setAudUsuarioModificacion(USUARIO);
			mxaDAO.save(movimientoPrincipal);
			
			//ahorro.setCahInteresAcumulado(ahorro.getCahInteresAcumulado() + movimientoPrincipal.getMxaInteresTran());
			//ahorroDAO.merge(ahorro);
			tx.commit();
			
			enviarTransaccionAContabilidad(txaPrincipal, USUARIO, "B", principal, 0.0, null,request);
		}
	}

	private Double pagarOrdenes(List ordeneDebe, double monto,HttpServletRequest request) {
		Double montoActualizable = monto;
		OrdOcoOrdenDeCompraDAO compraDAO = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
		Transaction tx = compraDAO.getSession().beginTransaction();
		for (Iterator iterator = ordeneDebe.iterator(); iterator.hasNext();) {
			OrdOcoOrdenDeCompra compra = (OrdOcoOrdenDeCompra) iterator.next();
			if(montoActualizable == 0.00) return 0.00;
			
			if(montoActualizable >= compra.getOcoSaldo()){
				compra.setOcoSaldo(0.00);
				compra.setOcoPagado(compra.getOcoPagado()+compra.getOcoSaldo());
				montoActualizable-=compra.getOcoSaldo();
				
				if(compra.getOcoEstado().equals("C") || compra.getOcoEstado().equals("R")){
					compra.setOcoEstado("P");
					compra.setAudFechaModificacion(new Date());
				}
				if(compra.getOcoEstado().equals("F")){
					compra.setOcoEstado("G");
					compra.setAudFechaModificacion(new Date());
				}
				if(compra.getOcoEstado().equals("D")){
					compra.setOcoEstado("S");
					compra.setAudFechaModificacion(new Date());
				}				
			}else{
				compra.setOcoSaldo(compra.getOcoSaldo()-montoActualizable);
				compra.setOcoPagado(compra.getOcoPagado()+montoActualizable);
				montoActualizable=0.00;
			}
			compraDAO.merge(compra);
			tx.commit();
			compraDAO.getSession().flush();
			compraDAO.getSession().clear();
		}
		return montoActualizable;
	}

	//Funciones que se usaran para eliminar la tabla de transacciones antes de hacerla oficial
	public ActionForward guardarMovimiento(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String listaResponse = "";
		String listaErrores ="";
		TransaccionAsociadoForm transaccionAsociadoForm = (TransaccionAsociadoForm) form;
		ArrayList<String> errors = new ArrayList<String>();
		
		HashMap<Long, TransacObj> mapa = (HashMap<Long, TransacObj>)request.getSession().getAttribute("listaTransacciones");
		if(mapa == null){
			mapa = new HashMap<Long, TransacObj>();
		}
		errors = validarMovimiento(transaccionAsociadoForm, errors,mapa,request);
		if(!errors.isEmpty()){
			listaErrores=construirListaErrores(errors);
		}else{
			CtaCasCuentaAsociadoDAO casDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
			//CtaTxaTransaccionxcuentaAsociado txa1 = new CtaTxaTransaccionxcuentaAsociado();
			//CtaTxaTransaccionxcuentaAsociado txa2 = new CtaTxaTransaccionxcuentaAsociado();
			
			TransacObj transac1 = new TransacObj();
			if(transaccionAsociadoForm.getFuente()==1){
				if(transaccionAsociadoForm.getDestino()>2 && transaccionAsociadoForm.getDestino()<7){
					//Usamos 13 pues es el abono en efectivo, 
					transac1.setTtr(13);
					transac1.setCas(transaccionAsociadoForm.getCuentaDestino());
					transac1.setMonto(transaccionAsociadoForm.getTxaMonto());
					
					CtaCasCuentaAsociado cas = casDAO.findById((long)transac1.getCas());

					transac1 = seteaCuentas(transac1,transaccionAsociadoForm,1,request);
					if(transac1 != null && transac1.getNota() != null){
						transac1.setNota(transac1.getNota() + " - Abono en Efectivo");
					}else{
						transac1.setNota("Abono en Efectivo");
					}
					
					
					if(transac1 != null){
						mapa.put(System.currentTimeMillis(),transac1);
					}else{
						errors.add(getResources(request).getMessage("errors.tranDml.noCuenta"));
					}
				}
				if(transaccionAsociadoForm.getDestino() == 1){
					errors.add(getResources(request).getMessage("errors.tranDml.efectivoAEfectivo"));
				}
				if(transaccionAsociadoForm.getDestino() == 2){
					errors.add(getResources(request).getMessage("errors.tranDml.efectivoACheque"));
				}
				if(transaccionAsociadoForm.getDestino() == 7){
					errors.add(getResources(request).getMessage("errors.tranDml.efectivoAeTrans"));
				}
			}
			if(transaccionAsociadoForm.getFuente()==2){
				if(transaccionAsociadoForm.getDestino()>2 && transaccionAsociadoForm.getDestino() < 7){
					//41 es: Abono realizado por medio de cheque
					transac1.setTtr(41);
					transac1.setCas(transaccionAsociadoForm.getCuentaDestino());
					transac1.setMonto(transaccionAsociadoForm.getTxaMonto());
					transac1.setCheque("S");
					transac1.setCorrelativoCheque(transaccionAsociadoForm.getChequeNum());
					transac1.setBanId(transaccionAsociadoForm.getBanId());
					CtrBanBancoDAO bancoDAO = new CtrBanBancoDAO(getSessionHibernate(request));
					String nota = bancoDAO.findById(transaccionAsociadoForm.getBanId()).getBanNombre() 
								+ " # " + transaccionAsociadoForm.getChequeNum()  ;
					transac1.setNota(nota);
					transac1 = seteaCuentas(transac1, transaccionAsociadoForm,1,request);
					transac1.setNota(transac1.getNota() + " - Abono en Cheque - " + nota);
					if(transac1 != null){
						mapa.put(System.currentTimeMillis(),transac1);
					}else{
						errors.add(getResources(request).getMessage("errors.tranDml.noCuenta"));
					}
				}
				if(transaccionAsociadoForm.getDestino() == 2){
					errors.add(getResources(request).getMessage("errors.tranDml.chequeACheque"));
				}
				if(transaccionAsociadoForm.getDestino() == 1){
					errors.add(getResources(request).getMessage("errors.tranDml.chequeAEfectivo"));
				}
				if(transaccionAsociadoForm.getDestino() == 7){
					errors.add(getResources(request).getMessage("errors.tranDml.chequeAeTrans"));
				}
			}
			//
			if(transaccionAsociadoForm.getFuente()==3){//AHORRO
				CtaCasCuentaAsociado cas = casDAO.findById((long) transaccionAsociadoForm.getCuentaFuente());
				double dispCas = cas.getCtaCahCuentaAhorro().getCahSaldoActual() - transaccionAsociadoForm.getTxaMonto();
				if(obtenerDisponible(dispCas, mapa, cas,1,request)<0.0){
					errors.add(getResources(request).getMessage("errors.tranDml.fondosInsuficientes"));
					if(!errors.isEmpty()){
						listaErrores=construirListaErrores(errors);
					}
					listaResponse =construirListaTransacciones(mapa,request);
					try {
						response.setCharacterEncoding("UTF-8");
						response.getWriter().write(listaErrores+listaResponse);
						response.getWriter().flush();
						response.getWriter().close();
					} catch (IOException e) {
						e.printStackTrace();
					}
					return null;
					
				}else{
					/*TransacObj transacAhorro = mapa.get(transaccionAsociadoForm.getIdMapaAhorro());
					transacAhorro.setMonto(transacAhorro.getMonto() + transaccionAsociadoForm.getTxaMonto());
					mapa.put(transaccionAsociadoForm.getIdMapaAhorro(), transacAhorro);
					*/
					CtaCahCuentaAhorroDAO ahorroDAO = new CtaCahCuentaAhorroDAO(getSessionHibernate(request));
					CuentaAhorroAction ahorroAction = new CuentaAhorroAction();
					CtaCahCuentaAhorro ahorro = ahorroDAO.findById(cas.getCtaCahCuentaAhorro().getCahId());
					Double penalidad = ahorroAction.calculoPenalidad(ahorro,transaccionAsociadoForm.getTxaMonto(),request);
					if (penalidad+transaccionAsociadoForm.getTxaMonto()> ahorro.getCahSaldoActual()){
						errors.add(getResources(request).getMessage("errors.tranDml.fondosInsuficientes"));
						if(!errors.isEmpty()){
							listaErrores=construirListaErrores(errors);
						}
						listaResponse =construirListaTransacciones(mapa,request);
						try {
							response.setCharacterEncoding("UTF-8");
							response.getWriter().write(listaErrores+listaResponse);
							response.getWriter().flush();
							response.getWriter().close();
						} catch (IOException e) {
							e.printStackTrace();
						}
						return null;
					}
					if(transaccionAsociadoForm.getDestino()==1){
						//21 es Retiro en efectivo
						transac1.setTtr(21);
						transac1.setCas(transaccionAsociadoForm.getCuentaFuente());
						transac1.setMonto(transaccionAsociadoForm.getTxaMonto());
						//transac1.setMonto(transaccionAsociadoForm.getTxaMonto()-penalidad);
						transac1 = seteaCuentas(transac1, transaccionAsociadoForm,2,request);
						if(transac1 != null){
							String nota1 = " - Retiro de Ahorro en Efectivo";
							transac1.setNota(transac1.getNota() + nota1);
							mapa.put(new Long(0),transac1);
						}else{
							errors.add(getResources(request).getMessage("errors.tranDml.noCuenta"));
						}
						
						if(penalidad > 0.0){
							//38 cargo por penalidad a ahorros
							TransacObj transac2 = new TransacObj();
							transac2.setTtr(38);
							transac2.setCas(transaccionAsociadoForm.getCuentaFuente());
							//transac1.setMonto(transaccionAsociadoForm.getTxaMonto());
							transac2.setMonto(penalidad);
							transac2 = seteaCuentas(transac2, transaccionAsociadoForm,2,request);
							if(transac2 != null){
								String nota2 = "Cargo por Penalidad de Retiro";
								transac2.setNota(nota2);
								mapa.put(System.currentTimeMillis(),transac2);
							}else{
								errors.add(getResources(request).getMessage("errors.tranDml.noCuenta"));
							}
						}
					}
					if(transaccionAsociadoForm.getDestino()>2 && transaccionAsociadoForm.getDestino() < 7){
						if(transaccionAsociadoForm.getCuentaDestino() == transaccionAsociadoForm.getCuentaFuente()){
							errors.add(getResources(request).getMessage("errors.tranDml.mismaCuenta"));
						}else{
							TransacObj transac2 = new TransacObj();
							//Usamos 23 pues es cargo por transferencia, 
							//transfiere de la cuenta de ahorros a cualquier otra
							transac2.setTtr(23);
							transac2.setCas(transaccionAsociadoForm.getCuentaFuente());
							transac2.setMonto(transaccionAsociadoForm.getTxaMonto());
							//transac2.setMonto(transaccionAsociadoForm.getTxaMonto()-penalidad);
							
							if (penalidad+transaccionAsociadoForm.getTxaMonto()> ahorro.getCahSaldoActual()){
								
								errors.add(getResources(request).getMessage("errors.tranDml.fondosInsuficientes"));
								if(!errors.isEmpty()){
									listaErrores=construirListaErrores(errors);
								}
								listaResponse =construirListaTransacciones(mapa,request);
								try {
									response.setCharacterEncoding("UTF-8");
									response.getWriter().write(listaErrores+listaResponse);
									response.getWriter().flush();
									response.getWriter().close();
								} catch (IOException e) {
									e.printStackTrace();
								}
								return null;
							}
							
							String nota = " - Cargo a cuenta";
							transac2 = seteaCuentas(transac2, transaccionAsociadoForm,2,request);
							transac2.setNota(transac2.getNota() + nota);
							
							if(transac2 != null){
								mapa.put(System.currentTimeMillis(),transac2);
							}else{
								errors.add(getResources(request).getMessage("errors.tranDml.noCuenta"));
							}
							
							//Usamos 5 pues es abono por transferencia, 
							//Abono viene desde una cuenta hacia esta
							transac1.setTtr(5);
							transac1.setCas(transaccionAsociadoForm.getCuentaDestino());
							transac1.setMonto(transaccionAsociadoForm.getTxaMonto());
							//transac1.setMonto(transaccionAsociadoForm.getTxaMonto()-penalidad);
							String nota1 = " - Abono a cuenta desde ahorro";
							transac1 = seteaCuentas(transac1, transaccionAsociadoForm,1,request);
							transac1.setNota(transac1.getNota() + nota1);
							
							if(transac1 != null){
								mapa.put(System.currentTimeMillis()+1,transac1);
							}else{
								errors.add(getResources(request).getMessage("errors.tranDml.noCuenta"));
							}
							
							if(penalidad > 0.0){
								//38 cargo por penalidad a ahorros
								TransacObj transac3 = new TransacObj();
								transac3.setTtr(38);
								transac3.setCas(transaccionAsociadoForm.getCuentaFuente());
								//transac1.setMonto(transaccionAsociadoForm.getTxaMonto());
								transac3.setMonto(penalidad);
								transac3 = seteaCuentas(transac3, transaccionAsociadoForm,2,request);
								if(transac3 != null){
									String nota2 = "Cargo por Penalidad de Retiro";
									transac3.setNota(nota2);
									mapa.put(System.currentTimeMillis()+2,transac3);
								}else{
									errors.add(getResources(request).getMessage("errors.tranDml.noCuenta"));
								}
							}
						}
					}
					if(transaccionAsociadoForm.getDestino() == 2){
						//22 es: Retiro en Cheque
						transac1.setTtr(22);
						transac1.setCas(transaccionAsociadoForm.getCuentaFuente());
						transac1.setMonto(transaccionAsociadoForm.getTxaMonto());
						//transac1.setMonto(transaccionAsociadoForm.getTxaMonto()-penalidad);
						transac1.setCorrelativoCheque(Integer.valueOf(transaccionAsociadoForm.getChequeNumD()));
						transac1.setCheque("S");
						transac1.setRckId(transaccionAsociadoForm.getRckId());
						transac1.setBanId(transaccionAsociadoForm.getBanIdD());
						transac1 = seteaCuentas(transac1, transaccionAsociadoForm,2,request);
						if(transac1 != null){
							mapa.put(System.currentTimeMillis(),transac1);
						}else{
							errors.add(getResources(request).getMessage("errors.tranDml.noCuenta"));
						}
						
						if (penalidad+transaccionAsociadoForm.getTxaMonto()> ahorro.getCahSaldoActual()){
							errors.add(getResources(request).getMessage("errors.tranDml.fondosInsuficientes"));
							listaResponse =construirListaTransacciones(mapa,request);
							if(!errors.isEmpty()){
								listaErrores=construirListaErrores(errors);
							}
							try {
								response.setCharacterEncoding("UTF-8");
								response.getWriter().write(listaErrores+listaResponse);
								response.getWriter().flush();
								response.getWriter().close();
							} catch (IOException e) {
								e.printStackTrace();
							}
							return null;
						}
						if(penalidad > 0.0){
							//38 cargo por penalidad a ahorros
							TransacObj transac3 = new TransacObj();
							transac3.setTtr(38);
							transac3.setCas(transaccionAsociadoForm.getCuentaFuente());
							//transac1.setMonto(transaccionAsociadoForm.getTxaMonto());
							transac3.setMonto(penalidad);
							transac3 = seteaCuentas(transac3, transaccionAsociadoForm,2,request);
							if(transac3 != null){
								String nota2 = "Cargo por Penalidad de Retiro";
								transac3.setNota(nota2);
								mapa.put(System.currentTimeMillis()+1,transac3);
							}else{
								errors.add(getResources(request).getMessage("errors.tranDml.noCuenta"));
							}
						}
					}
					if(transaccionAsociadoForm.getDestino()==7){
						if(penalidad <= 0.0){
							//26 es Peticion de transaccion electronica
							transac1.setTtr(26);
							transac1.setCas(transaccionAsociadoForm.getCuentaFuente());
							//transac1.setMonto(transaccionAsociadoForm.getTxaMonto()-penalidad);
							transac1.setMonto(transaccionAsociadoForm.getTxaMonto());
							
							if (penalidad+transaccionAsociadoForm.getTxaMonto()> ahorro.getCahSaldoActual()){
								errors.add(getResources(request).getMessage("errors.tranDml.fondosInsuficientes"));
								if(!errors.isEmpty()){
									listaErrores=construirListaErrores(errors);
								}
								listaResponse =construirListaTransacciones(mapa,request);
								try {
									response.setCharacterEncoding("UTF-8");
									response.getWriter().write(listaErrores+listaResponse);
									response.getWriter().flush();
									response.getWriter().close();
								} catch (IOException e) {
									e.printStackTrace();
								}
								return null;
							}
							
							transac1 = seteaCuentas(transac1, transaccionAsociadoForm,2,request);
							
							if(transac1 != null){
								CtrBanBancoDAO bancoDAO = new CtrBanBancoDAO(getSessionHibernate(request));
								String nota1 = " - Retiro Electronico - " + bancoDAO.findById(transaccionAsociadoForm.getBanIdD()).getBanNombre();
								transac1.setNota(transac1.getNota() + nota1);
								mapa.put(System.currentTimeMillis(),transac1);
							}else{
								errors.add(getResources(request).getMessage("errors.tranDml.noCuenta"));
							}
						}else{
							if (penalidad+transaccionAsociadoForm.getTxaMonto()> ahorro.getCahSaldoActual()){
								errors.add(getResources(request).getMessage("errors.tranDml.fondosInsuficientes"));
								if(!errors.isEmpty()){
									listaErrores=construirListaErrores(errors);
								}
								listaResponse =construirListaTransacciones(mapa,request);
								try {
									response.setCharacterEncoding("UTF-8");
									response.getWriter().write(listaErrores+listaResponse);
									response.getWriter().flush();
									response.getWriter().close();
								} catch (IOException e) {
									e.printStackTrace();
								}
								return null;
							}
							//errors.add(getResources(request).getMessage("errors.tranDml.electronicaPenalidad"));
							transac1.setTtr(26);//26 es Peticion de transaccion electronica
							transac1.setCas(transaccionAsociadoForm.getCuentaFuente());
							//transac1.setMonto(transaccionAsociadoForm.getTxaMonto()-penalidad);
							transac1.setMonto(transaccionAsociadoForm.getTxaMonto());
							transac1.setPenalidad(penalidad);
							transac1 = seteaCuentas(transac1, transaccionAsociadoForm,2,request);
							if(transac1 != null){
								CtrBanBancoDAO bancoDAO = new CtrBanBancoDAO(getSessionHibernate(request));
								String nota1 = " - Retiro Electronico - " + bancoDAO.findById(transaccionAsociadoForm.getBanIdD()).getBanNombre();
								transac1.setNota(transac1.getNota() + nota1);
								mapa.put(System.currentTimeMillis(),transac1);
							}else{
								errors.add(getResources(request).getMessage("errors.tranDml.noCuenta"));
							}
							//System.out.println("Penalidad: "+penalidad);
							TransacObj transac2 = new TransacObj();
							transac2.setTtr(38);//38 cargo por penalidad a ahorros
							transac2.setCas(transaccionAsociadoForm.getCuentaFuente());
							//transac1.setMonto(transaccionAsociadoForm.getTxaMonto());
							transac2.setMonto(penalidad);
							transac2 = seteaCuentas(transac2, transaccionAsociadoForm,2,request);
							if(transac2 != null){
								String nota2 = "Cargo por Penalidad de Retiro";
								transac2.setNota(nota2);
								mapa.put(System.currentTimeMillis() + 1,transac2);
							}else{
								errors.add(getResources(request).getMessage("errors.tranDml.noCuenta"));
							}
						}
					}
				}
			}
			if(transaccionAsociadoForm.getFuente()==4){
				if(transaccionAsociadoForm.getDestino()>2 && transaccionAsociadoForm.getDestino() < 7){
					//33 es: Abono realizado por transferencia electronica
					transac1.setTtr(33);
					transac1.setCas(transaccionAsociadoForm.getCuentaDestino());
					transac1.setMonto(transaccionAsociadoForm.getTxaMonto());
					transac1.setBanId(transaccionAsociadoForm.getBanId());
					CtrBanBancoDAO bancoDAO = new CtrBanBancoDAO(getSessionHibernate(request));
					String nota = "Transferencia Electronica - " + bancoDAO.findById(transaccionAsociadoForm.getBanId()).getBanNombre();
					transac1.setNota(nota);
					transac1 = seteaCuentas(transac1, transaccionAsociadoForm,4,request);
					if(transac1 != null){
						mapa.put(System.currentTimeMillis(),transac1);
					}else{
						errors.add(getResources(request).getMessage("errors.tranDml.noCuenta"));
					}
				}
				if(transaccionAsociadoForm.getDestino() == 2){
					errors.add(getResources(request).getMessage("errors.tranDml.chequeACheque"));
				}
				if(transaccionAsociadoForm.getDestino() == 1){
					errors.add(getResources(request).getMessage("errors.tranDml.chequeAEfectivo"));
				}
				if(transaccionAsociadoForm.getDestino() == 7){
					errors.add(getResources(request).getMessage("errors.tranDml.eTranAeTran"));
				}
			}
			request.getSession().setAttribute("listaTransacciones", mapa);
		}
		if(!errors.isEmpty()){
			listaErrores=construirListaErrores(errors);
		}
		listaResponse =construirListaTransacciones(mapa,request);
		try {
			response.setCharacterEncoding("UTF-8");
			response.getWriter().write(listaErrores+listaResponse);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
		
	}
	
	private TransacObj seteaCuentas(TransacObj transac, TransaccionAsociadoForm form, int fuente
			,HttpServletRequest request) {
		CtaCasCuentaAsociadoDAO casDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
		CtaCasCuentaAsociado cas = casDAO.findById((long) transac.getCas());
		if(cas != null && cas.getCasCuenta()!=null){
			if(fuente == 1){
				if(form.getDestino() == 3){
					transac.setTipoCuenta("Aportacion - " + cas.getCtaCahCuentaAhorro().getCahId());
					transac.setCuenta("A");
					transac.setNota(transac.getTipoCuenta());
				}
				if(form.getDestino() == 4){
					transac.setTipoCuenta("Ahorro - " + cas.getCtaCahCuentaAhorro().getCahId());
					if(cas.getCtaCahCuentaAhorro().getCtaTahTipoAhorro() == null){
						transac.setNota("Default");
					}else{
						transac.setNota(cas.getCtaCahCuentaAhorro().getCtaTahTipoAhorro().getTahNombre() + " - " + cas.getCtaCahCuentaAhorro().getCahId());
					}
					transac.setCuenta("B");
				}
				if(form.getDestino() == 5){
					transac.setTipoCuenta("Prestamo - " + cas.getCtaPrePrestamo().getPreId());
					if(cas.getCtaPrePrestamo().getCtaTprTipoPrestamo() == null){
						transac.setNota("Credito");
					}else{
						CtaTprTipoPrestamoDAO tipoPrestamoDAO = new CtaTprTipoPrestamoDAO(getSessionHibernate(request));
						CtaTprTipoPrestamo tpr = tipoPrestamoDAO.findById(cas.getCtaPrePrestamo().getCtaTprTipoPrestamo().getTprId());
						transac.setNota(tpr.getCtaLprLineaPrestamo().getLprNombre() + " - " + cas.getCtaPrePrestamo().getPreId());
					}
					transac.setCuenta("C");
				}
				if(form.getDestino() == 6){
					transac.setTipoCuenta("Seguro - " + cas.getCtaSegSeguros().getSegId());
					transac.setNota(cas.getCtaSegSeguros().getCtaTisTipoSeguro().getTisNombre() + " - " + cas.getCtaSegSeguros().getSegId());
					transac.setCuenta("D");
				}			
			}else{
				if(form.getFuente() == 3){
					transac.setTipoCuenta("Ahorro - " + cas.getCtaCahCuentaAhorro().getCahId());
					if(cas.getCtaCahCuentaAhorro().getCtaTahTipoAhorro() == null){
						transac.setNota("Default");
					}else{
						transac.setNota(cas.getCtaCahCuentaAhorro().getCtaTahTipoAhorro().getTahNombre() + " - " + cas.getCtaCahCuentaAhorro().getCahId());
					}
					if(form.getDestino() == 2){
						CtrBanBancoDAO bancoDAO = new CtrBanBancoDAO(getSessionHibernate(request));
						transac.setNota(transac.getNota() + " - Retiro en Cheque - " 
								+ bancoDAO.findById(form.getBanIdD()).getBanNombre() + " # " + form.getChequeNumD());
					}
					transac.setCuenta("B");
				}
				if(fuente == 4){
					CtrBanBancoDAO bancoDAO = new CtrBanBancoDAO(getSessionHibernate(request));
					CtrBanBanco banco = bancoDAO.findById(form.getBanId());
					String nota = banco.getBanNombre();
					if(form.getDestino() == 3){
						transac.setTipoCuenta(" - Aportacion - " + cas.getCtaCahCuentaAhorro().getCahId());
						transac.setCuenta("A");
						transac.setNota(nota + transac.getTipoCuenta());
					}
					if(form.getDestino() == 4){
						transac.setTipoCuenta("Ahorro - " + cas.getCtaCahCuentaAhorro().getCahId());
						if(cas.getCtaCahCuentaAhorro().getCtaTahTipoAhorro() == null){
							transac.setNota(nota + " - Ahorro Descuento");
						}else{
							transac.setNota(cas.getCtaCahCuentaAhorro().getCtaTahTipoAhorro().getTahNombre() + " - " + cas.getCtaCahCuentaAhorro().getCahId() + nota);
						}
						transac.setCuenta("B");
					}
					if(form.getDestino() == 5){
						transac.setTipoCuenta("Prestamo - " + cas.getCtaPrePrestamo().getPreId());
						if(cas.getCtaPrePrestamo().getCtaTprTipoPrestamo() == null){
							transac.setNota(nota + "Credito");
						}else{
							CtaTprTipoPrestamoDAO tipoPrestamoDAO = new CtaTprTipoPrestamoDAO(getSessionHibernate(request));
							CtaTprTipoPrestamo tpr = tipoPrestamoDAO.findById(cas.getCtaPrePrestamo().getCtaTprTipoPrestamo().getTprId());
							transac.setNota(nota + " - " + tpr.getCtaLprLineaPrestamo().getLprNombre() + " - " + cas.getCtaPrePrestamo().getPreId());
						}
						transac.setCuenta("C");
					}
					if(form.getDestino() == 6){
						transac.setTipoCuenta("Seguro - " + cas.getCtaSegSeguros().getSegId());
						transac.setNota(nota + " - " + cas.getCtaSegSeguros().getCtaTisTipoSeguro().getTisNombre() + " - " +cas.getCtaSegSeguros().getSegId());
						transac.setCuenta("D");
					}
				}
			}
		}else{
			transac = null;
		}
		return transac;
	}

	private class TransacObj{
		private int ttr;
		private int cas;
		private double monto;
		private double penalidad;
		private String nota;
		private String tipoCuenta;
		private String cuenta;
		private String cheque;
		private Integer correlativoCheque;
		private int banId;
		private boolean nb;
		private Integer rckId;
		
		public TransacObj() {
			super();
		}

		public TransacObj(int ttr, int cas, double monto, double penalidad, String nota,
				String tipoCuenta, String cuenta, String cheque,
				Integer correlativoCheque, int banId,
				boolean nb, Integer rckId) {
			super();
			this.ttr = ttr;
			this.cas = cas;
			this.monto = monto;
			this.nota = nota;
			this.tipoCuenta = tipoCuenta;
			this.cuenta = cuenta;
			this.cheque = cheque;
			this.correlativoCheque = correlativoCheque;
			this.banId = banId;
			this.nb = nb;
			this.rckId = rckId;
		}

		public int getTtr() {
			return ttr;
		}

		public void setTtr(int ttr) {
			this.ttr = ttr;
		}

		public int getCas() {
			return cas;
		}

		public void setCas(int cas) {
			this.cas = cas;
		}

		public double getMonto() {
			DecimalFormat df = new DecimalFormat("0.00");
			Double m = new Double(df.format(this.monto));
			return m.doubleValue();
		}

		public void setMonto(double monto) {
			this.monto = monto;
		}

		public double getPenalidad() {
			return penalidad;
		}

		public void setPenalidad(double penalidad) {
			this.penalidad = penalidad;
		}

		public String getNota() {
			return nota;
		}

		public void setNota(String nota) {
			this.nota = nota;
		}

		public String getTipoCuenta() {
			return tipoCuenta;
		}

		public void setTipoCuenta(String tipoCuenta) {
			this.tipoCuenta = tipoCuenta;
		}

		public String getCuenta() {
			return cuenta;
		}

		public void setCuenta(String cuenta) {
			this.cuenta = cuenta;
		}

		public String getCheque() {
			return cheque;
		}

		public void setCheque(String cheque) {
			this.cheque = cheque;
		}

		public Integer getCorrelativoCheque() {
			return correlativoCheque;
		}

		public void setCorrelativoCheque(Integer correlativoCheque) {
			this.correlativoCheque = correlativoCheque;
		}

		public boolean isNb() {
			return nb;
		}

		public void setNb(boolean nb) {
			this.nb = nb;
		}

		public int getBanId() {
			return banId;
		}

		public void setBanId(int banId) {
			this.banId = banId;
		}

		public Integer getRckId() {
			return rckId;
		}

		public void setRckId(Integer rckId) {
			this.rckId = rckId;
		}
		
	}
	
	private ArrayList<String> validarMovimiento(TransaccionAsociadoForm form,ArrayList<String> errors,HashMap<Long, TransacObj> mapa,HttpServletRequest request){
		if(form.getTxaMonto()<= 0){
			errors.add(getResources(request).getMessage("errors.tranDML.montoNegativo"));
		}
		if(form.getFuente()< 1){
			errors.add(getResources(request).getMessage("errors.tranDML.noFuente"));
		}else{
			if(form.getFuente()==3){
				CtaCasCuentaAsociadoDAO casDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
				CtaCasCuentaAsociado cas = casDAO.findById((long) form.getCuentaFuente());
				
				//Verificar si el asociado puede sacar dinero de sus ahorros
				CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
				CtaAscAsociado asociado = asociadoDAO.findById(cas.getCtaAscAsociado().getAscId());
					
				CuentaAhorroAction casAction = new CuentaAhorroAction();
				//Double saldoPenalidad = cas.getCtaCahCuentaAhorro().getCahSaldoActual() - casAction.calculoPenalidad(cas.getCtaCahCuentaAhorro()); 
				//if(saldoPenalidad<form.getTxaMonto()){
				if(cas.getCtaCahCuentaAhorro().getCahSaldoActual()<form.getTxaMonto()){
					errors.add(getResources(request).getMessage("errors.tranDML.ahorroInsuficiente"));
				}
				if(!asociado.getEstId().equals(6)){
					if(form.getDestino()==7){
						if(form.getCuentaBan()== null || form.getCuentaBan().equals("null")
								|| form.getCuentaBan().equals("undefined")){
							errors.add(getResources(request).getMessage("errors.tranDml.noCuenta"));
						}
					}
				}else{
					if(form.getDestino()!= 5 && form.getDestino()!=6){
						errors.add(getResources(request).getMessage("errors.tranDml.inactivoNoPuede"));
					}
				}
			}else{
				Double disponible = form.getCant() - form.getTxaMonto();
				if(obtenerDisponible(disponible, mapa, null, -1,request) < 0){
					errors.add(getResources(request).getMessage("errors.tranDML.masQueDisponible"));
				}
			}
			if(form.getFuente()==2){
				if(form.getChequeNum() == null || form.getChequeNum() < 0){
					errors.add(getResources(request).getMessage("errors.tranDML.missingChequeNum"));
				}
			}
		}
		if(form.getDestino()< 1){
			errors.add(getResources(request).getMessage("errors.tranDML.noDestino"));
		}else{
			if(form.getDestino() == 2){
				if(form.getChequeNumD() == null || form.getChequeNumD().trim().equals("")){
					errors.add(getResources(request).getMessage("errors.tranDML.missingChequeNum"));
				}
			}
			if(form.getDestino()==3){
				CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
				CtaAscAsociado asociado = asociadoDAO.findById(form.getAscId());
				if(asociado.getCtrEstEstado().getEstId().equals(6)){
					errors.add(getResources(request).getMessage("errors.tranDML.inactivoTransNotValid"));
				}
			}
			if(form.getDestino() == 5){
				CtaCasCuentaAsociadoDAO casDao = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
				CtaCasCuentaAsociado cas = casDao.findById((long) form.getCuentaDestino());
				if(cas == null || cas.getCasCuenta() == null){
					errors.add(getResources(request).getMessage("errors.tranDml.noCuenta"));
				}else{
					//Calcular saldo con los intereses pendientes
					IntereseYMora iYm = new IntereseYMora();
					CtaMxpMovimientoPrestamoDAO mxpDao = new CtaMxpMovimientoPrestamoDAO(getSessionHibernate(request));
					CtaMxpMovimientoPrestamo mxpAnt = mxpDao.findUltimoMovimiento(cas.getCtaPrePrestamo().getPreId());
					if(mxpAnt == null || mxpAnt.getMxpId() == null){
						mxpAnt = new CtaMxpMovimientoPrestamo();
					}
					iYm = iYm.actualizaInteres(mxpAnt, cas.getCtaPrePrestamo(), cas, new Date(),request);
					Double saldoConInteres = cas.getCtaPrePrestamo().getPreSaldoActualT() + iYm.getAcumulado() + iYm.getPendiente(); 
					if(form.getTxaMonto()>saldoConInteres){
						errors.add(getResources(request).getMessage("errors.tranDML.masQueSaldoRestante"));
					}
				}
			}
			if(form.getDestino() == 6){
				CtaCasCuentaAsociadoDAO casDao = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
				CtaCasCuentaAsociado cas = casDao.findById((long) form.getCuentaDestino());
				if(cas == null || cas.getCasCuenta() == null){
					errors.add(getResources(request).getMessage("errors.tranDml.noCuenta"));
				}else{
					if(form.getTxaMonto() > cas.getCtaSegSeguros().getSegSaldoActual()){
						errors.add(getResources(request).getMessage("errors.tranDML.masQueSaldoRestante"));
					}
				}
			}
		}
		if(seEncuentraEnLista(mapa, form.getCuentaDestino())){
			errors.add(getResources(request).getMessage("errors.tranDML.cuentaEnTabla"));
		}
		return errors;
	}
	
	private boolean seEncuentraEnLista(HashMap<Long, TransacObj> mapa,
			int cuentaDestino) {
		for (Iterator iterator = mapa.values().iterator(); iterator.hasNext();) {
			TransacObj tranObj = (TransacObj) iterator.next();
			if(tranObj.getCas() == cuentaDestino){
				return true;
			}
		}
		return false;
	}

	public ActionForward eliminarMovimientos(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		TransaccionAsociadoForm transaccionAsociadoForm = (TransaccionAsociadoForm)form;
		HashMap<Long, TransacObj> mapa = (HashMap<Long, TransacObj>)request.getSession().getAttribute("listaTransacciones");
		if (transaccionAsociadoForm.getPosicionMov() != null) {
			int size = transaccionAsociadoForm.getPosicionMov().length;
			int i = 0;
			while (i < size) {
				mapa.remove(transaccionAsociadoForm.getPosicionMov()[i]);
				TransacObj transacObj = new TransacObj();
				if(mapa.get(transaccionAsociadoForm.getPosicionMov()[i] + 1) != null){
					mapa.remove(transaccionAsociadoForm.getPosicionMov()[i] + 1);
				}
				if(mapa.get(transaccionAsociadoForm.getPosicionMov()[i] - 1) != null){
					mapa.remove(transaccionAsociadoForm.getPosicionMov()[i] - 1);
				}
				if(mapa.get(transaccionAsociadoForm.getPosicionMov()[i] + 2) != null){
					mapa.remove(transaccionAsociadoForm.getPosicionMov()[i] + 2);
				}
				if(mapa.get(transaccionAsociadoForm.getPosicionMov()[i] - 2) != null){
					mapa.remove(transaccionAsociadoForm.getPosicionMov()[i] - 2);
				}
				i++;
			}
		}
		try {
			response.setCharacterEncoding("UTF-8");
			request.getSession().setAttribute("listaTransacciones", mapa);
			response.getWriter().write(construirListaTransacciones(mapa, request));
			response.getWriter().flush();
			response.getWriter().close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	}
	
	private String construirListaTransacciones(HashMap<Long, TransacObj> mapa,HttpServletRequest request){
		String html = "<table class=\"tableone\" summary=\"\"><caption>"
				+ getResources(request).getMessage("lbl.tranDml.titulo")
				+ "</caption>";
		html = html
				+ "<thead><tr><th class=\"th1\" scope=\"col\">&nbsp;</th><th class=\"th1\" scope=\"col\">"
				+ getResources(request).getMessage("lbl.tranDml.tipoTransaccion")
				+ "</th><th class=\"th1\" scope=\"col\">"
				+ getResources(request).getMessage("lbl.tranDml.destino")
				+ "</th><th class=\"th1\" scope=\"col\">"
				+ getResources(request).getMessage("lbl.tranDml.monto")
				+ "</th><th class=\"th1\" scope=\"col\">"
				+ getResources(request).getMessage("lbl.tranDml.nota")
				+ "</th></tr></thead><tbody><tr><td colspan=\"6\"><div class=\"innerb\"><table class=\"tabletwo\">";
		Iterator<Long> iterator = (mapa.keySet().iterator());
		long i;
		CtaTtrTipoTransaccionDAO tipoTransaccionDAO = new CtaTtrTipoTransaccionDAO(getSessionHibernate(request));
		
		while (iterator.hasNext()) {
			i = iterator.next().longValue();
			TransacObj transacX = (TransacObj) mapa.get(i);
			html = html
					+ "<tr><th class=\"td1\" scope=\"row\"><input type=\"checkbox\" name=\"posicionMov\" class=\"posicionMov\" value=\""
					+ i + "\"/></th>" + "<td class=\"td1\">";
			if(transacX.getTtr() == -1){
				html += "Cargo" + "</td><td class=\"td1\">";
			}else{
				if(tipoTransaccionDAO.findById(transacX.getTtr()).getTtrUso().equals("A")){
					html += "Abono" + "</td><td class=\"td1\">";
				}else{
					html += "Cargo" + "</td><td class=\"td1\">";
				}
			}
			html += transacX.getTipoCuenta() + "</td><td class=\"td1\">"
					+ Format.formatDinero(transacX.getMonto()) + "</td><td class=\"td1\">"
					+ transacX.getNota() 
					//+ "<input type=\"hidden\" value="+ transacX.getPareja() +" id=\"parejaId\">"
					+ "</td></tr>";
		}
		html = html + "</table></div></td></tr></tbody></table>";
		return html;
	}
	
	private String construirListaErrores(ArrayList<String> errors){
		String errores = "<table bordercolor=\"red\"><tr><td colspan=\"2\">Se han encontrado los siguientes errores:</td></tr>";
		Iterator<String> it = errors.iterator();
		while(it.hasNext()){
			errores=errores+"<tr><td>"+ 
			it.next()
			+"</td></tr>";
		}
		errores=errores+"</table>";
		return errores;
	}
	
	public void mensajes(String msg,TransaccionAsociadoForm form,
			HttpServletRequest request, HttpServletResponse response){
		ActionErrors errors = new ActionErrors();
		errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(msg));
        saveMessages(request, errors);
	}
	
	public ActionForward htmlCampoDisponibilidad(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		TransaccionAsociadoForm transaccionAsociadoForm = (TransaccionAsociadoForm)form;
		HashMap<Long, TransacObj> mapa = (HashMap<Long, TransacObj>)request.getSession().getAttribute("listaTransacciones");
		String texto = "";
		double disponible = 0.0;
		HtmlBuilder htmlBuilder = new HtmlBuilder();
		CtaCasCuentaAsociadoDAO casDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
		CtaCasCuentaAsociado cas = casDAO.findById((long) transaccionAsociadoForm.getCuentaFuente());
		if(cas != null && cas.getCasCuenta() != null){
			CuentaAhorroAction cahAction = new CuentaAhorroAction();
			Double penalidad = cahAction.calculoPenalidad(cas.getCtaCahCuentaAhorro(),request);
			disponible = cas.getCtaCahCuentaAhorro().getCahSaldoActual()/* - penalidad*/;
			disponible = obtenerDisponible(disponible,mapa,cas,1,request);
		}else{
			disponible = transaccionAsociadoForm.getCant();
			disponible = obtenerDisponible(disponible,mapa,cas,-1,request);
		}
		htmlBuilder.td(0).close();//.div().id("cantidadDisponible").close();
		htmlBuilder.input().type("text").readonly().name("cantidadDisponible");
		htmlBuilder.id("cantDisp").size("10").value(Format.formatDinero(disponible)).close();
		htmlBuilder.tdEnd();//.divEnd().tdEnd();
		texto = htmlBuilder.toString();
		try{
			//log.error(texto);
			response.setCharacterEncoding("UTF-8");
			response.getWriter().write(texto);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (RuntimeException e) {
			log.error("Error runtime", e);
		} catch (IOException e) {
			log.error(e);
		}
		return null;
	}
	
	private double obtenerDisponible(double disponible,HashMap<Long, TransacObj> mapa, 
			CtaCasCuentaAsociado cas, int ahorro,HttpServletRequest request) {
		DecimalFormat df = new DecimalFormat("0.00");
		Double d = new Double(df.format(disponible));
		disponible = d.doubleValue();
		
		CtaTtrTipoTransaccionDAO tipoTransaccionDAO = new CtaTtrTipoTransaccionDAO(getSessionHibernate(request));
		if(mapa != null && mapa.size()>0){
			HashMap clonMapa = (HashMap) mapa.clone();
			if(clonMapa != null && clonMapa.size()>0){
				for (Iterator iterator = clonMapa.values().iterator(); iterator.hasNext();) {
					TransacObj obj = (TransacObj) iterator.next();
					if(ahorro == 1){
						if((long) obj.getCas() == cas.getCasCuenta()){
							if(tipoTransaccionDAO.findById(obj.getTtr()).getTtrUso().equals("C")){
								disponible = disponible - obj.getMonto();
							}
						}
					}else{
						disponible = disponible - obj.getMonto();
					}
				}
			}
		}
		return disponible;
	}
	
	public ActionForward cargarNumCheque(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		TransaccionAsociadoForm transaccionForm = (TransaccionAsociadoForm)form;
		
		CtrBanBancoDAO bancoDAO = new CtrBanBancoDAO(getSessionHibernate(request));
		CtrRckRepositorioChequesDAO rckDao = new CtrRckRepositorioChequesDAO(getSessionHibernate(request));
		SecIseInicioSesionDAO sesionDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
		
		CtrBanBanco banco = bancoDAO.findById(transaccionForm.getBanIdD());
		SecIseInicioSesion sesion = sesionDAO.findById(transaccionForm.getUsuarioConectado().getNombreUsuario()!=null?transaccionForm.getUsuarioConectado().getNombreUsuario():"");
		if(sesion!=null){
			if(transaccionForm.getRckId() == null){
				List rckList = rckDao.findBySyB(banco.getBanId(), sesion.getSecPerPersona().getSecSucSucursal().getSucId());
				if(rckList.size()>0){
					CtrRckRepositorioCheques rck = (CtrRckRepositorioCheques) rckList.get(0); 
					transaccionForm.setRckId(rck.getRckId());
				}
			}
		}
		
		String texto = "";
		HtmlBuilder htmlBuilder = new HtmlBuilder();
		htmlBuilder.input().type("text").readonly()
			.name("chequeNumD").id("chequeNumD");
		if(transaccionForm.getRckId() == null){
			htmlBuilder.value("No hay cheques disponibles").size("25");
		}else{
			CtrRckRepositorioCheques rck = rckDao.findById(transaccionForm.getRckId());
			htmlBuilder.value(rck.getRckCorrActual().toString()).size("15");
		}
		htmlBuilder.close();
		texto = htmlBuilder.toString();
		try{
			response.setCharacterEncoding("UTF-8");
			response.getWriter().write(texto);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (RuntimeException e) {
			log.error("Error runtime", e);
		} catch (IOException e) {
			log.error(e);
		}
		return null;
	}
	
	private void enviarTransaccionAContabilidad(CtaTxaTransaccionxcuentaAsociado txa,
			String nombreUsuario, String tipoCuenta, CtaCasCuentaAsociado cas, 
			Double interes, CtaChkChequePrestamo chequePrestamo,HttpServletRequest request) {
		
		String parametros = "1;";//Seteamos modulo al que pertenece -> CUENTA CORRIENTE
		Integer tc = 0;
		Integer clasificacion = 0;
		Integer relacionInteres = 0;
		
		if(tipoCuenta.equals("A")){//Aportaciones
			tc = 1;
		}
		if(tipoCuenta.equals("B")){//Ahorros
			tc = 2;
			clasificacion = cas.getCtaCahCuentaAhorro().getCtaTahTipoAhorro().getTahId();
		}
		if(tipoCuenta.equals("C")){//Prestamo
			tc = 3;
			if(cas.getCtaPrePrestamo().getCtaTprTipoPrestamo() == null || cas.getCtaPrePrestamo().getCtaTprTipoPrestamo().getTprId()==null){
				clasificacion = 0;
			}else{
				clasificacion = cas.getCtaPrePrestamo().getCtaTprTipoPrestamo().getCtaLprLineaPrestamo().getLprId();
			}
			relacionInteres = 1;
		}
		if(tipoCuenta.equals("D")){//Seguros
			tc = 4;
			clasificacion = cas.getCtaSegSeguros().getCtaTisTipoSeguro().getTisId();
		}
		
		parametros += tc.toString() + ";"; //clasificacion -> Apor, Ahor, Pre, Seg.
		parametros += clasificacion.toString() + ";";//id tipo cuenta
		parametros += txa.getCtaTtrTipoTransaccion().getTtrId().toString() + ";";
		/*parametros += relacionInteres.toString();*/
		
		Double monto = txa.getTxaMonto() - interes;
		PartidaAutomatica partidaAutomatica = new PartidaAutomatica();
		if(chequePrestamo != null && chequePrestamo.getChkId()!=null){//partida de cheque
				if(monto > 0){
					partidaAutomatica.crearPartidaAutomatica(
								parametros+"0;-1",//la ultima concatenacion hace referencia a que no relaciona interes ni empresa
								txa.getTxaMonto(),
								nombreUsuario,2,0,chequePrestamo,0,request);
					
				}
				if(interes > 0){
					partidaAutomatica.crearPartidaAutomatica(
							parametros+"1;-1",//la ultima concatenacion hace referencia a que relaciona interes y no empresa
							interes,
							nombreUsuario,2,null,null,null,request);
				}	
		}else{
				if(monto > 0){
					partidaAutomatica.crearPartidaAutomatica(
								parametros+"0;-1",
								monto,
								nombreUsuario,1,null,null,null,request);
				}
				if(interes > 0){
					partidaAutomatica.crearPartidaAutomatica(
							parametros+"1;-1",
							interes,
							nombreUsuario,1,null,null,null,request);
				}	
		}
	}
	
	private void enviarTransaccionAContabilidadEspecial(CtaTxaTransaccionxcuentaAsociado txa,
			String nombreUsuario, String tipoCuenta, CtaCasCuentaAsociado cas, 
			Double interes, CtaChkChequePrestamo chequePrestamo,HttpServletRequest request) {
		
		String parametros = "";//Seteamos modulo al que pertenece -> CUENTA CORRIENTE
		Integer clasificacion = 0;
		PartidaAutomatica partidaAutomatica = new PartidaAutomatica();
		if(tipoCuenta.equals("P")){//Penalidad en ahorros
			clasificacion = cas.getCtaCahCuentaAhorro().getCtaTahTipoAhorro().getTahId();
			parametros = "9;"+clasificacion.toString();
			
			
			if(chequePrestamo != null && chequePrestamo.getChkId()!=null){//partida de cheque
				partidaAutomatica.crearPartidaAutomatica(
								parametros,
								txa.getTxaMonto(),
								nombreUsuario,2,0,chequePrestamo,0,request);
		    }else{
		    	parametros="1;2;"+cas.getCtaCahCuentaAhorro().getCtaTahTipoAhorro().getTahId()+";"+txa.getCtaTtrTipoTransaccion().getTtrId()+";0;-1";
				partidaAutomatica.crearPartidaAutomatica(
								parametros,
								txa.getTxaMonto(),
								nombreUsuario,1,null,null,null,request);
			}
		}
	}
	
	//Revisar y asegurarse que se logre guardar
	public ActionForward guardarFuente(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		TransaccionAsociadoForm  transaccionAsociadoForm = (TransaccionAsociadoForm)form;
		
		HashMap<Long, TransacObj> mapa = (HashMap<Long, TransacObj>)request.getSession().getAttribute("listaTransacciones");
		if(mapa == null || mapa.size()<1){
			mapa = new HashMap<Long, TransacObj>();
		}
		
		CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
		CtaAscAsociado asociado = asociadoDAO.findById(transaccionAsociadoForm.getAscId());
 		request.setAttribute("ctaAsociado", asociado);
 		SecPerPersonaDAO personaDAO = new SecPerPersonaDAO(getSessionHibernate(request));
 		SecPerPersona persona = personaDAO.findById(asociado.getSecPerPersona().getPerId());
 		request.setAttribute("secPersona", persona);
		
		CtaTxaTransaccionxcuentaAsociadoDAO transaccionCuentaDAO = new CtaTxaTransaccionxcuentaAsociadoDAO(getSessionHibernate(request));
		List lst = transaccionCuentaDAO.findByProperty(ASC_ID,transaccionAsociadoForm.getAscId());
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
        	//---- exporta la tabla
        //    export(tableFacade);
            return null; 
        } else {
        	String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
		transaccionAsociadoForm.setTxaComprobante(transaccionCuentaDAO.nextComprobante());
		request.setAttribute(Constantes.ACCION_KEY, "/transaccionAsociado");
		transaccionAsociadoForm.setAscId2(transaccionAsociadoForm.getAscId());
		if(transaccionAsociadoForm.getFuente() != 3){
			if(transaccionAsociadoForm.getFuente() == 1){
				transaccionAsociadoForm.setSource("Efectivo");
			}
			if(transaccionAsociadoForm.getFuente() == 2){
				if(transaccionAsociadoForm.getChequeNum() == null){
					mensajes("error.txa.chequeNoNull", transaccionAsociadoForm, request, response);
				}
				transaccionAsociadoForm.setSource("Cheque");
			}
			if(transaccionAsociadoForm.getFuente() == 4){
				transaccionAsociadoForm.setSource("Transaccion Electronica");
			}
			if(transaccionAsociadoForm.getCantidadDisponible()== null || transaccionAsociadoForm.getCantidadDisponible() <= 0.0){
				mensajes("errors.tranDml.dispo0", transaccionAsociadoForm, request, response);
				return nuevaTran(mapping, transaccionAsociadoForm, request, response);
			}
			transaccionAsociadoForm.setCant(transaccionAsociadoForm.getCantidadDisponible());
			//transaccionAsociadoForm.setCantidadDisponible(transaccionAsociadoForm.getCantidadDisponible());
		}else{
			CtaCasCuentaAsociadoDAO casDao = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
			CtaCasCuentaAsociado cas = casDao.findById((long)transaccionAsociadoForm.getCuentaFuente());
			if(cas!=null && cas.getCasCuenta()!=null){
				CuentaAhorroAction cahAction = new CuentaAhorroAction();
				transaccionAsociadoForm.setCantidadDisponible(Redondeo.roundDouble(cas.getCtaCahCuentaAhorro().getCahSaldoActual()/* - cahAction.calculoPenalidad(cas.getCtaCahCuentaAhorro())*/,2)) ;
				transaccionAsociadoForm.setSource(cas.getCtaCahCuentaAhorro().getCtaTahTipoAhorro().getTahNombre());
			}else{
				mensajes("errors.tranDml.noCuenta", transaccionAsociadoForm, request, response);
				return nuevaTran(mapping, transaccionAsociadoForm, request, response);
			}
		}
		
		String listaResponse = construirListaTransacciones(mapa, request);
		request.setAttribute("listaT", listaResponse);
		transaccionAsociadoForm.setTablaT(listaResponse);
		
		transaccionAsociadoForm.setFuente(transaccionAsociadoForm.getFuente());
		request.setAttribute("form", transaccionAsociadoForm);
		request.setAttribute("setFuente", 1);
		
		return mapping.findForward("dml");
	}
	
	public ActionForward htmlBancarias(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		TransaccionAsociadoForm transaccionAsociadoForm = (TransaccionAsociadoForm)form;
		String texto = "";
		HtmlBuilder htmlBuilder = new HtmlBuilder();
		CtaCbaCuentaBancariaDAO cuentaBancariaDAO = new CtaCbaCuentaBancariaDAO(getSessionHibernate(request));
		List cuentasBancarias = cuentaBancariaDAO.findByAscAndBanco(transaccionAsociadoForm.getAscId2(),transaccionAsociadoForm.getBanIdD());
		if(cuentasBancarias.size()>0){
			htmlBuilder.select().name("cuentaBan").id("cuentaBanId").close();
			for (Iterator iterator = cuentasBancarias.iterator(); iterator
					.hasNext();) {
				CtaCbaCuentaBancaria cba = (CtaCbaCuentaBancaria) iterator.next();
				htmlBuilder.option().value(cba.getCbaId().toString()).close().append(cba.getCbaCuenta()).optionEnd();
			}
			htmlBuilder.selectEnd();
		}else{
			htmlBuilder.append("No hay cuentas que mostrar");
		}
		texto = htmlBuilder.toString();
		try{
			//log.error(texto);
			response.setCharacterEncoding("UTF-8");
			response.getWriter().write(texto);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (RuntimeException e) {
			log.error("Error runtime", e);
		} catch (IOException e) {
			log.error(e);
		}
		return null;
	}
	
	public ActionForward prueba(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
		List asociados = asociadoDAO.findByAscCodigo("000029");
		for (Iterator iterator = asociados.iterator(); iterator.hasNext();) {
			CtaAscAsociado asociado = (CtaAscAsociado) iterator.next();
			CtaCasCuentaAsociadoDAO casDao = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
			List casList = casDao.findByAscAndTipoCuenta(asociado.getAscId(), "C");
			for (Iterator iterator2 = casList.iterator(); iterator2.hasNext();) {
				CtaCasCuentaAsociado cas = (CtaCasCuentaAsociado) iterator2.next();
				CtaPrePrestamoDAO prestamoDao = new CtaPrePrestamoDAO(getSessionHibernate(request));
				CtaPrePrestamo prestamo = prestamoDao.findById(cas.getCtaPrePrestamo().getPreId());
				CtaMxpMovimientoPrestamoDAO mxpDao = new CtaMxpMovimientoPrestamoDAO(getSessionHibernate(request));
				CtaMxpMovimientoPrestamo mxpAnt = mxpDao.findUltimoMovimiento(prestamo.getPreId());
				if(mxpAnt == null || mxpAnt.getMxpId()== null){
					mxpAnt = new CtaMxpMovimientoPrestamo();
				}
				Date today = new Date();
				IntereseYMora iYm = new IntereseYMora();
				today = iYm.noTime(today);
				iYm = iYm.actualizaInteres(mxpAnt, prestamo, cas, today,request);
				log.error("prestamo: " + prestamo.getPreId() + " tipoPre: "+prestamo.getCtaTprTipoPrestamo().getTprNombre()+", interesAcumulado: "+iYm.getAcumulado()+ ", Interes pendiente: " + iYm.getPendiente() + ", como orden: " + prestamo.getPreCredito());
				IntereseYMora iYm2 = new IntereseYMora();
				Date diez = ElapsedTime.obtenerFecha(today, 10);
				iYm2 = iYm2.actualizaInteres(mxpAnt, prestamo, cas, diez,request);
				log.error("prestamo: " + prestamo.getPreId()  + " tipoPre: "+prestamo.getCtaTprTipoPrestamo().getTprNombre()+", interesAcumulado: "+iYm2.getAcumulado()+ ", Interes pendiente: " + iYm2.getPendiente() + ", como orden: " + prestamo.getPreCredito());
				log.error("****");
			}
		}
		return null;
	}
	
	private ConDpaDetallePartida crearDetalle(ConPcoPartidaContable partida,ConCueCuenta cuenta,ConCpaConceptoPartida concepto,String otroConcepto,double val,int op){
		double debe = 0,haber = 0;
		switch (op) {
		case 0: debe = val;
					break;
		case 1: haber = val;
					break;
		}
		ConDpaDetallePartida detallePartida = new ConDpaDetallePartida();
		detallePartida.setConPcoPartidaContable(partida);
		detallePartida.setConCueCuenta(cuenta);
		detallePartida.setConCpaConceptoPartida(concepto);
		detallePartida.setDpaOtroConcepto(otroConcepto);
		detallePartida.setDpaValorDebe(debe);
		detallePartida.setDpaValorHaber(haber);
		return detallePartida;
	}

	public ActionForward cargarRepositorio(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		TransaccionAsociadoForm transaccionForm = (TransaccionAsociadoForm)form;
		String texto = "";
		CtrBanBancoDAO bancoDAO = new CtrBanBancoDAO(getSessionHibernate(request));
		HtmlBuilder htmlBuilder = new HtmlBuilder();
		CtrBanBanco banco = bancoDAO.findById(transaccionForm.getBanIdD());
		CtrRckRepositorioChequesDAO rckDao = new CtrRckRepositorioChequesDAO(getSessionHibernate(request));
		SecIseInicioSesionDAO sesionDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
		SecIseInicioSesion sesion = sesionDAO.findById(transaccionForm.getUsuarioConectado().getNombreUsuario());
		List rckList = rckDao.findBySyB(banco.getBanId(), sesion.getSecPerPersona().getSecSucSucursal().getSucId());
		htmlBuilder.td(0).close();
		htmlBuilder.div().id("valoresBanco").close();
		htmlBuilder.select().name("rckId").id("rckId");
		htmlBuilder.onchange("cargarCorrelativo();");
		htmlBuilder.close();
		int x = 0;
		Integer correlativo = 0;
		for (Iterator iterator = rckList.iterator(); iterator.hasNext();) {
			CtrRckRepositorioCheques rck = (CtrRckRepositorioCheques) iterator.next();
			if(x<1){
				correlativo = rck.getRckCorrActual();
				x++;
			}
			htmlBuilder.option().value(rck.getRckId().toString()).close().append(rck.getRckNombre()).optionEnd();
		}
		htmlBuilder.selectEnd();
		texto = htmlBuilder.toString();
		try{
			response.setCharacterEncoding("UTF-8");
			response.getWriter().write(texto);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (RuntimeException e) {
			log.error("Error runtime", e);
		} catch (IOException e) {
			log.error(e);
		}
		return null;
	}
	
	public ActionForward cargarDispDestino(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		TransaccionAsociadoForm transaccionAsociadoForm = (TransaccionAsociadoForm)form;
		String texto = "";
		CtaCasCuentaAsociadoDAO casDao = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
		CtaCasCuentaAsociado cas = casDao.findById((long)transaccionAsociadoForm.getCuentaDestino());
		HtmlBuilder htmlBuilder = new HtmlBuilder();
		htmlBuilder.append("<label>Saldo: $");
		htmlBuilder.input().type("text").name("dispo").id("dispo").readonly();
		if(transaccionAsociadoForm.getPos().equals(3)){
			//Calcular saldo con los intereses pendientes
			IntereseYMora iYm = new IntereseYMora();
			CtaMxpMovimientoPrestamoDAO mxpDao = new CtaMxpMovimientoPrestamoDAO(getSessionHibernate(request));
			CtaMxpMovimientoPrestamo mxpAnt = mxpDao.findUltimoMovimiento(cas.getCtaPrePrestamo().getPreId());
			if(mxpAnt == null || mxpAnt.getMxpId() == null){
				mxpAnt = new CtaMxpMovimientoPrestamo();
			}
			iYm = iYm.actualizaInteres(mxpAnt, cas.getCtaPrePrestamo(), cas, new Date(),request);
			Double saldoConInteres = cas.getCtaPrePrestamo().getPreSaldoActualT() + iYm.getAcumulado() + iYm.getPendiente(); 
			htmlBuilder.value(Redondeo.roundDouble(saldoConInteres,2).toString());
			//texto = Redondeo.roundDouble(saldoConInteres,2).toString();
		}else{
			htmlBuilder.value(Redondeo.roundDouble(cas.getCtaSegSeguros().getSegSaldoActual(),2).toString());
		}
		htmlBuilder.end();
		htmlBuilder.append("</label>");
		texto = htmlBuilder.toString();
		try{
			//log.error(texto);
			response.setCharacterEncoding("UTF-8");
			response.getWriter().write(texto);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (RuntimeException e) {
			log.error("Error runtime", e);
		} catch (IOException e) {
			log.error(e);
		}
		return null;
	}
	
	protected Map<String, String> getKeyMethodMap() {
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.txc.lista","lista");
		map.put("cmd.txc.buscar","buscar");
		map.put("cmd.txc.regresar","regresar");
		map.put("cmd.txc.cargarListaCuentasAsociado","cargarListaCuentasAsociado");
		map.put("cmd.txc.nueva", "nuevaTran");
		map.put("cmd.txc.cargarHtml", "cargarHtml");
		map.put("cmd.txc.cargarHtml2", "cargarHtml2");
		map.put("cmd.txc.cancelar", "cancelar");
		map.put("cmd.txc.realizarTransaccion", "realizarTransaccion");
		map.put("cmd.txc.guardarMovimiento", "guardarMovimiento");
		map.put("cmd.txc.eliminarMovimientos", "eliminarMovimientos");
		map.put("cmd.txc.htmlCampoDisponibilidad","htmlCampoDisponibilidad");
		map.put("cmd.txc.cargarRepositorio", "cargarRepositorio");
		map.put("cmd.prueba.prueba", "prueba");
		map.put("cmd.txc.imprimirReporte", "imprimirReporte");
		map.put("cmd.txc.imprimirReporte2", "imprimirReporte2");
		map.put("cmd.txc.imprimirReporte3", "imprimirReporte3");
		map.put("cmd.txc.guardarFuente", "guardarFuente");
		map.put("cmd.txc.htmlBancarias", "htmlBancarias");
		map.put("cmd.txc.cargarNumCheque", "cargarNumCheque");
		map.put("cmd.txc.cargarDispDestino", "cargarDispDestino");
		return map;
	}
}