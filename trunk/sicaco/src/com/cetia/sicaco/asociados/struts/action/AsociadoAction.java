/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.asociados.struts.action;

import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletContext;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.oro.text.perl.Perl5Util;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.hibernate.Transaction;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeFactory;
import org.jmesa.facade.TableFacadeImpl;
import org.jmesa.limit.ExportType;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.BasicCellEditor;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.html.HtmlBuilder;

import com.cetia.sicaco.asociados.struts.form.AsociadoForm;
import com.cetia.sicaco.cuentaCorriente.struts.form.CuentaAhorroForm;
import com.cetia.sicaco.hibernate.CtaAscAsociado;
import com.cetia.sicaco.hibernate.CtaAscAsociadoDAO;
import com.cetia.sicaco.hibernate.CtaCahCuentaAhorro;
import com.cetia.sicaco.hibernate.CtaCahCuentaAhorroDAO;
import com.cetia.sicaco.hibernate.CtaCasCuentaAsociado;
import com.cetia.sicaco.hibernate.CtaCasCuentaAsociadoDAO;
import com.cetia.sicaco.hibernate.CtaDomDomicilioDAO;
import com.cetia.sicaco.hibernate.CtaDptDepartamentoTrabajo;
import com.cetia.sicaco.hibernate.CtaDptDepartamentoTrabajoDAO;
import com.cetia.sicaco.hibernate.CtaEtrEmpresaTrabajoDAO;
import com.cetia.sicaco.hibernate.CtaInaIngresosxasociado;
import com.cetia.sicaco.hibernate.CtaInaIngresosxasociadoDAO;
import com.cetia.sicaco.hibernate.CtaNotNotas;
import com.cetia.sicaco.hibernate.CtaNotNotasDAO;
import com.cetia.sicaco.hibernate.CtaPxtPersonaExterna;
import com.cetia.sicaco.hibernate.CtaPxtPersonaExternaDAO;
import com.cetia.sicaco.hibernate.CtaTahTipoAhorroDAO;
import com.cetia.sicaco.hibernate.CtaTasTipoAsociado;
import com.cetia.sicaco.hibernate.CtaTasTipoAsociadoDAO;
import com.cetia.sicaco.hibernate.CtaTcoTipoContratoDAO;
import com.cetia.sicaco.hibernate.CtrEstEstadoDAO;
import com.cetia.sicaco.hibernate.CtrParParametrosDAO;
import com.cetia.sicaco.hibernate.HibernateSessionFactory;
import com.cetia.sicaco.hibernate.SecCelCorreoElectronico;
import com.cetia.sicaco.hibernate.SecCelCorreoElectronicoDAO;
import com.cetia.sicaco.hibernate.SecCelCorreoElectronicoId;
import com.cetia.sicaco.hibernate.SecDppDepartamentoPaisDAO;
import com.cetia.sicaco.hibernate.SecIseInicioSesion;
import com.cetia.sicaco.hibernate.SecIseInicioSesionDAO;
import com.cetia.sicaco.hibernate.SecPerPersona;
import com.cetia.sicaco.hibernate.SecPerPersonaDAO;
import com.cetia.sicaco.hibernate.SecRolRoles;
import com.cetia.sicaco.hibernate.SecRolRolesDAO;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;
import com.cetia.sicaco.struts.PartidaAutomatica;
import com.cetia.sicaco.struts.UsuarioConectado;
import com.mad.utilidades.ExportReport;
import com.mad.utilidades.ReportFile;
import com.mad.utilidades.ThreadEmail;
import com.mad.utilidades.seguridad.Hasher;
import com.mad.utilidades.seguridad.PwdAleatorio;

/** 
 * MyEclipse Struts
 * Creation date: 07-29-2008
 * 
 * XDoclet definition:
 * @struts.action path="/asociado" name="asociadoForm" input="redirectInvalidData" parameter="accion" scope="request" validate="true"
 * @struts.action-forward name="lista" path="pagina-lista.asociados.busquedaAsociado"
 */
public class AsociadoAction extends DMLAction {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	
	public static final String TABLA_ID = "ctaAscAsociado";
	public static final String ETR_ID = "ctaEtrEmpresaTrabajo.etrId";
	public static final String TUS_CODIGO = "ctrTusTipoUso.tusCodigo";

	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		AsociadoForm asociadoForm = (AsociadoForm)form;
 		CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
		List lst = null;
		//paginacion roberto (Quien sera Roberto?)
		TableFacade tableFacade = TableFacadeFactory.createTableFacade(TABLA_ID ,request );
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		int totalRows  = 0;
		totalRows = asociadoDAO.getTotalRowCountByNameUser(asociadoForm.getAscAsociadoH());
		tableFacade.setTotalRows(totalRows);
		int rowStart = limit.getRowSelect().getRowStart();
		int rowEnd = limit.getRowSelect().getRowEnd();
		lst = asociadoDAO.findByNameUser(asociadoForm.getAscAsociadoH(), rowStart, rowEnd);
		tableFacade.setItems(lst);
		if (limit.isExported()) {
        	//---- exporta la tabla
        //    export(tableFacade);
            return null; 
        } else {
        	String html;
    		html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
		request.setAttribute("form", form);
		request.setAttribute(Constantes.ACCION_KEY, "/asociado");
		return mapping.findForward("lista");
	}
	
	public ActionForward listaInactivo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		AsociadoForm asociadoForm = (AsociadoForm)form;
 		CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
		List lst = null;
		//paginacion roberto
		TableFacade tableFacade = TableFacadeFactory.createTableFacade(TABLA_ID ,request );
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		int totalRows  = 0;
		totalRows = asociadoDAO.getTotalRowCountByNameUserInactivo(asociadoForm.getAscAsociadoH());
		tableFacade.setTotalRows(totalRows);
		int rowStart = limit.getRowSelect().getRowStart();
		int rowEnd = limit.getRowSelect().getRowEnd();
		lst = asociadoDAO.findByNameUserInactivo(asociadoForm.getAscAsociadoH(), rowStart, rowEnd);
		tableFacade.setItems(lst);
		if (limit.isExported()) {
        	//---- exporta la tabla
        //    export(tableFacade);
            return null; 
        } else {
        	String html;
    		html = html2(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
		request.setAttribute("form", form);
		request.setAttribute(Constantes.ACCION_KEY, "/asociado");
		return mapping.findForward("listaInactivo");
	}
	
	private String html(final TableFacade tableFacade, final HttpServletRequest request) {
		tableFacade.setColumnProperties("ascCodigoAsociado","ctaDptDepartamentoTrabajo.ctaEtrEmpresaTrabajo.etrNombre","secPerPersona.perPrimerNombre","estId","ascId");
		Table table = tableFacade.getTable();
		
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.ascAsociado.caption");
		
		Row row = table.getRow();
		Column nombreColumna = row.getColumn("ascCodigoAsociado");
		nombreColumna.setTitleKey("tbl.ascAsociado.ascCodigo");
		
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtaAscAsociado asociado = (CtaAscAsociado)item;
				HtmlBuilder html = new HtmlBuilder();
				value = asociado.getAscCodigoAsociado();
				//---- Generar link para entrar a edicion
				String link = tableFacade.getWebContext().getContextPath();
				link += "/asociados/asociado.do?&ascId="+asociado.getAscId()+"&accion=cargarDatos&mdf=true";
				html.a().href().quote().append(link).quote().close();
				html.append(value);
				html.aEnd();				
				return html.toString();	
			}
		});

		nombreColumna = row.getColumn("ctaDptDepartamentoTrabajo.ctaEtrEmpresaTrabajo.etrNombre");
		nombreColumna.setTitleKey("tbl.ascAsociado.ascEmpresa");

		nombreColumna = row.getColumn("estId");
		nombreColumna.setTitleKey("tbl.ascAsociado.ascEstado");
		
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtaAscAsociado asociado = (CtaAscAsociado)item;
				CtrEstEstadoDAO estadoDAO = new CtrEstEstadoDAO(getSessionHibernate(request));
				value = estadoDAO.findById(asociado.getEstId()).getEstNombre().toString();
				return value;
			}
		});
		
		nombreColumna = row.getColumn("secPerPersona.perPrimerNombre");
		nombreColumna.setTitleKey("tbl.ascAsociado.ascNombre");
		//----- Implementamos la edicion de asociado
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtaAscAsociado asociado = (CtaAscAsociado)item;
				SecPerPersona persona = asociado.getSecPerPersona();
				value = persona.getPerPrimerApellido();
				value = value + (isObjectNull(persona.getPerSegundoApellido())?"":(" "+persona.getPerSegundoApellido()));
				value = value  + ", " +persona.getPerPrimerNombre();
				value = value  + (isObjectNull(persona.getPerSegundoNombre())?"":(" "+persona.getPerSegundoNombre()));		
				return value.toString();	
			}
		});

		//----- Creamos la columna de editar
		nombreColumna = row.getColumn("ascId");
		nombreColumna.setTitleKey("tbl.ascAsociado.Acciones");		
		
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {
			public Object getValue(Object item, String property, int rowcount) {
				String toReturn;
				CtaAscAsociado asociado = (CtaAscAsociado)item;
			    SecPerPersona persona = asociado.getSecPerPersona();
				HtmlBuilder html = new HtmlBuilder();
			    String value;
				String link;
				
				html = new HtmlBuilder();
				value = getResources(request).getMessage("cmd.ascAsociado.transacciones");
			    link = tableFacade.getWebContext().getContextPath();
				link += "/asociados/transaccionAsociado.do?accion=lista&ascId="+asociado.getAscId();
				html.a().href().quote().append(link).quote().append("class=\"linkTransacciones\"").title(value).close();
				//html.a().href().quote().append(link).quote().close();
				//html.append(value);
				//html.append("|");
				html.aEnd();
				toReturn = html.toString() + " | ";
				
				if(asociado.getAscAsociadoPadre() == null || asociado.getAscAsociadoPadre().trim().length() == 0){
					html = new HtmlBuilder();
					value  =getResources(request).getMessage("cmd.ascAsociado.dependientes");
					link = tableFacade.getWebContext().getContextPath();
					link += "/asociados/dependiente.do?accion=lista&ascAsociadoPadre="+asociado.getAscId();
					html.a().href().quote().append(link).quote().append("class=\"linkDependientes\"").title(value).close();
					//html.a().href().quote().append(link).quote().close();
					//html.append(value);
					//html.append("|");
					html.aEnd();
					toReturn = toReturn+html.toString() + " | ";
				}
				
				html = new HtmlBuilder();
				value =getResources(request).getMessage("cmd.ascAsociado.beneficiarios");
			    link = tableFacade.getWebContext().getContextPath();
				link += "/cuentaCorriente/beneficiarios.do?accion=lista&ascId="+asociado.getAscId()+"&cuentaX=-1";
				html.a().href().quote().append(link).quote().append("class=\"linkBeneficiarios\"").title(value).close();
				//html.a().href().quote().append(link).quote().close();
				//html.append(value);
				//html.append("|");
				html.aEnd();
				toReturn = toReturn+html.toString() + " | ";
				
				html = new HtmlBuilder();
				value =getResources(request).getMessage("cmd.ascAsociado.telefonos");
			    link = tableFacade.getWebContext().getContextPath();
				link += "/seguridad/persona.do?perId="+persona.getPerId()+"&asoc=true&accion=phone";
				html.a().href().quote().append(link).quote().append("class=\"linkPhone\"").title(value).close();
				//html.append(value);
				//html.append("|");
				html.aEnd();
				toReturn = toReturn+html.toString() + " | ";
				
				html = new HtmlBuilder();
				value =getResources(request).getMessage("cmd.ascAsociado.ingresosCooperativa");
			    link = tableFacade.getWebContext().getContextPath();
				link += "/asociados/ingresoAsociado.do?ascId="+asociado.getAscId()+"&accion=lista";
				html.a().href().quote().append(link).quote().append("class=\"linkIngresoCooperativa\"").title(value).close();
				//html.a().href().quote().append(link).quote().close();
				//html.append(value);
				//html.append("|");
				html.aEnd();
				toReturn = toReturn+html.toString() + " | ";
				
				html = new HtmlBuilder();
				value =getResources(request).getMessage("cmd.ascAsociado.CuentasBancarias");
			    link = tableFacade.getWebContext().getContextPath();
				link += "/asociados/cuentaBancaria.do?ascId="+asociado.getAscId()+"&accion=lista";
				html.a().href().quote().append(link).quote().append("class=\"linkCuentaBancaria\"").title(value).close();
				//html.a().href().quote().append(link).quote().close();
				//html.append(value);
			//	html.append("|");
				html.aEnd();
				toReturn = toReturn+html.toString() + " | ";
				
				html = new HtmlBuilder();
				value =getResources(request).getMessage("cmd.ascAsociado.estadoCuenta");
			    link = tableFacade.getWebContext().getContextPath();
				//link += "/reporte/reporteIni.do?p76e3123r=estadosCuentas&m009o8765d=estadosCuenta&ascId="+asociado.getAscId();
			    link += "/reporte/inicializarReporte.do?p76e3123r=estadosCuentas&m009o8765d=estadosCuenta&ascId="+asociado.getAscId()+"&accion=estadoDeCuentas";
				html.a().href().quote().append(link).quote().append("class=\"linkEstadoCuenta\"").title(value).close();
				//html.a().href().quote().append(link).quote().close();
				//html.append("|");
				html.aEnd();
				toReturn = toReturn+html.toString() + " | ";
				
				html = new HtmlBuilder();
				value =getResources(request).getMessage("cmd.ascAsociado.correos");
			    link = tableFacade.getWebContext().getContextPath();
				link +="/seguridad/persona.do?perId="+persona.getPerId()+"&accion=email&asoc=true";
				html.a().href().quote().append(link).quote().append("class=\"linkMail\"").title(value).close();
				//html.append("|");
				html.aEnd();
				toReturn = toReturn+html.toString() + " | ";
				
				html = new HtmlBuilder();
				value =getResources(request).getMessage("cmd.persona.emergencia");
				link = tableFacade.getWebContext().getContextPath();
				link += "/seguridad/persona.do?perId="+persona.getPerId()+"&accion=emergency&asoc=true";
				//htmlEm.a().href().quote().append(linkEm).quote().close();
				html.a().href().quote().append(link).quote().append("class=\"linkEmergencia\"").title(value).close();
				//htmlEm.append(celEm);
				html.aEnd();
				toReturn = toReturn+html.toString();
				
				return toReturn; 
		}
			});	
		
		return tableFacade.render();
	}
	/*
	public ActionForward buscar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		AsociadoForm asociadoForm = (AsociadoForm) form;
 		CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO();
		List lst = asociadoDAO.findByNameUser(asociadoForm.getAscAsociadoH(),asociadoForm.getUsuarioConectado().getMax());
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
        	//---- exporta la tabla
        //    export(tableFacade);
            return null; 
        } else {
        	String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
		request.setAttribute("form", asociadoForm);
		request.setAttribute(Constantes.ACCION_KEY, "/asociado");
		return mapping.findForward("lista");
	}*/
	
	public ActionForward cargarListaDeptTrab(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
			AsociadoForm asociadoForm = (AsociadoForm)form;
			CtaDptDepartamentoTrabajoDAO departamentoTrabajoDAO = new CtaDptDepartamentoTrabajoDAO(getSessionHibernate(request));
			try{
				List<CtaDptDepartamentoTrabajo> listaDeptosTrab = departamentoTrabajoDAO.findByPropertyAndEstado(ETR_ID, asociadoForm.getCtaDptDepartamentoTrabajo().getCtaEtrEmpresaTrabajo().getEtrId(),"A");
				// Construimos una lista para el response
				String listaResponse = contruirListaDeptosTrab(listaDeptosTrab,request);
				response.getWriter().write(listaResponse);
				response.getWriter().flush();
				response.getWriter().close();
			} catch (RuntimeException e) {
				log.error("Error runtime", e);
			} catch (IOException e) {
				log.error(e);
			}
			return null;
	}
	
	public ActionForward forwardToNuevoAsociado(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		SecDppDepartamentoPaisDAO departamentoPaisDAO = new SecDppDepartamentoPaisDAO(getSessionHibernate(request));
		CtaTasTipoAsociadoDAO tipoAsociadoDAO = new CtaTasTipoAsociadoDAO(getSessionHibernate(request));
		CtaTcoTipoContratoDAO tipoContratoDAO = new CtaTcoTipoContratoDAO(getSessionHibernate(request));
		CtrEstEstadoDAO estadoDAO = new CtrEstEstadoDAO(getSessionHibernate(request));
		CtaEtrEmpresaTrabajoDAO ctaEtrEmpresaTrabajoDAO = new CtaEtrEmpresaTrabajoDAO(getSessionHibernate(request));
		CtaDomDomicilioDAO domicilioDAO = new CtaDomDomicilioDAO(getSessionHibernate(request));
		CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
		CtrParParametrosDAO parametrosDAO = new CtrParParametrosDAO(getSessionHibernate(request));
		List<CtaTasTipoAsociado> tasList = new ArrayList<CtaTasTipoAsociado>();
		AsociadoForm asociadoForm = (AsociadoForm) form;
		if(asociadoForm.getAscCodigoAsociado() == null || asociadoForm.getAscCodigoAsociado().trim().equals("")){
			asociadoForm.setAscCodigoAsociado(asociadoDAO.generarCodigo());
		}
		if(asociadoForm.getAscAsociadoPadre() != null && asociadoForm.getAscAsociadoPadre().trim().length() > 0){
			CtaAscAsociado padre = asociadoDAO.findById(asociadoForm.getAscAsociadoPadre());
			request.setAttribute("asociadoPadre",padre);
			tasList.add(tipoAsociadoDAO.findById(5));
			tasList.add(tipoAsociadoDAO.findById(1));
		}else{
			tasList = tipoAsociadoDAO.findAll();
		}
		request.setAttribute("tasList", tasList);
		request.setAttribute("tDomList", domicilioDAO.findAll());//lista de domicilios
		request.setAttribute("dppList", departamentoPaisDAO.findAll());//lista de departamentos
		request.setAttribute("trabList", ctaEtrEmpresaTrabajoDAO.findAllActivasConDepartamentos());//lista de departamentos de trabajo
		request.setAttribute("tcoList", tipoContratoDAO.findAll());//lista de tipos de contrato
		request.setAttribute("estList", estadoDAO.findByProperty(TUS_CODIGO,"ACTIV"));//lista de estados
		request.getSession().setAttribute("cuotaAfiliacion", parametrosDAO.findById("VALOR_INSCRIPCION").getParValorNumber());
		request.setAttribute(Constantes.ACCION_KEY, "/asociado");
		request.setAttribute("form", asociadoForm);
		return mapping.findForward("dml");
	}
	
	private String contruirListaDeptosTrab(List<CtaDptDepartamentoTrabajo> listaDeptosTrab,HttpServletRequest request){
		String lista;
		if(listaDeptosTrab.size() > 0){
			lista ="<select name=\"ctaDptDepartamentoTrabajo.dptId\" id=\"deptoTrab\" class=\"obligatorio\">";
			Iterator<CtaDptDepartamentoTrabajo> it = listaDeptosTrab.iterator();
			while(it.hasNext()){
				CtaDptDepartamentoTrabajo departamentoTrabajo = it.next();
				lista+="<option value=\""+departamentoTrabajo.getDptId()+"\">"+departamentoTrabajo.getDptNombre()+"</option>";
			}
			lista+="</select>";
		}else{
			lista = "<label>"+getResources(request).getMessage("errors.asc.noDepartamentosTrabajo")+"</label>" ;
		}
		return lista;
	}	
	
	 public ActionForward guardar(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {
		 	ActionForward target = null;
		 	ActionErrors errors = new ActionErrors();
			AsociadoForm asociadoForm = (AsociadoForm)form;
			CtaCahCuentaAhorroDAO cuentaAhorroDAO = new CtaCahCuentaAhorroDAO(getSessionHibernate(request));
			CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
			SecPerPersonaDAO personaDAO = new SecPerPersonaDAO(getSessionHibernate(request));
			CtaNotNotasDAO notasDAO = new CtaNotNotasDAO(getSessionHibernate(request));
			CtaAscAsociado asociado = asociadoForm.getAscAsociadoH();
			SecPerPersona persona = asociado.getSecPerPersona();
			CtaNotNotas nota = asociado.getCtaNotNotas();
			CtaInaIngresosxasociadoDAO ingresosxasociadoDAO = new CtaInaIngresosxasociadoDAO(getSessionHibernate(request));
			SecIseInicioSesionDAO inicioSesionDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
			SecIseInicioSesion iseInicioSesion = new SecIseInicioSesion();
			SecRolRolesDAO rolesDAO = new SecRolRolesDAO(getSessionHibernate(request));
			PwdAleatorio pwdAleatorio = new PwdAleatorio();
			CtrParParametrosDAO parametrosDAO = new CtrParParametrosDAO(getSessionHibernate(request));
			SecCelCorreoElectronicoDAO correoElectronicoDAO = new SecCelCorreoElectronicoDAO(getSessionHibernate(request));
			SecCelCorreoElectronicoId correoElectronicoId = new SecCelCorreoElectronicoId();
			SecCelCorreoElectronico correoElectronicoH = new SecCelCorreoElectronico();
			Transaction tx = asociadoDAO.getSession().beginTransaction();
			CtaCasCuentaAsociado cuentaAsociado  = new CtaCasCuentaAsociado();
			CtaCasCuentaAsociadoDAO cuentaAsociadoDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
			CtaNotNotas nota2 = new CtaNotNotas();
			CtaTahTipoAhorroDAO tipoAhorroDAO = new CtaTahTipoAhorroDAO(getSessionHibernate(request));
			try{
				if(!asociadoForm.isMdf()){//logica para almacenamiento de nuevos asociados	
					List<SecPerPersona>  lstPersonas = personaDAO.findByDuiOrNit(persona);	
					List<SecCelCorreoElectronico> lstCorreo = null;
					lstCorreo = correoElectronicoDAO.findByProperty("id.celCorreoElectronico",asociadoForm.getCorreoElectronico());
					if(!lstPersonas.isEmpty()){
						errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.asc.personaRepetida"));
					}
					if(persona.getPerNit().trim().length() != 14){
						errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.persona.nitSize"));
					}
					if(lstCorreo.size() >0){
						errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.asc.correoRepetido"));
					}else{
						if(validateEmailPattern(asociadoForm.getCorreoElectronico())){
							errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.asc.correoFormatoInvalido"));
						}
					}
					if(asociadoForm.isOtrTrab()){
						if((asociado.getAscDirTrabajo().trim().equals("") || asociado.getAscDirTrabajo() == null)){
							errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.asc.direccionTrabajoInvalida"));
						}
					}else{
						if(asociado.getCtaDptDepartamentoTrabajo().getCtaEtrEmpresaTrabajo().getEtrId() == -1 ){
							errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.asc.empresaTrabajoInvalido"));
						}
						if(asociado.getCtaDptDepartamentoTrabajo().getDptId() == null || asociado.getCtaDptDepartamentoTrabajo().getDptId() == 0 ){
							errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.asc.departamentoTrabajoInvalido"));
						}
					}
					if(!errors.isEmpty()){
						saveMessages(request, errors);
						request.setAttribute(Constantes.ACCION_KEY, "/asociado");
						return forwardToNuevoAsociado(mapping, asociadoForm, request, response);
					}else{
						if(asociadoForm.isOtrTrab()){//por si "elije otro trabajo" en la jsp, se debe ignorar entonces
							//el departamento de trabajo.
							asociado.setCtaDptDepartamentoTrabajo(null);
						}
						persona.setPerId(personaDAO.generarId());
						persona.setPerEstado("A");
						persona.setSecSucSucursal(null);
						persona.setAudFechaCreacion(new Date());
						persona.setAudUsuarioCreacion(asociadoForm.getUsuarioConectado().getNombreUsuario());
						persona.setAudFechaModificacion(new Date());
						persona.setAudUsuarioModificacion(asociadoForm.getUsuarioConectado().getNombreUsuario());
						correoElectronicoId.setCelCorreoElectronico(asociadoForm.getCorreoElectronico());
						correoElectronicoId.setSecPerPersona(persona);
						correoElectronicoH.setId(correoElectronicoId);
						correoElectronicoH.setCelPrincipal("S");
						correoElectronicoH.setAudFechaCreacion(new Date());
						correoElectronicoH.setAudUsuarioCreacion(asociadoForm.getUsuarioConectado().getNombreUsuario());
						correoElectronicoH.setAudFechaModificacion(new Date());
						correoElectronicoH.setAudUsuarioModificacion(asociadoForm.getUsuarioConectado().getNombreUsuario());
						persona.getSecCelCorreoElectronicos().add(correoElectronicoH);
						personaDAO.save(persona);
						asociado.setSecPerPersona(persona);
						nota.setNotNota("Ingreso a cooperativa");
						nota.setNotId(notasDAO.nextId());
						nota.setNotFecha(new Date());
						notasDAO.save(nota);
						asociado.setEstId(0);//setea estado de activo al asociado
						asociado.setCtaNotNotas(nota);
						asociado.setSecPerPersona(persona);
						asociado.setAscIngresoCoope(new Date());
						asociado.setEstId(0);
						if(asociadoForm.getAscAsociadoH().getAscPagaraPadre()==null){
							asociado.setAscPagaraPadre("N");
							asociado.setAscAsociadoPadre(null);
						}
						asociado.getCtrEstEstado().setEstId(0);//setea estado de activo al asociado
						if(asociadoForm.isOtrTrab()){
							asociado.setCtaDptDepartamentoTrabajo(null);
						}else{
							asociado.setAscDirTrabajo("");
						}
						asociado.setAscId(asociadoDAO.generarId());
						asociado.setAscCodigoAsociado(asociadoDAO.generarCodigo());
						asociadoDAO.save(asociado);
						CtaInaIngresosxasociado ingresosxasociado = new CtaInaIngresosxasociado();
						nota2.setNotId(notasDAO.nextId());
						nota2.setNotFecha(new Date());
						nota2.setNotNota("Ingreso a cooperativa");
						ingresosxasociado.setInaId(ingresosxasociadoDAO.nextId());
						ingresosxasociado.setInaFechaIngreso(new Date());
						ingresosxasociado.setCtaAscAsociado(asociado);
						ingresosxasociado.setCtaNotNotas(nota2);
						ingresosxasociadoDAO.save(ingresosxasociado);
						String password = pwdAleatorio.getPasswordAleatorio(parametrosDAO.findById("PASS_SIZE").getParValorNumber().intValue());
						iseInicioSesion.setSecPerPersona(persona);
						iseInicioSesion.setIseContrasenia(Hasher.getHash(password.toUpperCase()));
						iseInicioSesion.setIseTipoSesion(Constantes.TIPO_SESSION_CLIENTE);
						iseInicioSesion.setIseNombreUsuario(asociado.getAscCodigoAsociado());
						iseInicioSesion.setSecRolRoles((SecRolRoles)rolesDAO.findByRolTipoSesion("C").get(0));
						iseInicioSesion.setAudFechaCreacion(new Date());
						iseInicioSesion.setAudFechaModificacion(new Date());
						iseInicioSesion.setAudUsuarioCreacion(asociadoForm.getUsuarioConectado().getNombreUsuario());
						iseInicioSesion.setAudUsuarioModificacion(asociadoForm.getUsuarioConectado().getNombreUsuario());
						iseInicioSesion.setIseFechaActivacion(new Date());
						iseInicioSesion.setIseVecesUtilizado(0);
						inicioSesionDAO.save(iseInicioSesion);
						//Creamos la cuenta principal
						CtaCahCuentaAhorro principal = new CtaCahCuentaAhorro();
						principal.setCahId(cuentaAhorroDAO.generarId("B"));
						principal.setCahSaldoActual(new Double(0.00));
						principal.setCahInteresAcumulado(new Double(0.00));
						principal.setCahCuota(0.00);
						principal.getCtaTahTipoAhorro().setTahId(5);//para que siempre se vaya a ahorro descuentos
						cuentaAhorroDAO.save(principal);
						cuentaAsociado = new CtaCasCuentaAsociado();
						cuentaAsociado.setCtaAscAsociado(asociado);
						cuentaAsociado.setCtaCahCuentaAhorro(principal);
						cuentaAsociado.setCasFechaApertura(new Date());
						cuentaAsociado.setCasValorApertura(0.00);
						cuentaAsociado.setCtaPrePrestamo(null);
						cuentaAsociado.setCtaCbaCuentaBancaria(null);
						cuentaAsociado.setCtaSegSeguros(null);
						cuentaAsociado.setCasPrincipal("S");
						cuentaAsociado.getCtrEstEstado().setEstId(9);
						cuentaAsociado.setCtaPxtPersonaExterna(null);
						cuentaAsociadoDAO.save(cuentaAsociado);
						if(asociado.getCtaDptDepartamentoTrabajo() != null && asociado.getCtaDptDepartamentoTrabajo().getDptId() != null){
						//Si ya fuera el empleado fiador se verifica para agregarle esas cuentas
						CtaPxtPersonaExternaDAO	externaDAO = new CtaPxtPersonaExternaDAO(getSessionHibernate(request));
						List externosIguales = externaDAO.findByAscInfo(asociado);
						for (Iterator iterator = externosIguales.iterator(); iterator
								.hasNext();) {
							CtaPxtPersonaExterna pxt = (CtaPxtPersonaExterna) iterator.next();
							List cuentasPxt = cuentaAsociadoDAO.findByProperty("ctaPxtPersonaExterna.pxtId", pxt.getPxtId());
							for (Iterator iterator2 = cuentasPxt.iterator(); iterator2
									.hasNext();) {
								CtaCasCuentaAsociado casPxt = (CtaCasCuentaAsociado) iterator2.next();
								casPxt.setCtaAscAsociado(asociado);
								casPxt.setCtaPxtPersonaExterna(null);
								cuentaAsociadoDAO.merge(casPxt);
							}
						}
						}
						//Aqui termina la verificacion
						
						tx.commit();
						if(asociado.getAscPagoIngreso().equals("S")){
							PartidaAutomatica partidaAutomatica = new PartidaAutomatica();
							partidaAutomatica.crearPartidaAutomatica("5;1", parametrosDAO.findById("VALOR_INSCRIPCION").getParValorNumber()
									, asociadoForm.getUsuarioConectado().getNombreUsuario(), 1, null, null, null,request);
							asociadoForm.setEntrada(true);
							
							CtaNotNotasDAO notaDAO = new CtaNotNotasDAO(getSessionHibernate(request));
							Transaction t = notaDAO.getSession().beginTransaction();
							CtaNotNotas notaI = new CtaNotNotas();
							notaI.setNotNota(parametrosDAO.findById("VALOR_INSCRIPCION").getParValorNumber().toString());
							notaI.setNotFecha(new Date());
							SecIseInicioSesionDAO iseDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
							SecIseInicioSesion sesion  = iseDAO.findById(asociadoForm.getUsuarioConectado().getNombreUsuario());
							Integer  suc_id=  sesion.getSecPerPersona().getSecSucSucursal().getSucId();
							notaI.setNotCampo(
									asociado.getAscCodigoAsociado()+
									" "+persona.getPerPrimerNombre()+
									" "+ persona.getPerSegundoNombre()+
									" "+persona.getPerPrimerApellido()+
									";"+suc_id
								);
							notaI.setNotId(notasDAO.nextId());
							notaDAO.save(notaI);
							t.commit();
							target = forwardToNuevoAsociado(mapping, form, request, response);
						}else{
							PartidaAutomatica partidaAutomatica = new PartidaAutomatica();
							partidaAutomatica.crearPartidaAutomatica("5;2", parametrosDAO.findById("VALOR_INSCRIPCION").getParValorNumber(), 
									asociadoForm.getUsuarioConectado().getNombreUsuario(), 1, null, null, null,request);
							request.setAttribute("ASC_ID", asociadoForm.getAscId());
							target= mapping.findForward("aperturaAportacion");
						}
						createNewThreadEmail(password, persona, asociadoForm.getUsuarioConectado(), errors, iseInicioSesion.getIseNombreUsuario(),request);
					}
				}else{//logica de modificacion de asociados
					if(asociadoForm.isOtrTrab()){
						if((asociado.getAscDirTrabajo().trim().equals("") || asociado.getAscDirTrabajo() == null)){
							errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.asc.direccionTrabajoInvalida"));
						}
					}else{
						if(asociado.getCtaDptDepartamentoTrabajo().getCtaEtrEmpresaTrabajo().getEtrId() == -1 ){
							errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.asc.empresaTrabajoInvalido"));
						}
						if(asociado.getCtaDptDepartamentoTrabajo().getDptId() == null || asociado.getCtaDptDepartamentoTrabajo().getDptId() == 0 ){
							errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.asc.departamentoTrabajoInvalido"));
						}
//						else{
//							if(asociadoDAO.findByCodigoEmpleadoAndEmpresa(asociado.getAscCodigo(), asociado.getCtaDptDepartamentoTrabajo().getDptId()) > 0){
//								errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.asc.asociadoRepetido"));
//							}
//						}
					}
					if(!errors.isEmpty()){
						saveMessages(request, errors);
						request.setAttribute(Constantes.ACCION_KEY, "/asociado");
						request.setAttribute("mdf",true);
						target = forwardToNuevoAsociado(mapping, asociadoForm, request, response);
					}else{
						persona.setSecSucSucursal(null);
						persona.setAudFechaModificacion(new Date());
						persona.setAudUsuarioModificacion(asociadoForm.getUsuarioConectado().getNombreUsuario());
						personaDAO.merge(persona);
						if(!nota.getNotNota().equals(asociadoForm.getNotaTemp())){
							nota.setNotFecha(new Date());
							nota.setNotNota(asociadoForm.getNotaTemp());
							notasDAO.merge(nota);
						}
						if(asociadoForm.isOtrTrab()){
							asociado.setCtaDptDepartamentoTrabajo(null);
						}else{
							asociado.setAscDirTrabajo("");
						}
						asociado.setSecPerPersona(persona);
						if(asociado.getAscPagaraPadre() == null){
							asociado.setAscPagaraPadre("N");
							asociado.setAscAsociadoPadre(null);
						}
						asociadoDAO.merge(asociado);
						/*if(!asociado.getAscCodigo().equals(asociadoForm.getViejoCodigo())){
							CtaCntCodigosAnteriores codigoViejo = codigosAnterioresDAO.findLastCode(asociado.getAscId());
							codigoViejo.setCntFechaFin(new Date());
							codigosAnterioresDAO.merge(codigoViejo);
							CtaCntCodigosAnteriores codigosAnterioresNuevo = new CtaCntCodigosAnteriores();
							codigosAnterioresNuevo.setCntCod(asociado.getAscCodigo());
							codigosAnterioresNuevo.setCntFechaIni(new Date());
							codigosAnterioresNuevo.setCtaAscAsociado(asociado);
							codigosAnterioresDAO.save(codigosAnterioresNuevo);
						}*/
						tx.commit();
						AsociadoForm asociadoForm2 = new AsociadoForm();
						asociadoForm2.setUsuarioConectado(asociadoForm.getUsuarioConectado());
						target = lista(mapping, asociadoForm2, request, response);
					}
				}
			}catch(Exception e){
				tx.rollback();
				e.printStackTrace();
			}finally{
				asociadoDAO.getSession().flush();
				asociadoDAO.getSession().clear();
				
			}
			return target;
		}
		
	private boolean validateEmailPattern(String email){
			 String EMAIL_REGEXP = "/^[a-z0-9]+([_\\.-][a-z0-9]+)*@([a-z0-9]+([\\.-][a-z0-9]+)*)+\\.[a-z]{2,}$/i";
			 Perl5Util perl5Util = new Perl5Util();
			 boolean respuesta = false;
			 if(!perl5Util.match(EMAIL_REGEXP, email)) {
				 respuesta  =  true;
			 }
			 return respuesta;
		}
	 
	 private void createNewThreadEmail(String password,
				SecPerPersona modelPerPersona, UsuarioConectado attribute,ActionErrors errors,String login,HttpServletRequest request) {
			String msg = null;
			String subject = null;
			int puerto = 0;
			String ipServidor = null;
			String correoAdmin = null;
			String correoCliente = null;
			
			if(password != null && modelPerPersona!=null && attribute != null &&  errors != null){
				CtrParParametrosDAO parametrosDAO = new CtrParParametrosDAO(getSessionHibernate(request));
				SecCelCorreoElectronicoDAO secCelCorreoElectronicoDAO = new SecCelCorreoElectronicoDAO(getSessionHibernate(request));
				Transaction tx = parametrosDAO.getSession().beginTransaction();
				try {
					msg = parametrosDAO.findById("MAIL_MENSAJE").getParValorString();
					subject = parametrosDAO.findById("MAIL_SUBJECT").getParValorString();
					puerto =  parametrosDAO.findById("MAIL_PUERTO").getParValorNumber().intValue();
					ipServidor =  parametrosDAO.findById("MAIL_SERVIDOR").getParValorString();
					correoAdmin = secCelCorreoElectronicoDAO.findCorreoForConectedUser(attribute.getNombreUsuario());
					correoCliente = secCelCorreoElectronicoDAO.findCorreoByPerId(modelPerPersona.getPerId());
					tx.commit();
				} catch (Exception e) {
					tx.rollback();
					e.printStackTrace();
					errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.session.email"));
				}finally{
					 parametrosDAO.getSession().flush();
					 parametrosDAO.getSession().clear();
					 
				}
				
				msg = msg + "\nUsuario: " + login + "\nPassword: " + password;
				System.out.println(msg);
				if(msg!=null && subject != null && puerto != 0 && ipServidor != null && correoAdmin!= null
						&& correoCliente!=null){
						 new ThreadEmail(
								 ipServidor,puerto,correoAdmin
								 ,new String[]{correoAdmin,correoCliente},msg,
								 subject,new StringBuilder().append(modelPerPersona.getPerPrimerNombre())
								 .append("-").append(modelPerPersona.getPerPrimerApellido()).toString()
								 ,"Administrador"
						).start();
					
				}else{
					errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.session.email"));
				}
			}else{
				errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.session.email"));
			}
		}
	 
	 public ActionForward cargarDatos(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {//se utiliza para cargar los datos del asociado y realizar la modificacion
		 AsociadoForm asociadoForm = (AsociadoForm) form;
		 CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
		 asociadoForm.setAscAsociadoH(asociadoDAO.findById(asociadoForm.getAscId()));
		 if(asociadoForm.getAscAsociadoH().getAscDirTrabajo() != null && !asociadoForm.getAscAsociadoH().getAscDirTrabajo().equals("")){
			 asociadoForm.setOtrTrab(true);
			 asociadoForm.setDptNombre("");
			 asociadoForm.setCentroCosto("");
		 }else{
			 if(asociadoForm.getCtaDptDepartamentoTrabajo()!=null){
				 asociadoForm.setCentroCosto(asociadoForm.getCtaDptDepartamentoTrabajo().getDptCentroCosto());
				 asociadoForm.setDptNombre(asociadoForm.getCtaDptDepartamentoTrabajo().getDptNombre());
			 }else{
				 asociadoForm.setCentroCosto("");
			 }
		 }
		 request.setAttribute("mdf", true);
		 return forwardToNuevoAsociado(mapping, asociadoForm, request, response);
	 }
	 
		public ActionForward redirectInvalidData(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response){
			ActionForward target;
			ActionErrors errors = (ActionErrors)request.getSession().getAttribute(Constantes.ERRORS);
			saveMessages(request, errors);
			AsociadoForm asociadoForm = (AsociadoForm) form;
			if(asociadoForm.isUsr()){
				target = forwardToNuevoAscUsr(mapping, asociadoForm, request, response);
			}else{
				SecDppDepartamentoPaisDAO departamentoPaisDAO = new SecDppDepartamentoPaisDAO(getSessionHibernate(request));
				CtaTasTipoAsociadoDAO tipoAsociadoDAO = new CtaTasTipoAsociadoDAO(getSessionHibernate(request));
				CtaTcoTipoContratoDAO tipoContratoDAO = new CtaTcoTipoContratoDAO(getSessionHibernate(request));
				CtrEstEstadoDAO estadoDAO = new CtrEstEstadoDAO(getSessionHibernate(request));
				CtaEtrEmpresaTrabajoDAO ctaEtrEmpresaTrabajoDAO = new CtaEtrEmpresaTrabajoDAO(getSessionHibernate(request));
				CtaDomDomicilioDAO domicilioDAO = new CtaDomDomicilioDAO(getSessionHibernate(request));
				CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
				List<CtaTasTipoAsociado> tasList = new ArrayList<CtaTasTipoAsociado>();
				target=mapping.findForward("dml");
				List tDomList = domicilioDAO.findAll();
				request.setAttribute("tDomList", tDomList);
				
				List dppList = departamentoPaisDAO.findAll();
				request.setAttribute("dppList", dppList);
				
				List trabList = ctaEtrEmpresaTrabajoDAO.findAllActivasConDepartamentos();
				request.setAttribute("trabList", trabList);
				
				List tcoList = tipoContratoDAO.findAll();
				request.setAttribute("tcoList", tcoList);
				
				List estList = estadoDAO.findByProperty(TUS_CODIGO,"ACTIV");
				request.setAttribute("estList", estList);
			
				request.setAttribute(Constantes.ACCION_KEY, "/asociado");
				
				if(asociadoForm.getAscAsociadoPadre() != null && asociadoForm.getAscAsociadoPadre().trim().length() > 0){
					CtaAscAsociado padre = asociadoDAO.findById(asociadoForm.getAscAsociadoPadre());
					request.setAttribute("asociadoPadre",padre);
					asociadoForm.setAscAsociadoH(padre);
					tasList.add(tipoAsociadoDAO.findById(5));
					tasList.add(tipoAsociadoDAO.findById(1));
				}else{
					tasList = tipoAsociadoDAO.findAll();
				}
				if(asociadoForm.isMdf()){
					request.setAttribute("mdf",asociadoForm.isMdf());
				}
				request.setAttribute("tasList", tasList);
				request.setAttribute("form", asociadoForm);
			}
			return target;
		}
	 
	 public ActionForward cancelar(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {
		 return lista(mapping, form, request, response);
	 }
	 
	 public ActionForward regresar(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {
		 return mapping.findForward("lista");
	 }
	 
		public ActionForward forwardToNuevoAscUsr(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {
			SecDppDepartamentoPaisDAO departamentoPaisDAO = new SecDppDepartamentoPaisDAO(getSessionHibernate(request));
			CtaTasTipoAsociadoDAO tipoAsociadoDAO = new CtaTasTipoAsociadoDAO(getSessionHibernate(request));
			CtaTcoTipoContratoDAO tipoContratoDAO = new CtaTcoTipoContratoDAO(getSessionHibernate(request));
			CtrEstEstadoDAO estadoDAO = new CtrEstEstadoDAO(getSessionHibernate(request));
			CtaEtrEmpresaTrabajoDAO ctaEtrEmpresaTrabajoDAO = new CtaEtrEmpresaTrabajoDAO(getSessionHibernate(request));
			CtaDomDomicilioDAO domicilioDAO = new CtaDomDomicilioDAO(getSessionHibernate(request));
			SecPerPersonaDAO personaDAO = new SecPerPersonaDAO(getSessionHibernate(request));
			CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
			SecCelCorreoElectronicoDAO correoElectronicoDAO = new SecCelCorreoElectronicoDAO(getSessionHibernate(request));
			CtrParParametrosDAO parametrosDAO = new CtrParParametrosDAO(getSessionHibernate(request));
			AsociadoForm asociadoForm = (AsociadoForm) form;
			asociadoForm.setCorreoElectronico(correoElectronicoDAO.findCorreoByPerId(asociadoForm.getPerId()));
			asociadoForm.getAscAsociadoH().setSecPerPersona(personaDAO.findById(asociadoForm.getPerId()));
			if(asociadoForm.getAscCodigoAsociado() == null || asociadoForm.getAscCodigoAsociado().trim().equals("")){
				asociadoForm.setAscCodigoAsociado(asociadoDAO.generarCodigo());
			}
			List tDomList = domicilioDAO.findAll();
			request.setAttribute("tDomList", tDomList);
			List dppList = departamentoPaisDAO.findAll();
			request.setAttribute("dppList", dppList);
			List trabList =  ctaEtrEmpresaTrabajoDAO.findAllActivasConDepartamentos();
			request.setAttribute("trabList", trabList);
			List tasList = tipoAsociadoDAO.findAll();
			request.setAttribute("tasList", tasList);
			List tcoList = tipoContratoDAO.findAll();
			request.setAttribute("tcoList", tcoList);
			List estList = estadoDAO.findByProperty(TUS_CODIGO,"ACTIV");
			asociadoForm.setUsr(true);
			request.setAttribute("estList", estList);
			request.setAttribute(Constantes.ACCION_KEY, "/asociado");
			request.getSession().setAttribute("cuotaAfiliacion", parametrosDAO.findById("VALOR_INSCRIPCION").getParValorNumber());
			request.setAttribute("form", asociadoForm);
			return mapping.findForward("dml");
		}
		
		public ActionForward cancelToUsr(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {
			return mapping.findForward("redirectListaP");
		}
		
		public ActionForward guardarUsrAsc(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {
		 	ActionForward target = null;
		 	ActionErrors errors = new ActionErrors();
			AsociadoForm asociadoForm = (AsociadoForm)form;
			CtaCahCuentaAhorroDAO cuentaAhorroDAO = new CtaCahCuentaAhorroDAO(getSessionHibernate(request));
			CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
			SecPerPersonaDAO personaDAO = new SecPerPersonaDAO(getSessionHibernate(request));
			CtaNotNotasDAO notasDAO = new CtaNotNotasDAO(getSessionHibernate(request));
			CtaAscAsociado asociado = asociadoForm.getAscAsociadoH();
			SecPerPersona persona = personaDAO.findById(asociadoForm.getPerId());
			CtaNotNotas nota = asociado.getCtaNotNotas();
			CtaInaIngresosxasociadoDAO ingresosxasociadoDAO = new CtaInaIngresosxasociadoDAO(getSessionHibernate(request));
			SecIseInicioSesionDAO inicioSesionDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
			SecIseInicioSesion iseInicioSesion = new SecIseInicioSesion();
			SecRolRolesDAO rolesDAO = new SecRolRolesDAO(getSessionHibernate(request));
			PwdAleatorio pwdAleatorio = new PwdAleatorio();
			CtrParParametrosDAO parametrosDAO = new CtrParParametrosDAO(getSessionHibernate(request));
			Transaction tx = asociadoDAO.getSession().beginTransaction();
			CtaCasCuentaAsociado cuentaAsociado  = new CtaCasCuentaAsociado();
			CtaCasCuentaAsociadoDAO cuentaAsociadoDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
			CtaTahTipoAhorroDAO tipoAhorroDAO = new CtaTahTipoAhorroDAO(getSessionHibernate(request));
			CtaNotNotas nota2 = new CtaNotNotas();
			try{	
					List<CtaAscAsociado> lAsociados = asociadoDAO.findByAscCodigo(asociadoForm.getAscCodigo());
					if(!lAsociados.isEmpty()){
						errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.asc.asociadoRepetido"));
					}
					if(asociado.getCtaDptDepartamentoTrabajo().getDptId() == 0){
						errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.asc.departamentoTrabajoInvalido"));
					}
					if(!errors.isEmpty()){
						saveMessages(request, errors);
						request.setAttribute(Constantes.ACCION_KEY, "/asociado");
						target = forwardToNuevoAscUsr(mapping, form, request, response);
					}else{
						nota.setNotNota("Ingreso a cooperativa");
						nota.setNotId(notasDAO.nextId());
						nota.setNotFecha(new Date());
						notasDAO.save(nota);
						asociado.setCtaNotNotas(nota);
						asociado.setAscId(asociadoDAO.generarId());
						asociado.setSecPerPersona(persona);
						asociado.setAscIngresoCoope(new Date());
						asociado.getCtrEstEstado().setEstId(0);//setea estado de activo al asociado
						asociado.setEstId(0);//setea estado de activo al asociado
						asociadoDAO.save(asociado);
						/*CtaCntCodigosAnteriores codigosAnteriores = new CtaCntCodigosAnteriores();
						codigosAnteriores.setCntCod(asociado.getAscCodigo());
						codigosAnteriores.setCntFechaIni(new Date());
						codigosAnteriores.setCtaAscAsociado(asociado);
						codigosAnterioresDAO.save(codigosAnteriores);*/
						CtaInaIngresosxasociado ingresosxasociado = new CtaInaIngresosxasociado();
						nota2.setNotId(notasDAO.nextId());
						nota2.setNotFecha(new Date());
						nota2.setNotNota("Ingreso a cooperativa");
						ingresosxasociado.setInaId(ingresosxasociadoDAO.nextId());
						ingresosxasociado.setInaFechaIngreso(new Date());
						ingresosxasociado.setCtaAscAsociado(asociado);
						ingresosxasociado.setCtaNotNotas(nota2);
						ingresosxasociadoDAO.save(ingresosxasociado);
						String password = pwdAleatorio.getPasswordAleatorio(parametrosDAO.findById("PASS_SIZE").getParValorNumber().intValue());
						iseInicioSesion.setSecPerPersona(persona);
						iseInicioSesion.setIseContrasenia(Hasher.getHash(password.toUpperCase()));
						iseInicioSesion.setIseTipoSesion(Constantes.TIPO_SESSION_CLIENTE);
						iseInicioSesion.setIseNombreUsuario(asociado.getAscCodigo());
						iseInicioSesion.setSecRolRoles((SecRolRoles)rolesDAO.findByRolTipoSesion("C").get(0));
						iseInicioSesion.setAudFechaCreacion(new Date());
						iseInicioSesion.setAudFechaModificacion(new Date());
						iseInicioSesion.setAudUsuarioCreacion(asociadoForm.getUsuarioConectado().getNombreUsuario());
						iseInicioSesion.setAudUsuarioModificacion(asociadoForm.getUsuarioConectado().getNombreUsuario());
						iseInicioSesion.setIseFechaActivacion(new Date());
						iseInicioSesion.setIseVecesUtilizado(0);
						inicioSesionDAO.save(iseInicioSesion);
					/*	prestamo.setPreId(prestamoDAO.generarId("C"));
						//prestamo.getCtrEstEstado().setEstId(13);//estado de activo
						prestamo.setPreMontoSolicitado(parametrosDAO.findById("CREDITO").getParValorNumber());
						prestamo.setPreSaldoActualT(new Double(parametrosDAO.findById("CREDITO").getParValorNumber()));
						prestamo.setPreCuota(0.00);
						prestamo.setPreLiquidoARecibir(0.0);
						prestamo.setPreInteresAcumulado(new Double(0.00));
						prestamo.setPreFechaSolicitud(new Date());
						prestamo.setCtaTprTipoPrestamo(null);
						prestamo.setCtaTinTasaInteres(null);
						prestamo.setCtaSegSeguros(null);
						prestamoDAO.save(prestamo);
						cuentaAsociado.setCtaAscAsociado(asociado);
						cuentaAsociado.setCtaPrePrestamo(prestamo);
						cuentaAsociado.setCasFechaApertura(new Date());
						cuentaAsociado.setCasValorApertura(parametrosDAO.findById("CREDITO").getParValorNumber());
						cuentaAsociado.setCtaCahCuentaAhorro(null);
						cuentaAsociado.setCtaCbaCuentaBancaria(null);
						cuentaAsociado.setCtaSegSeguros(null);
						cuentaAsociado.setCasPrincipal("N");
						cuentaAsociado.getCtrEstEstado().setEstId(13);
						cuentaAsociado.setCtaPxtPersonaExterna(null);
						cuentaAsociadoDAO.save(cuentaAsociado);*/
						//Creamos la cuenta principal
						CtaCahCuentaAhorro principal = new CtaCahCuentaAhorro();
						principal.setCahId(cuentaAhorroDAO.generarId("B"));
						principal.setCahSaldoActual(new Double(0.00));
						principal.setCahInteresAcumulado(new Double(0.00));
						principal.setCahCuota(0.00);
						principal.getCtaTahTipoAhorro().setTahId(5);//para que siempre se vaya a ahorro descuentos
						cuentaAhorroDAO.save(principal);
						cuentaAsociado = new CtaCasCuentaAsociado();
						cuentaAsociado.setCtaAscAsociado(asociado);
						cuentaAsociado.setCtaCahCuentaAhorro(principal);
						cuentaAsociado.setCasFechaApertura(new Date());
						cuentaAsociado.setCasValorApertura(0.00);
						cuentaAsociado.setCtaPrePrestamo(null);
						cuentaAsociado.setCtaCbaCuentaBancaria(null);
						cuentaAsociado.setCtaSegSeguros(null);
						cuentaAsociado.setCasPrincipal("S");
						cuentaAsociado.getCtrEstEstado().setEstId(9);
						cuentaAsociado.setCtaPxtPersonaExterna(null);
						cuentaAsociadoDAO.save(cuentaAsociado);
						if(asociado.getCtaDptDepartamentoTrabajo() != null && asociado.getCtaDptDepartamentoTrabajo().getDptId() != null){
							//Si ya fuera el empleado fiador se verifica para agregarle esas cuentas
							CtaPxtPersonaExternaDAO	externaDAO = new CtaPxtPersonaExternaDAO(getSessionHibernate(request));
							List externosIguales = externaDAO.findByAscInfo(asociado);
							for (Iterator iterator = externosIguales.iterator(); iterator
									.hasNext();) {
								CtaPxtPersonaExterna pxt = (CtaPxtPersonaExterna) iterator.next();
								List cuentasPxt = cuentaAsociadoDAO.findByProperty("ctaPxtPersonaExterna.pxtId", pxt.getPxtId());
								for (Iterator iterator2 = cuentasPxt.iterator(); iterator2
										.hasNext();) {
									CtaCasCuentaAsociado casPxt = (CtaCasCuentaAsociado) iterator2.next();
									casPxt.setCtaAscAsociado(asociado);
									casPxt.setCtaPxtPersonaExterna(null);
									cuentaAsociadoDAO.merge(casPxt);
								}
							}
						}
						tx.commit();
						if(asociado.getAscPagoIngreso().equals("S")){
							PartidaAutomatica partidaAutomatica = new PartidaAutomatica();
							partidaAutomatica.crearPartidaAutomatica("5", parametrosDAO.findById("VALOR_INSCRIPCION").getParValorNumber(), 
									asociadoForm.getUsuarioConectado().getNombreUsuario(), 1, null, null, null,request);
						}
						createNewThreadEmail(password, persona, asociadoForm.getUsuarioConectado(), errors, iseInicioSesion.getIseNombreUsuario(),request);
						CuentaAhorroForm formA = new CuentaAhorroForm();
						formA.setCtaAscAsociadoH(asociado);
						request.setAttribute("form", formA);
						target= mapping.findForward("aperturaAportacion");
					}
			}catch(Exception e){
				tx.rollback();
				e.printStackTrace();
			}finally{
				asociadoDAO.getSession().flush();
				asociadoDAO.getSession().clear();
				
			}
			return target;
		}
	
	public ActionForward cargarDatosReingreso(ActionMapping mapping,ActionForm form,
				HttpServletRequest request,HttpServletResponse response){
			AsociadoForm asociadoForm = (AsociadoForm) form;
			CtrParParametrosDAO parametrosDAO = new CtrParParametrosDAO(getSessionHibernate(request));
			CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
			CtaAscAsociado asoc = asociadoDAO.findById(asociadoForm.getAscId());
			//implementar la busqueda de los dependientes del asociado
			request.setAttribute("asociado",asoc );
			TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
			tableFacade.setItems(asociadoDAO.findDependientesPorAsociado(asociadoForm.getAscId(),6));
			//---- Genera los tipos de formas con que se podran exportar los datos
			tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
			tableFacade.setStateAttr("restore");
			Limit limit = tableFacade.getLimit();
			if (limit.isExported()) {
	        	//---- exporta la tabla
	        //    export(tableFacade);
	            return null; 
	        } else {
	        	String html = html2(tableFacade, request);
	            request.setAttribute(Constantes.LISTA_KEY, html);
	        }
			if(asoc.getAscAsociadoPadre()!= null && asoc.getAscAsociadoPadre().length() > 0 ){//si es dependiente, se agrega para saber quien es el asociado padre
				request.setAttribute("asociadoPadre",asociadoDAO.findById(asoc.getAscAsociadoPadre()));
			}
	        //----- Variables de configuracion
			request.getSession().setAttribute("cuotaAfiliacion", parametrosDAO.findById("VALOR_INSCRIPCION").getParValorNumber());
			request.setAttribute("form", asociadoForm);
			request.setAttribute(Constantes.ACCION_KEY, "/asociado");
			return mapping.findForward("reingreso");
	}	
		
	public ActionForward reactivarAsociado(ActionMapping mapping,ActionForm form,
			HttpServletRequest request,HttpServletResponse response){
		ActionErrors errors = new ActionErrors();
		AsociadoForm asociadoForm = (AsociadoForm) form;
		CtrParParametrosDAO parametrosDAO = new CtrParParametrosDAO(getSessionHibernate(request));
		CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
		CtaInaIngresosxasociadoDAO ingresosxasociadoDAO = new CtaInaIngresosxasociadoDAO(getSessionHibernate(request));
		CtaCasCuentaAsociadoDAO cuentaAsociadoDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
		CtaInaIngresosxasociado ingresosxasociado = new CtaInaIngresosxasociado();
		CtrEstEstadoDAO estadoDAO = new CtrEstEstadoDAO(getSessionHibernate(request));
		CtaNotNotasDAO notaDAO = new CtaNotNotasDAO(getSessionHibernate(request));
		CtaNotNotas nota= new CtaNotNotas(); //asociadoForm.getCtaNotNotas();
		SecIseInicioSesionDAO inicioSesionDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
		PwdAleatorio pwdAleatorio = new PwdAleatorio();
		SecRolRolesDAO rolesDAO = new SecRolRolesDAO(getSessionHibernate(request));
		CtaTahTipoAhorroDAO tipoAhorroDAO = new CtaTahTipoAhorroDAO(getSessionHibernate(request));
		SecCelCorreoElectronicoDAO correoElectronicoDAO = new SecCelCorreoElectronicoDAO(getSessionHibernate(request));
		CtaAscAsociado asociado = asociadoDAO.findById(asociadoForm.getAscId());
		Transaction tx = asociadoDAO.getSession().beginTransaction();
		try{
			//buscamos la cuenta principal,la de aportaciones y la de credito, y reactivamos
			//cada cuenta
			CtaCasCuentaAsociado principal = cuentaAsociadoDAO.findPrincipal(asociadoForm.getAscId());
			if(principal != null){
				principal.setCtrEstEstado(estadoDAO.findById(9));//reactivamos la cuenta de ahorro descuento
				principal.getCtaCahCuentaAhorro().setCahSaldoActual(0.00);
				principal.getCtaCahCuentaAhorro().setCahCuota(0.00);
				principal.getCtaCahCuentaAhorro().setCahInteresAcumulado(0.00);
				principal.getCtaCahCuentaAhorro().setCtaTahTipoAhorro(tipoAhorroDAO.findAhorroConMenorTasa());
				principal.setCasFechaApertura(new Date());
				principal.setCasFechaCierre(null);
				principal.setCtaPxtPersonaExterna(null);
				cuentaAsociadoDAO.merge(principal);
			}
			
			CtaCasCuentaAsociado aportacion =cuentaAsociadoDAO.findAportacion(asociadoForm.getAscId(),10);
			if(aportacion != null){
				aportacion.setCtrEstEstado(estadoDAO.findById(9));//reactivamos la cuenta de aportaciones
				aportacion.getCtaCahCuentaAhorro().setCahSaldoActual(0.00);
				aportacion.getCtaCahCuentaAhorro().setCahCuota(0.00);
				aportacion.getCtaCahCuentaAhorro().setCahInteresAcumulado(0.00);
				aportacion.setCasFechaApertura(new Date());
				aportacion.setCasFechaCierre(null);
				cuentaAsociadoDAO.merge(aportacion);	
			}
			
			/*CtaCasCuentaAsociado credito = cuentaAsociadoDAO.findCreditoSinTipo(asociadoForm.getAscId());
			credito.setCtrEstEstado(estadoDAO.findById(13));//reactivamos el credito
			credito.setCasValorApertura(parametrosDAO.findById("CREDITO").getParValorNumber());
			credito.getCtaPrePrestamo().setPreCuota(0.00);
			credito.getCtaPrePrestamo().setPreLiquidoARecibir(0.0);
			credito.getCtaPrePrestamo().setPreSaldoActualT(parametrosDAO.findById("CREDITO").getParValorNumber());
			credito.getCtaPrePrestamo().setPreMontoSolicitado(parametrosDAO.findById("CREDITO").getParValorNumber());
			credito.getCtaPrePrestamo().setPreInteresAcumulado(0.00);
			credito.getCtaPrePrestamo().setPreFechaSolicitud(new Date());
			credito.setCasFechaApertura(new Date());
			credito.setCasFechaCierre(null);
			cuentaAsociadoDAO.merge(credito);*/
			//reactivamos al asociado
			asociado.setEstId(0);//seteamos ambos estados en activo
			asociado.setCtrEstEstado(estadoDAO.findById(0));
			asociado.setAscIngresoCoope(new Date());
			asociado.setAscRetiroCoope(null);
			//asociado.setCtaNotNotas(nota);
			asociado.getSecPerPersona().setPerEstado("A");
			asociado.getSecPerPersona().setAudUsuarioCreacion(asociadoForm.getUsuarioConectado().getNombreUsuario());
			asociado.getSecPerPersona().setAudUsuarioModificacion(asociadoForm.getUsuarioConectado().getNombreUsuario());
			asociado.getCtaNotNotas().setNotFecha(new Date());
			asociado.getCtaNotNotas().setNotNota("Reingreso a cooperativa");
			if(asociadoForm.getAscAsociadoH().getAscPagaraPadre()==null){
				asociado.setAscPagaraPadre("N");
			}else{
				asociado.setAscPagaraPadre("S");
			}
			asociadoDAO.merge(asociado);
			//creamos un nuevo registro en la tabla de ingresos por asociado
			nota.setNotId(notaDAO.nextId());
			nota.setNotFecha(new Date());
			nota.setNotNota("Reingreso a cooperativa");
			//notaDAO.save(nota);
			ingresosxasociado.setInaId(ingresosxasociadoDAO.nextId());
			ingresosxasociado.setInaFechaIngreso(new Date());
			ingresosxasociado.setCtaAscAsociado(asociado);
			ingresosxasociado.setCtaNotNotas(nota);
			ingresosxasociadoDAO.save(ingresosxasociado);
			//se verifica si existe inicio de sesion para el asociado q se reactiva, si no es asi, entonces se le debe
			//crear una nueva sesion, sino, solamente se resetea la existente
			String correo = correoElectronicoDAO.findCorreoByPerId(asociado.getSecPerPersona().getPerId());
			SecIseInicioSesion sesion = inicioSesionDAO.findById(asociado.getAscCodigoAsociado());
			String password = pwdAleatorio.getPasswordAleatorio(parametrosDAO.findById("PASS_SIZE").getParValorNumber().intValue());
			if(sesion == null){//si no existee la sesion se crea una nueva
				sesion = new SecIseInicioSesion();
				sesion.setSecPerPersona(asociado.getSecPerPersona());
				sesion.setIseContrasenia(Hasher.getHash(password.toUpperCase()));
				sesion.setIseTipoSesion(Constantes.TIPO_SESSION_CLIENTE);
				sesion.setIseNombreUsuario(asociado.getAscCodigo());
				sesion.setSecRolRoles((SecRolRoles)rolesDAO.findByRolTipoSesion("C").get(0));
				sesion.setAudFechaCreacion(new Date());
				sesion.setAudFechaModificacion(new Date());
				sesion.setAudUsuarioCreacion(asociadoForm.getUsuarioConectado().getNombreUsuario());
				sesion.setAudUsuarioModificacion(asociadoForm.getUsuarioConectado().getNombreUsuario());
				sesion.setIseFechaActivacion(new Date());
				sesion.setIseVecesUtilizado(0);
				inicioSesionDAO.save(sesion);
			}else{//sino se modifica la existente
				sesion.setIseContrasenia(Hasher.getHash(password.toUpperCase()));
				sesion.setAudFechaModificacion(new Date());
				sesion.setAudUsuarioModificacion(asociadoForm.getUsuarioConectado().getNombreUsuario());
				sesion.setIseFechaActivacion(new Date());
				sesion.setIseVecesUtilizado(0);
				sesion.setIseFechaInactivacion(null);
				sesion.setIsePorqueInactivacion(null);
				inicioSesionDAO.merge(sesion);
				}
			tx.commit();
			if(asociadoForm.getAscPagoIngreso().equals("S")){
				PartidaAutomatica partidaAutomatica = new PartidaAutomatica();
				partidaAutomatica.crearPartidaAutomatica("5;1", parametrosDAO.findById("VALOR_INSCRIPCION").getParValorNumber(), 
						asociadoForm.getUsuarioConectado().getNombreUsuario(), 1, null, null, null,request);
			}else{
				PartidaAutomatica partidaAutomatica = new PartidaAutomatica();
				partidaAutomatica.crearPartidaAutomatica("5;2", parametrosDAO.findById("VALOR_INSCRIPCION").getParValorNumber(), 
						asociadoForm.getUsuarioConectado().getNombreUsuario(), 1, null, null, null,request);
			}
			if(correo == null){//se verifica si el email puede enviarse al asociado.
				errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.asc.noCorreo"));
			}
			createNewThreadEmail(password, asociado.getSecPerPersona(), asociadoForm.getUsuarioConectado(), errors, sesion.getIseNombreUsuario(),request);
			asociadoForm.setComp(true);//para bloquear en boton y evitar que siga reactivando al asociado
			errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("lbl.asc.reingresadoCorrectamente"));
			saveMessages(request, errors);
		}catch (Exception e) {
			tx.rollback();
			e.printStackTrace();
		}finally{
			asociadoDAO.getSession().flush();
			asociadoDAO.getSession().clear();
			
		}
		return cargarDatosReingreso(mapping, form, request, response);
	}
	 
	private String html2(final TableFacade tableFacade, final HttpServletRequest request) {
		tableFacade.setColumnProperties("ascCodigoAsociado","secPerPersona.perPrimerNombre","estId", "ascCodigo");
		Table table = tableFacade.getTable();
		
		//---- Titulo de la tabla
		//table.setCaptionKey("tbl.ascAsociado.caption");
		
		Row row = table.getRow();
		Column nombreColumna = row.getColumn("ascCodigoAsociado");
		nombreColumna.setTitleKey("tbl.ascAsociado.ascCodigo");
		
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtaAscAsociadoDAO ascAsociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
				CtaAscAsociado asociado = (CtaAscAsociado)item;
				HtmlBuilder html = new HtmlBuilder();
				value = asociado.getAscCodigoAsociado();
				//---- Generar link para entrar a edicion
				if(asociado.getAscAsociadoPadre() == null){
					//solo se genera si no tiene dependientes, o si es dependiente pero su papa esta activo
					String link = tableFacade.getWebContext().getContextPath();
					link += "/asociados/asociado.do?ascId="+asociado.getAscId()+"&accion=cargarDatosReingreso";
					html.a().href().quote().append(link).quote().close();
					html.append(value);
					html.aEnd();
					
					String toReturn = html.toString();
					value = toReturn;
				}else if (asociado.getAscAsociadoPadre().length() > 0){
					CtaAscAsociado padre = ascAsociadoDAO.findById(asociado.getAscAsociadoPadre());
					if(padre.getCtrEstEstado().getEstId().equals(0)){
						String link = tableFacade.getWebContext().getContextPath();
						link += "/asociados/asociado.do?ascId="+asociado.getAscId()+"&accion=cargarDatosReingreso";
						html.a().href().quote().append(link).quote().close();
						html.append(value);
						html.aEnd();
						
						String toReturn = html.toString();
						value = toReturn;
					}
				}
				return value;
			}
		});
		
		nombreColumna = row.getColumn("estId");
		nombreColumna.setTitleKey("tbl.ascAsociado.ascEstado");
		
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				CtaAscAsociado asociado = (CtaAscAsociado)item;
				return asociado.getCtrEstEstado().getEstNombre();
			}
		});
		
		nombreColumna = row.getColumn("secPerPersona.perPrimerNombre");
		nombreColumna.setTitleKey("tbl.ascAsociado.ascNombre");
		//----- Implementamos la edicion de asociado
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtaAscAsociado asociado = (CtaAscAsociado)item;
				SecPerPersona persona = asociado.getSecPerPersona();
				value = persona.getPerPrimerApellido();
				value = value + (isObjectNull(persona.getPerSegundoApellido())?"":(" "+persona.getPerSegundoApellido()));
				value = value  + ", " +persona.getPerPrimerNombre();
				value = value  + (isObjectNull(persona.getPerSegundoNombre())?"":(" "+persona.getPerSegundoNombre()));		
				return value.toString();	
			}
		});
		
		nombreColumna = row.getColumn("ascCodigo");
		nombreColumna.setTitleKey("tbl.ascAsociado.transaccion");
		
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				String toReturn = "";
				CtaAscAsociado asociado = (CtaAscAsociado)item;
				CtaCasCuentaAsociadoDAO cuentaAsociadoDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
				
			    SecPerPersona persona = asociado.getSecPerPersona();
				HtmlBuilder html = new HtmlBuilder();
			    String value;
				String link;
				if(cuentaAsociadoDAO.findByAscAndTipoCuenta2(asociado.getAscId(), "C").size()>0){
					html = new HtmlBuilder();
					value = getResources(request).getMessage("cmd.ascAsociado.transacciones");
				    link = tableFacade.getWebContext().getContextPath();
					link += "/asociados/transaccionAsociado.do?accion=lista&ascId="+asociado.getAscId();
					html.a().href().quote().append(link).quote().append("class=\"linkTransacciones\"").title(value).close();
					html.aEnd();
					toReturn = html.toString() + " | ";
				}
				
				html = new HtmlBuilder();
				value =getResources(request).getMessage("cmd.ascAsociado.telefonos");
			    link = tableFacade.getWebContext().getContextPath();
				link += "/seguridad/persona.do?perId="+persona.getPerId()+"&asoc=true&accion=phone";
				html.a().href().quote().append(link).quote().append("class=\"linkPhone\"").title(value).close();
				html.aEnd();
				toReturn = toReturn+html.toString() + " | ";
				
				html = new HtmlBuilder();
				value =getResources(request).getMessage("cmd.ascAsociado.ingresosCooperativa");
			    link = tableFacade.getWebContext().getContextPath();
				link += "/asociados/ingresoAsociado.do?ascId="+asociado.getAscId()+"&accion=lista";
				html.a().href().quote().append(link).quote().append("class=\"linkIngresoCooperativa\"").title(value).close();
				html.aEnd();
				toReturn = toReturn+html.toString() + " | ";
				
				html = new HtmlBuilder();
				value =getResources(request).getMessage("cmd.ascAsociado.estadoCuenta");
			    link = tableFacade.getWebContext().getContextPath();
				link += "/reporte/inicializarReporte.do?p76e3123r=estadosCuentas&m009o8765d=estadosCuenta&ascId="+asociado.getAscId()+"&accion=estadoDeCuentas";
				html.a().href().quote().append(link).quote().append("class=\"linkEstadoCuenta\"").title(value).close();
				html.aEnd();
				toReturn = toReturn+html.toString() + " | ";
				
				html = new HtmlBuilder();
				value =getResources(request).getMessage("cmd.ascAsociado.correos");
			    link = tableFacade.getWebContext().getContextPath();
				link +="/seguridad/persona.do?perId="+persona.getPerId()+"&accion=email&asoc=true";
				html.a().href().quote().append(link).quote().append("class=\"linkMail\"").title(value).close();
				html.aEnd();
				toReturn = toReturn+html.toString();
				return toReturn; 
		}
			});	
		
		return tableFacade.render();
	}

	public ActionForward regresarReactivacion(ActionMapping mapping,ActionForm form,
			HttpServletRequest request,HttpServletResponse response){
		return listaInactivo(mapping, form, request, response);
	}
	
	public ActionForward cargarListaDepartamentos(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		AsociadoForm asociadoForm = (AsociadoForm)form;
		List<CtaDptDepartamentoTrabajo> listaDeptos = null;

		CtaDptDepartamentoTrabajoDAO departamentoDao = new CtaDptDepartamentoTrabajoDAO(getSessionHibernate(request));
		listaDeptos = departamentoDao.findByCentroCostoAndEtr(asociadoForm.getCentroCosto().trim(), asociadoForm.getEtr(),10);		
		
		try{
			Boolean nulo = false;
			if(listaDeptos.size() < 1){
				nulo = true;
			}
			String listaResponse = "";
			listaResponse = construirListaDepartamentos(listaDeptos, nulo);
			
			response.getWriter().write(listaResponse);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (RuntimeException e) {
			log.error("Error runtime", e);
		} catch (IOException e) {
			log.error(e);
		}
		return null;
	}
	
	private String construirListaDepartamentos(List<CtaDptDepartamentoTrabajo> listaDeptos, Boolean nulo) {
		String lista = "<table id=\"resultadoDpt\">";
		lista+="<tr><td colspan=\"2\"><span style=\"font-size: 10px;font-style: italic;\">Departamento(s):</span></td></tr>";
		if(nulo == true){
			lista+= "<tr><td colspan=\"2\"><span style=\"font-size: 10px;color: red;font-style: italic;\">"
			+ "No se encontro ningun Departamento que pertenezca al Centro de Costo ingresado</span></td></tr>";
		}else{
			for (Iterator iterator = listaDeptos.iterator(); iterator.hasNext();) {
				CtaDptDepartamentoTrabajo trabajo = (CtaDptDepartamentoTrabajo)iterator.next();
				lista += "<tr>";
				lista += "<td><input onclick=\"JavaScript:saveSeleccionDpt(this.value);\" type=\"radio\" name=\"_miseleccion\" value=\""
						+ trabajo.getDptId()
						+ ";"
						+ trabajo.getDptNombre()
						+ ";"
						+ trabajo.getDptCentroCosto()
						+ "\"/></td>";
				lista += "<td><span style=\"font-size: 10px;color: #6E6E6E;font-style: italic;\">"
					+ trabajo.getDptCentroCosto()
					+ " "
					+ trabajo.getDptNombre()
					+ "</span></td>";
				lista += "</tr>";
			}
		}
		lista += "</table>";
		return lista;
	}

	public ActionForward generarComprobante(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		CtrParParametrosDAO parametrosDAO = new CtrParParametrosDAO(getSessionHibernate(request));
		AsociadoForm asociadoForm = (AsociadoForm) form;
		try{
			Date fechaActual = new Date();
			response.setHeader("Cache-Control","private");
			response.setHeader("Pragma", "Cache");
			String pathReporte = "";//ruta reporte
			String nombreReporte = "";
			ExportReport exportar = null;
			ReportFile reporte = new ReportFile();
			ServletContext servletContext = getServlet().getServletContext();
			
			nombreReporte = "comprobante_asociado";
			pathReporte = servletContext
			.getRealPath("/reportesOtros/facturacion/comprobante/"+nombreReporte+".jasper");
			reporte.addParameter("ascId",asociadoForm.getAscId());
			reporte.addParameter("valorIngreso",parametrosDAO.findById("VALOR_INSCRIPCION").getParValorNumber());
			SecIseInicioSesionDAO sesionDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
			SecIseInicioSesion sesion = sesionDAO.findById(asociadoForm.getUsuarioConectado().getNombreUsuario());
			reporte.addParameter("sucNombre",sesion.getSecPerPersona().getSecSucSucursal().getSucNombre());
			
			reporte.setPathJasper(pathReporte);
			exportar = new ExportReport(reporte);//reporte a exportar
			
			//Conexion jdbc normal
			String jdbcDriver = "com.mysql.jdbc.Driver";
			Class.forName(jdbcDriver);
			String url = HibernateSessionFactory.getConfiguration().getProperty("connection.url");
			String user = HibernateSessionFactory.getConfiguration().getProperty("connection.username");
			String pass = HibernateSessionFactory.getConfiguration().getProperty("connection.password");
			Connection con = DriverManager.getConnection(url, user, pass);
			byte[] repCompilado = exportar.exportReportPDF(con);				
			response.setContentType("application/pdf");
			response.setContentLength(repCompilado.length);
			response.setHeader("content-Disposition", "attachment;filename="+nombreReporte+"-"+fechaActual.getTime()+".pdf");
			ServletOutputStream outputStream = response.getOutputStream();
			outputStream.write(repCompilado, 0, repCompilado.length);
			outputStream.flush();
			outputStream.close();
			
		}catch(Exception e){
			e.printStackTrace();
			log.error("Se produjo un error al tratar de generar el reporte...", e);
			System.out.println("Se produjo un error al tratar de generar el reporte...\n");
		}
		return null;
	}
	
	public ActionForward forwardToAport(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		AsociadoForm asociadoForm = (AsociadoForm) form;
		//request.setAttribute("ASC_ID", asociadoForm.getAscId());
		request.getSession().setAttribute("asociadoId", asociadoForm.getAscId());
		return  mapping.findForward("aperturaAportacion");
	}	
	
	protected Map<String, String> getKeyMethodMap() {
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.asc.lista","lista");
		map.put("cmd.asc.regresar","regresar");
		map.put("cmd.asc.buscar","lista");
		map.put("cmd.asc.buscarInactivo","listaInactivo");
		map.put("cmd.asc.guardar","guardar");
		map.put("cmd.asc.cancelar","cancelar");
		map.put("cmd.asc.cargarDatos","cargarDatos");
		map.put("cmd.asc.listaDeptoTrab","cargarListaDeptTrab");
		map.put("cmd.asc.nuevo","forwardToNuevoAsociado");
		map.put("cmd.persona.redirectInvalidData","redirectInvalidData");
		map.put("cmd.asc.forwardToNuevoAscUsr","forwardToNuevoAscUsr");
		map.put("cmd.asc.save","guardarUsrAsc");
		map.put("cmd.asc.cancel","cancelToUsr");
		map.put("cmd.asc.cargarDatosReingreso","cargarDatosReingreso");
		map.put("cmd.asc.reactivarAsociado","reactivarAsociado");
		map.put("cmd.asc.regresarReactivacion","regresarReactivacion");
		map.put("cmd.asc.cargarListaDepartamentos", "cargarListaDepartamentos");
		map.put("cmd.asc.listaInactivos", "listaInactivo");
		map.put("cmd.asc.generarComprobante", "generarComprobante");
		map.put("cmd.asc.forwardToAport", "forwardToAport");
		return map;
	}
}