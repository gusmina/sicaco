/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.asociados.struts.action;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.hibernate.Transaction;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeFactory;
import org.jmesa.facade.TableFacadeImpl;
import org.jmesa.limit.ExportType;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.BasicCellEditor;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.html.HtmlBuilder;

import com.cetia.sicaco.asociados.struts.form.CuentaBancariaForm;
import com.cetia.sicaco.hibernate.CtaAscAsociadoDAO;
import com.cetia.sicaco.hibernate.CtaCasCuentaAsociado;
import com.cetia.sicaco.hibernate.CtaCasCuentaAsociadoDAO;
import com.cetia.sicaco.hibernate.CtaCbaCuentaBancaria;
import com.cetia.sicaco.hibernate.CtaCbaCuentaBancariaDAO;
import com.cetia.sicaco.hibernate.CtaTcuTipoCuentaDAO;
import com.cetia.sicaco.hibernate.CtrBanBancoDAO;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;

/** 
 * MyEclipse Struts
 * Creation date: 08-14-2008
 * 
 * XDoclet definition:
 * @struts.action path="/cuentaBancaria" name="cuentaBancariaForm" parameter="accion" scope="request"
 * @struts.action-forward name="lista" path="pagina-lista.cuentaCorriente.cuentasBancarias"
 */
public class CuentaBancariaAction extends DMLAction {
	
	public static final String TABLA_ID = "ctaCbaCuentaBancaria";

	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
		CtaCbaCuentaBancariaDAO cuentaBancariaDAO = new CtaCbaCuentaBancariaDAO(getSessionHibernate(request));
		CtrBanBancoDAO bancoDAO = new CtrBanBancoDAO(getSessionHibernate(request));
		CtaTcuTipoCuentaDAO tipoCuentaDAO = new  CtaTcuTipoCuentaDAO(getSessionHibernate(request));
		CuentaBancariaForm cuentaBancariaForm = (CuentaBancariaForm) form;
		List lst = cuentaBancariaDAO.findByAsociado(cuentaBancariaForm.getAscId());
		List lBacs = bancoDAO.findAll();
		request.setAttribute("lBacs", lBacs);
		List lTipos = tipoCuentaDAO.findAll();
		request.setAttribute("lTipos", lTipos);
		request.setAttribute(Constantes.ACCION_KEY, "/cuentaBancaria");
		//paginacion roberto
		TableFacade tableFacade = TableFacadeFactory.createTableFacade(TABLA_ID ,request );
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		int totalRows = cuentaBancariaDAO.getTotalRowCountbyAsociado(cuentaBancariaForm.getAscId());
		tableFacade.setTotalRows(totalRows);
		int rowStart = limit.getRowSelect().getRowStart();
		int rowEnd = limit.getRowSelect().getRowEnd();
		lst = cuentaBancariaDAO.findByAsociado(cuentaBancariaForm.getAscId(), rowStart, rowEnd);
		tableFacade.setItems(lst);
		/*TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();*/
		if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade,request);
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
		if(cuentaBancariaForm.isMdf()){
			cuentaBancariaForm.setCuentaBancariaH(cuentaBancariaDAO.findById(cuentaBancariaForm.getCuentaBancariaH().getCbaId()));
		}
		//----- Variables de configuracion
		request.setAttribute("form", cuentaBancariaForm);
		request.setAttribute("asociado", asociadoDAO.findById(cuentaBancariaForm.getAscId()));
		return mapping.findForward("lista");
	}
	
	//---- metodo que genera el html de la tabla del jmesa
	private String html(final TableFacade tableFacade, final HttpServletRequest request) {
		tableFacade.setColumnProperties("cbaCuenta", "ctrBanBanco.banId", "tcuTipoCuenta.tcuId");
		Table table = tableFacade.getTable();
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.cba.caption");
		
		Row row = table.getRow();
		Column nombreColumna = row.getColumn("cbaCuenta");
		nombreColumna.setTitleKey("tbl.cba.numeroCuenta");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				CtaCbaCuentaBancaria cuentaBancaria = (CtaCbaCuentaBancaria)item;
				CtaCasCuentaAsociadoDAO cuentaAsociadoDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
				CtaCasCuentaAsociado cuentaAsociado = cuentaAsociadoDAO.findbyCbaId(cuentaBancaria.getCbaId());
				HtmlBuilder html = new HtmlBuilder();
				value = cuentaBancaria.getCbaCuenta();
				String link = tableFacade.getWebContext().getContextPath();
				link += "/asociados/cuentaBancaria.do?cbaId="+cuentaBancaria.getCbaId()+"&ascId="+cuentaAsociado.getCtaAscAsociado().getAscId()+"&accion=cargarDatos&mdf=true";
				html.a().href().quote().append(link).quote().close();
				html.append(value);
				html.aEnd();				
				return html.toString();		
			}
		});
		
		nombreColumna = row.getColumn("ctrBanBanco.banId");
		nombreColumna.setTitleKey("tbl.cba.banco");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				CtaCbaCuentaBancaria cuentaBancaria = (CtaCbaCuentaBancaria)item;
				return cuentaBancaria.getCtrBanBanco().getBanNombre(); 
			}
		});
		
		nombreColumna = row.getColumn("tcuTipoCuenta.tcuId");
		nombreColumna.setTitleKey("tbl.cba.tipoCuenta");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				CtaCbaCuentaBancaria cuentaBancaria = (CtaCbaCuentaBancaria)item;
				if(cuentaBancaria.getCtaTcuTipoCuenta() == null){
					return "tipo de cuenta no ingresado";
				}else{
					return cuentaBancaria.getCtaTcuTipoCuenta().getTcuNombre();
				}
			}
		});
		
		return tableFacade.render();
	}
	
	//---- metodo que genera los exports, el formato que tendran
	 private void export(final TableFacade tableFacade,final HttpServletRequest request) {
		 tableFacade.setColumnProperties("cbaCuenta", "banId", "tcuTipoCuenta.tcuId");
			Table table = tableFacade.getTable();
			//---- Titulo de la tabla
			table.setCaptionKey("tbl.cba.caption");
			
			Row row = table.getRow();
			Column nombreColumna = row.getColumn("cbaCuenta");
			nombreColumna.setTitleKey("tbl.cba.numeroCuenta");
			
			nombreColumna = row.getColumn("banId");
			nombreColumna.setTitleKey("tbl.cba.banco");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

				public Object getValue(Object item, String property, int rowcount) {
					Object value = new BasicCellEditor().getValue(item, property, rowcount);
					CtaCbaCuentaBancaria cuentaBancaria = (CtaCbaCuentaBancaria)item;
					CtrBanBancoDAO bancoDAO = new CtrBanBancoDAO(getSessionHibernate(request));
					value = bancoDAO.findById(cuentaBancaria.getCtrBanBanco().getBanId()).getBanNombre();
					return value;
				}
			});
			
			nombreColumna = row.getColumn("tcuTipoCuenta.tcuId");
			nombreColumna.setTitleKey("tbl.cba.tipoCuenta");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

				public Object getValue(Object item, String property, int rowcount) {
					Object value = new BasicCellEditor().getValue(item, property, rowcount);
					CtaCbaCuentaBancaria cuentaBancaria = (CtaCbaCuentaBancaria)item;
					CtaTcuTipoCuentaDAO cuentaDAO = new CtaTcuTipoCuentaDAO(getSessionHibernate(request));
					value = cuentaDAO.findById(cuentaBancaria.getCtaTcuTipoCuenta().getTcuId()).getTcuNombre();
					return value;
				}
			});
			
		 tableFacade.render();
	}
	
	public ActionForward forwardToNuevaCuentaBancaria(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		CtrBanBancoDAO bancoDAO = new CtrBanBancoDAO(getSessionHibernate(request));
		CtaTcuTipoCuentaDAO tipoCuentaDAO = new  CtaTcuTipoCuentaDAO(getSessionHibernate(request));
		CuentaBancariaForm cuentaBancariaForm = (CuentaBancariaForm) form;
		List lBacs = bancoDAO.findAll();
		request.setAttribute("lBacs", lBacs);
		List lTipos = tipoCuentaDAO.findAll();
		request.setAttribute("lTipos", lBacs);
		request.setAttribute(Constantes.ACCION_KEY, "/cuentaBancaria");
		return mapping.findForward("dml");
	}
	
	public ActionForward regresar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		return mapping.findForward("toAsociados");
	}
	
	public ActionForward guardar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		CtaCbaCuentaBancariaDAO cuentaBancariaDAO = new CtaCbaCuentaBancariaDAO(getSessionHibernate(request));
		CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
		CtaCasCuentaAsociado cuentaAsociado = new CtaCasCuentaAsociado();
		CtaCasCuentaAsociadoDAO cuentaAsociadoDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
		CuentaBancariaForm cuentaBancariaForm = (CuentaBancariaForm) form;
		Transaction tx = cuentaBancariaDAO.getSession().beginTransaction();
		try{
			if(!cuentaBancariaForm.getCbaCuenta().trim().equals("") && cuentaBancariaForm.getCbaCuenta() != null){
				if(cuentaBancariaDAO.findRepetidaByBanco(cuentaBancariaForm.getCtrBanBanco().getBanId(), cuentaBancariaForm.getCbaCuenta()).isEmpty()){
					cuentaBancariaForm.getCuentaBancariaH().setCbaId(cuentaBancariaDAO.generarId("E"));
					cuentaBancariaDAO.save(cuentaBancariaForm.getCuentaBancariaH());
					cuentaAsociado.setCtaAscAsociado(asociadoDAO.findById(cuentaBancariaForm.getAscId()));
					cuentaAsociado.setCtaCbaCuentaBancaria(cuentaBancariaForm.getCuentaBancariaH());
					cuentaAsociado.setCasFechaApertura(new Date());
					cuentaAsociado.setCasValorApertura(0.00);
					cuentaAsociado.setCtaCahCuentaAhorro(null);
					cuentaAsociado.setCtaPrePrestamo(null);
					cuentaAsociado.setCtaSegSeguros(null);
					cuentaAsociado.getCtrEstEstado().setEstId(9);//se asume estado de actividad de la cuenta
					cuentaAsociado.setCasPrincipal("N");
					cuentaAsociado.setCtaPxtPersonaExterna(null);
					cuentaAsociadoDAO.save(cuentaAsociado);
					tx.commit();
				}else{
					mensajes("errors.cba.repetida", request);
				}
			}else{
				mensajes("errors.cba.NoCuenta.required", request);
			}
		}catch (Exception e) {
			tx.rollback();
			e.printStackTrace();
		}finally{
			asociadoDAO.getSession().flush();
			asociadoDAO.getSession().clear();
			
		}
		return lista(mapping, form, request, response);
		
	}
	
	
	public void mensajes(String msg, HttpServletRequest request){
		ActionErrors errors = new ActionErrors();
        errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(msg));
        saveMessages(request, errors);
	}
	
	public ActionForward cargarDatos(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		CtaCbaCuentaBancariaDAO cuentaBancariaDAO = new CtaCbaCuentaBancariaDAO(getSessionHibernate(request));
		CtrBanBancoDAO bancoDAO = new CtrBanBancoDAO(getSessionHibernate(request));
		CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
		CtaTcuTipoCuentaDAO tipoCuentaDAO = new  CtaTcuTipoCuentaDAO(getSessionHibernate(request));
		CuentaBancariaForm cuentaBancariaForm = (CuentaBancariaForm) form;
		cuentaBancariaForm.setCuentaBancariaH(cuentaBancariaDAO.findById(cuentaBancariaForm.getCbaId()));
		List lst = cuentaBancariaDAO.findByAsociado(cuentaBancariaForm.getAscId());
		List lBacs = bancoDAO.findAll();
		request.setAttribute("lBacs", lBacs);
		List lTipos = tipoCuentaDAO.findAll();
		request.setAttribute("lTipos", lTipos);
		request.setAttribute(Constantes.ACCION_KEY, "/cuentaBancaria");
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade,request);
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
		//----- Variables de configuracion
		request.setAttribute("asociado", asociadoDAO.findById(cuentaBancariaForm.getAscId()));
		request.setAttribute("form", cuentaBancariaForm);
		request.setAttribute("edit", 1);
		return mapping.findForward("lista");
	}
	
	public ActionForward salvar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		CtaCbaCuentaBancariaDAO cuentaBancariaDAO = new CtaCbaCuentaBancariaDAO(getSessionHibernate(request));
		CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
		CuentaBancariaForm cuentaBancariaForm = (CuentaBancariaForm) form;
		Transaction tx = cuentaBancariaDAO.getSession().beginTransaction();
		try{
			if(!cuentaBancariaForm.getCbaCuenta().trim().equals("") && cuentaBancariaForm.getCbaCuenta() != null){
				if(cuentaBancariaDAO.findRepetidaByBanco(cuentaBancariaForm.getCtrBanBanco().getBanId(), cuentaBancariaForm.getCbaCuenta()).isEmpty()){
					CtaCbaCuentaBancaria cuentaBancaria = cuentaBancariaDAO.findById(cuentaBancariaForm.getCbaId());
					cuentaBancaria.setCbaCuenta(cuentaBancariaForm.getCbaCuenta());
					CtaTcuTipoCuentaDAO tipoCuentaDAO = new CtaTcuTipoCuentaDAO(getSessionHibernate(request));
					cuentaBancaria.setCtaTcuTipoCuenta(tipoCuentaDAO.findById(cuentaBancariaForm.getCtaTcuTipoCuenta().getTcuId()));
					CtrBanBancoDAO bancoDAO = new CtrBanBancoDAO(getSessionHibernate(request));
					cuentaBancaria.setCtrBanBanco((bancoDAO.findById(cuentaBancariaForm.getCtrBanBanco().getBanId())));
					cuentaBancariaDAO.merge(cuentaBancaria);
					tx.commit();
				}else{
					mensajes("errors.cba.repetida", request);
				}
			}else{
				mensajes("errors.cba.NoCuenta.required", request);
			}
		}catch (Exception e) {
			tx.rollback();
			e.printStackTrace();
		}finally{
			asociadoDAO.getSession().flush();
			asociadoDAO.getSession().clear();
			
		}
		//cuentaBancariaForm.setAscId(cuentaBancariaForm.getAscId2());
		return lista(mapping, cuentaBancariaForm, request, response);
		
	}
	
	public ActionForward cancelar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		CuentaBancariaForm bancariaForm = (CuentaBancariaForm)form;
		return lista(mapping, bancariaForm, request, response);
	}
	
	protected Map<String, String> getKeyMethodMap() {
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.cba.lista","lista");
		map.put("cmd.cba.guardar","guardar");
		map.put("cmd.cba.regresar","regresar");
		map.put("cmd.cba.cargarDatos","cargarDatos");
		map.put("cmd.cba.salvar","salvar");
		map.put("cmd.cba.cancelar", "cancelar");
		//map.put("cmd.cba.forwardToNuevaCuentaBancaria","dml");
		return map;
	}
}