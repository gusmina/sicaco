/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.cliente.struts.action;

import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.StringTokenizer;

import javax.servlet.ServletContext;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.hibernate.Transaction;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeFactory;
import org.jmesa.facade.TableFacadeImpl;
import org.jmesa.limit.ExportType;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.editor.DateCellEditor;
import org.jmesa.view.html.HtmlBuilder;

import com.cetia.sicaco.cliente.struts.form.PeticionesCompraForm;
import com.cetia.sicaco.hibernate.CtaAscAsociado;
import com.cetia.sicaco.hibernate.CtaAscAsociadoDAO;
import com.cetia.sicaco.hibernate.CtaCasCuentaAsociado;
import com.cetia.sicaco.hibernate.CtaCasCuentaAsociadoDAO;
import com.cetia.sicaco.hibernate.CtaMxpMovimientoPrestamo;
import com.cetia.sicaco.hibernate.CtaMxpMovimientoPrestamoDAO;
import com.cetia.sicaco.hibernate.CtaPrePrestamo;
import com.cetia.sicaco.hibernate.CtaPrePrestamoDAO;
import com.cetia.sicaco.hibernate.CtaTprTipoPrestamo;
import com.cetia.sicaco.hibernate.CtaTprTipoPrestamoDAO;
import com.cetia.sicaco.hibernate.CtaTtrTipoTransaccionDAO;
import com.cetia.sicaco.hibernate.CtaTxaTransaccionxcuentaAsociado;
import com.cetia.sicaco.hibernate.CtaTxaTransaccionxcuentaAsociadoDAO;
import com.cetia.sicaco.hibernate.CtrEstEstado;
import com.cetia.sicaco.hibernate.CtrEstEstadoDAO;
import com.cetia.sicaco.hibernate.CtrParParametros;
import com.cetia.sicaco.hibernate.CtrParParametrosDAO;
import com.cetia.sicaco.hibernate.FacCliCliente;
import com.cetia.sicaco.hibernate.HibernateSessionFactory;
import com.cetia.sicaco.hibernate.InvProProveedor;
import com.cetia.sicaco.hibernate.InvProProveedorDAO;
import com.cetia.sicaco.hibernate.OrdOcoOrdenDeCompra;
import com.cetia.sicaco.hibernate.OrdOcoOrdenDeCompraDAO;
import com.cetia.sicaco.hibernate.OrdPecPeticionCompra;
import com.cetia.sicaco.hibernate.OrdPecPeticionCompraDAO;
import com.cetia.sicaco.hibernate.OrdRefCuentaReferencia;
import com.cetia.sicaco.hibernate.OrdRefCuentaReferenciaDAO;
import com.cetia.sicaco.hibernate.SecIseInicioSesion;
import com.cetia.sicaco.hibernate.SecIseInicioSesionDAO;
import com.cetia.sicaco.hibernate.SecPerPersona;
import com.cetia.sicaco.hibernate.SecSucSucursal;
import com.cetia.sicaco.hibernate.SecSucSucursalDAO;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;
import com.cetia.sicaco.struts.PartidaAutomatica;
import com.mad.utilidades.ElapsedTime;
import com.mad.utilidades.ExportReport;
import com.mad.utilidades.ReportFile;

public class PeticionesCompraAction extends DMLAction {
	public static String TABLA_ID = "OrdPecPeticionesCompra";
	
	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		OrdPecPeticionCompraDAO petCompDAO = new OrdPecPeticionCompraDAO(getSessionHibernate(request));
		List lst = petCompDAO.findAll();
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);//, ExportType.PDF);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
		
		SecSucSucursalDAO sucursalDAO = new SecSucSucursalDAO(getSessionHibernate(request));
		request.setAttribute("sucs", sucursalDAO.findAll());
		
		InvProProveedorDAO proveedorDAO = new InvProProveedorDAO(getSessionHibernate(request));
		request.setAttribute("provs", proveedorDAO.findAll());
		
		request.setAttribute(Constantes.ACCION_KEY,"/peticionesCompra");		
		return mapping.findForward("lista");
	}

	//---- metodo que genera el html de la tabla del jmesa
	private String html(final TableFacade tableFacade, final HttpServletRequest request) {
        tableFacade.setColumnProperties("ctaAscAsociado.ascCodigoAsociado","ctaAscAsociado.ascId","invProProveedor.proNombre","pecMonto","secSucSucursal.sucNombre","pecFecha","pecId");
        Table table = tableFacade.getTable();
        //---- Titulo de la tabla
        table.setCaptionKey("tbl.pec.caption");
       
        Row row = table.getRow();
        
        Column nombreColumna = row.getColumn("ctaAscAsociado.ascCodigoAsociado");
        nombreColumna.setTitleKey("tbl.pec.codigoAsc");
        
        nombreColumna = row.getColumn("ctaAscAsociado.ascId");
        nombreColumna.setTitleKey("tbl.pec.nombreAsc");
        nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){
            public Object getValue(Object item, String property, int rowcount) {
                OrdPecPeticionCompra pc = (OrdPecPeticionCompra)item;
                String nombreCompleto=pc.getCtaAscAsociado().getSecPerPersona().getPerPrimerNombre()+" "+
                						pc.getCtaAscAsociado().getSecPerPersona().getPerSegundoNombre()+" "+
                						pc.getCtaAscAsociado().getSecPerPersona().getPerTercerNombre()+" "+
                						pc.getCtaAscAsociado().getSecPerPersona().getPerPrimerApellido()+" "+
                						pc.getCtaAscAsociado().getSecPerPersona().getPerSegundoApellido()+" "+
                						pc.getCtaAscAsociado().getSecPerPersona().getPerApellidoCasada();
                return nombreCompleto;
            }           
        });        
        
        nombreColumna = row.getColumn("invProProveedor.proNombre");
        nombreColumna.setTitleKey("tbl.pec.nombreProv");
        
        nombreColumna = row.getColumn("pecMonto");
        nombreColumna.setTitleKey("tbl.pec.monto");
        
        nombreColumna = row.getColumn("secSucSucursal.sucNombre");
        nombreColumna.setTitleKey("tbl.pec.entrega");
        
        nombreColumna = row.getColumn("pecFecha");
        nombreColumna.setTitleKey("tbl.pec.fecha");
        nombreColumna.getCellRenderer().setCellEditor(new DateCellEditor("dd-MMM-yyyy"));
        
        nombreColumna = row.getColumn("pecId");
        nombreColumna.setTitleKey("tbl.pec.acciones");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){
			public Object getValue(Object item, String property, int rowcount) {
				Object value ="";
				String toReturn="",link;
				OrdPecPeticionCompra petComp = (OrdPecPeticionCompra)item;
				
				HtmlBuilder html;
				html = new HtmlBuilder();
				value =getResources(request,"cliente").getMessage("cmd.pec.linkCrearOrden");
				link = tableFacade.getWebContext().getContextPath();
				link += "/control/peticionesCompra.do?accion=crearOrden&pecId="+petComp.getPecId();
				html.a().href().quote().append(link).quote().append("class=\"linkDesembolso\"").title(value.toString()).close();
				html.aEnd();			
				toReturn = toReturn + html.toString() + " | ";
				
				html = new HtmlBuilder();
				value =getResources(request,"cliente").getMessage("cmd.pec.linkEliminar");
				link = tableFacade.getWebContext().getContextPath();
				link += "/control/peticionesCompra.do?accion=eliminarPeticion&pecId="+petComp.getPecId();
				html.a().id("eliminarId").append("class=\"linkEliminar\"").title(value.toString()).onclick("handlerDeleteButton('"+petComp.getPecId()+"');").style("cursor: pointer;").close();
				html.aEnd();
				toReturn = toReturn + html.toString();
				 
				return toReturn;		
				
			}
			});        
        
        return tableFacade.render();
    }
	
	private String export(final TableFacade tableFacade) {
        tableFacade.setColumnProperties("ctaAscAsociado.ascCodigoAsociado","ctaAscAsociado.ascId","invProProveedor.proNombre","pecMonto","secSucSucursal.sucNombre","pecFecha","pecId");
        Table table = tableFacade.getTable();
        //---- Titulo de la tabla
        table.setCaptionKey("tbl.pec.caption");
       
        Row row = table.getRow();
        
        Column nombreColumna = row.getColumn("ctaAscAsociado.ascCodigoAsociado");
        nombreColumna.setTitleKey("tbl.pec.codigoAsc");
        
        nombreColumna = row.getColumn("ctaAscAsociado.ascId");
        nombreColumna.setTitleKey("tbl.pec.nombreAsc");
        nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){
            public Object getValue(Object item, String property, int rowcount) {
                OrdPecPeticionCompra pc = (OrdPecPeticionCompra)item;
                String nombreCompleto=pc.getCtaAscAsociado().getSecPerPersona().getPerPrimerNombre()+" "+
                						pc.getCtaAscAsociado().getSecPerPersona().getPerSegundoNombre()+" "+
                						pc.getCtaAscAsociado().getSecPerPersona().getPerTercerNombre()+" "+
                						pc.getCtaAscAsociado().getSecPerPersona().getPerPrimerApellido()+" "+
                						pc.getCtaAscAsociado().getSecPerPersona().getPerSegundoApellido()+" "+
                						pc.getCtaAscAsociado().getSecPerPersona().getPerApellidoCasada();
                return nombreCompleto;
            }           
        });        
        
        nombreColumna = row.getColumn("invProProveedor.proNombre");
        nombreColumna.setTitleKey("tbl.pec.nombreProv");
        
        nombreColumna = row.getColumn("pecMonto");
        nombreColumna.setTitleKey("tbl.pec.monto");
        
        nombreColumna = row.getColumn("secSucSucursal.sucNombre");
        nombreColumna.setTitleKey("tbl.pec.entrega");
        
        nombreColumna = row.getColumn("pecFecha");
        nombreColumna.setTitleKey("tbl.pec.fecha");
        nombreColumna.getCellRenderer().setCellEditor(new DateCellEditor("dd-MMM-yyyy"));
        
        return tableFacade.render();
    }	
	
	public ActionForward eliminarPeticion(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		PeticionesCompraForm petCompForm = (PeticionesCompraForm) form;
		OrdPecPeticionCompraDAO petCompDAO = new OrdPecPeticionCompraDAO(getSessionHibernate(request));
		Integer pecId = new Integer(petCompForm.getPecId());
		
		OrdPecPeticionCompra petComp = petCompDAO.findById(pecId);
		petCompDAO.delete(petComp);
		
		return lista(mapping,form,request,response);
	}
	
	public ActionForward crearOrden(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		PeticionesCompraForm petCompForm = (PeticionesCompraForm) form;
		
		OrdPecPeticionCompraDAO petCompDAO = new OrdPecPeticionCompraDAO(getSessionHibernate(request));
		Integer pecId = new Integer(petCompForm.getPecId());
		OrdPecPeticionCompra petComp = petCompDAO.findById(pecId);
		
		CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
		CtaAscAsociado asociado = asociadoDAO.findById(petComp.getCtaAscAsociado().getAscId());		
		if(asociado.getEstId()==21){
			mensajes("error.oco.asociadoRestringido", petCompForm, request, response);
			return lista(mapping, petCompForm, request, response);
		}
		if(asociado.getEstId()==6){
			mensajes("error.oco.asociadoInactivo", petCompForm, request, response);
			return lista(mapping, petCompForm, request, response);
		}				
		if(petComp.getInvProProveedor().getProId() == null || petComp.getInvProProveedor().getProId() <= 0){
			mensajes("errors.ordcom.noPro", petCompForm, request, response);
			return lista(mapping, petCompForm, request, response);
		}				
		InvProProveedorDAO proveedorDAO = new InvProProveedorDAO(getSessionHibernate(request));
		InvProProveedor proveedor = proveedorDAO.findById(petComp.getInvProProveedor().getProId());
		if(proveedor.getIucPutProveedorTipoPrestamos().size()<1){
			mensajes("error.oco.proSinUnion", petCompForm, request, response);
			return lista(mapping, petCompForm, request, response);
		}
		
		//Obtener el tipo de prestamo de la orden a generar
		CtaTprTipoPrestamoDAO trpDAO = new CtaTprTipoPrestamoDAO(getSessionHibernate(request));
		CtaTprTipoPrestamo tpr = trpDAO.findByProveedor(proveedor.getProId());
		

		CtaCasCuentaAsociadoDAO cuentaAsociadoDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
		CtaCasCuentaAsociado cas = new CtaCasCuentaAsociado();
		CtaPrePrestamo prestamo = new CtaPrePrestamo();
		CtaPrePrestamoDAO prestamoDAO = new CtaPrePrestamoDAO(getSessionHibernate(request));
		CtrParParametrosDAO parametrosDAO = new CtrParParametrosDAO(getSessionHibernate(request));
		
		Double divisor = parametrosDAO.findById("NUM_CUOTAS_ORDEN_COMPRA").getParValorNumber();
		Double pagosMes = parametrosDAO.findById("DIVISOR_CUOTAS_MES").getParValorNumber();
		
		List lCas =cuentaAsociadoDAO.findByTprAndAsc(tpr.getTprId(), asociado.getAscId(), "O");
		if(lCas.size()>0){
			cas = (CtaCasCuentaAsociado) lCas.get(0);
			prestamo = prestamoDAO.findById(cas.getCtaPrePrestamo().getPreId());
			prestamo.setCtaCbaCuentaBancaria(null);
			Double pendAnterior = 0.0;
			if(prestamo.getPrePendMov() != null){
				pendAnterior = prestamo.getPrePendMov();
			}
			prestamo.setPreSaldoActualT(prestamo.getPreSaldoActualT() + petComp.getPecMonto());
			//prestamo.setPreMontoSolicitado(prestamo.getPreSaldoActualT());
			//Tasa que se usara no se dividira en tasa mensual, sino que se usara el porcentaje completo
			prestamo.setPrePendMov(prestamo.getPrePendMov() + (petComp.getPecMonto()*(tpr.getCtaTinTasaInteres().getTinTasa()/100)));
			prestamo.setPreCuota(((prestamo.getPreSaldoActualT() + prestamo.getPrePendMov())/divisor)*pagosMes);
			prestamoDAO.merge(prestamo);
			Transaction tx = prestamoDAO.getSession().beginTransaction();
			tx.commit();
		}else{
			prestamo.setCtaCbaCuentaBancaria(null);
			prestamo.setCtaTprTipoPrestamo(tpr);
			prestamo.setPreAcumMov(0.0);
			prestamo.setPreCredito("O");
			//Tasa que se usara no se dividira en tasa mensual, sino que se usara el porcentaje completo
			prestamo.setPrePendMov(petComp.getPecMonto()*(tpr.getCtaTinTasaInteres().getTinTasa()/100));
			prestamo.setPreLiquidoARecibir(0.00);
			prestamo.setPreFechaSolicitud(new Date());
			prestamo.setPreMontoSolicitado(petComp.getPecMonto());
			prestamo.setPreSaldoActualT(petComp.getPecMonto());
			prestamo.setPreMoraMov(0.0);
			prestamo.setPreCuota(((prestamo.getPreSaldoActualT() + prestamo.getPrePendMov())/divisor)*pagosMes);
			prestamo.setPreReferencia(prestamoDAO.generarId("C"));
			prestamo.setPreId(prestamo.getPreReferencia());
			prestamo.setPreInteresAcumulado(0.0);
			prestamo.setCtaTinTasaInteres(null);
			prestamo.setCtaSegSeguros(null);
			prestamoDAO.save(prestamo);
			Transaction tx = prestamoDAO.getSession().beginTransaction();
			tx.commit();
			
			cas.setCasFechaApertura(new Date());
			cas.setCasPrincipal("N");
			cas.setCtaAscAsociado(asociado);
			cas.setCtaCahCuentaAhorro(null);
			cas.setCtaCbaCuentaBancaria(null);
			cas.setCtaPrePrestamo(prestamo);
			cas.setCtaPxtPersonaExterna(null);
			cas.setCtaSegSeguros(null);
			
			//Estado activo para prestamo 13
			CtrEstEstadoDAO estadoDAO = new CtrEstEstadoDAO(getSessionHibernate(request));
			CtrEstEstado estActivo = estadoDAO.findById(13);
			
			cas.setCtrEstEstado(estActivo);
			cuentaAsociadoDAO.save(cas);
			Transaction tx2 = cuentaAsociadoDAO.getSession().beginTransaction();
			tx2.commit();
		}
		
		CtaTxaTransaccionxcuentaAsociado txa = new CtaTxaTransaccionxcuentaAsociado();
		CtaTxaTransaccionxcuentaAsociadoDAO txaDAO = new CtaTxaTransaccionxcuentaAsociadoDAO(getSessionHibernate(request));
		
		txa.setCtaCasCuentaAsociado(cas);
		CtaTtrTipoTransaccionDAO tipoTransaccionDAO = new CtaTtrTipoTransaccionDAO(getSessionHibernate(request));
		//Cargo por orden, el ttrId es 1
		txa.setCtaTtrTipoTransaccion(tipoTransaccionDAO.findById(1));
		txa.setTxaComprobante(txaDAO.nextComprobante());
		//CtaTcmTipoComprobanteDAO tipoComprobanteDAO = new CtaTcmTipoComprobanteDAO(getSessionHibernate(request));
		txa.setTxaFecha(new Date());
		txa.setTxaMonto(petComp.getPecMonto());
		txa.setAudFechaCreacion(new Date());
		txa.setAudFechaModificacion(new Date());
		txa.setAudUsuarioCreacion(petCompForm.getUsuarioConectado().getNombreUsuario());
		txa.setAudUsuarioModificacion(petCompForm.getUsuarioConectado().getNombreUsuario());
		txaDAO.save(txa);
		Transaction txpr = txaDAO.getSession().beginTransaction();
		txpr.commit();
		txaDAO.getSession().flush();
		txaDAO.getSession().clear();
		
		CtaMxpMovimientoPrestamoDAO mxpDAO = new CtaMxpMovimientoPrestamoDAO(getSessionHibernate(request));
		
		Transaction txmxp = mxpDAO.getSession().beginTransaction();
		CtaMxpMovimientoPrestamo mxpAnt = mxpDAO.findUltimoMovimiento(prestamo.getPreId());
		CtaMxpMovimientoPrestamo mxp = new CtaMxpMovimientoPrestamo();
		if(mxpAnt == null){
			mxp.setCtaPrePrestamo(prestamo);
			mxp.setMxpFecha(new Date());
			mxp.setMxpMora(0.0);
			mxp.setMxpInteresPendiente(0.0);
			mxp.setMxpInteresAcumulado(0.0);
			mxp.setMxpSaldoActual(0.0);
			mxp.setAudFechaCreacion(new Date());
			mxp.setAudFechaModificacion(new Date());
			mxp.setAudUsuarioCreacion(petCompForm.getUsuarioConectado().getNombreUsuario());
			mxp.setAudUsuarioModificacion(petCompForm.getUsuarioConectado().getNombreUsuario());
			mxp.setCtaTxaTransaccionxcuentaAsociado(txa);
			mxp.setMxpSaldo(prestamo.getPreSaldoActualT());
			mxpDAO.save(mxp);
			txmxp.commit();
			mxpDAO.getSession().flush();
			mxpDAO.getSession().clear();
		}else{
			mxp.setCtaPrePrestamo(prestamo);
			mxp.setMxpFecha(new Date());
			mxp.setMxpMora(0.0);
			mxp.setMxpSaldoActual(0.0);
			mxp.setMxpInteresPendiente(0.0);
			mxp.setMxpInteresAcumulado(0.0);
			mxp.setAudFechaCreacion(new Date());
			mxp.setAudFechaModificacion(new Date());
			mxp.setAudUsuarioCreacion(petCompForm.getUsuarioConectado().getNombreUsuario());
			mxp.setAudUsuarioModificacion(petCompForm.getUsuarioConectado().getNombreUsuario());
			mxp.setCtaTxaTransaccionxcuentaAsociado(txa);
			mxp.setMxpSaldoActual(mxpAnt.getMxpSaldoActual());
			mxp.setMxpSaldo(prestamo.getPreSaldoActualT()/*-mxp.getMxpSaldoActual()*/);
			mxpDAO.save(mxp);
			txmxp.commit();
			mxpDAO.getSession().flush();
			mxpDAO.getSession().clear();
		}
		//Llamar a dividir todos los prestamos de orden entre el divisor para sus nuevas cuotas
		
		divisorACreditos(asociado.getAscId(), "O", tpr.getTprId(),
				divisor, petCompForm.getUsuarioConectado().getNombreUsuario(),request);					
		
		/*prestamoDAO.merge(prestamo);
		txmxp.commit();
		prestamoDAO.getSession().flush();
		prestamoDAO.getSession().clear();*/
			
		
		//Creo la orden de compra
		OrdOcoOrdenDeCompraDAO ordenCompraDAO = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
		OrdOcoOrdenDeCompra ordenCompra = new OrdOcoOrdenDeCompra();
		ordenCompra.setAscCodigo(petComp.getCtaAscAsociado().getAscId());
		ordenCompra.setAudFechaCreacion(new Date());
		//ordenCompra.setAudFechaModificacion(new Date());
		ordenCompra.setAudUsuarioCreacion(petCompForm.getUsuarioConectado().getNombreUsuario());
		ordenCompra.setAudUsuarioModificacion(petCompForm.getUsuarioConectado().getNombreUsuario());
		ordenCompra.setCliCodigo(null);
		ordenCompra.setInvProProveedor(proveedor);
		ordenCompra.setOcoCodigo(ordenCompraDAO.nextCod(0,0));
		ordenCompra.setOcoDonacion(0);
		
		SecIseInicioSesionDAO sesionDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
		SecIseInicioSesion sesion = sesionDAO.findById(petCompForm.getUsuarioConectado().getNombreUsuario());
		SecPerPersona persona = sesion.getSecPerPersona();
		String elaborado = persona.getPerPrimerNombre() + " " + persona.getPerPrimerApellido();
		
		ordenCompra.setOcoElaborado(elaborado);
		ordenCompra.setOcoEmision(new Date());
		ordenCompra.setOcoEstado("C");
		ordenCompra.setOcoMonto(petComp.getPecMonto());
		ordenCompra.setOcoPagado(0.00);
		ordenCompra.setOcoSaldo(ordenCompra.getOcoMonto());
		

		Double venc = parametrosDAO.findById("ORDEN_VENCIMIENTO").getParValorNumber();
		Date fechaActual = new Date();
		Date nuevaFecha = ElapsedTime.obtenerFecha(fechaActual, venc.intValue());
		
		ordenCompra.setOcoVencimiento(nuevaFecha);
		
		OrdRefCuentaReferenciaDAO referenciaDAO = new OrdRefCuentaReferenciaDAO(getSessionHibernate(request));
		
		List referencias = referenciaDAO.findByProIdEstado(petComp.getInvProProveedor().getProId(), "A");
		OrdRefCuentaReferencia referencia = new OrdRefCuentaReferencia();
		if(referencias.size()>0){
			 referencia = (OrdRefCuentaReferencia)referenciaDAO.findByProIdEstado(petComp.getInvProProveedor().getProId(), "A").get(0);
		}else {
			referencia = (OrdRefCuentaReferencia)referenciaDAO.findById(referenciaDAO.firstId());
		}
		ordenCompra.setOrdRefCuentaReferencia(referencia);
		
		Transaction tx = ordenCompraDAO.getSession().beginTransaction();
		ordenCompraDAO.save(ordenCompra);
		tx.commit();
		
		enviarOrdenAContabilidad(ordenCompra, 
				petCompForm.getUsuarioConectado().getNombreUsuario(),request);
		
		//Elimino la peticion
		Transaction tx2 = petCompDAO.getSession().beginTransaction();
		petCompDAO.delete(petComp);
		tx2.commit();
		
		return edit(mapping,petCompForm,request,response,ordenCompra.getOcoId());
	}

	 public ActionForward edit(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response,Integer ocoId) {
		 PeticionesCompraForm petCompraForm = (PeticionesCompraForm)form;
		 OrdOcoOrdenDeCompraDAO compraDAO = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
		 OrdPecPeticionCompraDAO petCompDAO = new OrdPecPeticionCompraDAO(getSessionHibernate(request));
		 DecimalFormat df = new DecimalFormat("0.00");
		 
		 OrdOcoOrdenDeCompra compra = compraDAO.findById(ocoId);
		 CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
		 CtaAscAsociado asociado = asociadoDAO.findById(compra.getAscCodigo());
		 String nombreCompleto = asociado.getSecPerPersona().getPerPrimerNombre()+" "+
		 							asociado.getSecPerPersona().getPerSegundoNombre()+" "+
		 							asociado.getSecPerPersona().getPerTercerNombre()+" "+
		 							asociado.getSecPerPersona().getPerPrimerApellido()+" "+
		 							asociado.getSecPerPersona().getPerSegundoApellido()+" "+
		 							asociado.getSecPerPersona().getPerApellidoCasada();
		 asociado.setAscNombreNit(nombreCompleto);
		 
		 CtaPrePrestamoDAO prestamoDAO = new CtaPrePrestamoDAO(getSessionHibernate(request));
		 CtrParParametrosDAO parametrosDAO = new CtrParParametrosDAO(getSessionHibernate(request));
		 CtrParParametros creditoOrden = parametrosDAO.findById("CREDITO_ORDEN");
		 Double disponible = creditoOrden.getParValorNumber() - prestamoDAO.sumCreditoUtilizado(asociado.getAscId(),"O") -
		 							petCompDAO.creditoUtilizado(asociado.getAscId());
		 request.setAttribute("credito", df.format(disponible));
		 request.setAttribute("compra", compra);
		 request.setAttribute("asociado", asociado);		 
		 SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
		 request.setAttribute("ocoEmision", sdf.format(compra.getOcoEmision()));
		 request.setAttribute("ocoVencimiento", sdf.format(compra.getOcoVencimiento()));
		 
		 return mapping.findForward("dml");
	 }
	 
	 public ActionForward cancelar(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {
		 PeticionesCompraForm petCompraForm = (PeticionesCompraForm)form;

		 return lista(mapping,form,request,response);
	 }
	 
	 public ActionForward ordenes(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {
		 PeticionesCompraForm petCompraForm = (PeticionesCompraForm)form;

		 return mapping.findForward("ordenes");
	 }
	 
	private void enviarOrdenAContabilidad(OrdOcoOrdenDeCompra orden,
			String nombreUsuario,HttpServletRequest request) {
		String parametros ="3;";
		parametros += orden.getOcoDonacion().toString() + ";";
		parametros += orden.getOcoEstado() + ";";
		parametros += orden.getInvProProveedor().getInvTprTipoProveedor().getTprId().toString() + ";";
		parametros += orden.getInvProProveedor().getProId().toString();
		PartidaAutomatica partidaAutomatica = new PartidaAutomatica();
		partidaAutomatica.crearPartidaAutomatica(
				parametros,
				orden.getOcoMonto(),
				nombreUsuario,1,null,null,null,request);
	}
	
	public ActionForward imprimeOrden(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		PeticionesCompraForm petCompraForm = (PeticionesCompraForm)form;
		//imprimirReporte
		ActionForward forward = null;
		try{
			Date fechaActual = new Date();
			//ReportesOrdenForm rOrdenForm = (ReportesOrdenForm) form;
			
			response.setHeader("Cache-Control","private");
			response.setHeader("Pragma", "Cache");
			String pathReporte = "";//ruta reporte
			String nombreReporte = "";
			ExportReport exportar = null;
			ReportFile reporte = new ReportFile();
			ServletContext servletContext = getServlet().getServletContext();
			
			nombreReporte = "ordenCompra";
			pathReporte = servletContext
			.getRealPath("/reportesOtros/facturacion/ordenCompra/ordenCompra.jasper");
			reporte.addParameter("ocoId",petCompraForm.getOcoId());
			reporte.addParameter("REGALO",0);
			reporte.setPathJasper(pathReporte);
			exportar = new ExportReport(reporte);//reporte a exportar
			
			//Conexion jdbc normal
			String jdbcDriver = "com.mysql.jdbc.Driver";
			Class.forName(jdbcDriver);
			OrdOcoOrdenDeCompraDAO compraDAO = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
			String url = HibernateSessionFactory.getConfiguration().getProperty("connection.url");
			String user = HibernateSessionFactory.getConfiguration().getProperty("connection.username");
			String pass = HibernateSessionFactory.getConfiguration().getProperty("connection.password");

			Connection con = DriverManager.getConnection(url, user, pass);

			byte[] repCompilado = exportar.exportReportPDF(con);
			
			response.setContentType("application/pdf");
			response.setContentLength(repCompilado.length);
			response.setHeader("content-Disposition", "attachment;filename="+nombreReporte+"-"+fechaActual.getTime()+".pdf");
			//response.setHeader("content-Disposition", "attachment;filename="+nombreReporte+"-"+rForm.getFechaReporte()+".pdf");
			ServletOutputStream outputStream = response.getOutputStream();
			outputStream.write(repCompilado, 0, repCompilado.length);
			outputStream.flush();
			outputStream.close();
			
		}catch(Exception e){
			e.printStackTrace();
			log.error("Se produjo un error al tratar de generar el reporte...", e);
			System.out.println("Se produjo un error al tratar de generar el reporte...\n");
		}
		return null;
	}	
	
	public void mensajes(String msg,PeticionesCompraForm form,
			HttpServletRequest request, HttpServletResponse response){
		ActionErrors errors = new ActionErrors();
		errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(msg));
        saveMessages(request, errors);
	}
	
	public void divisorACreditos(String ascId, String tipoCredito,
			Integer tprId, Double divisor, String usuario,HttpServletRequest request) {
		CtaCasCuentaAsociadoDAO cuentaAsociadoDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
		CtaPrePrestamoDAO prestamoDAO = new CtaPrePrestamoDAO(getSessionHibernate(request));
		List lCas = cuentaAsociadoDAO.findByAscAndTipoCreditoMenosTprId(ascId,tipoCredito, tprId);
		for (Iterator iterator = lCas.iterator(); iterator.hasNext();) {
			CtaPrePrestamo prestamo = (CtaPrePrestamo) iterator.next();
			prestamo.setPreCuota(prestamo.getPreSaldoActualT()/divisor);
			prestamoDAO.merge(prestamo);
			Transaction tx = prestamoDAO.getSession().beginTransaction();
			prestamoDAO.getSession().flush();
			prestamoDAO.getSession().clear();
		}
	}
	
	public ActionForward buscar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){		
		PeticionesCompraForm petCompForm = (PeticionesCompraForm)form;
		OrdPecPeticionCompraDAO petCompDAO = new OrdPecPeticionCompraDAO(getSessionHibernate(request));
		
		InvProProveedorDAO proveedorDAO = new InvProProveedorDAO(getSessionHibernate(request));
		InvProProveedor invProProveedor = new InvProProveedor();
		invProProveedor.setProId(petCompForm.getProId());
		
		CtaAscAsociado ctaAscAsociado = new CtaAscAsociado();
		ctaAscAsociado.setAscId(petCompForm.getAscCodigo());
		
		SecSucSucursal secSucSucursal = new SecSucSucursal();
		secSucSucursal.setSucId(petCompForm.getSucId());
		
		OrdPecPeticionCompra petComp = new OrdPecPeticionCompra();
		petComp.setInvProProveedor(invProProveedor);
		petComp.setCtaAscAsociado(ctaAscAsociado);
		petComp.setSecSucSucursal(secSucSucursal);
		
		SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
		try {
			petComp.setPecFecha(sdf.parse(petCompForm.getFechaSolicitud()));
		} catch (ParseException e) {
		}	
				
		List lst = null;
		TableFacade tableFacade = TableFacadeFactory.createTableFacade(TABLA_ID ,request );
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		int totalRows  = 0;
		totalRows = petCompDAO.getTotalRowCountPeticionesByCriteria(petComp);
		tableFacade.setTotalRows(totalRows);
		int rowStart = limit.getRowSelect().getRowStart();
		int rowEnd = limit.getRowSelect().getRowEnd();
		lst = petCompDAO.findPeticionesByCriteria(petComp, rowStart, rowEnd);
		tableFacade.setItems(lst);
		
		if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
		
		SecSucSucursalDAO sucursalDAO = new SecSucSucursalDAO(getSessionHibernate(request));
		request.setAttribute("sucs", sucursalDAO.findAll());

		request.setAttribute("provs", proveedorDAO.findAll());
		
		request.setAttribute(Constantes.ACCION_KEY,"/peticionesCompra");		
		return mapping.findForward("lista");		
	}

	public ActionForward cargarListaAsociados(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		PeticionesCompraForm peticionCompraForm = (PeticionesCompraForm) form;
		List<CtaAscAsociado> listaAsociados = null;
		List<FacCliCliente> listaClientes = null;
		
		CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
		CtaAscAsociado asociado = new CtaAscAsociado();
		if(peticionCompraForm.getAscEmp().equals("2")){
			asociado.setAscCodigo(peticionCompraForm.getAscCodigo());
		}else{
			asociado.setAscCodigoAsociado(peticionCompraForm.getAscCodigo());
		}
		//asociado.setAscCodigoAsociado(ordenCompraForm.getAscCodigo3());
		if(peticionCompraForm.getAscNombre() != null && ! peticionCompraForm.getAscNombre().trim().equals("")){
			if(peticionCompraForm.getAscNombre().trim().indexOf(",") == -1){
				if(peticionCompraForm.getAscNombre().trim().indexOf(" ") == -1){
					asociado.getSecPerPersona().setPerPrimerNombre(peticionCompraForm.getAscNombre().trim());
				}else{
					StringTokenizer tokenizer = new StringTokenizer(peticionCompraForm.getAscNombre().trim());
					asociado.getSecPerPersona().setPerPrimerNombre(tokenizer.nextToken().trim());
					asociado.getSecPerPersona().setPerPrimerApellido(tokenizer.nextToken().trim());
				}
			}else{
				if(peticionCompraForm.getAscNombre().trim().startsWith(",")){
					asociado.getSecPerPersona().setPerPrimerApellido("");
					asociado.getSecPerPersona().setPerPrimerNombre(peticionCompraForm.getAscNombre().substring(1).trim());
				}else{
					StringTokenizer tokenizer = new StringTokenizer(peticionCompraForm.getAscNombre().trim(),",");
					asociado.getSecPerPersona().setPerPrimerApellido(tokenizer.nextToken().trim());
					asociado.getSecPerPersona().setPerPrimerNombre(tokenizer.nextToken().trim());
				}
			}
		}
		
		SecPerPersona persona = new SecPerPersona();
		persona.setPerPrimerNombre(peticionCompraForm.getAscNombre());
		
		try {
			listaAsociados = asociadoDAO.findByNameUser(asociado,10);
			
			Boolean nulo = false;
			if(listaAsociados.size() < 1){
				nulo = true;
			}
			String listaResponse = "";
			int ascEmp = Integer.parseInt(peticionCompraForm.getAscEmp());
			listaResponse = construirListaAsociados(listaAsociados, nulo, 1, ascEmp,request);
			
			response.getWriter().write(listaResponse);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (RuntimeException e) {
			log.error("Error runtime", e);
		} catch (IOException e) {
			log.error(e);
		}
		return null;
	}	
	
	private String construirListaAsociados(List<CtaAscAsociado> listaAsociados, 
			Boolean nulo, int don, int ascEmp,HttpServletRequest request) {
		String lista = "<table id=\"resultadoAsc\">";
		lista+="<tr><td colspan=\"2\"><span style=\"font-size: 10px;font-style: italic;\">Asociados:</span></td></tr>";
		if(nulo == true){
			lista+= "<tr><td colspan=\"2\"><span style=\"font-size: 10px;color: red;font-style: italic;\">"
			+ "No se encontro ningun asociado en el sistema para esta b&uacute;squeda</span></td></tr>";
		}else{
			int max2 = 0;
			for (Iterator iterator = listaAsociados.iterator(); iterator.hasNext();) {
				//SecAscAsociado asociado = (SecAscAsociado) iterator.next();
				CtaAscAsociado asociado = (CtaAscAsociado)iterator.next();
				CtaCasCuentaAsociadoDAO cuentaAsociadoDAO = new CtaCasCuentaAsociadoDAO(getSessionHibernate(request));
				//CtaPrePrestamo prestamo = cuentaAsociadoDAO.findCredito(asociado.getAscId());
				CtaPrePrestamoDAO prestamoDAO = new CtaPrePrestamoDAO(getSessionHibernate(request));
				Double creditoUsado = prestamoDAO.sumCreditoUtilizado(asociado.getAscId(),"O");
								
				OrdOcoOrdenDeCompraDAO compraDAO = new OrdOcoOrdenDeCompraDAO(getSessionHibernate(request));
				creditoUsado += compraDAO.usadoEmitidasAsociado(asociado.getAscId());
				
				//Double creditoUsado = compraDAO.creditoUsadoPorAsociado(asociado.getAscId());
				CtrParParametrosDAO parametrosDAO = new CtrParParametrosDAO(getSessionHibernate(request));
				CtrParParametros parametros = parametrosDAO.findById("CREDITO_ORDEN");
				Double disponible = 0.0;
				if(creditoUsado == null){
					creditoUsado = 0.0;
				}
				
				OrdPecPeticionCompraDAO petCompDAO = new OrdPecPeticionCompraDAO(getSessionHibernate(request));
				creditoUsado+= petCompDAO.creditoUtilizado(asociado.getAscId());
				
				if(creditoUsado <= parametros.getParValorNumber()){
					disponible = parametros.getParValorNumber() - creditoUsado;
				}
				String codigo = "";
				if(ascEmp == 1){
					codigo = asociado.getAscCodigoAsociado();
				}else{
					codigo = asociado.getAscCodigo();
				}
				CtrEstEstadoDAO estadoDAO = new CtrEstEstadoDAO(getSessionHibernate(request));
				if(max2<10){
					lista += "<tr>";
					lista += "<td><input onclick=\"JavaScript:saveSeleccionA(this.value);\" type=\"radio\" name=\"_miseleccion\" value=\""
							+ codigo
							+ ";"
							+ asociado.getSecPerPersona().getPerPrimerNombre()
							+ " "
							+ asociado.getSecPerPersona().getPerPrimerApellido()
							+ ";"
							+ asociado.getAscId()
							+ ";"
							//+ disponible//prestamo.getPreSaldoActualT()
							+ disponible.toString()
							//+ ";"
							//+ prestamo.getPreId()
							+ "\"/></td>";
					if(don == 0){
						if(asociado.getEstId()==21){
							lista += "<td><span style=\"font-size: 10px;color: #CC3333;font-style: italic;\">"
								+ "Restringido - " 
								+ asociado.getSecPerPersona().getPerPrimerNombre()
								+ " "
								+ asociado.getSecPerPersona().getPerSegundoNombre()
								+ " "
								+ asociado.getSecPerPersona().getPerPrimerApellido()
								+ " "
								+ asociado.getSecPerPersona().getPerSegundoApellido()
								+ "</span></td>";
							lista += "</tr>";
						}else{
							lista += "<td><span style=\"font-size: 10px;color: #6E6E6E;font-style: italic;\">"
								+ asociado.getSecPerPersona().getPerPrimerNombre()
								+ " "
								+ asociado.getSecPerPersona().getPerSegundoNombre()
								+ " "
								+ asociado.getSecPerPersona().getPerPrimerApellido()
								+ " "
								+ asociado.getSecPerPersona().getPerSegundoApellido()
								+ " - "
								+ estadoDAO.findById(asociado.getEstId()).getEstNombre()
								+ "</span></td>";
							lista += "</tr>";
						}
					}else{
						lista += "<td><span style=\"font-size: 10px;color: #6E6E6E;font-style: italic;\">"
							+ asociado.getSecPerPersona().getPerPrimerNombre()
							+ " "
							+ asociado.getSecPerPersona().getPerSegundoNombre()
							+ " "
							+ asociado.getSecPerPersona().getPerPrimerApellido()
							+ " "
							+ asociado.getSecPerPersona().getPerSegundoApellido()
							+ " - "
							+ estadoDAO.findById(asociado.getEstId()).getEstNombre()
							+ "</span></td>";
						lista += "</tr>";
					}
				}
				max2++;
			}
		}
		lista += "</table>";
		return lista;
	}
	
	protected Map<String,String> getKeyMethodMap() {
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.peticionesCompra.lista", "lista");
		map.put("cmd.peticionesCompra.eliminarPeticion", "eliminarPeticion");
		map.put("cmd.peticionesCompra.crearOrden", "crearOrden");
		map.put("cmd.peticionesCompra.imprimeOrden", "imprimeOrden");
		map.put("cmd.peticionesCompra.cancelar", "cancelar");
		map.put("cmd.peticionesCompra.ordenes", "ordenes");
		map.put("cmd.peticionesCompra.buscar", "buscar");
		map.put("cmd.peticionesCompra.cargarListaAsociados", "cargarListaAsociados");
		return map;
	}

}