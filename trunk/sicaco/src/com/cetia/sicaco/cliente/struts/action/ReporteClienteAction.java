/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.cliente.struts.action;

import java.sql.Connection;
import java.sql.DriverManager;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.hibernate.Transaction;

import com.cetia.sicaco.cliente.struts.form.ReporteClienteForm;
import com.cetia.sicaco.hibernate.CtaAscAsociado;
import com.cetia.sicaco.hibernate.CtaAscAsociadoDAO;
import com.cetia.sicaco.hibernate.CtaResCuentaResumenes;
import com.cetia.sicaco.hibernate.CtaResCuentaResumenesDAO;
import com.cetia.sicaco.hibernate.HibernateSessionFactory;
import com.cetia.sicaco.hibernate.SecIseInicioSesion;
import com.cetia.sicaco.hibernate.SecIseInicioSesionDAO;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;
import com.mad.utilidades.ExportWebReport;
import com.mad.utilidades.ReportFile;
import com.mad.utilidades.Resumen;

/** 
 * MyEclipse Struts
 * Creation date: 01-20-2009
 * 
 * XDoclet definition:
 * @struts.action path="/reporteCliente" name="reporteClienteForm" parameter="accion" scope="request"
 */
public class ReporteClienteAction extends DMLAction {
	
	private static final String nombreReporte = "estadosCuentasDoc";
	private static final String rutaReporte= "/listaReportes/estadosCuenta/";
	private static final String SUBREPORT_DIR = "SUBREPORT_DIR";
	private static final String fecha1 = "fecha1";
	private static final String fecha2= "fecha2";
	private static final String ascId= "ascId";
	
	public ActionForward dml(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ReporteClienteForm reporteClienteForm = (ReporteClienteForm) form;
		SecIseInicioSesionDAO sesionDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
		CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
		SecIseInicioSesion inicioSesion = sesionDAO.findById(reporteClienteForm.getUsuarioConectado().getNombreUsuario());
		CtaAscAsociado asociado = (CtaAscAsociado) asociadoDAO.findByPerId(inicioSesion.getSecPerPersona().getPerId()).get(0);
		reporteClienteForm.setAscId(asociado.getAscId());
		request.setAttribute(Constantes.ACCION_KEY, "/reporteCliente");
		return mapping.findForward("dml");
	}
	
	public ActionForward generarEstadoCuenta(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ActionErrors errors = new ActionErrors();
		ActionForward forward = null;
		
		HashMap<String, Object> pars = new HashMap<String, Object>();
		ReporteClienteForm reporteClienteForm = (ReporteClienteForm) form;
		String pathReporte = getServlet().getServletContext().getRealPath(rutaReporte+nombreReporte+".jrxml");
		
		if((reporteClienteForm.getFecha1()!= null  && reporteClienteForm.getFecha2() != null)){
			ExportWebReport export = new ExportWebReport();
			
			ServletContext servletContext = getServlet().getServletContext();
			String pathJrxml = servletContext.getRealPath("/listaReportes/"
					+ "estadosCuenta" + "/" + "estadosCuentas" + ".jrxml");
			String pathJasper = servletContext.getRealPath("/listaReportes/"
					+ "estadosCuenta" + "/" + "estadosCuentas" + ".jasper");
			
			Date f1 = new Date();
			Date f2 = new Date();
			SimpleDateFormat formatoDelTexto = new SimpleDateFormat("dd-MM-yyyy");
			f1 = reporteClienteForm.getFecha1D();
			f2 = reporteClienteForm.getFecha2D();
			
			
			ReportFile rep = new ReportFile();
			rep.setPathJasper(pathJasper);
			rep.setPathReport(pathJrxml);
			
			rep.addParameter("ascId", reporteClienteForm.getAscId());
			rep.addParameter("fecha1",f1);
			rep.addParameter("fecha2", f2);
			//rep.addParameter("SUBREPORT_DIR", servletContext.getRealPath("/listaReportes/estadosCuenta/"));
			
			CtaResCuentaResumenesDAO resDAO = new CtaResCuentaResumenesDAO(getSessionHibernate(request));
			Transaction tx = resDAO.getSession().beginTransaction();
			
			List l1 = resDAO.findSaldosAnteriores(f1, request.getParameter("ascId")); 
			List l2 = resDAO.findSaldosActuales(f2, request.getParameter("ascId"));
			int i=0, j=0;
			Resumen r1;
			Resumen r2;
			if(l1.size() > l2.size()){
				while(i< l1.size()){
					CtaResCuentaResumenes res = new CtaResCuentaResumenes();
					r1 = (Resumen)l1.get(i); 
					r2 = (Resumen)l2.get(j);
					if(r1.getCuenta().equals(r2.getCuenta())){
						res.setResCuentaNom(r1.getCuenta());
						res.setResLinea(r1.getLinea());
						res.setResSaldoAct(r2.getSaldo());
						res.setResSaldoAnt(r1.getSaldo());
						i++;
						j++;	
					}else{
						res.setResCuentaNom(r1.getCuenta());
						res.setResLinea(r1.getLinea());
						res.setResSaldoAct(0.0);
						res.setResSaldoAnt(r1.getSaldo());						
						i++;
					}
					if (res.getResSaldoAct() != 0.0 || res.getResSaldoAnt()!=0.0){
						resDAO.save(res);
						tx.commit();	
					}
					
				}
			}else{
				while(j< l2.size()){
					CtaResCuentaResumenes res = new CtaResCuentaResumenes();
					r2 = (Resumen)l2.get(j);
					if(l1.size()>0 && i < l1.size()){
						r1 = (Resumen)l1.get(i);
					}else{
						r1=new Resumen();
						r1.setCuenta("&%/&(");
					}
					
					if(r2.getCuenta().equals(r1.getCuenta())){
						res.setResCuentaNom(r2.getCuenta());
						res.setResLinea(r2.getLinea());
						res.setResSaldoAct(r2.getSaldo());
						res.setResSaldoAnt(r1.getSaldo());
						i++;
						j++;	
					}else{
						res.setResCuentaNom(r2.getCuenta());
						res.setResLinea(r2.getLinea());
						res.setResSaldoAct(r2.getSaldo());
						res.setResSaldoAnt(0.0);						
						j++;
					}
					if (res.getResSaldoAct() != 0.0 || res.getResSaldoAnt()!=0.0){
						resDAO.save(res);
						tx.commit();	
					}
				}
			}
			
			try{
				String jdbcDriver = "com.mysql.jdbc.Driver";
				Class.forName(jdbcDriver);
				String url = HibernateSessionFactory.getConfiguration().getProperty("connection.url");
				String user = HibernateSessionFactory.getConfiguration().getProperty("connection.username");
				String pass = HibernateSessionFactory.getConfiguration().getProperty("connection.password");

				Connection con = DriverManager.getConnection(url, user, pass);
				
				export.setReportFile(rep);
				export.exportPDFWeb("EstadoDeCuenta", request, response, true, con);
				
			}catch (Exception e) {
					e.printStackTrace();
			}finally{
				resDAO.deleteAll();
				tx.commit();
				resDAO.getSession().clear();
			}			
			/*pars.put(fecha1,reporteClienteForm.getFecha1D());
			pars.put(fecha2, reporteClienteForm.getFecha2D());
			pars.put(ascId, reporteClienteForm.getAscId());
			int pos = pathReporte.lastIndexOf("/");
			if(pos==-1) pos = pathReporte.lastIndexOf("\\");
			pars.put(SUBREPORT_DIR, pathReporte.substring(0, pos+1));
			try{
				String jdbcDriver = "com.mysql.jdbc.Driver";
				Class.forName(jdbcDriver);
				String url = HibernateSessionFactory.getConfiguration().getProperty("connection.url");
				String user = HibernateSessionFactory.getConfiguration().getProperty("connection.username");
				String pass = HibernateSessionFactory.getConfiguration().getProperty("connection.password");

				Connection con = DriverManager.getConnection(url, user, pass);
				
				FileInputStream input = new FileInputStream(new File(pathReporte));
				JasperDesign jd = JRXmlLoader.load(input);
				JasperReport jr = JasperCompileManager.compileReport(jd);
				JasperPrint jp = JasperFillManager.fillReport(jr,pars, con);
				response.setHeader("Cache-Control","private");
				response.setHeader("Pragma", "Cache");
				response.setContentType("application/pdf");
				response.setHeader("content-Disposition", "attachment;filename="+ nombreReporte + new SimpleDateFormat("yyyy-MM-dd").format(new Date()) + ".pdf");
		        JRPdfExporter pdfExporter = new JRPdfExporter();
		        pdfExporter.setParameter(JRExporterParameter.JASPER_PRINT, jp);
		        pdfExporter.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());
		        pdfExporter.exportReport();
		        
			}catch (Exception e) {
				e.printStackTrace();
			}*/
		}else{
			errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("error.cliente.fechaRequired"));
			saveMessages(request, errors);
			forward = dml(mapping, form, request, response);
		}
		return forward;
	}
	
	protected Map<String, String> getKeyMethodMap() {
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.reporteCliente.dml", "dml");
		map.put("cmd.reporteCliente.generarEstadoCuenta", "generarEstadoCuenta");
		return map;
	}
}