/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.cliente.struts.action;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.hibernate.HibernateException;
import org.hibernate.Transaction;

import com.cetia.sicaco.cliente.struts.form.ComentariosForm;
import com.cetia.sicaco.hibernate.CliComComentarioDAO;
import com.cetia.sicaco.struts.DMLAction;

/** 
 * MyEclipse Struts
 * Creation date: 08-15-2008
 * 
 * XDoclet definition:
 * @struts.action input="pagina.comentarios" parameter="accion" validate="true"
 */
public class ComentariosAction extends DMLAction {
	
	private static final Log log = LogFactory.getLog(ComentariosAction.class);
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		return mapping.findForward("verLista");
	}
	
	public ActionForward enviarComentario(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		log.debug("Se ingreso a enviar un comentario");
		ComentariosForm comentariosForm = (ComentariosForm) form;
		CliComComentarioDAO comentarioDAO = new CliComComentarioDAO(getSessionHibernate(request));
		
		Transaction trx = comentarioDAO.getSession().beginTransaction();
		//Llenamos los demas datos del formulario con sus valores por defecto
		comentariosForm.setComFechaIngreso(new Date());
		comentariosForm.setSecIseInicioSesion(getSesionUsuarioConectado(request));
		try {
			comentarioDAO.save(comentariosForm.getCliComComentario());
			trx.commit();
			ActionMessages messages = new ActionMessages();
			messages.add("msg.comentario.exito",new ActionMessage("msg.comentario.exito"));
			saveMessages(request, messages);
		} catch (HibernateException e) {
			log.error("Error al momento de guardar el comentario", e);
			if(trx.wasRolledBack())trx.rollback();
		}
		comentarioDAO.getSession().flush();
		comentarioDAO.getSession().clear();
		comentariosForm.setComComentario("");
		request.setAttribute("form", comentariosForm);
		return mapping.findForward("verLista");
	}
	
	public ActionForward cancelarComentario(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
		return mapping.findForward("homeCliente");
	}

	
	protected Map<String, String> getKeyMethodMap() {
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.comentario.guardar", "enviarComentario");
		map.put("cmd.comentario.cancelar", "cancelarComentario");
		map.put("cmd.comentario.lista", "lista");
		return map;
	}
}