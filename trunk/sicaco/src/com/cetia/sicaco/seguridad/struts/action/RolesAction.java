/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.seguridad.struts.action;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.hibernate.Transaction;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeFactory;
import org.jmesa.facade.TableFacadeImpl;
import org.jmesa.limit.ExportType;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.BasicCellEditor;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.html.HtmlBuilder;

import com.cetia.sicaco.hibernate.SecIseInicioSesion;
import com.cetia.sicaco.hibernate.SecIseInicioSesionDAO;
import com.cetia.sicaco.hibernate.SecMopMenuOpcion;
import com.cetia.sicaco.hibernate.SecMopMenuOpcionDAO;
import com.cetia.sicaco.hibernate.SecRolRoles;
import com.cetia.sicaco.hibernate.SecRolRolesDAO;
import com.cetia.sicaco.hibernate.SecRopRolMenu;
import com.cetia.sicaco.hibernate.SecRopRolMenuDAO;
import com.cetia.sicaco.hibernate.SecRopRolMenuId;
import com.cetia.sicaco.seguridad.struts.form.RolesForm;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;
import com.mad.utilidades.AlreadyExistChildrenException;
import com.mad.utilidades.AlreadyRolExistException;

/** 
 * MyEclipse Struts
 * Creation date: 02-21-2008
 * 
 * XDoclet definition:
 * @struts.action path="/roles" name="rolesForm" input="pagina-lista.seguridad.roles" parameter="accion" scope="request" validate="true"
 * @struts.action-forward name="lista" path="pagina-lista.seguridad.roles"
 * @struts.action-forward name="dml" path="pagina-dml.seguridad.roles"
 * @struts.action-forward name="error" path="pagina-lista.seguridad.roles"
 */
public class RolesAction extends DMLAction {
	/*
	 * Generated Methods
	 */

	//---- Nombre de la tabla que sera llamada para ser mostrada
	public static final String TABLA_ID = "secRolRoles";
	private final static String ERRORS = "errors";
	
	public static final String TABLA_ID2 = "secMopMenuOpcion";
	
	public int[] posY;
	ArrayList<Integer> z = new ArrayList();
	
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	
	//ActionForward general, cada uno de los siguientes se basa en este
	/*
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		return null;
	}
	*/
	
	//---- Redirige y crea la tabla de datos a mostrar ya sea en el browser o genera un export
	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		SecRolRolesDAO rolesDAO = new SecRolRolesDAO(getSessionHibernate(request));
		List<SecRolRoles> list = null;
		RolesForm rolesForm = (RolesForm) form;
		//pos = 0;
//		SecRolRoles secRolRoles = rolesDAO.findById(rolesForm.getRolNombre());
		//---- lista donde se guardaran los datos a mostrar
		/*java.util.List list = rolesDAO.findAll();*/
		
		//Aqui empieza el codigo para generar Tabla
		TableFacade tableFacade = TableFacadeFactory.createTableFacade(TABLA_ID ,request );
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		int totalRows = rolesDAO.getTotalRowCount();
		tableFacade.setTotalRows(totalRows);
		int rowStart = limit.getRowSelect().getRowStart();
		int rowEnd = limit.getRowSelect().getRowEnd();
		list = rolesDAO.findAll(rowStart, rowEnd);
		tableFacade.setItems(list);
		/*
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(list);
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		
		Limit limit = tableFacade.getLimit();
		*/
        if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
       // rolesForm.setRolesH(rolesH);
        request.setAttribute("form",rolesForm);
        request.setAttribute(Constantes.ACCION_KEY, "/roles");
        request.setAttribute("filtro", "1");
		return mapping.findForward("lista");
		 
	}
	
	//---- Accion que lleva a formulario de busqueda, para filtrar la tabla a mostrar
	@SuppressWarnings("unchecked")
	public ActionForward buscar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
			SecRolRolesDAO rolesDAO = new SecRolRolesDAO(getSessionHibernate(request));
		RolesForm rolesForm = (RolesForm)form;
		//---- lista donde se guardaran los datos a mostrar
		java.util.List list = rolesDAO.findByCriteria(rolesForm.getRolesH());
		
		//Aqui empieza el cï¿½digo para generar Tabla
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(list);
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		
		Limit limit = tableFacade.getLimit();
        if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
        request.setAttribute(Constantes.ACCION_KEY, "/roles");
        request.setAttribute("form", rolesForm);
        request.setAttribute("filtro", "1");
		return mapping.findForward("lista");
		 
	}
	
	//---- Funcion que genera el html de la tabla del jmesa
	private String html(final TableFacade tableFacade, final HttpServletRequest request) {
		tableFacade.setColumnProperties("rolNombre",
				"rolDescripcion","rolTipoSesion");
		Table table = tableFacade.getTable();
		
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.roles.caption");
		
		Row row = table.getRow();
				
		Column nombreColumna = row.getColumn("rolNombre");
		nombreColumna.setTitleKey("tbl.roles.rolNombre");
		
		//----- Implementamos la edicion de usuario
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				SecRolRoles roles = (SecRolRoles)item;
				
				HtmlBuilder html = new HtmlBuilder();
				value = roles.getRolNombre();
				//---- Generar link para entrar a edicion
				String link = tableFacade.getWebContext().getContextPath();
				link += "/seguridad/roles.do?rolNombre="+roles.getRolNombre().toString()+"&accion=agrega&boton=1&ini=1";
				html.a().href().quote().append(link).quote().close();//.onclick("JavaScript:ajaxCall('"+link+"');return false;").close();
				//---- Agregamos el link con el nombre = value
				html.append(value);
				html.aEnd();
				
				return html.toString();
			}
		});
		

		nombreColumna = row.getColumn("rolDescripcion");
		nombreColumna.setTitleKey("tbl.roles.rolDescripcion");
		
		nombreColumna = row.getColumn("rolTipoSesion");
		nombreColumna.setTitleKey("tbl.roles.rolTipoSesion");
		
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				String value = (String) new BasicCellEditor().getValue(item, property, rowcount);
				value = (value.equalsIgnoreCase("A"))?getResources(request).getMessage("lbl.roles.rolTipoSesionA"):getResources(request).getMessage("lbl.roles.rolTipoSesionC");
				return value;
			}
			
		});
		
		return tableFacade.render();
	}
	
	//---- Funcion que genera los exports, el formato que tendran
	 private void export(final TableFacade tableFacade) {
			tableFacade.setColumnProperties("rolNombre",
					"rolDescripcion","rolTipoSesion");
			Table table = tableFacade.getTable();
			
			//---- Titulo de la tabla
			table.setCaptionKey("tbl.roles.caption");
			
			Row row = table.getRow();
					
			Column nombreColumna = row.getColumn("rolNombre");
			nombreColumna.setTitleKey("tbl.roles.rolNombre");
			
			nombreColumna = row.getColumn("rolDescripcion");
			nombreColumna.setTitleKey("tbl.roles.rolDescripcion.export");
			
			nombreColumna = row.getColumn("rolTipoSesion");
			nombreColumna.setTitleKey("tbl.roles.rolTipoSesion.export");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

				public Object getValue(Object item, String property, int rowcount) {
					String value = (String) new BasicCellEditor().getValue(item, property, rowcount);
					if(value.equalsIgnoreCase("A")){
						value = "Administrador";
					}else{
						value = "Cliente";
					}
					//value = (value.equalsIgnoreCase("A"))?getResources(request).getMessage("lbl.roles.rolTipoSesionA"):getResources(request).getMessage("lbl.roles.rolTipoSesionC");
					return value;
				}
				
			});
			
			tableFacade.render();
	 }
	
	//---- Accion de cancelar, que regresa a la pantalla basica de la lista 
 	public ActionForward cancelar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
 		return lista(mapping, form, request, response);
	}
	
 	//---- Accion que inicia la pantalla para agregar persona
	public ActionForward agregar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		RolesForm rolesForm = new RolesForm();
		rolesForm.setRolName(rolesForm.getRolNombre());
		//----- Variables de configuracion
		request.setAttribute(Constantes.ACCION_KEY, "/roles");
		request.setAttribute("filtro", "0");
		request.setAttribute("boton", "0");
		
		//pos = 0;
		
		SecRopRolMenuDAO rolMenuDAO = new SecRopRolMenuDAO(getSessionHibernate(request));
		List list = rolMenuDAO.findAll();
		request.setAttribute("listaRolMenu", list);
		
		SecMopMenuOpcionDAO menuOpcionDAO = new SecMopMenuOpcionDAO(getSessionHibernate(request));
		List lm = menuOpcionDAO.findAllParent();
		request.setAttribute("listMenu", lm);
		
		//Aqui empieza el cï¿½digo para generar Tabla
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID2, request);
		tableFacade.setItems(lm);
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		
		Limit limit = tableFacade.getLimit();
        if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
        /*    String html = htmlSeleccion(tableFacade, request,list,rolesForm.getRolNombre());
            request.setAttribute(Constantes.LISTA_KEY, html);
        */}
        
		//----- Variables de configuracion
		request.setAttribute("detalleOrden", 2);
		request.setAttribute("form", rolesForm);
		
		return mapping.findForward("dml");
	}
	
	
	
	//---- Accion de guardar nueva persona, regresa a lista principal
	public ActionForward guardar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		RolesForm rolesForm = (RolesForm) form;
		rolesForm.setRolDescripcion(rolesForm.getRolDescripcion().toUpperCase());
/*		if(rolesForm.getRolTipoSesion().equals("") || rolesForm.getRolTipoSesion() == null){
			ActionErrors actionErrors = new ActionErrors();
			actionErrors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("error.rol.rolTipoSesion"))
		}*/
		rolesForm.setRolTipoSesion(rolesForm.getRolTipoSesion().toUpperCase());
		rolesForm.setRolNombre(rolesForm.getRolNombre().toUpperCase());
		SecRolRoles modelRoles = null;
		SecRolRolesDAO rolesDAO = new SecRolRolesDAO(getSessionHibernate(request));
		//---- Indica inicio de las transacciones
		Transaction trx = rolesDAO.getSession().beginTransaction();
		try {
			modelRoles = rolesDAO.findById(rolesForm.getRolNombre().toUpperCase());
			validateRolLogic(modelRoles);
			rolesDAO.save(rolesForm.getRolesH());
			trx.commit();
		}catch(AlreadyRolExistException rex){
			ActionErrors errors = new ActionErrors();
			errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("error.rol.rolNombre"));
			saveMessages(request, errors);
		} catch (Exception e) {
			// TODO: handle exception
			trx.rollback();
			e.printStackTrace();
		}finally{
			rolesDAO.getSession().flush();
			rolesDAO.getSession().clear();
			
		}
		
		
		//---- Save realiza un insert en la tabla
		
		request.setAttribute(Constantes.ACCION_KEY, "/roles");
		request.setAttribute("filtro", "0");
		request.setAttribute("boton", "0");
		return lista(mapping,form,request,response);
	}
	public void validateRolLogic(SecRolRoles modelRoles)throws Exception{
		if(modelRoles!=null) throw new AlreadyRolExistException();
	}
	
	
	public void  ajaxRequestWriterValidator(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws IOException{
		HtmlBuilder html = new HtmlBuilder();
		RolesForm rolesForm = (RolesForm) form;
		SecRolRoles modelRoles = null;
		SecRolRolesDAO rolesDAO = new SecRolRolesDAO(getSessionHibernate(request));
		//---- Indica inicio de las transacciones
		StringBuilder cssBuilder = new StringBuilder();
		cssBuilder.append("border-style: dotted;").append("border-width: 1.0px;").
		append("font-size: 0.7em;").append("font-weight: bold;");
		Transaction trx = rolesDAO.getSession().beginTransaction();
		try {
			modelRoles = rolesDAO.findById(rolesForm.getRolNombre().toUpperCase());
			trx.commit();
		}catch (Exception e) {
			// TODO: handle exception
			trx.rollback();
			e.printStackTrace();
		}finally{
			rolesDAO.getSession().flush();
			rolesDAO.getSession().clear();
			
		}
		if(modelRoles!=null){
			html.table(0).id(Constantes.TABLA_IDAJAX).style(cssBuilder.toString()).close().
			tr(0).close().
				td(0).close().
						append(getResources(request).getMessage("lbl.roles.rolNombre.incorrecto")).
				tdEnd().
			trEnd(0).
			tableEnd(0);
		}else{
			html.table(0).id(Constantes.TABLA_IDAJAX).style(cssBuilder.toString()).close().
				tr(0).close().
					td(0).close().
							append(getResources(request).getMessage("lbl.roles.rolNombre.correcto")).
					tdEnd().
				trEnd(0).
				tableEnd(0);
		}
		String htmlResponse = html.toString();
		response.getWriter().print(html.toString());
	
	}
	
	
	//---- Accion de guardar los cambios hecho de una edicion
	public ActionForward salvar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		RolesForm rolesForm = (RolesForm) form;
		SecRolRolesDAO rolesDAO = new SecRolRolesDAO(getSessionHibernate(request));
		
		//---- Inicia transaccion
		Transaction trx = rolesDAO.getSession().beginTransaction();
		
		rolesForm.setRolDescripcion(rolesForm.getRolDescripcion().toUpperCase());
		rolesForm.setRolTipoSesion(rolesForm.getRolTipoSesion().toUpperCase());
		
		//---- Merge indica un update en la tabla
		rolesDAO.merge(rolesForm.getRolesH());
		trx.commit();
		rolesDAO.getSession().flush();
		rolesDAO.getSession().clear();
		
		return lista(mapping, form, request, response);
	}
	
	//---- Elimina los datos seleccionados de la tabla
	public ActionForward eliminar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		RolesForm rolesForm = (RolesForm) form;
		SecIseInicioSesionDAO iseInicioSesionDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
		SecRolRolesDAO rolesDAO = new SecRolRolesDAO(getSessionHibernate(request));
		List<SecIseInicioSesion> lst = null;
		//---- Inicia transaccion
		Transaction trx = rolesDAO.getSession().beginTransaction();
		try {
			lst = iseInicioSesionDAO.findByProperty("secRolRoles.rolNombre",rolesForm.getRolesH().getRolNombre());
			validateFkIseInicio(lst);
			SecRopRolMenuDAO rolMenuDAO = new SecRopRolMenuDAO(getSessionHibernate(request));
			List asignados = rolMenuDAO.findAllByRol(rolesForm.getRolNombre());
			for (Iterator iterator = asignados.iterator(); iterator.hasNext();) {
				SecRopRolMenu rolMenu = (SecRopRolMenu) iterator.next();
				rolMenuDAO.delete(rolMenu);
			}
			trx.commit();
			rolMenuDAO.getSession().flush();
			rolMenuDAO.getSession().clear();
			
			rolesDAO.delete(rolesDAO.findById(rolesForm.getRolesH().getRolNombre()));
			trx.commit();
		}catch(AlreadyExistChildrenException chex){
			ActionErrors errors = new ActionErrors();
			errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("error.rol.rolNombre.hijos"));
			saveMessages(request, errors);
		}catch (Exception e) {
			// TODO: handle exception
			trx.rollback();
			e.printStackTrace();
		}finally{
			rolesDAO.getSession().flush();
			rolesDAO.getSession().clear();
			
		}
		//---- Delete indica un delete de la tabla
		return lista(mapping, form, request, response);
	}
	
	public void validateFkIseInicio(List<SecIseInicioSesion> lst)throws Exception{
		if(lst.size() > 0) throw new AlreadyExistChildrenException();
	}
	
	//---- Accion que llama la pantalla de dml
	public ActionForward dml(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		RolesForm rolesForm = (RolesForm)form;
		//----- Variables de configuracion
		request.setAttribute("form",rolesForm);
		request.setAttribute(Constantes.ACCION_KEY, "/roles");
		request.setAttribute("filtro", "0");
		request.setAttribute("boton", "0");
		request.setAttribute("form", rolesForm);
		return mapping.findForward("dml");
	}
	public ActionForward redirectInvalidData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		ActionErrors errors = (ActionErrors)request.getSession().getAttribute(Constantes.ERRORS);
		SecRolRolesDAO rolesDAO = new SecRolRolesDAO(getSessionHibernate(request));
		RolesForm rolesForm = (RolesForm) form;
		//---- lista donde se guardaran los datos a mostrar
		java.util.List list = rolesDAO.findAll();
		
		//Aqui empieza el codigo para generar Tabla
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(list);
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		
		Limit limit = tableFacade.getLimit();
        if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
        request.setAttribute("form",rolesForm);
        request.setAttribute(Constantes.ACCION_KEY, "/roles");
        request.setAttribute("filtro", "1");
        saveMessages(request, errors);
		return mapping.findForward("lista");
		 
	}
	
	/* ///////////////////////////
	 * 
	 * Inicia parte de rol-menu
	 * 
	 * ///////////////////////////
	 */
	public boolean asignado(String menuName, String rol,HttpServletRequest request){
		SecMopMenuOpcionDAO menuOpcionDAO = new SecMopMenuOpcionDAO(getSessionHibernate(request));
		SecRopRolMenuDAO rolMenuDAO = new SecRopRolMenuDAO(getSessionHibernate(request));
		
		SecMopMenuOpcion menuOpcion = menuOpcionDAO.findById(menuName);
		if(rol == null || rol.equals("")){
			return false;
		}
		
		List list = rolMenuDAO.findByMopNameByRol(rol);
		
		for (Iterator iterator = list.iterator(); iterator.hasNext();) {
			SecRopRolMenu rolMenu = (SecRopRolMenu) iterator.next();
			if(rolMenu.getId().getSecMopMenuOpcion() == menuOpcion){
				return true;
			}
		}
				
		return false;
	}
	
	//---- Accion asociada al link de edicion de la tabla, entra a pantalla de edicion
	public ActionForward editar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		RolesForm rolesForm = (RolesForm) form;
		
		SecMopMenuOpcionDAO menuOpcionDAO = new SecMopMenuOpcionDAO(getSessionHibernate(request));
		List lmenu = menuOpcionDAO.findAllParentNull();
		posY = new int[lmenu.size()];
		int[] posX = rolesForm.getPosiciones();
		z = new ArrayList();
		rolesForm.setRolName(rolesForm.getRolNombre());
		SecRolRolesDAO rolesDAO = new SecRolRolesDAO(getSessionHibernate(request));
		
		//---- Set de los datos de la persona seleccionada para la edicion
		rolesForm.setRolesH(rolesDAO.findById(rolesForm.getRolNombre()));
	
		//---- Variables de configuracion
		request.setAttribute("form",rolesForm);
		request.setAttribute(Constantes.ACCION_KEY, "/roles");
		request.setAttribute("filtro", "0");
		request.setAttribute("boton", "1");
		
		SecRopRolMenuDAO rolMenuDAO = new SecRopRolMenuDAO(getSessionHibernate(request));
		List list = rolMenuDAO.findAll();
		request.setAttribute("listaRolMenu", list);
		
		//SecMopMenuOpcionDAO menuOpcionDAO = new SecMopMenuOpcionDAO(getSessionHibernate(request));
		List lm = menuOpcionDAO.findAllParent();
		request.setAttribute("listMenu", lm);
		
		//Aqui empieza el cï¿½digo para generar Tabla
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID2, request);
		tableFacade.setItems(lm);
		tableFacade.setMaxRows(100);
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		
		Limit limit = tableFacade.getLimit();
        if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            //String html = htmlSeleccion(tableFacade, request,list,rolesForm.getRolNombre());
            String html = htmlSeleccion2(lmenu, rolesForm.getRolName(),request);
        	request.setAttribute(Constantes.LISTA_KEY, html);
        }
       // request.getSession().setAttribute("posMenu", pos);
		//----- Variables de configuracion
		request.setAttribute("detalleOrden", 2);
		request.setAttribute("form", rolesForm);
		
		return mapping.findForward("dml");
	}
	
	private String htmlSeleccion2(List menu, String rolName,HttpServletRequest request) {
		SecMopMenuOpcionDAO menuOpcionDAO = new SecMopMenuOpcionDAO(getSessionHibernate(request));
		SecRopRolMenuDAO rolMenuDAO = new SecRopRolMenuDAO(getSessionHibernate(request));
		SecRolRolesDAO rolesDAO = new SecRolRolesDAO(getSessionHibernate(request));
		SecRolRoles roles = rolesDAO.findById(rolName);
		//List menusRol = rolMenuDAO.findByRolandOpcion(rolName);
		//String booleano="false";
		String lista = "<div class=\"menuSeleccion\">\n<ul>\n";
		for (Iterator iterator = menu.iterator(); iterator.hasNext();) {
			SecMopMenuOpcion menuOpcion = (SecMopMenuOpcion) iterator.next();
			
			if (isSesionPermitida(menuOpcion,roles)) {
				List sons = menuOpcionDAO.findAllSons(menuOpcion.getMopName());
				
				if (rolMenuDAO.findByRolAndOpcion(menuOpcion, rolName)) {
					lista += "<li >\n<input type=\"checkbox\" name=\"opcionesSeleccionadas\" value=\""
							+ menuOpcion.getMopName() + "\" checked />";
					lista +="<a "+((sons.size()>0)?"class=\"parent-menu\"":"class=\"opcion-menu\"")+" href=\"#\" onclick=\"JavaScript:return false\" >"+menuOpcion.getMopTitle()+"</a>";
				} else {
					lista += "<li >\n<input type=\"checkbox\" name=\"opcionesSeleccionadas\" value=\""
							+ menuOpcion.getMopName() + "\" />";
					lista +="<a "+((sons.size()>0)?"class=\"parent-menu\"":"class=\"opcion-menu\"")+" href=\"#\" onclick=\"JavaScript:return false\" >"+menuOpcion.getMopTitle()+"</a>";
				}
				
				
				if (sons.size() > 0) {
					lista += construirLista(sons, rolName,request);
				}
				lista += "</li>";
			}
		}
		lista+="</ul>\n</div>";
		return lista;
	}
	
	private boolean isSesionPermitida(SecMopMenuOpcion menuOpcion,
			SecRolRoles roles) {
		if(menuOpcion.getMopTipoSesion().equals(roles.getRolTipoSesion())){
			return true;
		}
		return false;
	}

	@SuppressWarnings("unchecked")
	private String construirLista(List sons, String rolName,HttpServletRequest request){
		SecMopMenuOpcionDAO menuOpcionDAO=new SecMopMenuOpcionDAO(getSessionHibernate(request));
		SecRopRolMenuDAO rolMenuDAO = new SecRopRolMenuDAO(getSessionHibernate(request));
		//SecRopRolMenu rolMenu = rolMenuDAO.findByRol(rolName).get(0);
		//String booleano="false";
		String lista = "";
		lista+="<ul>\n";
		for (Iterator<SecMopMenuOpcion> iterator2 = sons.iterator(); iterator2.hasNext();) {
			SecMopMenuOpcion menuOpcion2 = (SecMopMenuOpcion) iterator2.next();
			List sons2 = menuOpcionDAO.findAllSons(menuOpcion2.getMopName());
			if(rolMenuDAO.findByRolAndOpcion(menuOpcion2,rolName)){
				lista+="<li>\n<input type=\"checkbox\" name=\"opcionesSeleccionadas\" value=\""+menuOpcion2.getMopName() + "\" checked />";
				lista += "<a "+((sons2.size()>0)?"class=\"parent-menu\"":"class=\"opcion-menu\"")+" href=\"#\" onclick=\"JavaScript:return false\" >"+menuOpcion2.getMopTitle()+"</a>";
			}else{
				lista+="<li>\n<input type=\"checkbox\" name=\"opcionesSeleccionadas\" value=\""+menuOpcion2.getMopName() + "\" />";
				lista += "<a "+((sons2.size()>0)?"class=\"parent-menu\"":"class=\"opcion-menu\"")+" href=\"#\" onclick=\"JavaScript:return false\" >"+menuOpcion2.getMopTitle()+"</a>";
			}
			
			
			if(sons2.size()>0){
				lista+=construirLista(sons2,rolName,request);
			}
			lista+="\n</li>";
		}
		lista+="\n</ul>";
		return lista;
	}
	
	public ActionForward asignar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		RolesForm rolesForm = (RolesForm)form;
		SecRopRolMenuDAO rolMenuDAO = new SecRopRolMenuDAO(getSessionHibernate(request));
		Transaction tx = rolMenuDAO.getSession().beginTransaction();
		List asignados = rolMenuDAO.findAllByRol(rolesForm.getRolName());
		for (Iterator iterator = asignados.iterator(); iterator.hasNext();) {
			SecRopRolMenu rolMenu = (SecRopRolMenu) iterator.next();
			if(!seleccionado(rolMenu, rolesForm.getOpcionesSeleccionadas())){
				rolMenuDAO.delete(rolMenu);
				tx.commit();
			}
		}
		rolMenuDAO.getSession().flush();
		rolMenuDAO.getSession().clear();
		
		SecRolRolesDAO rolesDAO = new SecRolRolesDAO(getSessionHibernate(request));
		SecMopMenuOpcionDAO menuOpcionDAO = new SecMopMenuOpcionDAO(getSessionHibernate(request));
		SecRopRolMenuDAO rolMenuDAO2 = new SecRopRolMenuDAO(getSessionHibernate(request));
		
		Transaction tx2 = rolMenuDAO2.getSession().beginTransaction();
		if(rolesForm.getOpcionesSeleccionadas()!= null){
			for(int i=0;rolesForm.getOpcionesSeleccionadas().length>i;i++){
				SecRopRolMenu rolMenu = new SecRopRolMenu();
				SecRopRolMenuId rolMenuId = new SecRopRolMenuId();
				String ops= rolesForm.getOpcionesSeleccionadas()[i];
				rolMenuId.setSecMopMenuOpcion(menuOpcionDAO.findById(ops.trim()));
				rolMenuId.setSecRolRoles(rolesDAO.findById(rolesForm.getRolName()));
				if(rolMenuDAO2.findById(rolMenuId)== null){
					rolMenu.setAudFechaCreacion(new Date());
					rolMenu.setAudFechaModificacion(new Date());
					rolMenu.setAudUsuarioCreacion(rolesForm.getUsuarioConectado().getNombreUsuario());
					rolMenu.setAudUsuarioModificacion(rolesForm.getUsuarioConectado().getNombreUsuario());
					rolMenu.setId(rolMenuId);
					rolMenuDAO.save(rolMenu);
					
				}
			}
			tx2.commit();
		}
		tx.commit();
		rolMenuDAO2.getSession().flush();
		rolMenuDAO2.getSession().clear();
		return lista(mapping, form, request, response);
	}

	private boolean seleccionado(SecRopRolMenu rolMenu, String[] opciones) {
		int sel = 0;
		if(opciones != null){
			for(int i=0; i>opciones.length;i++ ){
				if(rolMenu.getId().getSecMopMenuOpcion().getMopName().equals(opciones[i])){
					sel++;
				}
			}
			if(sel != 0){
				return true;
			}else{
				return false;
			}
		}else return false;
	}

	//---- Mapas usados para conectar las acciones
	protected Map<String, String> getKeyMethodMap() {
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.roles.agregar", "guardar");
		map.put("cmd.roles.mostrar","agregar");
		map.put("cmd.roles.editar","editar");
		map.put("cmd.roles.modificar","salvar");
		map.put("cmd.roles.eliminar","eliminar");
		map.put("cmd.roles.cancelar","cancelar");
		map.put("cmd.roles.lista","lista");
		map.put("cmd.roles.axn2","editar");
		map.put("cmd.roles.buscar", "buscar");
		map.put("cmd.roles.busqueda", "busqueda");
		map.put("cmd.roles.dml", "dml");
		map.put("cmd.roles.redirectInvalidData","redirectInvalidData");
		map.put("cmd.roles.ajaxRequestWriterValidator","ajaxRequestWriterValidator");
		map.put("cmd.roles.nuevo", "dml");
		map.put("cmd.rolMenu.asignar", "asignar");
		return map;
	}
	
}