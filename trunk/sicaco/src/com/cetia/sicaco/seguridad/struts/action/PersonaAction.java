/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.seguridad.struts.action;


import java.io.IOException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.naming.directory.InvalidAttributesException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.oro.text.perl.Perl5Util;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.hibernate.Transaction;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeFactory;
import org.jmesa.facade.TableFacadeImpl;
import org.jmesa.limit.ExportType;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.BasicCellEditor;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.editor.DateCellEditor;
import org.jmesa.view.html.HtmlBuilder;

import com.cetia.sicaco.hibernate.CtaAscAsociadoDAO;
import com.cetia.sicaco.hibernate.PersonaTipoSesion;
import com.cetia.sicaco.hibernate.SecCelCorreoElectronico;
import com.cetia.sicaco.hibernate.SecCelCorreoElectronicoDAO;
import com.cetia.sicaco.hibernate.SecCelCorreoElectronicoId;
import com.cetia.sicaco.hibernate.SecDppDepartamentoPaisDAO;
import com.cetia.sicaco.hibernate.SecIseInicioSesion;
import com.cetia.sicaco.hibernate.SecIseInicioSesionDAO;
import com.cetia.sicaco.hibernate.SecPerPersona;
import com.cetia.sicaco.hibernate.SecPerPersonaDAO;
import com.cetia.sicaco.hibernate.SecSucSucursalDAO;
import com.cetia.sicaco.hibernate.SecZonZonaDAO;
import com.cetia.sicaco.seguridad.struts.form.PersonaForm;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;
import com.mad.utilidades.AlreadyExistDuiOrNitException;
import com.mad.utilidades.InvalidPatternException;

/** 
 * MyEclipse Struts
 * Creation date: 02-11-2008
 * 
 * XDoclet definition:
 * @struts.action input="/plantilla/plantilla-lista" parameter="accion" validate="true"
 * @struts.action-forward name="lista" path="plantilla-lista"
 * @struts.action-forward name="error" path="plantilla-lista"
 */

public class PersonaAction extends DMLAction {
	/*
	 * Generated Methods
	 */
	
	//---- Nombre de la tabla que sera llamada para ser mostrada
	public static final String TABLA_ID = "secPerPersona";
	private final static String METHOD_NAME = "methodName";
	private final static String PER_IDPersona = "perIdPersona";
	public static final String TUS_CODIGO = "ctrTusTipoUso.tusCodigo";
	
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */

	//---- Redirige y crea la tabla de datos a mostrar ya sea en el browser o genera un export
	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
	/*	SecPerPersonaDAO personaDAO = new SecPerPersonaDAO();
		PersonaForm personaForm = (PersonaForm) form;
		
		//---- lista donde se guardaran los datos a mostrar
		//java.util.List<SecPerPersona> list = personaDAO.findAll(personaForm.getUsuarioConectado().getMax());
		//Aqui empieza el codigo para generar Tabla
		//TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		
		/*  PASOS PARA REALIZAR SORTING CON JMESA */
		
		/*	1. Instanciamos un objeto TableFacade a traves de TableFacadeFactory (se supone que asi es mas eficiente),
		 * 		los parametros que recibe son, el id de la tabla, y la request que se utilizara.
		 * */
		/*TableFacade tableFacade = TableFacadeFactory.createTableFacade(TABLA_ID, request);
		
		/*
		 *  2. Seteamos los atributos al table facade, esto debe hacerce justo despues de instanciar el facade por que sino,
		 *  dara error.
		 */
		//---- Genera los tipos de formas con que se podran exportar los datos
	/*	tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		/*
		 * 3. Extraemos el limite de filas qeu tendremos por "pagina", este valor es el que se setea en el combo que tiene el jmesa
		 * donde se puede elejir, 15,50,100 creo.
		 */
		/*Limit limit = tableFacade.getLimit();
		/*
		 * 4.Ahora necesitamos extreaer el total de filas que hay en la tabla, o bien en la coleccion de datos que 
		 * vamos a mostrar en el Jmesa, el metodo que se ha utilizado cuenta el numero de filas que hay en la tabla
		 * SecPerPersona. Colocamos el total de filas de la coleccion a mostrar en el Jmesa y lo seteamos al facade
		 */
	/*	int totalRows = personaDAO.getTotalRowCount();
		tableFacade.setTotalRows(totalRows);
		/*
		 * 5.Extraemos de "limit" dos valores, numero de fila con que inicia la pagina actual, y numero con que finaliza
		 * dicha pagina, por ejemplo, al hacer debug, la primera vez observaremos que rowStart = 0, y rowEnd = 15 (si el numero
		 * maximo de objetos por pagina es 15), si cambiamos de pagina, entonces veremos, rowStart = 16, y rowEnd = 30, y asi
		 * sucesivamente hasta alcanzar el valor tope, que seria totalRows.
		 */
	/*	int rowStart = limit.getRowSelect().getRowStart();
		int rowEnd = limit.getRowSelect().getRowEnd();
		/*
		 * 6. Procedemos a extraer los datos de la base utilizando rowStart y rowEnd, indicandole a traves del metodo que deseamos 
		 * extraer bloques de filas, esto es seteando el maxResults y firstResult, para mas detalle observar el metodo que se utiliza
		 *
		 */
		/*List lst = personaDAO.findAll(rowStart, rowEnd);
		/*
		 * 7.Por ultimo, y como siempre se ha hecho, se deben setear los elementos al facade
		 *
		 */
	/*	tableFacade.setItems(lst);

		//Limit limit = tableFacade.getLimit();
        if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
        request.setAttribute(Constantes.ACCION_KEY, "/persona");
        request.setAttribute("filtro", "1");*/
		return buscar(mapping, form, request, response);
	}
	
	//---- Accion que lleva a formulario de busqueda, para filtrar la tabla a mostrar
	@SuppressWarnings("unchecked")
	public ActionForward buscar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
			SecPerPersonaDAO personaDAO = new SecPerPersonaDAO(getSessionHibernate(request));
		PersonaForm personaForm = (PersonaForm)form;
		//---- lista donde se guardaran los datos a mostrar
		TableFacade tableFacade = TableFacadeFactory.createTableFacade(TABLA_ID, request);
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		int totalRows =personaDAO.getTotalRowCountPersonaByCriteria(personaForm.getPersonaH());
		tableFacade.setTotalRows(totalRows);
		int rowStart = limit.getRowSelect().getRowStart();
		int rowEnd = limit.getRowSelect().getRowEnd();
		List<SecPerPersona> lista = personaDAO.findByCriteria(personaForm.getPersonaH(), rowStart, rowEnd);
		tableFacade.setItems(lista);
        if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
        request.setAttribute(Constantes.ACCION_KEY, "/persona");
        request.setAttribute("filtro", "1");
		return mapping.findForward("lista");
		 
	}
	
	//---- Funcion que genera el html de la tabla del jmesa
	private String html(final TableFacade tableFacade, final HttpServletRequest request) {
		tableFacade.setColumnProperties("perEstado","perPrimerNombre","perGenero",
				"perDui","perNit",//"perDepartamento",
				"perMunicipio");
		Table table = tableFacade.getTable();
		
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.persona.caption");
		
		Row row = table.getRow();
		Column nombreColumna = row.getColumn("perPrimerNombre");
		nombreColumna.setTitleKey("tbl.persona.perPrimerNombre");
		
		//----- Implementamos la edicion de usuario
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				SecPerPersona persona = (SecPerPersona)item;
				
				HtmlBuilder html = new HtmlBuilder();
				
//				value = value + (isObjectNull(persona.getPerSegundoNombre())?"":(" "+persona.getPerSegundoNombre()));
//				value = value + (isObjectNull(persona.getPerTercerNombre())?"":(" "+persona.getPerTercerNombre()));
				value = persona.getPerPrimerApellido();
				value = value + (isObjectNull(persona.getPerSegundoApellido())?"":(" "+persona.getPerSegundoApellido()));
				value = value + (isObjectNull(persona.getPerApellidoCasada())?"":(" de "+persona.getPerApellidoCasada()));
				value = value + ", " + persona.getPerPrimerNombre();
				//---- Generar link para entrar a edicion
				String link = tableFacade.getWebContext().getContextPath();
				link += "/seguridad/persona.do?perId="+persona.getPerId().toString()+"&accion=agrega&boton=1";
				html.a().href().quote().append(link).quote().onclick("JavaScript:ajaxCall('"+link+"');return false;").close();
				//---- Agregamos el link con el nombre = value
				html.append(value);
				html.aEnd();
				
				return html.toString();
			}
		});
		
		nombreColumna = row.getColumn("perEstado");
		nombreColumna.setTitle("A / I");
		
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				String  value = (String)new BasicCellEditor().getValue(item, property, rowcount);
				HtmlBuilder html = new HtmlBuilder();
				if(value != null && value.equals("I")){
					html.ul().close().
						li().style("list-style-type: square; color: red;").close()
							.append("").
						liEnd().ulEnd();
					return html.toString();
				}else{
					return "";
				}
			}
		});

		nombreColumna = row.getColumn("perGenero");
		nombreColumna.setTitleKey("tbl.persona.perGenero");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				String value = (String) new BasicCellEditor().getValue(item, property, rowcount);
				value = (value.equalsIgnoreCase("F"))?getResources(request).getMessage("lbl.usuario.femenino"):getResources(request).getMessage("lbl.usuario.masculino");
				return value;
			}
			
		});
		
		nombreColumna = row.getColumn("perDui");
		nombreColumna.setTitleKey("tbl.persona.perDui");
		
		
		
		nombreColumna = row.getColumn("perNit");
		nombreColumna.setTitleKey("tbl.persona.perNit");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				String value = (String) new BasicCellEditor().getValue(item, property, rowcount);
				if(value !=null && !value.trim().equals("")){
					if(value.length()>13){
						value = value.substring(0, 4) + "-" + value.substring(4, 10) + "-" + value.substring(10, 13) + "-" + value.substring(13, 14);	
					}else{
						value = "N/A";
					}
					
				}
				else{
					value = "";
				}
				return value;
			}
			
		});

		//----- Creamos la columna de editar
		Column columnaEditar = row.getColumn("perMunicipio");
		columnaEditar.setRow(row);
		columnaEditar.setTitleKey("tbl.gnrl.accion");
		columnaEditar.getCellRenderer().setCellEditor(new CellEditor() {
			public Object getValue(Object item, String property, int rowcount) {
				SecPerPersona secPerPersona = (SecPerPersona)item;
				CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO(getSessionHibernate(request));
				HtmlBuilder html = new HtmlBuilder();
				String cel =getResources(request).getMessage("cmd.persona.correo");
				String link = tableFacade.getWebContext().getContextPath();
				link += "/seguridad/persona.do?perId="+secPerPersona.getPerId().toString()+"&accion=email";
				//html.a().href().quote().append(link).quote().close();
				html.a().href().quote().append(link).quote().append("class=\"linkMail\"").title(cel).close();
				//html.append(cel);
				html.aEnd();
				
				HtmlBuilder htmlEm = new HtmlBuilder();
				String celEm =getResources(request).getMessage("cmd.persona.emergencia");
				String linkEm = tableFacade.getWebContext().getContextPath();
				linkEm += "/seguridad/persona.do?perId="+secPerPersona.getPerId().toString()+"&accion=emergency";
				//htmlEm.a().href().quote().append(linkEm).quote().close();
				htmlEm.a().href().quote().append(linkEm).quote().append("class=\"linkEmergencia\"").title(celEm).close();
				//htmlEm.append(celEm);
				htmlEm.aEnd();

				HtmlBuilder htmlTe = new HtmlBuilder();
				String celTe =getResources(request).getMessage("cmd.persona.telefonos");
				String linkTe = tableFacade.getWebContext().getContextPath();
				linkTe += "/seguridad/persona.do?perId="+secPerPersona.getPerId().toString()+"&accion=phone";
				htmlTe.a().href().quote().append(linkTe).quote().append("class=\"linkPhone\"").title(celTe).close();
				//htmlTe.a().href().quote().append(linkTe).quote().close();
				//htmlTe.append(celTe);
				htmlTe.aEnd();
				
				HtmlBuilder htmlAs = new HtmlBuilder();
				if(asociadoDAO.findByPerId(secPerPersona.getPerId()).isEmpty()){//si no esta asociado que muestre el link
					//para asociarle
				String asoc =getResources(request).getMessage("lbl.persona.asociado");
				String linkAs = tableFacade.getWebContext().getContextPath();
				linkAs += "/asociados/asociado.do?perId="+secPerPersona.getPerId().toString()+"&accion=forwardToNuevoAscUsr";
				htmlAs.a().href().quote().append(linkAs).quote().append("class=\"linkAsoc\"").title(asoc).close();
				//htmlAs.a().href().quote().append(linkAs).quote().close();
				//htmlAs.append(asoc);
				htmlAs.aEnd();
				}
				
				if(secPerPersona.getPerEstado() != null && secPerPersona.getPerEstado().equals("A")){
					HtmlBuilder htmlSe = new HtmlBuilder();
					String celSe =getResources(request).getMessage("cmd.persona.sesion");
					String linkSe = tableFacade.getWebContext().getContextPath();
					linkSe += "/seguridad/sesion.do?perId="+secPerPersona.getPerId().toString()+"&accion=session";
					htmlSe.a().href().quote().append(linkSe).quote().append("class=\"linkSesion\"").title(celSe).close();
					//htmlSe.a().href().quote().append(linkSe).quote().close();
					//htmlSe.append(celSe);
					htmlSe.aEnd();
					return html.toString()+ " | "+htmlEm.toString()+" | " + htmlTe.toString() + " | " + htmlSe.toString() + " | " + htmlAs.toString();
				}else{
					return html.toString()+ " | "+htmlEm.toString()+" | " + htmlTe.toString() + " | " + htmlAs.toString();
				}
				
			}
		});
		//----- Fin creacion de la columna de editar
		
		return tableFacade.render();
	}
	
	//---- Funcion que genera los exports, el formato que tendran
	 private void export(final TableFacade tableFacade) {
		 tableFacade.setColumnProperties("perDui","perNit",
				 "perPrimerNombre",
				 "perPrimerApellido",
				 "perGenero","perFechaNacimiento",
				 "perLugarNacimiento","perMunicipio",
				 "secDppDepartamentoPais.dppNombre","perCalle",
				 "perColoniaBarrio","perCodigoPostal",
				 "perEstado"
		 );

			Table table = tableFacade.getTable();
			
			//---- Titulo de la tabla
			table.setCaptionKey("tbl.persona.caption");
			
			Row row = table.getRow();
			
			Column nombreColumna = row.getColumn("perPrimerNombre");
			nombreColumna.setTitleKey("tbl.persona.perPrimerNombre.export");
			
			nombreColumna = row.getColumn("perPrimerApellido");
			nombreColumna.setTitleKey("tbl.persona.perPrimerApellido.export");

			nombreColumna = row.getColumn("perGenero");
			nombreColumna.setTitleKey("tbl.persona.perGenero");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

				public Object getValue(Object item, String property, int rowcount) {
					String value = (String) new BasicCellEditor().getValue(item, property, rowcount);
					if(value.equals("F")){
						value = "Femenino";
					}else{
						value = "Masculino";
					}
					return value;
				}
				
			});
			
			nombreColumna = row.getColumn("perFechaNacimiento");
			nombreColumna.setTitleKey("tbl.persona.perFechaNacimiento");
			
			nombreColumna.getCellRenderer().setCellEditor(
					new DateCellEditor("dd-MMM-yyyy")
			);
			
			nombreColumna = row.getColumn("perLugarNacimiento");
			nombreColumna.setTitleKey("tbl.persona.perLugarNacimiento");
			
			nombreColumna = row.getColumn("perMunicipio");
			nombreColumna.setTitleKey("tbl.persona.perMunicipio");
			
			nombreColumna = row.getColumn("secDppDepartamentoPais.dppNombre");
			nombreColumna.setTitleKey("tbl.persona.perDepartamento");
			
			nombreColumna = row.getColumn("perCalle");
			nombreColumna.setTitleKey("tbl.persona.perCalle");
			
			nombreColumna = row.getColumn("perColoniaBarrio");
			nombreColumna.setTitleKey("tbl.persona.perColoniaBarrio");
			
			nombreColumna = row.getColumn("perCodigoPostal");
			nombreColumna.setTitleKey("tbl.persona.perCodigoPostal");
			
			nombreColumna = row.getColumn("perNit");
			nombreColumna.setTitleKey("tbl.persona.perNit");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

				public Object getValue(Object item, String property, int rowcount) {
					String value = (String) new BasicCellEditor().getValue(item, property, rowcount);
					if(value !=null && !value.trim().equals("")){
						value = value.substring(0, 4) + "-" + value.substring(4, 10) + "-" + value.substring(10, 13) + "-" + value.substring(13, 14);
					}
					else{
						value = "";
					}
					return value;
				}
				
			});
			
			nombreColumna = row.getColumn("perDui");
			nombreColumna.setTitleKey("tbl.persona.perDui");
			
			nombreColumna = row.getColumn("perEstado");
			nombreColumna.setTitleKey("tbl.persona.perEstado");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

				public Object getValue(Object item, String property, int rowcount) {
					String value = (String) new BasicCellEditor().getValue(item, property, rowcount);
					String value2 = value.trim();
					if(value2.equals("A")){
						value2 = "Activo";
					}else{
						value2 = "Inactivo";
					}
					return value2;
				}
				
			});
			
			tableFacade.render();
	 }
	
	//---- Accion de cancelar, que regresa a la pantalla basica de la lista 
 	public ActionForward cancelar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
 		//PersonaForm personaForm = new PersonaForm();
 		return lista(mapping, form, request, response);
	}
	
 	//---- Accion que inicia la pantalla para agregar persona
	public ActionForward agregar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		SecZonZonaDAO zonaDAO = new SecZonZonaDAO(getSessionHibernate(request));
		List zonaList = zonaDAO.findAll();
		request.setAttribute("zonaList", zonaList);
		
		SecSucSucursalDAO sucursalDAO = new SecSucSucursalDAO(getSessionHibernate(request));
		List suList = sucursalDAO.findAllActive();
		request.setAttribute("sucList", suList);
		
		SecDppDepartamentoPaisDAO departamentoPaisDAO = new SecDppDepartamentoPaisDAO(getSessionHibernate(request));
		List dppList = departamentoPaisDAO.findAll();
		request.setAttribute("dppList", dppList);
		
		//----- Variables de configuracion
		request.setAttribute(Constantes.ACCION_KEY, "/personaAccion");
		request.setAttribute("filtro", "0");
		request.setAttribute("boton", "0");
		//-- Se guarda en session que el tipo_de session es administrador
		request.getSession().setAttribute(Constantes.TIPO_SESSION_ADIMINISTRADOR,true);
		return mapping.findForward("dml");
	}
	
	//---- Accion asociada al link de edicion de la tabla, entra a pantalla de edicion
	public ActionForward editar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		PersonaForm personaForm = (PersonaForm) form;
		SecPerPersonaDAO personaDAO = new SecPerPersonaDAO(getSessionHibernate(request));
		
		SecZonZonaDAO zonaDAO = new SecZonZonaDAO(getSessionHibernate(request));
		List zonaList = zonaDAO.findAll();
		request.setAttribute("zonaList", zonaList);
		
		SecSucSucursalDAO sucursalDAO = new SecSucSucursalDAO(getSessionHibernate(request));
		List suList = sucursalDAO.findAllActive();
		request.setAttribute("sucList", suList);
		
		SecDppDepartamentoPaisDAO departamentoPaisDAO = new SecDppDepartamentoPaisDAO(getSessionHibernate(request));
		List dppList = departamentoPaisDAO.findAll();
		request.setAttribute("dppList", dppList);
		
		//---- Set de los datos de la persona seleccionada para la edicion
		personaForm.setPersonaH(personaDAO.findById(personaForm.getPerId()));
		if(personaForm.getSecDppDepartamentoPais() == null){
			//personaForm.setSecDppDepartamentoPais(new SecDppDepartamentoPais());
		}
		if(personaForm.getPerNit() !=null && !personaForm.getPerNit().trim().equals("") && personaForm.getPerNit().length() != 14){
			System.out.println(personaForm.getPerNit());
			if(!(personaForm.getPerNit().length()>13)){
				personaForm.setPerNit("N/A");
			}else{
				personaForm.setPerNit(personaForm.getPerNit().substring(0, 4) + "-" + personaForm.getPerNit().substring(4, 10) + "-" + personaForm.getPerNit().substring(10, 13) + "-" + personaForm.getPerNit().substring(13, 14));
			}
			
		}
		request.getSession().setAttribute(PER_IDPersona, personaForm.getPerId());
		//---- Variables de configuracion
		request.setAttribute("form", personaForm);
		request.setAttribute(Constantes.ACCION_KEY, "/personaAccion");
		request.setAttribute("filtro", "0");
		request.setAttribute("boton", "1");
		return mapping.findForward("dml");
	}
	
	
	private void validateCorreoLogic(List<SecCelCorreoElectronico> lstCorreo) throws Exception{
		if(lstCorreo.size() > 0) throw new InvalidAttributesException();
		
	}
	private void validateEmailPattern(String email)throws Exception{
		 String EMAIL_REGEXP = "/^[a-z0-9]+([_\\.-][a-z0-9]+)*@([a-z0-9]+([\\.-][a-z0-9]+)*)+\\.[a-z]{2,}$/i";
		 Perl5Util perl5Util = new Perl5Util();
		 if(!perl5Util.match(EMAIL_REGEXP, email)) {
			 throw new InvalidPatternException();
		 }
	}

	
	
	private void validateDuiNitLogic(List<SecPerPersona> lst)throws Exception{
		if(lst.size() > 0)throw new AlreadyExistDuiOrNitException();
		
	}
	
	private void validateEmptyCorreo(PersonaForm form,ActionErrors errors) {
		if(form.getCorreElectronico().trim().equals(""))errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.email.required"));
	}
	


	//---- Accion de guardar nueva persona, regresa a lista principal
	@SuppressWarnings("unchecked")
	public ActionForward guardarCliente(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ActionErrors errors = new ActionErrors();
		PersonaForm personaForm = (PersonaForm) form;
		if(personaForm.getPerNit().trim().length() != 14){
			mensajes("errors.persona.nitSize", personaForm, request, response);
			return agregar(mapping, form, request, response);
		}
		List<SecCelCorreoElectronico> lstCorreo = null;
		List<SecPerPersona> lstPersonas;
		personaForm.setCorreoElectronicoH(
				new SecCelCorreoElectronico(
						new SecCelCorreoElectronicoId(),"S",new Date(),personaForm.getAudUsuarioCreacion(),new Date(),personaForm.getAudUsuarioCreacion()
		));
		validateEmptyCorreo(personaForm,errors); 
		SecCelCorreoElectronicoDAO correoElectronicoDAO = new SecCelCorreoElectronicoDAO(getSessionHibernate(request));
		SecPerPersonaDAO personaDAO = new SecPerPersonaDAO(getSessionHibernate(request));
		//---- Indica inicio de las transacciones
		Transaction trx = personaDAO.getSession().beginTransaction();
		try {
			//----- Se genera el nuevo id
			validateEmailPattern(personaForm.getCorreElectronico());
			lstCorreo = correoElectronicoDAO.findByProperty("id.celCorreoElectronico",personaForm.getCorreElectronico());
			validateCorreoLogic(lstCorreo);
			lstPersonas = personaDAO.findByDuiOrNit(personaForm.getPersonaH());
			validateDuiNitLogic(lstPersonas);
			personaForm.setPerId(personaDAO.generarId());
			//---- Save realiza un insert en la tabla
			personaForm.getCorreoElectronicoH().getId().setCelCorreoElectronico(personaForm.getCorreElectronico());
			personaForm.getCorreoElectronicoH().getId().setSecPerPersona(personaForm.getPersonaH());
			personaForm.getPersonaH().getSecCelCorreoElectronicos().add(personaForm.getCorreoElectronicoH());
			personaForm.getPersonaH().setPerEstado("A");
			personaDAO.save(personaForm.getPersonaH());
			trx.commit();
			PersonaTipoSesion personaTipoSesion = new PersonaTipoSesion(personaForm.getPersonaH().getPerId(),Constantes.TIPO_SESSION_CLIENTE);
			request.getSession().setAttribute("personaSesion",personaTipoSesion);
		}catch(AlreadyExistDuiOrNitException duiNitExp){
			errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("error.dui.nit.repetido"));
		}catch(InvalidAttributesException invalidex){
			errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.email.repetido"));
		}catch(InvalidPatternException invalidPatter){
			errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.email.validPattern"));
		}catch (Exception e) {
			// TODO: handle exception
			trx.rollback();
			e.printStackTrace();
		}finally{
			personaDAO.getSession().flush();
			personaDAO.getSession().clear();
			
			
		}
		if(!errors.isEmpty()){
			saveMessages(request, errors);
			return dml(mapping, form, request, response);
		}
		return mapping.findForward("sesionLista");
	}
	public ActionForward guardarAdministrador(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ActionErrors errors = new ActionErrors();
		PersonaForm personaForm = (PersonaForm) form;
		if(personaForm.getPerNit().trim().length() != 14){
			mensajes("errors.persona.nitSize", personaForm, request, response);
			return agregar(mapping, form, request, response);
		}
		List<SecCelCorreoElectronico> lstCorreo = null;
		personaForm.setCorreoElectronicoH(
				new SecCelCorreoElectronico(
						new SecCelCorreoElectronicoId(),"S",new Date(),personaForm.getAudUsuarioCreacion(),new Date(),personaForm.getAudUsuarioCreacion()
		));
		List<SecPerPersona> lstPersonas;
		validateEmptyCorreo(personaForm,errors); 
		SecCelCorreoElectronicoDAO correoElectronicoDAO = new SecCelCorreoElectronicoDAO(getSessionHibernate(request));
		SecPerPersonaDAO personaDAO = new SecPerPersonaDAO(getSessionHibernate(request));
		Transaction trx = personaDAO.getSession().beginTransaction();
		
		try {
			//----- Se genera el nuevo id
			validateEmailPattern(personaForm.getCorreElectronico());
			lstCorreo = correoElectronicoDAO.findByProperty("id.celCorreoElectronico",personaForm.getCorreElectronico());
			validateCorreoLogic(lstCorreo);
			lstPersonas = personaDAO.findByDuiOrNit(personaForm.getPersonaH());
			validateDuiNitLogic(lstPersonas);
			personaForm.setPerId(personaDAO.generarId());
			//---- Save realiza un insert en la tabla
			personaForm.getCorreoElectronicoH().getId().setCelCorreoElectronico(personaForm.getCorreElectronico());
			personaForm.getCorreoElectronicoH().getId().setSecPerPersona(personaForm.getPersonaH());
			personaForm.getPersonaH().getSecCelCorreoElectronicos().add(personaForm.getCorreoElectronicoH());
			personaForm.getPersonaH().setPerEstado("A");
			personaDAO.save(personaForm.getPersonaH());
			trx.commit();
			/*personaSesion sirve para averiguar que tipo de sesion le quiere
				le quiere dar el administador al cliente cuando se crea
				su nuevo usuario.
			*/
			PersonaTipoSesion personaTipoSesion = new PersonaTipoSesion(personaForm.getPersonaH().getPerId(),Constantes.TIPO_SESSION_ADIMINISTRADOR);
			request.getSession().setAttribute("personaSesion",personaTipoSesion);
		}catch(InvalidAttributesException invalidex){
			errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.email.repetido"));
		}catch(AlreadyExistDuiOrNitException duiNitExp){
			errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("error.dui.nit.repetido"));
		}catch(InvalidPatternException invalidPatter){
			errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.email.validPattern"));
		}catch (Exception e) {
			// TODO: handle exception
			trx.rollback();
			e.printStackTrace();
		}finally{
			personaDAO.getSession().flush();
			personaDAO.getSession().clear();
			
			
		}
		if(!errors.isEmpty()){
			saveMessages(request, errors);
			return dml(mapping, form, request, response);
		}
		return mapping.findForward("sesionLista");
	}
	
	public ActionForward asc(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		return mapping.findForward("asc");
	}
	
	//---- Accion de guardar los cambios hecho de una edicion
	public ActionForward salvar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		PersonaForm personaForm = (PersonaForm) form;
		SecPerPersonaDAO personaDAO = new SecPerPersonaDAO(getSessionHibernate(request));
		
		//---- Inicia transaccion
		Transaction trx = personaDAO.getSession().beginTransaction();
		
		//---- Merge indica un update en la tabla
		personaDAO.merge(personaForm.getPersonaH());
		trx.commit();
		personaDAO.getSession().flush();
		personaDAO.getSession().clear();
		
		return lista(mapping, form, request, response);
	}
	
	
	
	//---- Accion que llama la pantalla de dml
	public ActionForward dml(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		SecZonZonaDAO zonaDAO = new SecZonZonaDAO(getSessionHibernate(request));
		List zonaList = zonaDAO.findAll();
		request.setAttribute("zonaList", zonaList);
		
		SecSucSucursalDAO sucursalDAO = new SecSucSucursalDAO(getSessionHibernate(request));
		List suList = sucursalDAO.findAllActive();
		request.setAttribute("sucList", suList);
		
		SecDppDepartamentoPaisDAO departamentoPaisDAO = new SecDppDepartamentoPaisDAO(getSessionHibernate(request));
		List dppList = departamentoPaisDAO.findAll();
		request.setAttribute("dppList", dppList);
		
		//----- Variables de configuracion
		request.setAttribute(Constantes.ACCION_KEY, "/personaAccion");
		request.setAttribute("filtro", "0");
		request.setAttribute("boton", "0");
		request.getSession().setAttribute(METHOD_NAME,"invalidSave");
		return mapping.findForward("dml");
	}
	
	public ActionForward redirectInvalidData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ActionErrors errors = (ActionErrors)request.getSession().getAttribute(Constantes.ERRORS);
		//----- Variables de configuracion
		String methodName = (String)request.getSession().getAttribute(METHOD_NAME);
		String forwardName = null;
		try {
			if(methodName!= null){
				Method method = this.getClass().getDeclaredMethod(methodName, 
						new Class[]{HttpServletRequest.class,HttpServletResponse.class,ActionForm.class});
				method.setAccessible(true);		
				forwardName = (String)method.invoke(this,new Object[]{request,response,form});
			}else{
				return lista(mapping, form, request, response);
			}
		} catch (Throwable e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		return mapping.findForward(forwardName);
	}
	
	
	private String invalidSave(HttpServletRequest request,HttpServletResponse response,ActionForm form){
		
		SecZonZonaDAO zonaDAO = new SecZonZonaDAO(getSessionHibernate(request));
		List zonaList = zonaDAO.findAll();
		request.setAttribute("zonaList", zonaList);
		
		SecSucSucursalDAO sucursalDAO = new SecSucSucursalDAO(getSessionHibernate(request));
		List suList = sucursalDAO.findAllActive();
		request.setAttribute("sucList", suList);
		
		SecDppDepartamentoPaisDAO departamentoPaisDAO = new SecDppDepartamentoPaisDAO(getSessionHibernate(request));
		List dppList = departamentoPaisDAO.findAll();
		request.setAttribute("dppList", dppList);
		
		ActionErrors errors = (ActionErrors)request.getSession().getAttribute(Constantes.ERRORS);
		request.getSession().removeAttribute(Constantes.ERRORS);
		request.setAttribute(Constantes.ACCION_KEY, "/personaAccion");
		request.setAttribute("filtro", "0");
		request.setAttribute("boton", "0");
		saveMessages(request, errors);
		return "dml";
	}
	
	private String invalidUpdate(HttpServletRequest request,HttpServletResponse response,ActionForm form){
		
		SecZonZonaDAO zonaDAO = new SecZonZonaDAO(getSessionHibernate(request));
		List zonaList = zonaDAO.findAll();
		request.setAttribute("zonaList", zonaList);
		
		SecSucSucursalDAO sucursalDAO = new SecSucSucursalDAO(getSessionHibernate(request));
		List suList = sucursalDAO.findAllActive();
		request.setAttribute("sucList", suList);
		
		SecDppDepartamentoPaisDAO departamentoPaisDAO = new SecDppDepartamentoPaisDAO(getSessionHibernate(request));
		List dppList = departamentoPaisDAO.findAll();
		request.setAttribute("dppList", dppList);
		
		ActionErrors errors = (ActionErrors)request.getSession().getAttribute(Constantes.ERRORS);
		PersonaForm personaForm = (PersonaForm) form;
		SecPerPersonaDAO personaDAO = new SecPerPersonaDAO(getSessionHibernate(request));
		String perId = (String)request.getSession().getAttribute(PER_IDPersona);
		//---- Set de los datos de la persona seleccionada para la edicion
		personaForm.setPersonaH(personaDAO.findById(perId));
		//---- Variables de configuracion
		request.setAttribute("form", personaForm);
		request.setAttribute(Constantes.ACCION_KEY, "/personaAccion");
		request.setAttribute("filtro", "0");
		request.setAttribute("boton", "1");
		saveMessages(request, errors);
		return "dml";
	}
	
	public ActionForward correo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		/*request.setAttribute("accion", "/correo");
		request.setAttribute("filtro", "1");*/
		return mapping.findForward("correo");
	}
	
	public ActionForward emergencia(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		/*request.setAttribute("accion", "/correo");
		request.setAttribute("filtro", "1");*/
		return mapping.findForward("emergencia");
	}
	
	public ActionForward phone(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		/*request.setAttribute("accion", "/correo");
		request.setAttribute("filtro", "1");*/
		return mapping.findForward("phone");
	}
	
	@SuppressWarnings("unchecked")
	public void  ajaxRequestWriter(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws IOException{
		PersonaForm personaForm = (PersonaForm)form;
		SecPerPersonaDAO personaDAO = new SecPerPersonaDAO(getSessionHibernate(request));
		List<SecPerPersona> lst = null;
		SecPerPersona modelPerPersona = null;
		HtmlBuilder html = new HtmlBuilder();
		String htmlString;
		Transaction trx = personaDAO.getSession().beginTransaction();
		try {
			lst = (List<SecPerPersona>)personaDAO.findByProperty("perDui",personaForm.getPerDui());
			trx.commit();
		} catch (Exception e) {
			// TODO: handle exception
			trx.rollback();
			e.printStackTrace();
		}finally{
			personaDAO.getSession().flush();
			personaDAO.getSession().clear();
			
		}
		if(lst.size() > 0){
			modelPerPersona = lst.get(0);
			String dui = modelPerPersona.getPerDui();
			String nit = modelPerPersona.getPerNit();
			if(nit!=null && !nit.trim().equals("")){
				modelPerPersona.setPerNit(
						new StringBuilder().append(nit.substring(0, 4)).append("-").
						append(nit.substring(4, 10)).append("-").
						append(nit.substring(10, 13)).append("-").
						append(nit.substring(13, 14)).toString()
				);
				 
			}
		}
		if(modelPerPersona != null){
			html.table(0).id(Constantes.TABLA_IDAJAX).close().
				tr(0).close().
					td(0).close().append(new StringBuilder().append(" Dui: ").append(modelPerPersona.getPerDui()).toString()).tdEnd().
					td(0).close().append(new StringBuilder().append(" Nit: ").append(modelPerPersona.getPerNit()).toString()).tdEnd().
				trEnd(0).
				tr(0).close().
					td(0).close().append(new StringBuilder().append(" Primer-Nombre: ").append(modelPerPersona.getPerPrimerNombre()).toString()).tdEnd().
					td(0).close().append(new StringBuilder().append(" Segundo-Nombre: ").append(modelPerPersona.getPerPrimerApellido()).toString()).tdEnd().
				trEnd(0).
			tableEnd(0);
			response.getWriter().print(html.toString());
		}else{
			html.table(0).id(Constantes.TABLA_IDAJAX).close().
				tr(0).close().
					td(0).close().append(new StringBuffer().append("No se encontr&oacute; la Persona en el sistema")).tdEnd().
				trEnd(0).tableEnd(0);
			response.getWriter().print(html.toString());
		}
	}
	
	
	public void ajaxRequestWriterCodigoUsuario(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
			PersonaForm personaForm = (PersonaForm)form;
			List<SecPerPersona> lstPersona = new ArrayList<SecPerPersona>(0);
			SecPerPersona modelPersona = null;
			SecIseInicioSesion modelSesion = null;
			if(personaForm.getCodigoUsuario() !=  null && !personaForm.getCodigoUsuario().trim().equals("")){
				SecIseInicioSesionDAO secIseInicioSesionDAO =  new SecIseInicioSesionDAO(getSessionHibernate(request));
				Transaction tx = secIseInicioSesionDAO.getSession().beginTransaction();
				try {
					modelSesion = secIseInicioSesionDAO.findById(personaForm.getCodigoUsuario().toUpperCase());
					if(modelSesion!=null)modelPersona = modelSesion.getSecPerPersona();
					tx.commit();
				} catch (Exception e) {
					// TODO: handle exception
					tx.rollback();
					e.printStackTrace();
				}finally{
					secIseInicioSesionDAO.getSession().flush();
					secIseInicioSesionDAO.getSession().clear();
					
				}
			}
			lstPersona.add(modelPersona== null?new SecPerPersona() : modelPersona);
			TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
			tableFacade.setItems(lstPersona);
			//---- Genera los tipos de formas con que se podran exportar los datos
			tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
			tableFacade.setStateAttr("restore");
			String html = (modelPersona == null ?emptyTable(tableFacade):html(tableFacade, request));
			try {
				response.getWriter().print(html);
			} catch (Exception e) {
				// TODO: handle exception
				e.printStackTrace();
			}
	}
	
	private String  emptyTable(TableFacade tableFacade){
		tableFacade.setColumnProperties("perEstado","perPrimerNombre","perGenero",
				"perDui","perNit",//"perDepartamento",
				"perMunicipio");
		Table table = tableFacade.getTable();
		
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.persona.caption");
		
		Row row = table.getRow();
		Column nombreColumna = row.getColumn("perPrimerNombre");
		nombreColumna.setTitleKey("tbl.persona.perPrimerNombre");
		
		//----- Implementamos la edicion de usuario
		
		
		nombreColumna = row.getColumn("perEstado");
		nombreColumna.setTitle("A / I");
		
		

				
		nombreColumna = row.getColumn("perDui");
		nombreColumna.setTitleKey("tbl.persona.perDui");

		
		nombreColumna = row.getColumn("perNit");
		nombreColumna.setTitleKey("tbl.persona.perNit");
		
		//----- Creamos la columna de editar
		Column columnaEditar = row.getColumn("perMunicipio");
		columnaEditar.setRow(row);
		columnaEditar.setTitleKey("tbl.gnrl.accion");
				
		return tableFacade.render();
		
	}
	/*
	public ActionForward redirectInvalidData(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		ActionErrors errors = (ActionErrors)request.getSession().getAttribute(Constantes.ERRORS);
		saveMessages(request, errors);
		return lista(mapping, form, request, response);
	}
	*/
	public void mensajes(String msg,PersonaForm form,
			HttpServletRequest request, HttpServletResponse response){
		ActionErrors errors = new ActionErrors();
		errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(msg));
        saveMessages(request, errors);
	}
	
	
	//---- Mapas usados para conectar las acciones
	protected Map<String, String> getKeyMethodMap() {
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.persona.guardarCliente", "guardarCliente");
		map.put("cmd.persona.guardarAdministrador","guardarAdministrador");
		//map.put("cmd.asc.lista","asc");
		map.put("cmd.persona.mostrar","agregar");
		map.put("cmd.persona.editar","editar");
		map.put("cmd.persona.modificar","salvar");
		map.put("cmd.persona.cancelar","cancelar");
		map.put("cmd.persona.lista", "lista");
		map.put("cmd.correo.lista","correo");
		map.put("cmd.persona.axn2","editar");
		map.put("cmd.persona.buscar", "buscar");
		map.put("cmd.persona.busqueda", "busqueda");
		map.put("cmd.persona.dml", "dml");
		map.put("cmd.emergencia.lista","emergencia");
		map.put("cmd.telefonos.lista","phone");
		map.put("cmd.persona.redirectInvalidData","redirectInvalidData");
		map.put("cmd.persona.ajaxRequestWriter","ajaxRequestWriter");
		map.put("cmd.persona.ajaxRequestWriterCodigoUsuario","ajaxRequestWriterCodigoUsuario");
		map.put("cmd.persona.nuevo", "agregar");
		return map;
	}
}