/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.inventario.struts.action;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.hibernate.Transaction;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeImpl;
import org.jmesa.limit.ExportType;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.BasicCellEditor;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.html.HtmlBuilder;

import com.cetia.sicaco.hibernate.CtrParParametros;
import com.cetia.sicaco.hibernate.CtrParParametrosDAO;
import com.cetia.sicaco.hibernate.InvArtArticulo;
import com.cetia.sicaco.hibernate.InvArtArticuloDAO;
import com.cetia.sicaco.hibernate.InvCprCapacidadProducto;
import com.cetia.sicaco.hibernate.InvCprCapacidadProductoDAO;
import com.cetia.sicaco.inventario.struts.form.CapacidadForm;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;

/** 
 * MyEclipse Struts
 * Creation date: 04-21-2008
 * 
 * XDoclet definition:
 * @struts.action path="/capacidad" name="capacidadForm" input="redirectInvalidData" parameter="accion" scope="request" validate="true"
 * @struts.action-forward name="lista" path="pagina-lista.inventario.capacidad"
 */
public class CapacidadAction extends DMLAction {
	/*
	 * Generated Methods
	 */

	public static final String TABLA_ID = "invCprCapacidadProducto";
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	//---- Redirige y crea la tabla de datos a mostrar ya sea en el browser o genera un export
	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		CapacidadForm capacidadForm = (CapacidadForm)form;
		InvCprCapacidadProductoDAO capacidadDAO = new InvCprCapacidadProductoDAO(getSessionHibernate(request));
		InvArtArticuloDAO articuloDAO = new InvArtArticuloDAO(getSessionHibernate(request));
		InvArtArticulo articulo = (InvArtArticulo) articuloDAO.findByArtCodigo(capacidadForm.getArtCodigo()).get(0);
		
		List la = capacidadDAO.findAllArtCodigo();
		request.setAttribute("listArt", la);
		
		List lb = capacidadDAO.findAllBodId();
		request.setAttribute("listBod", lb);
	    
		//Aqui empieza el cï¿½digo para generar Tabla
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(articuloDAO.findById(capacidadForm.getArtCodigo()).getInvCprCapacidadProductos());
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		
		Limit limit = tableFacade.getLimit();
        if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
        request.setAttribute(Constantes.ACCION_KEY, "/capacidad");
        request.setAttribute(Constantes.ARTICULO, articulo);
        request.setAttribute("filtro", "0");
		return mapping.findForward("lista");
		 
	}
	
	//---- Funcion que genera el html de la tabla del jmesa
	private String html(final TableFacade tableFacade, final HttpServletRequest request) {
		tableFacade.setColumnProperties("id.invBodBodegas.bodNombre",
				"cprCantidadMinima","cprCantidadMaxima","id.invArtArticulo.artCodigo");
		Table table = tableFacade.getTable();
				
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.capacidad.caption");
		
		Row row = table.getRow();
		
		Column nombreColumna = row.getColumn("id.invArtArticulo.artCodigo");
		nombreColumna.setTitle("Edici&oacute;n");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				InvCprCapacidadProducto capacidad = (InvCprCapacidadProducto)item;
				HtmlBuilder html = new HtmlBuilder();
				String del = "editar";
				//---- Generar link para entrar a edicion
				String link = tableFacade.getWebContext().getContextPath();
				link += "/inventario/capacidad.do?id.invArtArticulo.artCodigo="+capacidad.getId().getInvArtArticulo().getArtCodigo()+"&id.invBodBodegas.bodId="+capacidad.getId().getInvBodBodegas().getBodId()+"&accion=edit";
				html.a().href().quote().append(link).quote().append("class=\"linkEditar\"").title(value.toString()).close();
				//html.a().href().quote().append(link).quote().close();
				//---- Agregamos el link con el nombre = value
				//html.append(del);
				html.aEnd();
				
				return html.toString();
			}
		});
		
		Column column = row.getColumn("id.invBodBodegas.bodNombre");
		column.setTitleKey("tbl.capacidad.id.invBodBodegas.bodId");
		
		column = row.getColumn("cprCantidadMinima");
		column.setTitleKey("tbl.capacidad.cprCantidadMinima");
		
		column = row.getColumn("cprCantidadMaxima");
		column.setTitleKey("tbl.capacidad.cprCantidadMaxima");
		
		return tableFacade.render();
	}
	
	//---- Funcion que genera los exports, el formato que tendran
	 private void export(final TableFacade tableFacade) {
		 tableFacade.setColumnProperties("id.invBodBodegas.bodNombre",
				"cprCantidadMinima","cprCantidadMaxima");
		Table table = tableFacade.getTable();
				
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.capacidad.caption");
		
		Row row = table.getRow();
		
		Column column = row.getColumn("id.invBodBodegas.bodNombre");
		column.setTitleKey("tbl.capacidad.id.invBodBodegas.bodId");
		
		column = row.getColumn("cprCantidadMinima");
		column.setTitleKey("tbl.capacidad.cprCantidadMinima");
		
		column = row.getColumn("cprCantidadMaxima");
		column.setTitleKey("tbl.capacidad.cprCantidadMaxima.x");
		
		tableFacade.render();
	 }
	
	//---- Accion de cancelar, que regresa a la pantalla basica de la lista 
 	public ActionForward cancelar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		return lista(mapping, form, request, response);
	}
	
	//---- Accion asociada al link de edicion de la tabla, entra a pantalla de edicion
	public ActionForward editar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		CapacidadForm capacidadForm = (CapacidadForm)form;
		InvCprCapacidadProductoDAO capacidadDAO = new InvCprCapacidadProductoDAO(getSessionHibernate(request));
		//---- Set de los datos de la persona seleccionada para la edicion
		capacidadForm.setCapacidadProductoH(capacidadDAO.findById(capacidadForm.getId()));
		
		//---- Variables de configuracion
		request.setAttribute("form", capacidadForm);
		request.setAttribute(Constantes.ACCION_KEY, "/capacidad");
		request.setAttribute("filtro", "1");
		//request.setAttribute("boton", "1");
		return mapping.findForward("lista");
	}
	
	//---- Accion de guardar los cambios hecho de una edicion
	public ActionForward salvar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		CapacidadForm capacidadForm = (CapacidadForm)form;
		InvCprCapacidadProductoDAO capacidadDAO = new InvCprCapacidadProductoDAO(getSessionHibernate(request));
		
		//---- Inicia transaccion
		Transaction trx = capacidadDAO.getSession().beginTransaction();
		
		//---- Merge indica un update en la tabla
		capacidadDAO.merge(capacidadForm.getCapacidadProductoH());
		trx.commit();
		capacidadDAO.getSession().flush();
		capacidadDAO.getSession().clear();
		
		return lista(mapping, form, request, response);
	}
	
	//---- Elimina los datos seleccionados de la tabla
	public ActionForward reset(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		CapacidadForm capacidadForm = (CapacidadForm)form;
		InvCprCapacidadProductoDAO capacidadDAO = new InvCprCapacidadProductoDAO(getSessionHibernate(request));
		
		CtrParParametrosDAO parametrosDAO = new CtrParParametrosDAO(getSessionHibernate(request));
		CtrParParametros parCantMin = parametrosDAO.findById("MIN_CAPACIDAD_PRODUCTO");
		CtrParParametros parCantMax = parametrosDAO.findById("MAX_CAPACIDAD_PRODUCTO");
		
		//---- Inicia transaccion
		Transaction trx = capacidadDAO.getSession().beginTransaction();
		
		capacidadForm.getCapacidadProductoH().setCprCantidadMinima(parCantMin.getParValorNumber().intValue());
		capacidadForm.getCapacidadProductoH().setCprCantidadMaxima(parCantMax.getParValorNumber().intValue());
		capacidadForm.getCapacidadProductoH().setAudFechaModificacion(new Date());
		capacidadForm.getCapacidadProductoH().setAudUsuarioModificacion(capacidadForm.getUsuarioConectado().getNombreUsuario());
		
		//---- Merge indica un update en la tabla
		capacidadDAO.merge(capacidadForm.getCapacidadProductoH());
		trx.commit();
		capacidadDAO.getSession().flush();
		capacidadDAO.getSession().clear();
		
		return lista(mapping, form, request, response);
	}
	
	public ActionForward regresar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		return mapping.findForward("redirectArticulo");
	}
	
	public ActionForward listaCapacidad(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		CapacidadForm capacidadForm = (CapacidadForm)form;
		capacidadForm.setArtCodigo((String)request.getSession().getAttribute("sessionArtCodigo"));
		InvCprCapacidadProductoDAO capacidadDAO = new InvCprCapacidadProductoDAO(getSessionHibernate(request));
		InvArtArticuloDAO articuloDAO = new InvArtArticuloDAO(getSessionHibernate(request));
		
		List la = capacidadDAO.findAllArtCodigo();
		request.setAttribute("listArt", la);
		
		List lb = capacidadDAO.findAllBodId();
		request.setAttribute("listBod", lb);
	    
		//Aqui empieza el cï¿½digo para generar Tabla
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(articuloDAO.findById(capacidadForm.getArtCodigo()).getInvCprCapacidadProductos());
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		
		Limit limit = tableFacade.getLimit();
        if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
        request.setAttribute(Constantes.ACCION_KEY, "/capacidad");
        request.setAttribute("filtro", "0");
		return mapping.findForward("lista");
	}
	
	//---- Mapas usados para conectar las acciones
	protected Map<String, String> getKeyMethodMap() {
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.capacidad.lista", "lista");
		map.put("cmd.capacidad.reset","reset");
		map.put("cmd.capacidad.salvar","salvar");
		map.put("cmd.capacidad.cancelar","cancelar");
		map.put("cmd.capacidad.editar", "editar");
		map.put("cmd.capacidad.regresar", "regresar");
		map.put("cmd.capacidad.listaCapacidad", "listaCapacidad");
		return map;
	}
}