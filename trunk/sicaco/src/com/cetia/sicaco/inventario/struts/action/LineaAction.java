/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.inventario.struts.action;

import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.hibernate.Transaction;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeFactory;
import org.jmesa.facade.TableFacadeImpl;
import org.jmesa.limit.ExportType;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.BasicCellEditor;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.html.HtmlBuilder;

import com.cetia.sicaco.hibernate.InvArtArticulo;
import com.cetia.sicaco.hibernate.InvArtArticuloDAO;
import com.cetia.sicaco.hibernate.InvLinLinea;
import com.cetia.sicaco.hibernate.InvLinLineaDAO;
import com.cetia.sicaco.inventario.struts.form.LineaForm;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;

/** 
 * MyEclipse Struts
 * Creation date: 03-31-2008
 * 
 * XDoclet definition:
 * @struts.action path="/linea" name="lineaForm" input="redirectInvalidData" parameter="accion" scope="request" validate="true"
 * @struts.action-forward name="lista" path="pagina-lista.inventario.linea"
 * @struts.action-forward name="dml" path="pagina-dml.inventario.linea"
 */
public class LineaAction extends DMLAction {
	/*
	 * Generated Methods
	 */

	public static final String TABLA_ID = "invLinLinea";
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		LineaForm lineaForm = (LineaForm) form;
		InvLinLineaDAO lineaDAO = new InvLinLineaDAO(getSessionHibernate(request));
		lineaForm.setLinCodigo(lineaDAO.nextId().toString());
		lineaForm.setLinDescripcion("");
		TableFacade tableFacade = TableFacadeFactory.createTableFacade(TABLA_ID, request);
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		int totalRows = lineaDAO.getTotalRowCount();
		tableFacade.setTotalRows(totalRows);
		int rowStart = limit.getRowSelect().getRowStart();
		int rowEnd = limit.getRowSelect().getRowEnd();
		List lst = lineaDAO.findAll(rowStart, rowEnd);
		tableFacade.setItems(lst);
		/*Transaction tx = lineaDAO.getSession().beginTransaction();
		lst  = lineaDAO.findAll();
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);//, ExportType.PDF);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();*/
		if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
		request.setAttribute(Constantes.ACCION_KEY, "/linea");
        request.setAttribute("filtro", "1");
        request.setAttribute("form", lineaForm);
		return mapping.findForward("lista");
	}
	
	//---- Funcion que genera el html de la tabla del jmesa
	private String html(final TableFacade tableFacade, final HttpServletRequest request) {
		tableFacade.setColumnProperties("linCodigo","linNombre","linDescripcion","linId");
		Table table = tableFacade.getTable();
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.linea.caption");
		
		Row row = table.getRow();
		Column nombreColumna = row.getColumn("linNombre");
		nombreColumna.setTitleKey("tbl.linea.linNombre");
		
		nombreColumna = row.getColumn("linCodigo");
		nombreColumna.setTitleKey("tbl.linea.linCodigo");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				InvLinLinea linea = (InvLinLinea)item;
				
				HtmlBuilder html = new HtmlBuilder();
				String link = tableFacade.getWebContext().getContextPath();
				link += "/inventario/linea.do?linId="+linea.getLinId()+"&accion=cargarDatos";
				html.a().href().quote().append(link).quote().close();
				html.append(value);
				html.aEnd();
				
				return html.toString();
			}
		});
		
		nombreColumna = row.getColumn("linDescripcion");
		nombreColumna.setTitleKey("tbl.linea.linDescripcion");
		
		nombreColumna = row.getColumn("linId");
		nombreColumna.setTitleKey("tbl.linea.linId");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				InvLinLinea linea = (InvLinLinea)item;
				
				HtmlBuilder html = new HtmlBuilder();
				value = "eliminar";
				String link = tableFacade.getWebContext().getContextPath();
				//html.a().onclick("handlerDeleteButton1('linId="+ linea.getLinId()+ "');").id("deleteButtonId").close();
				html.a().onclick("handlerDeleteButton("+ linea.getLinId()+ ");").append("class=\"linkEliminar\"").title(value.toString()).id("deleteButtonId").close();
				//html.append(value);
				html.aEnd();
								
				return html.toString();
			}
		});
		
		return tableFacade.render();
	}
	
	//---- Funcion que genera los exports, el formato que tendran
	 private void export(final TableFacade tableFacade) {
		 tableFacade.setColumnProperties("linCodigo","linNombre","linDescripcion");
		Table table = tableFacade.getTable();
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.linea.caption.x");
		
		Row row = table.getRow();
		Column nombreColumna = row.getColumn("linNombre");
		nombreColumna.setTitleKey("tbl.linea.linNombre");
		
		nombreColumna = row.getColumn("linCodigo");
		nombreColumna.setTitleKey("tbl.linea.linCodigo.x");
		
		nombreColumna = row.getColumn("linDescripcion");
		nombreColumna.setTitleKey("tbl.linea.linDescripcion.x");

		tableFacade.render();
	}
	 
	public ActionForward guardar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		LineaForm lineaForm = (LineaForm)form;
		if(lineaForm.getLinUtilidad()< 0.0){
			mensajes("error.linea.porcentajeNegativo", request);
			lista(mapping, lineaForm, request, response);
		}
		InvLinLineaDAO lineaDAO = new InvLinLineaDAO(getSessionHibernate(request));
		Transaction tx = lineaDAO.getSession().beginTransaction();
		if(lineaDAO.findByLinNombre(lineaForm.getLinNombre()).size()>0){
			mensajes("error.linea.nombreExistente", request);
			return lista(mapping, form, request, response);
		}
		try {
			lineaForm.setLinCodigo(lineaDAO.nextId().toString());
			lineaDAO.save(lineaForm.getLineaH());
			tx.commit();
		} catch (Exception e) {
			// TODO: handle exception
			tx.rollback();
			e.printStackTrace();
		}finally{
			lineaDAO.getSession().flush();
			lineaDAO.getSession().clear();
			
		}
		return lista(mapping,new LineaForm(),request,response);
	}

	public ActionForward eliminar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		LineaForm lineaForm = (LineaForm)form;
		InvLinLineaDAO lineaDAO = new InvLinLineaDAO(getSessionHibernate(request));
		Transaction tx = lineaDAO.getSession().beginTransaction();
		try {
			lineaForm.setLineaH(lineaDAO.findById(lineaForm.getLinId2()));
			if(lineaForm.getLineaH().getInvArtArticulos().size() < 1){
				lineaDAO.delete(lineaDAO.findById(lineaForm.getLinId2()));//lineaForm.getLineaH());
				tx.commit();
			}else{
				mensajes("error.lin.hijos", request);
			}
		} catch (Exception e) {
			// TODO: handle exception
			tx.rollback();
			e.printStackTrace();
		}finally{
			lineaDAO.getSession().flush();
			lineaDAO.getSession().clear();
			
		}
		lineaForm = new LineaForm();
		return lista(mapping,lineaForm,request,response);
	}
	
	public ActionForward redirectInvalidData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		ActionErrors errors = (ActionErrors)request.getSession().getAttribute(Constantes.ERRORS);
		InvLinLineaDAO lineaDAO = new InvLinLineaDAO(getSessionHibernate(request));
		List lst = null;
		Transaction tx = lineaDAO.getSession().beginTransaction();
		lst  = lineaDAO.findAll();
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);//, ExportType.PDF);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
		request.setAttribute(Constantes.ACCION_KEY, "/linea");
        request.setAttribute("filtro", "1");
		saveMessages(request, errors);
		return mapping.findForward("lista");
	}
	
	public ActionForward redirectArticulo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		return mapping.findForward("redirectArticulo");
	}
	
	public void mensajes(String msg, HttpServletRequest request){
		ActionErrors errors = new ActionErrors();
		errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(msg));
		saveMessages(request, errors);
	}
	
	public ActionForward cargarDatos(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		LineaForm lineaForm = (LineaForm) form;
		InvLinLineaDAO lineaDAO = new InvLinLineaDAO(getSessionHibernate(request));
		lineaForm.setLineaH(lineaDAO.findById(lineaForm.getLinId()));
		List lst = null;
		Transaction tx = lineaDAO.getSession().beginTransaction();
		
		lst  = lineaDAO.findAll();
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);//, ExportType.PDF);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
		request.setAttribute(Constantes.ACCION_KEY, "/linea");
        request.setAttribute("filtro", "2");
        request.setAttribute("form", lineaForm);
		return mapping.findForward("lista");
	}
	
	public ActionForward cancelar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		return lista(mapping, new LineaForm(), request, response);
	}
	
	public ActionForward salvar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		LineaForm lineaForm = (LineaForm)form;
		if(lineaForm.getLinUtilidad()< 0.0){
			mensajes("error.linea.porcentajeNegativo", request);
			lista(mapping, lineaForm, request, response);
		}
		InvLinLineaDAO lineaDAO = new InvLinLineaDAO(getSessionHibernate(request));
		InvLinLinea lineaAnterior = lineaDAO.findById(lineaForm.getLinId());
		double porcAnterior = lineaAnterior.getLinUtilidad();
		Transaction tx = lineaDAO.getSession().beginTransaction();
		if(!lineaForm.getLinNombre().equals(lineaAnterior.getLinNombre())){
			if(lineaDAO.findByLinNombre(lineaForm.getLinNombre()).size()>0){
				mensajes("error.linea.nombreExistente", request);
				return lista(mapping, form, request, response);
			}
		}
		try {
			//lineaForm.setLinCodigo(lineaDAO.nextId().toString());
			lineaDAO.merge(lineaForm.getLineaH());
			tx.commit();
		} catch (Exception e) {
			// TODO: handle exception
			tx.rollback();
			e.printStackTrace();
		}finally{
			lineaDAO.getSession().flush();
			lineaDAO.getSession().clear();
			InvArtArticuloDAO articuloDAO = new InvArtArticuloDAO(getSessionHibernate(request));
			List lart = articuloDAO.findByLinea(lineaAnterior.getLinId());
			for (Iterator iterator = lart.iterator(); iterator.hasNext();) {
				InvArtArticulo articulo = (InvArtArticulo) iterator.next();
				if(articulo.getArtPorcentajeUtilidad() == porcAnterior){
					articulo.setArtPorcentajeUtilidad(lineaForm.getLinUtilidad());
					articulo.setArtPrecioSugerido(articulo.getArtPrecioMinimo()*(1+(articulo.getArtPorcentajeUtilidad()/100)));
					articulo.setAudFechaModificacion(new Date());
					articulo.setAudUsuarioModificacion(lineaForm.getUsuarioConectado().getNombreUsuario());
					articuloDAO.merge(articulo);
					tx.commit();
				}
			}
			
		}
		return lista(mapping,new LineaForm(),request,response);
	}
	
	
	protected Map getKeyMethodMap() {
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.linea.lista", "lista");
		map.put("cmd.linea.guardar", "guardar");
		map.put("cmd.linea.eliminar", "eliminar");
		map.put("cmd.linea.redirectInvalidData", "redirectInvalidData");
		map.put("cmd.linea.redirectArticulo", "redirectArticulo");
		map.put("cmd.linea.cargarDatos", "cargarDatos");
		map.put("cmd.linea.salvar", "salvar");
		map.put("cmd.linea.cancelar", "cancelar");
		return map;
	}
}