/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.inventario.struts.action;

import java.io.IOException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.hibernate.Transaction;
import org.jmesa.view.html.HtmlBuilder;

import com.cetia.sicaco.hibernate.CtaLprLineaPrestamo;
import com.cetia.sicaco.hibernate.CtaLprLineaPrestamoDAO;
import com.cetia.sicaco.hibernate.CtaTprTipoPrestamo;
import com.cetia.sicaco.hibernate.CtaTprTipoPrestamoDAO;
import com.cetia.sicaco.hibernate.InvTarTipoArticulo;
import com.cetia.sicaco.hibernate.InvTarTipoArticuloDAO;
import com.cetia.sicaco.hibernate.IucTutTarTpr;
import com.cetia.sicaco.hibernate.IucTutTarTprDAO;
import com.cetia.sicaco.inventario.struts.form.ArticuloTipoPrestamoForm;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;

/** 
 * MyEclipse Struts
 * Creation date: 01-31-2009
 * 
 * XDoclet definition:
 * @struts.action path="/articuloTipoPrestamo" name="articuloTipoPrestamoForm" parameter="accion" scope="request"
 * @struts.action-forward name="dml" path="pagina-dml.inventario.articuloTipoPrestamoDML"
 */
public class ArticuloTipoPrestamoAction extends DMLAction {
	
	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ArticuloTipoPrestamoForm articuloTipoPrestamoForm = (ArticuloTipoPrestamoForm) form;
		InvTarTipoArticuloDAO tipoArticuloDAO = new InvTarTipoArticuloDAO(getSessionHibernate(request));
		IucTutTarTprDAO tutTarTprDAO = new IucTutTarTprDAO(getSessionHibernate(request));
		InvTarTipoArticulo tipoArticulo = tipoArticuloDAO.findById(articuloTipoPrestamoForm.getTarId2());
		
		CtaLprLineaPrestamoDAO lprDao = new CtaLprLineaPrestamoDAO(getSessionHibernate(request));
		List lineas = lprDao.findAll();
		request.setAttribute("lineas", lineas);
		CtaTprTipoPrestamoDAO tipoPrestamoDAO = new CtaTprTipoPrestamoDAO(getSessionHibernate(request));
		List<IucTutTarTpr> l = tutTarTprDAO.findByProperty("invTarTipoArticulo.tarId", articuloTipoPrestamoForm.getTarId2());
		if(l.size()>0){
			IucTutTarTpr tut = (IucTutTarTpr)l.get(0);
			articuloTipoPrestamoForm.setIucTutTarTprH(tut);
			articuloTipoPrestamoForm.setLprId(tut.getCtaTprTipoPrestamo().getCtaLprLineaPrestamo().getLprId());
			List tprList = tipoPrestamoDAO.findByLinea(articuloTipoPrestamoForm.getLprId());
			request.setAttribute("tipoPrestamo", tprList);
		}else{
			CtaLprLineaPrestamo lpr = (CtaLprLineaPrestamo)lineas.get(0);
			List tprList = tipoPrestamoDAO.findByLinea(lpr.getLprId());
			request.setAttribute("tipoPrestamo", tprList);
		}
		request.setAttribute("tipoArticulo", tipoArticulo);
		request.setAttribute(Constantes.ACCION_KEY, "/articuloTipoPrestamo");
		return mapping.findForward("dml"); 
	}
	
	public ActionForward guardar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ArticuloTipoPrestamoForm articuloTipoPrestamoForm = (ArticuloTipoPrestamoForm) form;
		IucTutTarTprDAO tutTarTprDAO = new IucTutTarTprDAO(getSessionHibernate(request));
		Transaction tx = tutTarTprDAO.getSession().beginTransaction();
		ActionErrors errors = new ActionErrors();
		if(articuloTipoPrestamoForm.getLprId() != -1){
			if(articuloTipoPrestamoForm.getCtaTprTipoPrestamo().getTprId() != -1){
				try{
					articuloTipoPrestamoForm.getInvTarTipoArticulo().setTarId(articuloTipoPrestamoForm.getTarId2());
					if(articuloTipoPrestamoForm.getTutId() != 0){
						tutTarTprDAO.merge(articuloTipoPrestamoForm.getIucTutTarTprH());
					}else{
						tutTarTprDAO.save(articuloTipoPrestamoForm.getIucTutTarTprH());
					}
					tx.commit();
					errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.articuloPrestamo.exito"));
				}catch (Exception e) {
					tx.rollback();
					e.printStackTrace();
				}finally{
					tutTarTprDAO.getSession().flush();
					tutTarTprDAO.getSession().clear();
					
				}
			}else{
				errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.articuloPrestamo.tipoPrestamoNoSeleccionado"));
			}
		}else{
			errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("errors.proveedorOrden.lineaPrestamoNoSeleccionado"));
		}
		saveMessages(request, errors);
	return lista(mapping, form, request, response);
		 
	}
	
	public ActionForward regresar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		return mapping.findForward("regresarToTipoArticulos");
	}
	
	public ActionForward cargarTipos(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ArticuloTipoPrestamoForm putForm = (ArticuloTipoPrestamoForm)form;
		CtaTprTipoPrestamoDAO tprDao = new CtaTprTipoPrestamoDAO(getSessionHibernate(request));
		String listaResponse = "";
		try{
			if(putForm.getLprId().equals(-1)){
				listaResponse = "No hay elementos que mostrar";
			}else{
				List tpr = tprDao.findByLinea(putForm.getLprId());
				listaResponse = contruirListaTipos(tpr,request);
			}
			response.getWriter().write(listaResponse);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (RuntimeException e) {
			log.error("Error runtime", e);
		} catch (IOException e) {
			log.error(e);
		}
		return null;
	}
	
	private String contruirListaTipos(List tpr, HttpServletRequest request) {
		HtmlBuilder html = new HtmlBuilder();
		html.select().name("iucTutTarTprH.ctaTprTipoPrestamo.tprId");
		html.id("tprId").styleClass("obligatorio").close();
		for (Iterator iterator = tpr.iterator(); iterator.hasNext();) {
			CtaTprTipoPrestamo tipo = (CtaTprTipoPrestamo) iterator.next();
			html.option().value(tipo.getTprId().toString()).close().append(tipo.getTprNombre()).optionEnd();
		}
		html.selectEnd();
		return html.toString();
	}
	
	protected Map getKeyMethodMap() {
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.articuloPrestamo.lista", "lista");
		map.put("cmd.articuloPrestamo.guardar", "guardar");
		map.put("cmd.articuloPrestamo.Regresar", "regresar");
		map.put("cmd.articuloPrestamo.cargarTipos", "cargarTipos");
		return map;
	}
	
}