/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.inventario.struts.action;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.hibernate.Transaction;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeImpl;
import org.jmesa.limit.ExportType;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.BasicCellEditor;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.html.HtmlBuilder;

import com.cetia.sicaco.hibernate.InvTclTipoClasificacion;
import com.cetia.sicaco.hibernate.InvTclTipoClasificacionDAO;
import com.cetia.sicaco.inventario.struts.form.TipoClasificacionForm;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;

/** 
 * MyEclipse Struts
 * Creation date: 03-25-2008
 * 
 * XDoclet definition:
 * @struts.action path="/tipoClasificacion" name="tipoClasificacionForm" input="redirectInvalidData" parameter="accion" scope="request" validate="true"
 * @struts.action-forward name="lista" path="pagina-lista.inventario.tipoClasificacion"
 */
public class TipoClasificacionAction extends DMLAction {
	/*
	 * Generated Methods
	 */

	public static final String TABLA_ID = "invTclTipoClasificacion";
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		TipoClasificacionForm tipoClasificacionForm = (TipoClasificacionForm)form;
		tipoClasificacionForm.getTipoClasificacionH().setTclClasificacion("");
		tipoClasificacionForm.getTipoClasificacionH().setTclDescripcion("");
		InvTclTipoClasificacionDAO tipoClasificacionDAO = new InvTclTipoClasificacionDAO(getSessionHibernate(request));
		List lst = null;
		lst = tipoClasificacionDAO.findAll();
		
		//Aqui empieza el c�digo para generar Tabla
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		
		Limit limit = tableFacade.getLimit();
        if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
        request.setAttribute("form",tipoClasificacionForm);
        request.setAttribute(Constantes.ACCION_KEY,"/tipoClasificacion");
        request.setAttribute("filtro", "1");
		return mapping.findForward("lista");
		 
	}
	
	//---- Funcion que genera el html de la tabla del jmesa
	private String html(final TableFacade tableFacade, final HttpServletRequest request) {
		tableFacade.setColumnProperties("tclClasificacion","tclDescripcion","audUsuarioCreacion");
		Table table = tableFacade.getTable();
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.tipoClasificacion.caption");
		
		Row row = table.getRow();
		
		Column nombreColumna = row.getColumn("tclClasificacion");
		nombreColumna.setTitleKey("tbl.tipoClasificacion.tclClasificacion");
		
		nombreColumna = row.getColumn("tclDescripcion");
		nombreColumna.setTitleKey("tbl.tipoClasificacion.tclDescripcion");
		
		nombreColumna = row.getColumn("audUsuarioCreacion");
		nombreColumna.setTitleKey("tbl.tipoClasificacion.eliminar");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				InvTclTipoClasificacion tipoClasificacion = (InvTclTipoClasificacion)item;
				value="<u>eliminar</u>";
				HtmlBuilder html = new HtmlBuilder();
				String link = tableFacade.getWebContext().getContextPath();
				//link += "/inventario/tipoClasificacion.do?tclClasificacion="+tipoClasificacion.getTclClasificacion()+"&accion=eliminar";
				html.a().onclick("handlerDeleteButton('"+ tipoClasificacion.getTclClasificacion()+ "');").id("deleteButtonId").close();
				//html.a().href().quote().append(link).quote().close();
				html.append(value);
				html.aEnd();
				
				return html.toString();
			}
		});
	
		return tableFacade.render();
	}
	
	//---- Funcion que genera los exports, el formato que tendran
	 private void export(final TableFacade tableFacade) {
		tableFacade.setColumnProperties("tprNombre","tprId");
		Table table = tableFacade.getTable();
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.tipoProveedor.caption");
		
		Row row = table.getRow();
		Column nombreColumna = row.getColumn("tprNombre");
		nombreColumna.setTitleKey("tbl.tipoProveedor.tprNombre");
		
		tableFacade.render();
	}
	 
	public ActionForward guardar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		TipoClasificacionForm tipoClasificacionForm = (TipoClasificacionForm)form;
		InvTclTipoClasificacionDAO tipoClasificacionDAO =  new InvTclTipoClasificacionDAO(getSessionHibernate(request));
		Transaction tx = tipoClasificacionDAO.getSession().beginTransaction();
		try {
			tipoClasificacionDAO.save(tipoClasificacionForm.getTipoClasificacionH());
			tx.commit();
		} catch (Exception e) {
			// TODO: handle exception
			tx.rollback();
			e.printStackTrace();
		}finally{
			tipoClasificacionDAO.getSession().flush();
			tipoClasificacionDAO.getSession().clear();
			
		}
		return lista(mapping, form, request, response);
	}
	
	public ActionForward eliminar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		TipoClasificacionForm tipoClasificacionForm = (TipoClasificacionForm)form;
		InvTclTipoClasificacionDAO tipoClasificacionDAO =  new InvTclTipoClasificacionDAO(getSessionHibernate(request));
		Transaction tx = tipoClasificacionDAO.getSession().beginTransaction();
		try {
			tipoClasificacionForm.setTipoClasificacionH(tipoClasificacionDAO.findById(tipoClasificacionForm.getTclId()));
			tipoClasificacionDAO.delete(tipoClasificacionForm.getTipoClasificacionH());
			tx.commit();
		} catch (Exception e) {
			// TODO: handle exception
			tx.rollback();
			e.printStackTrace();
		}finally{
			tipoClasificacionDAO.getSession().flush();
			tipoClasificacionDAO.getSession().clear();
			
		}
		return lista(mapping, form, request, response);
	}
	
	public ActionForward redirectInvalidData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		TipoClasificacionForm tipoClasificacionForm = (TipoClasificacionForm)form;
		ActionErrors errors = (ActionErrors)request.getSession().getAttribute(Constantes.ERRORS);
		tipoClasificacionForm.getTipoClasificacionH().setTclClasificacion("");
		tipoClasificacionForm.getTipoClasificacionH().setTclDescripcion("");
		InvTclTipoClasificacionDAO tipoClasificacionDAO = new InvTclTipoClasificacionDAO(getSessionHibernate(request));
		List lst = null;
		lst = tipoClasificacionDAO.findAll();
		
		//Aqui empieza el c�digo para generar Tabla
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		
		Limit limit = tableFacade.getLimit();
        if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
        request.setAttribute("form",tipoClasificacionForm);
        request.setAttribute(Constantes.ACCION_KEY,"/tipoClasificacion");
        request.setAttribute("filtro", "1");
        saveMessages(request, errors);
		return mapping.findForward("lista");
		 
	}

	
	protected Map getKeyMethodMap() {
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.tipoClasificacion.lista", "lista");
		map.put("cmd.tipoClasificacion.eliminar", "eliminar");
		map.put("cmd.tipoClasificacion.guardar", "guardar");
		map.put("cmd.tipoClasificacion.redirectInvalidData", "redirectInvalidData");
		return map;
	}
}