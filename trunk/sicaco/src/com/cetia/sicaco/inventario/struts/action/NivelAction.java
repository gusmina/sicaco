/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.inventario.struts.action;

import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.hibernate.Transaction;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeImpl;
import org.jmesa.limit.ExportType;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.BasicCellEditor;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.html.HtmlBuilder;

import com.cetia.sicaco.hibernate.InvNivNivel;
import com.cetia.sicaco.hibernate.InvNivNivelDAO;
import com.cetia.sicaco.hibernate.InvStnEstante;
import com.cetia.sicaco.hibernate.InvStnEstanteDAO;
import com.cetia.sicaco.inventario.struts.form.NivelForm;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;

/** 
 * MyEclipse Struts
 * Creation date: 04-02-2008
 * 
 * XDoclet definition:
 * @struts.action path="/nivel" name="nivelForm" input="redirectInvalidData" parameter="accion" scope="request" validate="true"
 * @struts.action-forward name="lista" path="pagina-lista.inventario.nivel"
 */
public class NivelAction extends DMLAction {
	/*
	 * Generated Methods
	 */

	public static final String TABLA_ID = "invNivNivel";
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		NivelForm nivelForm= (NivelForm)form;
		InvNivNivelDAO nivelDAO = new InvNivNivelDAO(getSessionHibernate(request));
		InvStnEstanteDAO estanteDAO = new InvStnEstanteDAO(getSessionHibernate(request));
		InvStnEstante estante =  estanteDAO.findById(nivelForm.getStnId());
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(estante.getInvNivNivels());
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);//, ExportType.PDF);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
		request.setAttribute("form", nivelForm);
		request.setAttribute(Constantes.ACCION_KEY, "/nivel");
        request.setAttribute("filtro", "1");
		return mapping.findForward("lista");
		 
	}
	
	//---- Funcion que genera el html de la tabla del jmesa
	private String html(final TableFacade tableFacade, final HttpServletRequest request) {
		tableFacade.setColumnProperties("id.nivFilaId","id.nivColId","nivEstado","audFechaCreacion");
		Table table = tableFacade.getTable();
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.nivel.caption");
		
		Row row = table.getRow();
		Column nombreColumna = row.getColumn("id.nivFilaId");
		nombreColumna.setTitleKey("tbl.nivel.id.nivFilaId");
		
		nombreColumna = row.getColumn("id.nivColId");
		nombreColumna.setTitleKey("tbl.nivel.id.nivColId");
		
		nombreColumna = row.getColumn("nivEstado");
		nombreColumna.setTitleKey("tbl.nivel.nivEstado");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				InvNivNivel nivel = (InvNivNivel) item;
				if(nivel.getNivEstado().equals("A")){
					value = "Activo";
				}else{
					if(nivel.getNivEstado().equals("I")){
						value = "Inactivo";
					}else{
						value = "Lleno";
					}
				}
				HtmlBuilder html = new HtmlBuilder();
				html.append(value);
								
				return html.toString();
			}
		});
		
		nombreColumna = row.getColumn("audFechaCreacion");
		nombreColumna.setTitleKey("tbl.nivel.editar");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				InvNivNivel nivel = (InvNivNivel)item;
				
				HtmlBuilder html = new HtmlBuilder();
				value = "Editar";
				String link = tableFacade.getWebContext().getContextPath();
				link += "/inventario/nivel.do?id.nivFilaId="+nivel.getId().getNivFilaId()+"&id.nivColId="+nivel.getId().getNivColId()+"&stnId="+nivel.getId().getInvStnEstante().getStnId()+"&accion=edit";
				html.a().href().quote().append(link).quote().append("class=\"linkEditar\"").title(value.toString()).close();
				//html.a().href().quote().append(link).quote().close();
			//	html.append(value);
				html.aEnd();
								
				return html.toString();
			}
		});
		
		return tableFacade.render();
	}
	
	//---- Funcion que genera los exports, el formato que tendran
	 private void export(final TableFacade tableFacade) {
		 tableFacade.setColumnProperties("id.nivFilaId","id.nivColId","nivEstado");
			Table table = tableFacade.getTable();
			//---- Titulo de la tabla
			table.setCaptionKey("tbl.nivel.caption");
			
			Row row = table.getRow();
			Column nombreColumna = row.getColumn("id.nivFilaId");
			nombreColumna.setTitleKey("tbl.nivel.id.nivFilaId");
			
			nombreColumna = row.getColumn("id.nivColId");
			nombreColumna.setTitleKey("tbl.nivel.id.nivColId");
			
			nombreColumna = row.getColumn("nivEstado");
			nombreColumna.setTitleKey("tbl.nivel.nivEstado");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

				public Object getValue(Object item, String property, int rowcount) {
					Object value = new BasicCellEditor().getValue(item, property, rowcount);
					InvNivNivel nivel = (InvNivNivel) item;
					if(nivel.getNivEstado().equals("A")){
						value = "Activo";
					}else{
						if(nivel.getNivEstado().equals("I")){
							value = "Inactivo";
						}else{
							value = "Lleno";
						}
					}
					HtmlBuilder html = new HtmlBuilder();
					html.append(value);
									
					return html.toString();
				}
			});
			
		tableFacade.render();
	}
	 
	 public ActionForward editar(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {
		NivelForm nivelForm = (NivelForm)form;
		InvNivNivelDAO nivelDAO =  new InvNivNivelDAO(getSessionHibernate(request));
		InvStnEstanteDAO estanteDAO = new InvStnEstanteDAO(getSessionHibernate(request));
		InvStnEstante estante = estanteDAO.findById(nivelForm.getStnId());
		nivelForm.getNivelH().getId().setInvStnEstante(estante);
		nivelForm.setNivelH(nivelDAO.findById(nivelForm.getNivelH().getId()));
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(estante.getInvNivNivels());
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);//, ExportType.PDF);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade);
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
		request.setAttribute("form", nivelForm);
		request.setAttribute(Constantes.ACCION_KEY, "/nivel");
        request.setAttribute("filtro", "2");
		return mapping.findForward("lista");
	 }
	 
	 public ActionForward salvar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		NivelForm nivelForm = (NivelForm)form;
		InvNivNivelDAO nivelDAO =  new InvNivNivelDAO(getSessionHibernate(request));
		InvStnEstanteDAO estanteDAO = new InvStnEstanteDAO(getSessionHibernate(request));
		Transaction tx = nivelDAO.getSession().beginTransaction();
		try {
			InvStnEstante estante = estanteDAO.findById(nivelForm.getStnId());
			nivelForm.getNivelH().getId().setInvStnEstante(estante);
			nivelDAO.merge(nivelForm.getNivelH());
			tx.commit();
		} catch (Exception e) {
			// TODO: handle exception
			tx.rollback();
			e.printStackTrace();
		}finally{
			nivelDAO.getSession().flush();
			nivelDAO.getSession().clear();
			
		}
		return lista(mapping,form,request,response);
	}

	public ActionForward regresar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
			return mapping.findForward("redirectEstante");
	}
	
	
	protected Map getKeyMethodMap() {
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.nivel.lista", "lista");
		map.put("cmd.nivel.salvar", "salvar");
		map.put("cmd.nivel.editar", "editar");
		map.put("cmd.nivel.regresar", "regresar");
		return map;
	}
}