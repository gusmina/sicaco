/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.inventario.struts.action;

import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.hibernate.Transaction;

import com.cetia.sicaco.hibernate.HibernateSessionFactory;
import com.cetia.sicaco.hibernate.InvArtArticulo;
import com.cetia.sicaco.hibernate.InvArtArticuloDAO;
import com.cetia.sicaco.hibernate.InvBodBodegas;
import com.cetia.sicaco.hibernate.InvBodBodegasDAO;
import com.cetia.sicaco.hibernate.InvCnvConversionDAO;
import com.cetia.sicaco.hibernate.InvCprCapacidadProducto;
import com.cetia.sicaco.hibernate.InvCprCapacidadProductoDAO;
import com.cetia.sicaco.hibernate.InvCprCapacidadProductoId;
import com.cetia.sicaco.hibernate.InvEboExistenciaBodega;
import com.cetia.sicaco.hibernate.InvEboExistenciaBodegaDAO;
import com.cetia.sicaco.hibernate.InvMovMovimientos;
import com.cetia.sicaco.hibernate.InvMovMovimientosDAO;
import com.cetia.sicaco.hibernate.InvTmoTipoMovimiento;
import com.cetia.sicaco.hibernate.InvTmoTipoMovimientoDAO;
import com.cetia.sicaco.inventario.struts.form.MoverInventarioForm;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;
import com.mad.utilidades.ExportWebReport;
import com.mad.utilidades.ReportFile;

/** 
 * MyEclipse Struts
 * Creation date: 02-10-2009
 * 
 * XDoclet definition:
 * @struts.action path="/moverInventario" name="moverInventarioForm" input="redirectInvalidData" parameter="accion" scope="request" validate="true"
 * @struts.action-forward name="lista" path="pagina-lista.inventario.moverInventario"
 */
public class MoverInventarioAction extends DMLAction{
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		MoverInventarioForm moverForm = (MoverInventarioForm)form;
		
		//carga bodegas
		InvBodBodegasDAO bodegasDAO = new InvBodBodegasDAO(getSessionHibernate(request));
		List lbod = bodegasDAO.findAll();
		request.setAttribute("lBod", lbod);

		//----- Variables de configuracion
		request.setAttribute("form", moverForm);
		request.setAttribute(Constantes.ACCION_KEY, "/moverInventario");
		return mapping.findForward("lista");
	}
	
	public ActionForward cargarListaArticulos(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		MoverInventarioForm moverForm = (MoverInventarioForm)form;
		InvArtArticulo articulo = new InvArtArticulo();
		articulo.setArtCodigo(moverForm.getArtCodigo());
		articulo.setArtNombre(moverForm.getArtNombre());
		InvArtArticuloDAO articuloDAO = new InvArtArticuloDAO(getSessionHibernate(request));
		try{
			List<InvArtArticulo> listaArticulos = articuloDAO.findByCriteria2(articulo,10);
			if(listaArticulos.size()<1){
				String listaResponse = "";
				listaResponse = "<table id=\"resultadoArt\">";
				listaResponse += "<tr>";
				listaResponse += "<td><span style=\"font-size: 10px;color: red;font-style: italic;\">"
						+ "La b&uacute;squeda no gener&oacute; ning&uacute;n resultado</span></td>";
				listaResponse += "</tr></table>";
				response.getWriter().write(listaResponse);
				response.getWriter().flush();
				response.getWriter().close();
			}else{
				// Construimos una lista para el response
				String listaResponse = contruirListaArticulos(listaArticulos, moverForm,request);
				response.getWriter().write(listaResponse);
				response.getWriter().flush();
				response.getWriter().close();
			}
		} catch (RuntimeException e) {
			log.error("Error runtime", e);
		} catch (IOException e) {
			log.error(e);
		}
		return null;
	}
	
	private String contruirListaArticulos(List<InvArtArticulo> listaArticulos,
			MoverInventarioForm moverForm,HttpServletRequest request) {
		String lista = "<table id=\"resultadoArt\">";
		InvCnvConversionDAO conversionDAO = new InvCnvConversionDAO(getSessionHibernate(request));
		for (Iterator iterator = listaArticulos.iterator(); iterator.hasNext();) {
			InvArtArticulo articulo = (InvArtArticulo) iterator.next();
			InvEboExistenciaBodegaDAO eboDao = new InvEboExistenciaBodegaDAO(getSessionHibernate(request));
			Integer cantidad = eboDao.existenciaPorBodegaYArticulo(moverForm.getBodId1(), articulo.getArtCodigo());
			lista += "<tr>";
			lista += "<td><input onclick=\"JavaScript:saveSeleccionA(this.value, '" + articulo.getInvMedMedida().getMedId() + "','"+articulo.getArtCodigo()+"');\" type=\"radio\" name=\"_miseleccion\" value=\""
					+ articulo.getArtCodigo()
					+ ";"
					+ articulo.getArtNombre()
					+ "\"/></td>";
			lista += "<td><span style=\"font-size: 10px;color: #6E6E6E;font-style: italic;\">"
					+ articulo.getArtNombre()
					+ " - Disponible: "
					+ cantidad
					+ "</span></td>";
			lista += "</tr>";
		}
		lista += "</table>";
		return lista;
	}
	
	public ActionForward mover(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		MoverInventarioForm moverForm = (MoverInventarioForm)form;
		if(validarForm(moverForm, request, response)){
			InvArtArticuloDAO articuloDAO = new InvArtArticuloDAO(getSessionHibernate(request));
			InvArtArticulo articulo = articuloDAO.findById(moverForm.getArtCodigo());
			
			InvBodBodegasDAO bodegasDAO = new InvBodBodegasDAO(getSessionHibernate(request));
			InvBodBodegas bodegaSalida = bodegasDAO.findById(moverForm.getBodId1());
			InvBodBodegas bodegaEntrada = bodegasDAO.findById(moverForm.getBodId2());
			
			InvCprCapacidadProductoDAO capacidadProductoDAO = new InvCprCapacidadProductoDAO(getSessionHibernate(request));
			InvCprCapacidadProductoId cprEId = new InvCprCapacidadProductoId();
			cprEId.setInvArtArticulo(articulo);
			cprEId.setInvBodBodegas(bodegaEntrada);
			InvCprCapacidadProducto capacidadEntrada = capacidadProductoDAO.findById(cprEId);
			
			InvEboExistenciaBodegaDAO eboDao = new InvEboExistenciaBodegaDAO(getSessionHibernate(request));
			InvEboExistenciaBodega eboS = new InvEboExistenciaBodega();
			eboS = (InvEboExistenciaBodega) eboDao.findByArticulo(bodegaSalida.getBodId(), articulo).get(0);
			InvEboExistenciaBodega eboE = new InvEboExistenciaBodega();
			eboE = (InvEboExistenciaBodega) eboDao.findByArticulo(bodegaEntrada.getBodId(), articulo).get(0);
			
			if(moverForm.getCantidad() > eboS.getEboCantidadProducto()){
				mensajes("error.mi.masQueLoExistente", moverForm, request, response);
				return lista(mapping, moverForm, request, response);
			}
			if(moverForm.getCantidad() > (capacidadEntrada.getCprCantidadMaxima() - eboE.getEboCantidadProducto())){
				mensajes("error.mi.noCabe", moverForm, request, response);
				return lista(mapping, moverForm, request, response);
			}
			
			eboS.setEboCantidadProducto(eboS.getEboCantidadProducto() - moverForm.getCantidad());
			eboS.setEboSaldo(eboS.getEboCantidadProducto() * articulo.getArtPrecioMinimo());
			eboS.setAudFechaModificacion(new Date());
			eboS.setAudUsuarioModificacion(moverForm.getUsuarioConectado().getNombreUsuario());
			eboDao.merge(eboS);
			
			eboE.setEboCantidadProducto(eboE.getEboCantidadProducto() + moverForm.getCantidad());
			eboE.setEboSaldo(eboE.getEboCantidadProducto() * articulo.getArtPrecioMinimo());
			eboE.setAudFechaModificacion(new Date());
			eboE.setAudUsuarioModificacion(moverForm.getUsuarioConectado().getNombreUsuario());
			eboDao.merge(eboE);
			
			//tipo movimiento, 1 entrada, 2 salida
			InvTmoTipoMovimientoDAO tipoMovimientoDAO = new InvTmoTipoMovimientoDAO(getSessionHibernate(request));
			InvTmoTipoMovimiento entrada = tipoMovimientoDAO.findById(1);
			InvTmoTipoMovimiento salida = tipoMovimientoDAO.findById(2);
			
			InvMovMovimientosDAO movimientosDAO = new InvMovMovimientosDAO(getSessionHibernate(request));
			InvMovMovimientos movimientos = new InvMovMovimientos();
			movimientos.setAudFechaCreacion(new Date());
			movimientos.setAudFechaModificacion(new Date());
			movimientos.setAudUsuarioCreacion(eboE.getAudUsuarioModificacion());
			movimientos.setAudUsuarioModificacion(eboE.getAudUsuarioModificacion());
			movimientos.setInvArtArticulo(articulo);
			movimientos.setInvBodBodegas(bodegaSalida);
			movimientos.setMovUnidades(moverForm.getCantidad());
			movimientos.setMovValor(moverForm.getCantidad() * articulo.getArtPrecioMinimo());
			movimientos.setInvTmoTipoMovimiento(salida);
			movimientos.setMovId(movimientosDAO.nextId());
			movimientosDAO.save(movimientos);
			
			InvMovMovimientos movimientoEntrada = new InvMovMovimientos();
			movimientoEntrada.setAudFechaCreacion(new Date());
			movimientoEntrada.setAudFechaModificacion(new Date());
			movimientoEntrada.setAudUsuarioCreacion(eboE.getAudUsuarioModificacion());
			movimientoEntrada.setAudUsuarioModificacion(eboE.getAudUsuarioModificacion());
			movimientoEntrada.setInvArtArticulo(articulo);
			movimientoEntrada.setInvBodBodegas(bodegaEntrada);
			movimientoEntrada.setMovUnidades(moverForm.getCantidad());
			movimientoEntrada.setMovValor(moverForm.getCantidad() * articulo.getArtPrecioMinimo());
			movimientoEntrada.setInvTmoTipoMovimiento(entrada);
			movimientoEntrada.setMovId(movimientosDAO.nextId());
			movimientosDAO.save(movimientoEntrada);
			
			Transaction tx = movimientosDAO.getSession().beginTransaction();
			tx.commit();
			
			movimientosDAO.getSession().flush();
			movimientosDAO.getSession().clear();
			
			
			mensajes("msg.mi.exito", moverForm, request, response);
			generarComprobante(mapping, form, request, response, movimientos.getMovId(), bodegaEntrada.getBodNombre());
		}
		return lista(mapping, new MoverInventarioForm(), request, response);
	}
	
	private boolean validarForm(MoverInventarioForm moverForm, 
			HttpServletRequest request, HttpServletResponse response) {
		boolean x = true;
		ActionErrors errors = new ActionErrors();
		if(moverForm.getBodId1().equals(moverForm.getBodId2())){
			mensajes2("error.mi.bodegasIguales", moverForm, request, response, errors);
			x = false;
		}
		if(moverForm.getArtCodigo() == null || moverForm.getArtCodigo().trim().equals("")){
			mensajes2("error.mi.noArtCodigo", moverForm, request, response, errors);
			x = false;
		}else{
			InvArtArticuloDAO articuloDAO = new InvArtArticuloDAO(getSessionHibernate(request));
			InvArtArticulo articulo = articuloDAO.findById(moverForm.getArtCodigo());
			if(articulo == null || articulo.getArtNombre() == null){
				mensajes2("error.mi.codigoIncorrecto", moverForm, request, response, errors);
				x = false;
			}
		}
		if(moverForm.getCantidad() == null || moverForm.getCantidad() <= 0){
			mensajes2("error.mi.cantidadNegativa", moverForm, request, response, errors);
			x = false;
		}
		
		return x;
	}

	public void mensajes(String msg,MoverInventarioForm form,
			HttpServletRequest request, HttpServletResponse response){
		ActionErrors errors = new ActionErrors();
		errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(msg));
        saveMessages(request, errors);
	}
	
	public void mensajes2(String msg,MoverInventarioForm form,
			HttpServletRequest request, HttpServletResponse response,
			ActionErrors errors){
		errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(msg));
        saveMessages(request, errors);
	}

	public ActionForward generarComprobante(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response, Integer movId,String bodegaEntrada) {
		MoverInventarioForm moverForm = (MoverInventarioForm)form;
		
		String pathJasper="",jdbcDriver="",url,user,pass;
		
		response.setHeader("Cache-Control","private");
		response.setHeader("Pragma", "Cache");
		String nombreReporte = "Movimiento_entre_Bodegas";
		ReportFile reporte = new ReportFile();
		ServletContext servletContext = getServlet().getServletContext();
		pathJasper = servletContext
		.getRealPath("/listaReportes/movimiento_bodegas/movimiento_bodegas.jasper");
		reporte.addParameter("BODEGA_ENTRADA", bodegaEntrada);
		reporte.addParameter("MOV_ID", movId);

		System.out.println("BODEGA_ENTRADA: "+bodegaEntrada);
		System.out.println("MOV_ID: "+movId);
		
		try{
			
			jdbcDriver = "com.mysql.jdbc.Driver";
			Class.forName(jdbcDriver);
			url = HibernateSessionFactory.getConfiguration().getProperty("connection.url");
			user = HibernateSessionFactory.getConfiguration().getProperty("connection.username");
			pass = HibernateSessionFactory.getConfiguration().getProperty("connection.password");
	
			Connection con = DriverManager.getConnection(url, user, pass);
			con = DriverManager.getConnection(url, user, pass);
			
			ExportWebReport export = new ExportWebReport();
			
			reporte.setPathJasper(pathJasper);
			export.setReportFile(reporte);
			export.exportPDFWeb(nombreReporte, request, response, true, con);

		}catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	
	@Override
	protected Map getKeyMethodMap() {
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.mi.lista", "lista");
		map.put("cmd.mi.mover", "mover");
		map.put("cmd.mi.cancelar", "cancelar");
		map.put("cmd.mi.cargarListaArticulos", "cargarListaArticulos");
		return map;
	}
}