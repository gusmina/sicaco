/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.reporte.struts.action;

//import java.io.InputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletContext;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.export.JRTextExporter;
import net.sf.jasperreports.engine.export.JRTextExporterParameter;
import net.sf.jasperreports.engine.xml.JRXmlLoader;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.hibernate.Transaction;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeImpl;
import org.jmesa.limit.ExportType;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.BasicCellEditor;
import org.jmesa.view.editor.CellEditor;

import com.cetia.sicaco.hibernate.ConCueCuentaDAO;
import com.cetia.sicaco.hibernate.ConEreEstadoResultados;
import com.cetia.sicaco.hibernate.ConEreEstadoResultadosDAO;
import com.cetia.sicaco.hibernate.ConPcoPartidaContableDAO;
import com.cetia.sicaco.hibernate.CtaEtrEmpresaTrabajo;
import com.cetia.sicaco.hibernate.CtaEtrEmpresaTrabajoDAO;
import com.cetia.sicaco.hibernate.CtaTahTipoAhorro;
import com.cetia.sicaco.hibernate.CtaTahTipoAhorroDAO;
import com.cetia.sicaco.hibernate.CtrParParametrosDAO;
import com.cetia.sicaco.hibernate.HibernateSessionFactory;
import com.cetia.sicaco.hibernate.InvArtArticulo;
import com.cetia.sicaco.hibernate.InvArtArticuloDAO;
import com.cetia.sicaco.hibernate.InvBodBodegasDAO;
import com.cetia.sicaco.hibernate.InvLinLineaDAO;
import com.cetia.sicaco.hibernate.InvPexProductosExistencia;
import com.cetia.sicaco.hibernate.InvPexProductosExistenciaDAO;
import com.cetia.sicaco.hibernate.SecSucSucursalDAO;
import com.cetia.sicaco.reporte.struts.form.ReporteForm;
import com.cetia.sicaco.reporte.struts.form.ReportesForm;
import com.cetia.sicaco.struts.BasicReportExporter;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;
import com.mad.utilidades.CuentaEstadoRes;
import com.mad.utilidades.CuentasReservas;
import com.mad.utilidades.ElapsedTime;
import com.mad.utilidades.ExportReport;
import com.mad.utilidades.ExportWebReport;
import com.mad.utilidades.ReportFile;


public class ReportesAction<E> extends DMLAction{
	
	public static final String LISTA_SUCURSAL = "listaSecSucSucursal";
	public static final String LISTA_LINEA = "listaLinea";
	public static final String TABLA_ID = "invArtArticulo";
	public static final String LISTA_BODEGA = "listaBodegas";
	
	@SuppressWarnings("unchecked")
	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		ReporteForm reporteForm = (ReporteForm)form;
		SecSucSucursalDAO secSucSucursalDAO = new SecSucSucursalDAO(getSessionHibernate(request));
		List listaSucursal = secSucSucursalDAO.findAll();
		request = seleccionarFiltro(request, reporteForm.getNumR());
		if(reporteForm.getNumR() == 8){
			InvArtArticuloDAO articuloDAO = new InvArtArticuloDAO(getSessionHibernate(request));
			List lst = articuloDAO.findAll();
			TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
			tableFacade.setItems(lst);
			//---- Genera los tipos de formas con que se podran exportar los datos
			tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);//, ExportType.PDF);
			tableFacade.setStateAttr("restore");
			Limit limit = tableFacade.getLimit();
			if (limit.isExported()) {
	        	//---- exporta la tabla
	            export(tableFacade,request);
	            return null; 
	        } else {
	        	//---- genera el html de la tabla para ser mostrada
	            String html = html(tableFacade, request);
	            request.setAttribute(Constantes.LISTA_KEY, html);
	        }
		}
		if(reporteForm.getNumR() == 2){
			InvLinLineaDAO invLineaDAO = new InvLinLineaDAO(getSessionHibernate(request));
			request.setAttribute(LISTA_LINEA, invLineaDAO.findAll());
		}
		if(reporteForm.getNumR() == 8 || reporteForm.getNumR()== 9){
			InvBodBodegasDAO invBodBodegasDAO = new InvBodBodegasDAO(getSessionHibernate(request));
			request.setAttribute(LISTA_BODEGA, invBodBodegasDAO.findAll());
		}
		if(reporteForm.getNumR() == 18 || reporteForm.getNumR() == 19){
			ConCueCuentaDAO conCueCuentaDAO = new ConCueCuentaDAO(getSessionHibernate(request));
			request.setAttribute("listaConCueCuenta", conCueCuentaDAO.findAllCodNameByEstadoForEstConf(1));
		}	
		if(reporteForm.getNumR() > 19){
			CtaEtrEmpresaTrabajoDAO empresaDAO = new CtaEtrEmpresaTrabajoDAO(getSessionHibernate(request));
			List empresas = empresaDAO.findAllActivasConDepartamentos();
			CtaEtrEmpresaTrabajo empresa = new CtaEtrEmpresaTrabajo();
			empresa.setEtrId(new Integer(-1));
			empresa.setEtrNombre("- - Consolidado - -");
			empresas.add(0,empresa);
			
			request.setAttribute("listaEmpresa", empresas);
		}
			
		request.setAttribute("form", reporteForm);
		reporteForm.setNombre(reporteForm.getNumR());
		request.setAttribute(Constantes.ACCION_KEY, "/reporte");
		
		request.setAttribute(LISTA_SUCURSAL, listaSucursal);
		return mapping.findForward("lista");
	}
	
	//---- Funcion que genera el html de la tabla del jmesa
	private String html(final TableFacade tableFacade, final HttpServletRequest request) {
		tableFacade.setColumnProperties("artCodigo","artNombre","invMedMedida.medNombreMedida",
				"audFechaCreacion","invLinLinea.linNombre");
		Table table = tableFacade.getTable();
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.reporte.caption");
		
		Row row = table.getRow();
		Column nombreColumna = row.getColumn("artCodigo");
		nombreColumna.setTitleKey("tbl.reporte.artCodigo");

		nombreColumna = row.getColumn("artNombre");
		nombreColumna.setTitleKey("tbl.reporte.artNombre");

		nombreColumna = row.getColumn("invMedMedida.medNombreMedida");
		nombreColumna.setTitleKey("tbl.reporte.invMedMedida.medNombreMedida");
		
		nombreColumna = row.getColumn("audFechaCreacion");
		nombreColumna.setTitleKey("tbl.reporte.productoExistencia");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				InvArtArticulo articulo = (InvArtArticulo)item;
				InvPexProductosExistenciaDAO productosExistenciaDAO = new InvPexProductosExistenciaDAO(getSessionHibernate(request));
				List pex= productosExistenciaDAO.findByArticulo(articulo.getArtCodigo());
				if(pex.size()<1){
					log.error("error");
					value = 0;
				}else{
					InvPexProductosExistencia productosExistencia = (InvPexProductosExistencia) pex.get(0);
					value = productosExistencia.getPexCantidadProducto();
				}
				return value;
			}
		});
		
		nombreColumna = row.getColumn("invLinLinea.linNombre");
		nombreColumna.setTitleKey("tbl.reporte.linea");
		
		return tableFacade.render();
	}
	
	//---- Funcion que genera los exports, el formato que tendran
	 private void export(final TableFacade tableFacade,final HttpServletRequest request) {
		 tableFacade.setColumnProperties("artCodigo","artNombre","invMedMedida.medNombreMedida",
					"audFechaCreacion","invLinLinea.linNombre");
			Table table = tableFacade.getTable();
			//---- Titulo de la tabla
			table.setCaptionKey("tbl.reporte.caption");
			
			Row row = table.getRow();
			Column nombreColumna = row.getColumn("artCodigo");
			nombreColumna.setTitleKey("tbl.reporte.artCodigo.x");

			nombreColumna = row.getColumn("artNombre");
			nombreColumna.setTitleKey("tbl.reporte.artNombre.x");

			nombreColumna = row.getColumn("invMedMedida.medNombreMedida");
			nombreColumna.setTitleKey("tbl.reporte.invMedMedida.medNombreMedida.x");
			
			nombreColumna = row.getColumn("audFechaCreacion");
			nombreColumna.setTitleKey("tbl.reporte.productoExistencia.x");
			nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

				public Object getValue(Object item, String property, int rowcount) {
					Object value = new BasicCellEditor().getValue(item, property, rowcount);
					InvArtArticulo articulo = (InvArtArticulo)item;
					InvPexProductosExistenciaDAO productosExistenciaDAO = new InvPexProductosExistenciaDAO(getSessionHibernate(request));
					List pex= productosExistenciaDAO.findByArticulo(articulo.getArtCodigo());
					if(pex.size()<1){
						log.error("error");
						value = 0;
					}else{
						InvPexProductosExistencia productosExistencia = (InvPexProductosExistencia) pex.get(0);
						value = productosExistencia.getPexCantidadProducto();
					}
					return value;
				}
			});
			
			nombreColumna = row.getColumn("invLinLinea.linNombre");
			nombreColumna.setTitleKey("tbl.reporte.linea");
		tableFacade.render();
	}
	
	public HttpServletRequest seleccionarFiltro(HttpServletRequest request, int numR ) {
		switch(numR){
		case 1:	request.setAttribute("filtro", "1");
				request.setAttribute("filtro2", "1");
				break;
		case 5: request.setAttribute("filtro", "1");
				request.setAttribute("filtro2", "1");
				request.setAttribute("filtro3", "1");
				break;
		case 2: request.setAttribute("filtro", "2");
				request.setAttribute("filtro2", "1");
				request.setAttribute("filtro3", "2");
				break;
		case 3:request.setAttribute("filtro", "2");
				break;
		case 4: request.setAttribute("filtro", "4");
				break;
		case 11:case 13: request.setAttribute("filtro", "3");
				break;
		case 12:  request.setAttribute("filtro", "3");
				request.setAttribute("filtro2", "1");
				break;
		case 7: case 10:request.setAttribute("filtro", "2");
						request.setAttribute("filtro2", "1");
		break;
		
		case 6:request.setAttribute("filtro", "1");
		request.setAttribute("filtro2", "1");
				request.setAttribute("filtro3", "1");
				break;
		
		case 9: request.setAttribute("filtro3", "3");
				request.setAttribute("filtro2", "1");
				break;
		
		case 8: request.setAttribute("filtro3", "3");
				break;
		case 20:
			request.setAttribute("filtro3", "4");
			request.setAttribute("filtroRubro", "filtroRubro");
				break;
		case 21:case 23: request.setAttribute("filtro3", "4");
				break;
		case 22: 	request.setAttribute("filtro3", "999");
					request.setAttribute("filtro", "777");
					break;
		
		}
		/*request.setAttribute("form", rForm);
		request.setAttribute(Constantes.ACCION_KEY, "/reporte");*/
		return request;// 
	}
	@SuppressWarnings("unchecked")
	public ActionForward generar(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception{
			ActionForward forward = null;
			SecSucSucursalDAO sucursalDAO = new SecSucSucursalDAO(getSessionHibernate(request));
			CtrParParametrosDAO parametrosDAO = new CtrParParametrosDAO(getSessionHibernate(request));
			HashMap<String, Object> mapa = new HashMap<String, Object>();
			String modulo,reporteP="",pathJrxml="",pathJasper="",jdbcDriver="",url,user,pass;
			try{
				Date fechaActual = new Date();
				ReporteForm rForm = (ReporteForm) form;
				
				System.out.println("Numero Reporte: "+rForm.getNumR());
			
				SecSucSucursalDAO secSucSucursalDAO = new SecSucSucursalDAO(getSessionHibernate(request));
				///SecSucursal sucursal = secSucSucursalDAO.findById(rForm.getSucursal());
				
				response.setHeader("Cache-Control","private");
				response.setHeader("Pragma", "Cache");
				String pathReporte = "";//ruta reporte
				String nombreReporte = "";
				ExportReport exportar = null;
				ReportFile reporte = new ReportFile();
				ServletContext servletContext = getServlet().getServletContext();
				ReportFile rep = new ReportFile();
				switch(rForm.getNumR()){
					case 1://reporte de ventas del dia
					nombreReporte = "ReporteDeVentasDelDia";
					pathReporte = servletContext
					.getRealPath("/listaReportes/RepVentasDelDia/ReporteVentasDelDia.jasper");
					reporte.addParameter("FECHA", rForm.getFechaReporteD());
					reporte.addParameter("SUCURSAL",rForm.getSucursal().toString());
					reporte.addParameter("SUMARIO", rForm.getTxtSumario());
					if(rForm.getSucursal()==-1){
						reporte.addParameter("NOMBRE_SUCURSAL","CONSOLIDADO");
					}else{
						reporte.addParameter("NOMBRE_SUCURSAL", sucursalDAO.findById(rForm.getSucursal()).getSucNombre());
					}				
					break;
					
					case 2://reporte mensual de unidad y saldos de inventario
					nombreReporte = "RepVentayCostodeVentaInventario";
					if(rForm.getLinId()== - 1){
						pathReporte = servletContext
						.getRealPath("/listaReportes/RepVentaYCostoDeVentaInventario/ReporteDeVentaYCostoDeVentaInventario.jasper");
					}else{
						pathReporte = servletContext
						.getRealPath("/listaReportes/RepVentaYCostoDeVentaInventario/RepDeVentaYCostoDeVentaInventario_xLinea.jasper");
						reporte.addParameter("LINEA", rForm.getLinId());
					}				
					reporte.addParameter("FECHA_INI", rForm.getFechaIniD());
					reporte.addParameter("FECHA_FIN", rForm.getFechaFinD());
					reporte.addParameter("SUCURSAL",rForm.getSucursal());
					if(rForm.getSucursal()==-1){
						reporte.addParameter("NOMBRE_SUCURSAL","CONSOLIDADO");
					}else{
						reporte.addParameter("NOMBRE_SUCURSAL", sucursalDAO.findById(rForm.getSucursal()).getSucNombre());
					}	
					break;
					
					case 3://reporte de venta y costo de venta por periodo
					nombreReporte = "ReporteVenta&CostoVentaPorPeriodo";
					pathReporte = servletContext
					.getRealPath("/listaReportes/RepVentaPorPeriodo/ReporteDeVentaPorPeriodo.jasper");
					reporte.addParameter("FECHA_INI", rForm.getFechaIniD());
					reporte.addParameter("FECHA_FIN", rForm.getFechaFinD());
					break;

					case 4: //informe de Ventas por asociado y fecha
					
					if(rForm.getTipoDeDocumento().equals("AC")){
					nombreReporte = "ReporteVentasConsolidado";
					pathReporte = servletContext
					.getRealPath("/listaReportes/RepVentasxDiaConsolidado/InformeDeVentas.jasper");
					}else{
					nombreReporte = "ReporteVentasConsolidado"+rForm.getTipoDeDocumento();
					pathReporte = servletContext
					.getRealPath("/listaReportes/RepVentasxDiaConsolidado/RepDeVentasConsolidPorAsocYFecha.jasper");
					reporte.addParameter("TIPO_DE_DOCUMENTO", rForm.getTipoDeDocumento());	
					}
					reporte.addParameter("FECHA_INI", rForm.getFechaIniD());
					reporte.addParameter("FECHA_FIN", rForm.getFechaFinD());
					break;
						
					case 5: //reporte detalle de venta del dia
					nombreReporte = "DetalleDeVentaDelDia";
					pathReporte = servletContext
					.getRealPath("/listaReportes/RepDetalleVentaDelDia/DetalleDeVentaDelDia.jasper");
					reporte.addParameter("FECHA", rForm.getFechaReporteD());
					reporte.addParameter("TEXTO_AUX_TITULO", rForm.getTxtAuxiliar());
					reporte.addParameter("SUMARIO", rForm.getTxtSumario());
					reporte.addParameter("SUCURSAL",rForm.getSucursal().toString());
					if(rForm.getSucursal()==-1){
						reporte.addParameter("NOMBRE_SUCURSAL","CONSOLIDADO");
					}else{
						reporte.addParameter("NOMBRE_SUCURSAL", sucursalDAO.findById(rForm.getSucursal()).getSucNombre());
					}	
					break;
					
					case 6: //reporte detalle de costo del dia
					nombreReporte = "DetCostoDelDia";
					pathReporte = servletContext
					.getRealPath("/listaReportes/DetCostoDelDia/DetCostoDelDia.jasper");
					reporte.addParameter("FECHA", rForm.getFechaReporteD());
					reporte.addParameter("TEXTO_AUX_TITULO", rForm.getTxtAuxiliar());
					reporte.addParameter("SUMARIO", rForm.getTxtSumario());
					reporte.addParameter("SUCURSAL",rForm.getSucursal().toString());
					if(rForm.getSucursal()==-1){
						reporte.addParameter("NOMBRE_SUCURSAL","CONSOLIDADO");
					}else{
						reporte.addParameter("NOMBRE_SUCURSAL", sucursalDAO.findById(rForm.getSucursal()).getSucNombre());
					}
					
					break;
					
					case 7://reporte de costo de inventario
					nombreReporte = "Reporte de Costo de Inventario";
					pathReporte = servletContext
					.getRealPath("/listaReportes/RepCostoInventario/ReporteDeCostoDeInventario.jasper");
					reporte.addParameter("FECHA_INI", rForm.getFechaIniD());
					reporte.addParameter("FECHA_FIN", rForm.getFechaFinD());
					reporte.addParameter("SUCURSAL",rForm.getSucursal());
					if(rForm.getSucursal()==-1){
						reporte.addParameter("NOMRE_SUCURSAL","CONSOLIDADO");
					}else{
						reporte.addParameter("NOMRE_SUCURSAL", sucursalDAO.findById(rForm.getSucursal()).getSucNombre());
					}	
					break;
					
					case 8://reporte de levantamiento fisico de inventario
					nombreReporte = "Levantamiento de Inventario";
					pathReporte = servletContext
					.getRealPath("/listaReportes/RepLevantamientoDeInventario/levantamientoFisico.jasper");
					reporte.addParameter("BODEGA", rForm.getBodId());
					break;
					
					case 9://reporte de Costo para Contabilidad
					nombreReporte = "Reporte de Saldos y Costos para Contabilidad";
					pathReporte = servletContext
					.getRealPath("/listaReportes/RepSaldosDeInventarioConta/repSaldosInventarioParaConta.jasper");
					reporte.addParameter("TEXT_AUX_TITULO", rForm.getTxtAuxiliar());
					reporte.addParameter("BODEGA", rForm.getBodId());
					reporte.addParameter("SUCURSAL",rForm.getSucursal());
					if(rForm.getSucursal()==-1){
						reporte.addParameter("NOMBRE_SUCURSAL","CONSOLIDADO");
					}else{
						reporte.addParameter("NOMBRE_SUCURSAL", sucursalDAO.findById(rForm.getSucursal()).getSucNombre());
					}	
					break;//este esta pendiende de modificacion.
					
					
					case 10://reporte de movimiento de inventario por articulo y fecha
					nombreReporte = "ReporteDeMovimientoPorArticuloYFecha";
					pathReporte = servletContext
					.getRealPath("/listaReportes/RepMovimientoPorArtYFecha/ReporteDeMovimientoPorArticuloYFecha.jasper");
					reporte.addParameter("FECHA_INI", rForm.getFechaIniD());
					reporte.addParameter("FECHA_FIN", rForm.getFechaFinD());
					reporte.addParameter("SUCURSAL",rForm.getSucursal());
					if(rForm.getSucursal()==-1){
						reporte.addParameter("NOMBRE_SUCURSAL","CONSOLIDADO");
					}else{
						reporte.addParameter("NOMBRE_SUCURSAL", sucursalDAO.findById(rForm.getSucursal()).getSucNombre());
					}
					
					break;

					case 11://Libro de Compras
					nombreReporte = "Libro De Compra";
					pathReporte = servletContext
					.getRealPath("/listaReportes/RepLibroDeCompra/LibroDeCompra.jasper");
					reporte.addParameter("MES", rForm.getMes());
					reporte.addParameter("NOMBRE_MES", nombreMes(rForm.getMes()));
					reporte.addParameter("ANIO", rForm.getAnio());
					reporte.addParameter("FECHA_DE_PRESENTACION", rForm.getFechaDePresentacionD());
					break;
					
					case 12://Libro de Venta a Consumidor Final
						
					if(rForm.getSucursal()== - 1){
							String pathReporte2 = servletContext.getRealPath("/listaReportes/RepLibroVentaConsumidorFinal");
							nombreReporte = "LibroVentasConsumidorFinal(Consolidado)";
							pathReporte = servletContext
							.getRealPath("/listaReportes/RepLibroVentaConsumidorFinal/LibroDeVentaConsumidorFinal.jasper");
							reporte.addParameter("SUBREPORT_DIR",pathReporte2 + "/");
					}else{//reporte por sucursal
						nombreReporte = "LibroDeVentasConsumidorFinal(Sucursal)";
						pathReporte = servletContext
						.getRealPath("/listaReportes/RepLibroVentaConsumidorFinal/LibroDeVentaConsumidorFinal_subreportAEROMAN.jasper");
						reporte.addParameter("SUCURSAL",rForm.getSucursal().toString());
						reporte.addParameter("NOMBRE_SUCURSAL", sucursalDAO.findById(rForm.getSucursal()).getSucNombre());
					}
					reporte.addParameter("MES", rForm.getMes());
					reporte.addParameter("ANIO", rForm.getAnio());
					reporte.addParameter("NOMBRE_MES", nombreMes(rForm.getMes()));
					reporte.addParameter("FECHA_DE_PRESENTACION", rForm.getFechaDePresentacionD());
					break;//este esta pendiende de modificacion.
					
					case 13://Libro de Ventas Constribuyentes
						//Conexion a BD
						jdbcDriver = "com.mysql.jdbc.Driver";
						Class.forName(jdbcDriver);
						url = HibernateSessionFactory.getConfiguration().getProperty("connection.url");
						user = HibernateSessionFactory.getConfiguration().getProperty("connection.username");
						pass = HibernateSessionFactory.getConfiguration().getProperty("connection.password");
						
						Connection con = DriverManager.getConnection(url, user, pass);
						nombreReporte = "Libro De Ventas Contribuyentes";
						pathReporte = servletContext
						.getRealPath("/listaReportes/RepVentasAContribuyente/LibroDeVentasContribuyente.jasper");
						pathJrxml = servletContext
						.getRealPath("/listaReportes/RepVentasAContribuyente/LibroDeVentasContribuyente.jrxml");
						
						
						ExportWebReport export = new ExportWebReport();
						
						rep.addParameter("MES", rForm.getMes());
						rep.addParameter("NOMBRE_MES", nombreMes(rForm.getMes()));
						rep.addParameter("ANIO", rForm.getAnio());
						rep.addParameter("FECHA_DE_PRESENTACION", rForm.getFechaDePresentacionD());
						
						rep.setPathJasper(pathReporte);
						rep.setPathReport(pathJrxml);
						
						try{
							export.setReportFile(rep);
							export.exportPDFWeb("LibroDeVentasContribuyentes", request, response, true, con);
						}catch (Exception e) {
								e.printStackTrace();
						}
						return forward;
						//break;//este esta pendiende de modificacion.
					case 14:
						generarReporteBalanzaComprobacion(mapping, form, request,response);
						return forward;
					case 15:case 16:
						if(rForm.getNumR()==15){
							//reporte de ESTADO RESULTADOS
							nombreReporte = "EstadoDeResultados";
							pathReporte = servletContext
							.getRealPath("/reportesContabilidad/estadoDeResultados/ESTADO_RESULTADOS.jasper");
//							System.out.println("Path Reporte:"+pathReporte);
							
							SimpleDateFormat sdf = new SimpleDateFormat("yyyy");
							SimpleDateFormat sdf2 = new SimpleDateFormat("dd-MM-yyyy");
							SimpleDateFormat sdf3 = new SimpleDateFormat("MM");
							SimpleDateFormat sdd = new SimpleDateFormat("dd");
							
							String nombreMes = nombreMes(sdf3.format(sdf2.parse(rForm.getFechaIni())));
							String inicio = "Enero"; 
							if(sdf.format(sdf2.parse(rForm.getFechaIni())).equalsIgnoreCase("2010") )inicio = "Marzo";
							
							Date fechaFin = getUltimoDiaDeMes(
									new Integer(sdf3.format(sdf2.parse(rForm.getFechaIni()))), 
									new Integer(sdf.format(sdf2.parse(rForm.getFechaIni()))));
							
							
							String fechaL = 
									"del 01 de "+inicio
									+" al "+sdd.format(fechaFin)+" de "+nombreMes+" de "+sdf.format(sdf2.parse(rForm.getFechaIni()));
							
							reporte.addParameter("OP",new Integer(rForm.getMes()));
							reporte.addParameter("FECHAL",fechaL.toUpperCase());
							
							
							/**
							 * 
							 * 10 de Junio de 2010 se reemplaza el procedimiento almacenado para calcular el
							 * estado de resultados por estar demasiado alejado del requerimiento real, este
							 * es el codigo generado para sustituirlo
							 * 
							 * **/
							
							//Obtenemos la configuracion
							ConEreEstadoResultadosDAO ereDAO = new ConEreEstadoResultadosDAO(getSessionHibernate(request));
							Transaction tx = ereDAO.getSession().beginTransaction();
							List<CuentaEstadoRes> conf = ereDAO.getConf(sdf3.format(sdf2.parse(rForm.getFechaIni())), sdf.format(sdf2.parse(rForm.getFechaIni())));
							
							//eliminamos el estado de resultados anterior si se ha generado alguno...
							ereDAO.deleteAll();
							//La lista conf contiene la lista de las cuentas que se han agregado en la configuracion
							
							Iterator i = conf.iterator();
							Double ban1=0.0, ban2=0.0,ban3=0.0,ban4=0.0,ban5=0.0,ban6=0.0, ban7=0.0;
							Boolean b1=false,b2=false,b3=false,b4=false,b5=false, b6=false,b7=false;
							Boolean exeB=false,exeO=false,exeAR=false,exePD=false;
							Boolean l1=false,l2=false,l3=false,l4=false,l5=false, l6=false,l7=false;
							Integer pl1=0,pl2=0,pl3=0,pl4=0,pl5=0, pl6=0,pl7=0;
							ArrayList<ConEreEstadoResultados> lineas = new ArrayList<ConEreEstadoResultados>();
							int lineaAct=0, pos1=0,pos2=0,pos3=0,pos4=0,pos5=0,pos7=0,posexeB=0, posexeO=0, posexeAR=0, posexePD=0;
							while(i.hasNext()){
								CuentaEstadoRes res = (CuentaEstadoRes) i.next();
								switch (res.getCetBan()) {
								case 1:
									//Productos
									if(!b1){
										b1=true;
										pos1=lineaAct;
										ConEreEstadoResultados productos = new ConEreEstadoResultados(); 
										productos.setCueNombre("PRODUCTOS");
										lineas.add(productos);
										lineaAct++;
									}
									
									ConEreEstadoResultados p = new ConEreEstadoResultados();
									p.setCueNombre("     "+res.getCueNombre());
									p.setBanda1(res.getSaldo());
									lineas.add(p);
									
									
									ban1+=res.getSaldo();
									lineaAct++;
									break;
									
								case 2:
									//Ventas
									if(!l1){
										l1=true;
										pl1=lineaAct-1;
//										sencilla
									}
									
									if(!b2){
										b2=true;
										pos2=lineaAct;
										ConEreEstadoResultados ventas = new ConEreEstadoResultados(); 
										ventas.setCueNombre("VENTAS");
										lineas.add(ventas);
										lineaAct++;
									}
									
									ConEreEstadoResultados v = new ConEreEstadoResultados();
									v.setCueNombre("     "+res.getCueNombre());
									v.setBanda1(res.getSaldo());
									lineas.add(v);
									
									ban2+=res.getSaldo();
									lineaAct++;
									break;
									
								case 3:
									//Costo de ventas
									
									if(!l2){
										l2=true;
										pl2=lineaAct-1;
//										sencilla
									}
									
									if(!b3){
										b3=true;
										pos3=lineaAct;
										ConEreEstadoResultados cventas = new ConEreEstadoResultados(); 
										cventas.setCueNombre("(-) COSTO DE VENTAS ");
										lineas.add(cventas);
										lineaAct++;
									}
									
									ConEreEstadoResultados cv = new ConEreEstadoResultados();
									cv.setCueNombre("     "+res.getCueNombre());
									cv.setBanda1(res.getSaldo());
									lineas.add(cv);
									
									ban3+=res.getSaldo();
									lineaAct++;
									break;
								case 4:									
									//Gastos de operacion
									if(!l3){
										l3=true;
										pl3=lineaAct-1;
									}
									if(!exeB){
										exeB=true;
										posexeB=lineaAct;
										ConEreEstadoResultados brutos = new ConEreEstadoResultados(); 
										brutos.setCueNombre("EXCEDENTES BRUTOS ");
										brutos.setSubrayado(2);
										lineas.add(brutos);
										lineaAct++;
									}
									
									if(!b4){
										b4=true;
										pos4=lineaAct;
										ConEreEstadoResultados ventas = new ConEreEstadoResultados(); 
										ventas.setCueNombre("(-) GASTOS DE OPERACION");
										lineas.add(ventas);
										lineaAct++;
									}
									
									ConEreEstadoResultados go = new ConEreEstadoResultados();
									go.setCueNombre("     "+res.getCueNombre());
									go.setBanda1(res.getSaldo());
									lineas.add(go);
									
									ban4+=res.getSaldo();
									lineaAct++;
									break;
								case 5:
									//Otros Ingresos (+)
									if(!l4){
										l4=true;
										pl4=lineaAct-1;
									}
									
									if(!exeO){
										exeO=true;
										posexeO=lineaAct;
										ConEreEstadoResultados  operacion = new ConEreEstadoResultados(); 
										operacion.setCueNombre("EXCEDENTES DE OPERACION ");
										operacion.setSubrayado(2);
										lineas.add(operacion);
										lineaAct++;
									}
									
									if(!b5){
										b5=true;
										pos5=lineaAct;
										ConEreEstadoResultados ventas = new ConEreEstadoResultados(); 
										ventas.setCueNombre("(+) OTROS INGRESOS ");
										lineas.add(ventas);
										lineaAct++;
									}
									
									ConEreEstadoResultados oi1 = new ConEreEstadoResultados();
									oi1.setCueNombre("     "+res.getCueNombre());
									oi1.setBanda1(res.getSaldo());
									lineas.add(oi1);
									
									ban5+=res.getSaldo();
									lineaAct++;
									break;
								case 6:
									//Otros Ingresos (-)
									ConEreEstadoResultados oi2 = new ConEreEstadoResultados();
									oi2.setCueNombre("     "+res.getCueNombre());
									oi2.setBanda1(res.getSaldo());
									lineas.add(oi2);
									
									ban6+=res.getSaldo();
									lineaAct++;
									break;
									//Reservas
								default:
									break;
								}
								
							} //END WHILE
							
							if(!exeAR){
								exeAR=true;
								pl5=lineaAct-1;
								posexeAR=lineaAct;
								ConEreEstadoResultados  antesRes = new ConEreEstadoResultados(); 
								antesRes.setCueNombre("EXCEDENTES ANTES DE RESERVAS");
								antesRes.setSubrayado(2);
								lineas.add(antesRes);
								lineaAct++;
							}
							if(!b7){
								b7=true;
								pos7=lineaAct;
								ConEreEstadoResultados ventas = new ConEreEstadoResultados(); 
								ventas.setCueNombre("(-) RESERVAS ");
								lineas.add(ventas);
								lineaAct++;
							}
							
							
							List porcReservas = ereDAO.getReservas();
							Iterator pri = porcReservas.iterator();
							CuentasReservas res = new CuentasReservas();
							double saldo= 0.0; 
							while(pri.hasNext()){
								res = (CuentasReservas) pri.next();
								ConEreEstadoResultados reservas = new ConEreEstadoResultados();
								reservas.setCueNombre("     "+res.getNombre());
								saldo = (res.getPorc()*( ((ban1+ban2-ban3)-ban4) + (ban5-ban6) ))/100;
								reservas.setBanda1(saldo);
								lineas.add(reservas);
								ban7+=saldo;
								
								lineaAct++;
							}
							pl6=lineaAct-1;
							int linea2=0;
							Iterator<ConEreEstadoResultados> lineasI = lineas.iterator();
							
							while(lineasI.hasNext()){
								
								ConEreEstadoResultados resFinal = new ConEreEstadoResultados();
								resFinal = lineasI.next();
								if(linea2==pl1) resFinal.setSubrayado(1);
								if(linea2==pl2) resFinal.setSubrayado(1);
								if(linea2==pl3) resFinal.setSubrayado(1);
								if(linea2==pl4) resFinal.setSubrayado(1);
								if(linea2==pl5) resFinal.setSubrayado(1);
								if(linea2==pl6) resFinal.setSubrayado(1);
								if(linea2 ==pos1){
									resFinal.setBanda2(ban1); //Productos
								}
								if(linea2 ==pos2){
									resFinal.setBanda2(ban2);//Ventas
								}
								if(linea2 ==pos3){
									resFinal.setBanda2(ban3); //costo de ventas
								}
								if(linea2 ==pos4){
									resFinal.setBanda2(ban4);//gastos de operacion
								}
								if(linea2 ==pos5){
									resFinal.setBanda2(ban5-ban6); //otros ingresos (+) otros ingresos (-)
								}
								if(linea2 ==pos7){
									resFinal.setBanda2(ban7); //reservas
								}
								if(linea2 ==posexeB){
									resFinal.setBanda2(ban1+ban2-ban3); //exedentesBrutos
								}
								if(linea2 ==posexeO){
									resFinal.setBanda2( (ban1+ban2-ban3)-ban4) ; //exedentes de operacion
								}
								if(linea2 ==posexeAR){
									resFinal.setBanda2( ((ban1+ban2-ban3)-ban4) + (ban5-ban6)) ; //exedentes antes de reservas
								}
								ereDAO.save(resFinal);
								tx.commit();
								ereDAO.getSession().flush();
								ereDAO.getSession().clear();
							linea2++;
							}
							ConEreEstadoResultados  pod = new ConEreEstadoResultados(); 
							pod.setCueNombre("EXCEDENTES POR DISTRIBUIR");
							pod.setBanda2(((ban1+ban2-ban3)-ban4) + (ban5-ban6)-ban7);
							pod.setSubrayado(2);
							ereDAO.save(pod);
							tx.commit();
							ereDAO.getSession().flush();
							ereDAO.getSession().clear();
							
							
							
						}else{//reporte balance general
							nombreReporte = "Balance General";
							pathReporte = servletContext
							.getRealPath("/listaReportes/libroMayor/balance_general.jasper");
						}
						if(rForm.getFechaIniD() ==null){
							reporte.addParameter("FECHA", new Date());
						}else reporte.addParameter("FECHA", rForm.getFechaIniD());
						reporte.addParameter("GERENTE", parametrosDAO.findById("GERENTE").getParValorString());
						reporte.addParameter("JUNTAVIG", parametrosDAO.findById("JUNTAVIG").getParValorString());
						reporte.addParameter("TESORERO",parametrosDAO.findById("TESORERO").getParValorString());
						reporte.addParameter("CONSEJOADMON",parametrosDAO.findById("CONSEJOADMON").getParValorString());
						reporte.addParameter("CONTADOR", parametrosDAO.findById("CONTADOR").getParValorString());
						break;
						
					case 17://Renta_Asociados
						nombreReporte = "renta_asociados";
						pathReporte = servletContext
						.getRealPath("/listaReportes/renta_asociados/renta_asociados.jrxml");
						FileInputStream input = new FileInputStream(new File(pathReporte));
						//Conexion jdbc normal
						jdbcDriver = "com.mysql.jdbc.Driver";
						Class.forName(jdbcDriver);
						url = HibernateSessionFactory.getConfiguration().getProperty("connection.url");
						user = HibernateSessionFactory.getConfiguration().getProperty("connection.username");
						pass = HibernateSessionFactory.getConfiguration().getProperty("connection.password");
	

						con = DriverManager.getConnection(url, user, pass);
						JasperDesign jd = JRXmlLoader.load(input);
						JasperReport jr = JasperCompileManager.compileReport(jd);
						JasperPrint jp = JasperFillManager.fillReport(jr, null, con);

						//EXPORT A TXT
						response.setHeader("Cache-Control","private");
						response.setHeader("Pragma", "Cache");
						response.setContentType("application/text");
						response.setHeader("content-Disposition", "attachment;filename=" +nombreReporte + fechaActual.getTime() + ".txt");

						//JRCsvExporter csv = new JRCsvExporter();
						JRTextExporter csv = new JRTextExporter();
						
						
				        csv.setParameter(JRExporterParameter.JASPER_PRINT, jp);
				        csv.setParameter(JRExporterParameter.OUTPUT_STREAM, response.getOutputStream());
				        //csv.setParameter(JRCsvExporterParameter.FIELD_DELIMITER, ";");
				        //csv.setParameter(JRTextExporterParameter.CHARACTER_WIDTH, 1);//text exporter
				        //csv.setParameter(JRTextExporterParameter.CHARACTER_HEIGHT, 0);//text exporter
				        csv.setParameter(JRTextExporterParameter.PAGE_HEIGHT, 68);//text exporter
				        csv.setParameter(JRTextExporterParameter.PAGE_WIDTH, 90);//text exporter
				        
				        //PAGE_HEIGHT 
				        
				        csv.exportReport();
				        
						break;//este esta pendiende de modificacion.
					case 18:
						modulo = rForm.getNumR()==18?"movimientosCuentas":"libro_auxiliar_mayor";
						reporteP = rForm.getNumR()==18?"reporteMovEnCuentaContable":"libro_auxiliar_mayor";
						pathJrxml = servletContext.getRealPath("/listaReportes/"
								+ modulo + "/" + reporteP + ".jrxml");
						pathJasper = servletContext.getRealPath("/listaReportes/"
								+ modulo + "/" + reporteP + ".jasper");
						/*nombreReporte = rForm.getNumR()==18?"Movimientos contables":"Libro Diario";
						*/
						
						int dias = new Integer(rForm.getFechaReporte().substring(0, 2)) - 1;
						ElapsedTime elapT = new ElapsedTime();
						Date fechaIni = elapT.obtenerFecha(rForm.getFechaReporteD(), -dias);
				
						
						//mapa.put("FECHA_INI_MOV", fechaIni);
						mapa.put("FECHA_INI_MOV", rForm.getFechaIniD());
						mapa.put("FECHA_FIN_MOV", rForm.getFechaReporteD());
						mapa.put("CUENTA_INI", rForm.getCueId1());
						mapa.put("CUENTA_FIN", rForm.getCueId2());		
						
						break;
						
					case 19:
						modulo ="libro_auxiliar_mayor";
						reporteP ="libro_auxiliar_mayor";
						pathJrxml = servletContext.getRealPath("/listaReportes/"
								+ modulo + "/" + reporteP + ".jrxml");
						pathJasper = servletContext.getRealPath("/listaReportes/"
								+ modulo + "/" + reporteP + ".jasper");
						
						rep = new ReportFile();
						//rForm.get
						String fecha = rForm.getFechaReporte();
						SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
						Date fecha1;
						if(fecha.equals("")|| fecha.length() < 1 || fecha == null){
							fecha1 = new Date();
						}else fecha1 = sdf.parse(fecha);
						
						Date fechaI =  ElapsedTime.obtenerFecha(rForm.getFechaReporteD(), -1);
						//System.out.println("Fecha Inicial"+fechaI);
						//System.out.println("Fecha Final"+fecha1);
						SimpleDateFormat sdM = new SimpleDateFormat("MM");
						SimpleDateFormat sdA = new SimpleDateFormat("yyyy");
						SimpleDateFormat sdd = new SimpleDateFormat("dd");
						Integer mes1 = new Integer(sdM.format(fecha1));
						Integer mesA1=new Integer(sdM.format(fecha1));
						Integer anio1 = new Integer(sdA.format(fecha1));
						Integer anioA1 = new Integer(sdA.format(fecha1));
						Integer dia = new Integer(sdd.format(fecha1));
						if(mesA1 == 1){
							mesA1=12;
							anioA1--;
						}else{
							mesA1--;
						}
						
						String fechaFink = "REPORTE AL: " + dia.intValue()+ " DE "+nombreMes(mes1.toString())+" DE "+anio1.intValue() ;
						rep.addParameter("FECHA_INI_MOV",fecha1);
						rep.addParameter("FECHA_FIN_MOV",fecha1);
						rep.addParameter("CUENTA_INI","1");
						rep.addParameter("CUENTA_FIN","9999");
						rep.addParameter("fechaL", fechaFink);
						
						rep.addParameter("mes",mes1);
						rep.addParameter("mesA",mesA1);
						rep.addParameter("anio",anio1);
						rep.addParameter("anioA",anioA1);
						
						jdbcDriver = "com.mysql.jdbc.Driver";
						Class.forName(jdbcDriver);
						url = HibernateSessionFactory.getConfiguration().getProperty("connection.url");
						user = HibernateSessionFactory.getConfiguration().getProperty("connection.username");
						pass = HibernateSessionFactory.getConfiguration().getProperty("connection.password");
						
						con = DriverManager.getConnection(url, user, pass);
						rep.setPathJasper(pathJasper);
						rep.setPathReport(pathJrxml);
						try{
							export = new ExportWebReport();
							export.setReportFile(rep);
							export.exportPDFWeb("LibroAuxiliarMayor", request, response, true, con);
							
							return null;
						}catch (Exception e) {
							e.printStackTrace();
						}	
					break;
					
					case 99:
						modulo ="libro_mayor_gral";
						reporteP ="libro_mayor_gral";
						pathJrxml = servletContext.getRealPath("/listaReportes/"
								+ modulo + "/" + reporteP + ".jrxml");
						pathJasper = servletContext.getRealPath("/listaReportes/"
								+ modulo + "/" + reporteP + ".jasper");
						
						rep = new ReportFile();
						
						String mes=rForm.getMes();
						String anio = rForm.getAnio();
						SimpleDateFormat sdf2 = new SimpleDateFormat("dd-MM-yyyy");
						SimpleDateFormat sdfd = new SimpleDateFormat("dd");
						SimpleDateFormat sdfM = new SimpleDateFormat("MM");
						SimpleDateFormat sdfA = new SimpleDateFormat("yyyy");
						
						Date fechaFin = getUltimoDiaDeMes(new Integer(rForm.getMes()), new Integer(rForm.getAnio()));
						
						Integer mesA = new Integer(mes);
						if(mesA==1){
							mesA=12;
						}else{
							mesA=mesA-1;
						}
						
						String fechaL ="AL " +sdfd.format(fechaFin)+" DE "+nombreMes(mes)+" DE "+anio;
						
						rep.addParameter("mes",new Integer(mes));
						rep.addParameter("anio",new Integer(anio));
						rep.addParameter("mesA",mesA);
						rep.addParameter("fecha",fechaL);
						
						jdbcDriver = "com.mysql.jdbc.Driver";
						Class.forName(jdbcDriver);
						url = HibernateSessionFactory.getConfiguration().getProperty("connection.url");
						user = HibernateSessionFactory.getConfiguration().getProperty("connection.username");
						pass = HibernateSessionFactory.getConfiguration().getProperty("connection.password");
						
						con = DriverManager.getConnection(url, user, pass);
						rep.setPathJasper(pathJasper);
						rep.setPathReport(pathJrxml);
						try{
							export = new ExportWebReport();
							export.setReportFile(rep);
							export.exportPDFWeb("libro_mayor_gral", request, response, true, con);
							
							return null;
						}catch (Exception e) {
							e.printStackTrace();
						}	
					break;
					
					
					
					case 20:
						modulo = "Reporte_BeneficiariosXAsociado";
						reporteP = "Reporte_BeneficiariosXAsociados";
						pathJrxml = servletContext.getRealPath("/listaReportes/"
								+ modulo + "/" + reporteP + ".jrxml");
						pathJasper = servletContext.getRealPath("/listaReportes/"
								+ modulo + "/" + reporteP + ".jasper");
						String rubro;
						switch (rForm.getRubro()) {
						case 1:
							rubro = "%aportaci%";
							break;
						case 2:
							rubro = "%ahorro%";
							break;
						case 3:
							rubro = "%seguro%";
							break;
						default:
							rubro = "%";
							break;
						}
						String ascId = rForm.getAscId2();
						if(ascId.equals("")|| ascId.length() < 1 || ascId == null) ascId = "%";
						mapa.put("ascId", ascId);
						mapa.put("rubro", rubro);
						mapa.put("codEmpresa", rForm.getEtrId());
						break;
					case 21:
						modulo = "reporte_deduccion_quincenal";
						reporteP = "reporte_deduccion_quincenal";
						pathJrxml = servletContext.getRealPath("/listaReportes/"
								+ modulo + "/" + reporteP + ".jrxml");
						pathJasper = servletContext.getRealPath("/listaReportes/"
								+ modulo + "/" + reporteP + ".jasper");
						
						CtrParParametrosDAO parametroDAO  = new CtrParParametrosDAO(getSessionHibernate(request));
						mapa.put("empresa", rForm.getEtrId());
						mapa.put("DIVISOR", parametroDAO.findById("DIVISOR_CUOTAS_MES").getParValorNumber().intValue());
						mapa.put("VALOR_INSCRIPCION", parametroDAO.findById("VALOR_INSCRIPCION").getParValorNumber());
						break;
					case 22:
						
						modulo = "Reporte_PlanillasXEmpresa";
						reporteP = "report_planilla_empresa";
						
						if(rForm.isExcel()){
							
							pathJasper = servletContext.getRealPath("/listaReportes/" +
							"ReportesExtras/ResumenesPlanilla.jasper");
							pathJasper = servletContext.getRealPath("/listaReportes/" +
							"ReportesExtras/ResumenesPlanilla.jasper");
							
							SimpleDateFormat sdfw = new SimpleDateFormat("yyyyMMdd");
							
							rep = new ReportFile();

							rep.addParameter("comprobante","-"+sdfw.format(rForm.getFechaReporteD()));
							
							jdbcDriver = "com.mysql.jdbc.Driver";
							Class.forName(jdbcDriver);
							url = HibernateSessionFactory.getConfiguration().getProperty("connection.url");
							user = HibernateSessionFactory.getConfiguration().getProperty("connection.username");
							pass = HibernateSessionFactory.getConfiguration().getProperty("connection.password");
							
							con = DriverManager.getConnection(url, user, pass);
							rep.setPathJasper(pathJasper);
							rep.setPathReport(pathJrxml);
							try{
								export = new ExportWebReport();
								export.setReportFile(rep);
								export.exportXLSWeb("", request, response, true, con);
								
								return null;
							}catch (Exception e) {
								e.printStackTrace();
							}	
							
						}else{
							pathJrxml = servletContext.getRealPath("/listaReportes/"
									+ modulo + "/" + reporteP + ".jrxml");
							//ResumenesPlanilla.jrxml
							pathJasper = servletContext.getRealPath("/listaReportes/"
									+ modulo + "/" + reporteP + ".jasper");
							mapa.put("codEmpresa", rForm.getEtrId());
							mapa.put("fecha", rForm.getFechaReporteD());
						}
						
						break;
					case 23:
						modulo = "saldosAhorroPrestamo";
						reporteP = "SaldosDeAportaciones2";
						pathJrxml = servletContext.getRealPath("/listaReportes/"
								+ modulo + "/" + reporteP + ".jrxml");
						pathJasper = servletContext.getRealPath("/listaReportes/"
								+ modulo + "/" + reporteP + ".jasper");
						
						mapa.put("IDEmpresa", rForm.getEtrId());
						break;
					
				}
				if(rForm.getNumR()<17){
					reporte.setPathJasper(pathReporte);
					exportar = new ExportReport(reporte);//reporte a exportar
					
					//Conexion jdbc normal
					jdbcDriver = "com.mysql.jdbc.Driver";
					Class.forName(jdbcDriver);
					url = HibernateSessionFactory.getConfiguration().getProperty("connection.url");
					user = HibernateSessionFactory.getConfiguration().getProperty("connection.username");
					pass = HibernateSessionFactory.getConfiguration().getProperty("connection.password");
	
					Connection con = DriverManager.getConnection(url, user, pass);
					byte[] repCompilado = exportar.exportReportPDF(con);
					
					response.setContentType("application/pdf");
					response.setContentLength(repCompilado.length);
					response.setHeader("content-Disposition", "attachment;filename="+nombreReporte+"-"+fechaActual.getTime()+".pdf");
					//response.setHeader("content-Disposition", "attachment;filename="+nombreReporte+"-"+rForm.getFechaReporte()+".pdf");
					ServletOutputStream outputStream = response.getOutputStream();
					outputStream.write(repCompilado, 0, repCompilado.length);
					outputStream.flush();
					outputStream.close();
				}else{
					if(rForm.getNumR()!=17){
					//Conexion jdbc normal
					jdbcDriver = "com.mysql.jdbc.Driver";
					Class.forName(jdbcDriver);
					url = HibernateSessionFactory.getConfiguration().getProperty("connection.url");
					user = HibernateSessionFactory.getConfiguration().getProperty("connection.username");
					pass = HibernateSessionFactory.getConfiguration().getProperty("connection.password");
	
					Connection con = DriverManager.getConnection(url, user, pass);
					con = DriverManager.getConnection(url, user, pass);
					
					ExportWebReport export = new ExportWebReport();
					rep = new ReportFile(pathJrxml,mapa);
					rep.setPathJasper(pathJasper);
					export.setReportFile(rep);
					export.exportPDFWeb(reporteP, request, response, true, con);
					}
				}
				
			}catch(Exception e){
				log.error("Se produjo un error al tratar de generar el reporte...", e);
				
			}
			
			return forward;
}
	public ActionForward generarReporteBalanzaComprobacion(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response){
		ConPcoPartidaContableDAO partidaDAO = new ConPcoPartidaContableDAO(getSessionHibernate(request));
		ReporteForm reporteForm = (ReporteForm)form;
		String reporteNombre = "balanceComprobacion";
		
		response.setHeader("Cache-Control","private");
		response.setHeader("Pragma", "Cache");
		try{
			/*ejecutamos prodecimientos*/
			
//			partidaDAO.llamadasProcedimientosBalanza(new Integer(reporteForm.getMes()),new Integer(reporteForm.getAnio()));
			
			
			ExportReport exportar = null;
			ReportFile reporte = new ReportFile();
			ServletContext servletContext = getServlet().getServletContext();
			
			String pathReporte = servletContext.getRealPath("/listaReportes/balanceComprobacion/balanceComprobacion.jasper");
			
			
			
			Date ultimo =getUltimoDiaDeMes(new Integer(reporteForm.getMes()), new Integer(reporteForm.getAnio()));
			SimpleDateFormat sdf = new SimpleDateFormat("dd");
			
			String fechal = "REPORTE AL  "+sdf.format(ultimo)+" DE "+nombreMes(reporteForm.getMes())+" DE "+reporteForm.getAnio();
			
			reporte.addParameter("mes",new Integer(reporteForm.getMes()));
			reporte.addParameter("anio",new Integer(reporteForm.getAnio()));
			if(new Integer(reporteForm.getMes()) == 1){
				reporte.addParameter("mesa",12);
				reporte.addParameter("anioa",new Integer(reporteForm.getAnio())-1);
			}else{
				reporte.addParameter("mesa",new Integer(reporteForm.getMes())-1);
				reporte.addParameter("anioa",new Integer(reporteForm.getAnio()));
			}
			
			reporte.addParameter("FECHAL",fechal);
			
			reporte.setPathJasper(pathReporte);
			exportar = new ExportReport(reporte);//reporte a exportar
			
			//Conexion jdbc normal
			String jdbcDriver = "com.mysql.jdbc.Driver";
			Class.forName(jdbcDriver);
			String url = HibernateSessionFactory.getConfiguration().getProperty("connection.url");
			String user = HibernateSessionFactory.getConfiguration().getProperty("connection.username");
			String pass = HibernateSessionFactory.getConfiguration().getProperty("connection.password");

			Connection con = DriverManager.getConnection(url, user, pass);
			
			Statement instruccion = con.createStatement();
			ResultSet rs = instruccion.executeQuery("SELECT "+
					"sum(dpa.dpa_valor_debe) debe, sum(dpa.dpa_valor_haber) haber "+
					"FROM "+
					"con_dpa_detalle_partida dpa, "+
					"con_pco_partida_contable pco "+
					"Where "+
					"pco.pco_id = dpa.pco_id and month(PCO_FECHA_INGRESO_PARTIDA)=" +new Integer(reporteForm.getMes())+" and year(PCO_FECHA_INGRESO_PARTIDA) = "+new Integer(reporteForm.getAnio()));
			while(rs.next()){
				reporte.addParameter("total_cargos",rs.getDouble("debe"));
				reporte.addParameter("total_abonos",rs.getDouble("haber"));
			}
			con = DriverManager.getConnection(url, user, pass);
			byte[] repCompilado = exportar.exportReportPDF(con);
			
			response.setContentType("application/pdf");
			response.setContentLength(repCompilado.length);
			response.setHeader("content-Disposition", "attachment;filename="+reporteNombre+".pdf");
			ServletOutputStream outputStream = response.getOutputStream();
			outputStream.write(repCompilado, 0, repCompilado.length);
			outputStream.flush();
			outputStream.close();
			con.close();
		}catch(Exception e ){
			e.printStackTrace();
		}
		
		return null;
	}
	
	public static Date getUltimoDiaDeMes(int mes, int anio) {
		Calendar calendar = Calendar.getInstance();		
		calendar.set(Calendar.MONTH, mes-1);
		calendar.set(Calendar.YEAR, anio);
		int lastDate = calendar.getActualMaximum(Calendar.DATE);		
		calendar.set(Calendar.DATE, lastDate);
		//System.out.println("Ultimo dia: " +calendar.getTime()); 
		return calendar.getTime();
		
	    
	}
	 
	public static String nombreMes(String sMes){
		Integer numMes = new Integer(sMes);
		String mes="";
		switch(numMes.intValue()){
		case 1: mes="ENERO";break;
		case 2: mes="FEBRERO";break;
		case 3: mes="MARZO";break;
		case 4: mes="ABRIL";break;
		case 5: mes="MAYO";break;
		case 6: mes="JUNIO";break;
		case 7: mes="JULIO";break;
		case 8: mes="AGOSTO";break;
		case 9: mes="SEPTIEMBRE";break;
		case 10: mes="OCTUBRE";break;
		case 11: mes="NOVIEMBRE";break;
		case 12: mes="DICIEMBRE";break;
		}
		return mes;
	}
	public class ReporteX{
		private String nombreR;
		private int repId;
		
		public String getNombreR() {
			return this.nombreR;
		}
		public void setNombreR(String nombreR) {
			this.nombreR = nombreR;
		}
		public int getRepId() {
			return repId;
		}
		public void setRepId(int repId) {
			this.repId = repId;
		}	
		
	}
	public List llenarReportes(){
		List listaReport = new ArrayList();
		ReporteX o = new ReporteX();
		o.setRepId(1);
		o.setNombreR("Detalle de Costo del Dnia");
		listaReport.add(o);
		ReporteX o1 = new ReporteX();
		o1.setRepId(2);
		o1.setNombreR("Detalle de Venta del Dnia");
		listaReport.add(o1);
		ReporteX o2 = new ReporteX();
		o2.setRepId(3);
		o2.setNombreR("Reporte de Venta del Dnia");
		listaReport.add(o2);
		ReporteX o3 = new ReporteX();
		o3.setRepId(4);
		o3.setNombreR("Reporte de Venta por Dnia Consolidado por Asociado y Fecha");
		listaReport.add(o3);
		ReporteX o4 = new ReporteX();
		o4.setRepId(5);
		o4.setNombreR("Libro de Compras");
		listaReport.add(o4);
		ReporteX o5 = new ReporteX();
		o5.setRepId(6);
		o5.setNombreR("Libro de Venta a Contribuyentes");
		listaReport.add(o5);
		ReporteX o6 = new ReporteX();
		o6.setRepId(7);
		o6.setNombreR("Libro de Venta a Consumidor Final");
		listaReport.add(o6);
		ReporteX o7 = new ReporteX();
		o7.setRepId(8);
		o7.setNombreR("Reporte de Costo para Contabilidad");
		listaReport.add(o7);
		ReporteX o8 = new ReporteX();
		o8.setRepId(9);
		o8.setNombreR("Reporte de Costo de Inventario");
		listaReport.add(o8);
		ReporteX o9 = new ReporteX();
		o9.setRepId(10);
		o9.setNombreR("Reporte Mensual de Unidades y Saldos de Inventario");
		listaReport.add(o9);
		ReporteX o10 = new ReporteX();
		o10.setRepId(11);
		o10.setNombreR("Reporte de Levantamiento de Inventario");
		listaReport.add(o10);
		ReporteX o11 = new ReporteX();
		o11.setRepId(12);
		o11.setNombreR("Reporte de Venta y costo de Venta por Perniodo");
		listaReport.add(o11);
		ReporteX o12 = new ReporteX();
		o12.setRepId(13);
		o12.setNombreR("Reporte de Movimiento de Inventario por Artniculo y Fecha");
		listaReport.add(o12);
		
		return listaReport;
		
	}
	public void mensajes(String msg, HttpServletRequest request){
		ActionErrors errors = new ActionErrors();
        errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(msg));
        saveMessages(request, errors);
	}
	

	
	
	protected Map<String, String> getKeyMethodMap() {
		// TODO Auto-generated method stub
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.reportes.lista", "lista");
		map.put("cmd.reportes.generarReporte", "generar");
		map.put("cmd.reportes.seleccionarReporte", "seleccionar");
		
		return map;
	}
}