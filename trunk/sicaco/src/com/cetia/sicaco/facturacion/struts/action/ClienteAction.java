/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.facturacion.struts.action;

import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.hibernate.Transaction;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeImpl;
import org.jmesa.limit.ExportType;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.BasicCellEditor;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.html.HtmlBuilder;

import com.cetia.sicaco.facturacion.struts.form.ClienteForm;
import com.cetia.sicaco.hibernate.FacCliCliente;
import com.cetia.sicaco.hibernate.FacCliClienteDAO;
import com.cetia.sicaco.hibernate.FacFenFacturaEncabezadoDAO;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;

/**
 * MyEclipse Struts Creation date: 06-11-2008
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/cliente" name="clienteForm" parameter="accion"
 *                scope="request"
 */
public class ClienteAction extends DMLAction {

	public static final String TABLA_ID = "facCliCliente";

	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		FacCliClienteDAO clienteDAO = new FacCliClienteDAO(getSessionHibernate(request));
		ClienteForm clienteForm = (ClienteForm)form;
		if(clienteForm.getChequeado() == 0 || clienteForm.getChequeado() == 2){
			clienteForm.setChequeado(2);
		}else{
			clienteForm.setChequeado(1);
		}
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(clienteDAO.findAll());
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
			// ---- exporta la tabla
			export(tableFacade);
			return null;
		} else {
			// ---- genera el html de la tabla para ser mostrada
			String html = html(tableFacade, request);
			request.setAttribute(Constantes.LISTA_KEY, html);
		}
		request.setAttribute("form", form);
		request.setAttribute(Constantes.ACCION_KEY, "/cliente");
		return mapping.findForward("lista");
	}

	// ---- Funcion que genera el html de la tabla del jmesa
	private String html(final TableFacade tableFacade,
			final HttpServletRequest request) {
		tableFacade.setColumnProperties("cliCodigo", "cliNombre","cliNumRegistro","cliGiro","cliDireccion");
		Table table = tableFacade.getTable();
		// ---- Titulo de la tabla
		table.setCaptionKey("tbl.lcli.caption");

		Row row = table.getRow();

		Column nombreColumna = row.getColumn("cliCodigo");
		nombreColumna.setTitleKey("tbl.lcli.cliCodigo");

		nombreColumna = row.getColumn("cliNombre");
		nombreColumna.setTitleKey("tbl.lcli.cliNombre");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor() {

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property,
						rowcount);
				FacCliCliente cliente = (FacCliCliente) item;
				HtmlBuilder html = new HtmlBuilder();
				value = cliente.getCliNombre();
				// ---- Generar link para entrar a edicion
				String link = tableFacade.getWebContext().getContextPath();
				link += "/facturacion/cliente.do?cliCodigo="
						+ cliente.getCliCodigo().toString()
						+ "&modi=true&accion=editar";
				html.a().href().quote().append(link).quote().close();
				// ---- Agregamos el link con el nombre = value
				html.append(value);
				html.aEnd();
				return html.toString();
			}
		});
		
		nombreColumna = row.getColumn("cliNumRegistro");
		nombreColumna.setTitleKey("tbl.lcli.cliNumRegistro");
		
		nombreColumna = row.getColumn("cliGiro");
		nombreColumna.setTitleKey("tbl.lcli.cliGiro");
		
		nombreColumna = row.getColumn("cliDireccion");
		nombreColumna.setTitleKey("tbl.cliente.acciones");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				FacCliCliente cliente = (FacCliCliente) item;
				HtmlBuilder html = new HtmlBuilder();
				value = "Eliminar";
				String link = tableFacade.getWebContext().getContextPath();
				link += "/facturacion/cliente.do?cliCodigo="
					+ cliente.getCliCodigo().toString()
					+ "&modi=true&accion=editar";
				html.a().onclick("handlerDeleteButton('"+ cliente.getCliCodigo().toString()+ "');").append("class=\"linkEliminar\"").title(value.toString()).id("deleteButtonId").close();
				//html.append(value);
				html.aEnd();
								
				return html.toString();
			}
		});

		return tableFacade.render();
	}
	
	//---- Funcion que genera los exports, el formato que tendran
	 private void export(final TableFacade tableFacade) {
		tableFacade.setColumnProperties("cliCodigo", "cliNombre","cliNumRegistro","cliGiro");
		Table table = tableFacade.getTable();
		// ---- Titulo de la tabla
		table.setCaptionKey("tbl.lcli.caption");

		Row row = table.getRow();

		Column nombreColumna = row.getColumn("cliCodigo");
		nombreColumna.setTitleKey("tbl.lcli.cliCodigo");

		nombreColumna = row.getColumn("cliNombre");
		nombreColumna.setTitleKey("tbl.lcli.cliNombre");
		
		nombreColumna = row.getColumn("cliNumRegistro");
		nombreColumna.setTitleKey("tbl.lcli.cliNumRegistro");
		
		nombreColumna = row.getColumn("cliGiro");
		nombreColumna.setTitleKey("tbl.lcli.cliGiro");
		
		tableFacade.render();
	}

	public ActionForward guardar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {// se
																		// utiliza
																		// para
																		// almacena
																		// los
																		// registros
		ClienteForm clienteForm = (ClienteForm) form;// o bien para
														// actualizar la
														// modificacion.
		FacCliClienteDAO cliClienteDAO = new FacCliClienteDAO(getSessionHibernate(request));
		Transaction tx = cliClienteDAO.getSession().beginTransaction();
		try {
			if (clienteForm.isModi()) {//si esta modificando
				if(!clienteForm.isContribuyente()){
					clienteForm.setCliDeclaraIva(1);
				}
				cliClienteDAO.merge(clienteForm.getFacCliClienteH());
				tx.commit();
			} else {
				if (cliClienteDAO.findById(clienteForm.getCliCodigo())== null){// validacion para evitar que se ingrese un
								// cliente repetido
					if(clienteForm.isContribuyente()){
						if(clienteForm.getCliContribuyente().trim().equals("") ||
								clienteForm.getCliContribuyente()== null){
							mensajes("error.cliente.contribuyenteVacio", request);
							lista(mapping, form, request, response);
						}
					}else{
						clienteForm.setCliDeclaraIva(1);
					}
					cliClienteDAO.save(clienteForm.getFacCliClienteH());
					tx.commit();
				} else {
					System.out.println("Se encontro un cliente repetido");
				}
			}
		} catch (Exception e) {
			tx.rollback();
			e.printStackTrace();
		} finally {
			cliClienteDAO.getSession().flush();
			cliClienteDAO.getSession().clear();
			
		}
		return lista(mapping, new ClienteForm(), request, response);
	}

	public ActionForward editar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ClienteForm clienteForm = (ClienteForm) form;
		FacCliClienteDAO clienteDAO = new FacCliClienteDAO(getSessionHibernate(request));
		clienteForm.setFacCliClienteH(clienteDAO.findById(clienteForm
				.getCliCodigo()));
		if(clienteForm.getCliContribuyente()!=null && clienteForm.getCliContribuyente().length()>0){
			clienteForm.setChequeado(1);
		}
		if (clienteForm.getCliNumRegistro() != null && !clienteForm.getCliNumRegistro().trim().equals("")){
			clienteForm.setEmp(true);
		}
		if(clienteForm.getCliContribuyente()!= null && !clienteForm.getCliContribuyente().trim().equals("")){
			clienteForm.setContribuyente(true);
		}
		request.setAttribute("form", clienteForm);
		return lista(mapping, clienteForm, request, response);
	}

	public ActionForward buscar(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		ClienteForm clienteForm = (ClienteForm)form;
		FacCliClienteDAO cliClienteDAO = new FacCliClienteDAO(getSessionHibernate(request));
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(cliClienteDAO.findByCriteria(clienteForm.getFacCliClienteH(),10000,0));
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
			// ---- exporta la tabla
			// export(tableFacade);
			return null;
		} else {
			// ---- genera el html de la tabla para ser mostrada
			String html = html(tableFacade, request);
			request.setAttribute(Constantes.LISTA_KEY, html);
		}
		request.setAttribute("form", form);
		request.setAttribute(Constantes.ACCION_KEY, "/cliente");
		return mapping.findForward("lista");
	}
	
	public ActionForward redirectInvalidData(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		ActionErrors errors = (ActionErrors) request.getSession().getAttribute(
				Constantes.ERRORS);
		FacCliClienteDAO clienteDAO = new FacCliClienteDAO(getSessionHibernate(request));
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(clienteDAO.findAll());
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
			// ---- exporta la tabla
			// export(tableFacade);
			return null;
		} else {
			// ---- genera el html de la tabla para ser mostrada
			String html = html(tableFacade, request);
			request.setAttribute(Constantes.LISTA_KEY, html);
		}
		request.setAttribute("form", form);
		request.setAttribute(Constantes.ACCION_KEY, "/cliente");
		saveMessages(request, errors);
		return mapping.findForward("lista");
	}
	
	public ActionForward cancelar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ClienteForm clienteForm = new ClienteForm();
 		return lista(mapping, clienteForm, request, response);
	}
	
	public ActionForward eliminar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
			ClienteForm clienteForm = (ClienteForm) form;
			FacCliClienteDAO cliClienteDAO = new FacCliClienteDAO(getSessionHibernate(request));
			FacFenFacturaEncabezadoDAO encabezadoDAO = new FacFenFacturaEncabezadoDAO(getSessionHibernate(request));
			Transaction tx = cliClienteDAO.getSession().beginTransaction();
			if(encabezadoDAO.findByProperty("facCliCliente.cliCodigo",clienteForm.getCliCodigo()).size() == 0){
				try{
					cliClienteDAO.delete(cliClienteDAO.findById(clienteForm.getCliCodigo()));
					tx.commit();
				}catch (Exception e) {
					tx.rollback();
					e.printStackTrace();
				}finally{
					cliClienteDAO.getSession().flush();
					cliClienteDAO.getSession().clear();
					
				}
			}else{
				//implementar logica de validacion
				mensajes("errors.cliente.clienteUso", request);
			}
			return lista(mapping, new ClienteForm(), request, response);
	}
	
	public void mensajes(String msg, HttpServletRequest request){
		ActionErrors errors = new ActionErrors();
        errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(msg));
        saveMessages(request, errors);
	}

	
	protected Map getKeyMethodMap() {
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.lcli.cliList", "lista");
		map.put("cmd.cliente.modificar", "editar");
		map.put("cmd.cliente.redirectInvalidData", "redirectInvalidData");
		map.put("cmd.cliente.guardar", "guardar");
		map.put("cmd.cliente.buscar", "buscar");
		map.put("cmd.cliente.cancelar", "cancelar");
		map.put("cmd.cliente.eliminar", "eliminar");
		return map;
	}
}