/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cetia.sicaco.facturacion.struts.action;

import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletContext;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.hibernate.Transaction;
import org.jmesa.facade.TableFacade;
import org.jmesa.facade.TableFacadeImpl;
import org.jmesa.limit.ExportType;
import org.jmesa.limit.Limit;
import org.jmesa.view.component.Column;
import org.jmesa.view.component.Row;
import org.jmesa.view.component.Table;
import org.jmesa.view.editor.BasicCellEditor;
import org.jmesa.view.editor.CellEditor;
import org.jmesa.view.editor.DateCellEditor;
import org.jmesa.view.html.HtmlBuilder;

import com.cetia.sicaco.facturacion.struts.form.FacturaManualForm;
import com.cetia.sicaco.hibernate.CtaAscAsociado;
import com.cetia.sicaco.hibernate.CtrEstEstado;
import com.cetia.sicaco.hibernate.CtrEstEstadoDAO;
import com.cetia.sicaco.hibernate.CtrRfcRepositorioFacturas;
import com.cetia.sicaco.hibernate.CtrRfcRepositorioFacturasDAO;
import com.cetia.sicaco.hibernate.FacCliCliente;
import com.cetia.sicaco.hibernate.FacCliClienteDAO;
import com.cetia.sicaco.hibernate.FacFenFacturaEncabezado;
import com.cetia.sicaco.hibernate.FacFenFacturaEncabezadoDAO;
import com.cetia.sicaco.hibernate.FacFusFacturaUso;
import com.cetia.sicaco.hibernate.FacFusFacturaUsoDAO;
import com.cetia.sicaco.hibernate.HibernateSessionFactory;
import com.cetia.sicaco.hibernate.InvProProveedor;
import com.cetia.sicaco.hibernate.InvProProveedorDAO;
import com.cetia.sicaco.hibernate.SecIseInicioSesion;
import com.cetia.sicaco.hibernate.SecIseInicioSesionDAO;
import com.cetia.sicaco.hibernate.SecPerPersona;
import com.cetia.sicaco.struts.Constantes;
import com.cetia.sicaco.struts.DMLAction;
import com.mad.utilidades.ExportReport;
import com.mad.utilidades.Format;
import com.mad.utilidades.ReportFile;

/** 
 * MyEclipse Struts
 * Creation date: 03-20-2009
 * 
 * XDoclet definition:
 * @struts.action path="/facturaManual" name="facturaManualForm" input="redirectInvalidData" parameter="accion" scope="request" validate="true"
 * @struts.action-forward name="lista" path="pagina-lista.facturacion.facturaManual"
 */
public class FacturaManualAction extends DMLAction {
	/*
	 * Generated Methods
	 */

	public static final String TABLA_ID = "facFenFacturaEncabezado";
	
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward lista(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		FacturaManualForm facturaManualForm = (FacturaManualForm) form;// TODO Auto-generated method stub
		CtrRfcRepositorioFacturasDAO repositorioDAO = new CtrRfcRepositorioFacturasDAO(getSessionHibernate(request));
		SecIseInicioSesionDAO sesionDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
		SecIseInicioSesion sesion = sesionDAO.findById(facturaManualForm.getUsuarioConectado().getNombreUsuario());
		int error = 1;
		if(facturaManualForm.getAck().equals("v")){
			if(repositorioDAO.findSerie(facturaManualForm.getTf(), sesion.getSecPerPersona().getSecSucSucursal().getSucId()).size() < 1){
				error = -1;
				mensajes("error.facturaManual.repositorioNotFound", facturaManualForm, request, response);
			}else{
				CtrRfcRepositorioFacturas repositorio = (CtrRfcRepositorioFacturas) repositorioDAO.findSerie(facturaManualForm.getTf(), sesion.getSecPerPersona().getSecSucSucursal().getSucId()).get(0);
				facturaManualForm.setFenSerieFactura(repositorio.getCtrCfcControlFacturacion().getCfcSerie());
				facturaManualForm.setFenNumeroFactura(repositorio.getRfcCorrActual().toString());
				request.setAttribute("repo", 1);
			}
			
			FacFusFacturaUsoDAO fusoDao = new FacFusFacturaUsoDAO(getSessionHibernate(request));
			//6 es salida manual
			FacFusFacturaUso fuso = fusoDao.findById(6);
			facturaManualForm.setFusId(fuso.getFusId());
			facturaManualForm.setFusNombre(fuso.getFusNombre());
			SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
			facturaManualForm.setFenFechaFactura(sdf.format(new Date()));
		}else{
			FacFusFacturaUsoDAO fusoDao = new FacFusFacturaUsoDAO(getSessionHibernate(request));
			//9 es entrada manual /*****************/
			FacFusFacturaUso fuso = fusoDao.findById(9);
			facturaManualForm.setFusId(fuso.getFusId());
			facturaManualForm.setFusNombre(fuso.getFusNombre());
			SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
			facturaManualForm.setFenFechaFactura(sdf.format(new Date()));
		}
		request.setAttribute("form", facturaManualForm);
		request.setAttribute("ack", facturaManualForm.getAck());
		request.setAttribute("tf", facturaManualForm.getTf());
		request.setAttribute(Constantes.ACCION_KEY, "/facturaManual");
		return mapping.findForward("lista");
	}
	
	public void mensajes(String msg,FacturaManualForm form,
			HttpServletRequest request, HttpServletResponse response){
		ActionErrors errors = new ActionErrors();
		errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(msg));
        saveMessages(request, errors);
	}
	
	public void mensajes2(String msg,FacturaManualForm form,
			HttpServletRequest request, HttpServletResponse response,
			ActionErrors errors){
		errors.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage(msg));
        saveMessages(request, errors);
	}
	
	public ActionForward cargarListaProv(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) { // se utiliza para realizar la
											// busqueda de los proveedores
		InvProProveedorDAO proProveedorDAO = new InvProProveedorDAO(getSessionHibernate(request));
		InvProProveedor proveedor = new InvProProveedor();
		FacturaManualForm manualForm = (FacturaManualForm) form;
		List<InvProProveedor> listaProveedores = null;
		proveedor.setProCodigo(manualForm.getCodProv());
		proveedor.setProNombre(manualForm.getProvNombre());
		try {
			listaProveedores = proProveedorDAO.findByCriteria(proveedor);
			String listaResponse;
			if(proProveedorDAO.findAll().size()<1){
				listaResponse = "<table id=\"resultadoArt\">";
				listaResponse += "<tr>";
				listaResponse += "<td><span style=\"font-size: 10px;color: red;font-style: italic;\">"
						+ "No existe ning&uacute;n proveedor en el sistema</span></td>";
				listaResponse += "</tr></table>";
			}else{
				if(listaProveedores.size() < 1){
					listaResponse = "<table id=\"resultadoArt\">";
					listaResponse += "<tr>";
					listaResponse += "<td><span style=\"font-size: 10px;color: red;font-style: italic;\">"
							+ "La b&uacute;squeda no gener&oacute; ning&uacute;n resultado</span></td>";
					listaResponse += "</tr></table>";
				}else{
					// Construimos una lista para el response
					listaResponse = contruirListaProveedores(listaProveedores);
				}
			}
			response.getWriter().write(listaResponse);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (RuntimeException e) {
			log.error("Error runtime", e);
		} catch (IOException e) {
			log.error(e);
		}

		return null;
	}

	private String contruirListaProveedores(
			List<InvProProveedor> listaProveedores) {
		String lista = "<table id=\"resultadoProv\">";
		int max = 0;
		for (Iterator iterator = listaProveedores.iterator(); iterator
				.hasNext();) {
			InvProProveedor proProveedor = (InvProProveedor) iterator.next();
			if(max < 10){
				lista += "<tr>";
				lista += "<td><input onclick=\"JavaScript:saveSeleccionP(this.value);\" type=\"radio\" name=\"_miseleccion\" value=\""
						+ proProveedor.getProCodigo()
						+ ";"
						+ proProveedor.getProNombre()
						+ ";"
						+ proProveedor.getProRegistro()
						+ ";"
						+ proProveedor.getProId()
						+ ";"
						+ proProveedor.getProNit() + "\"/></td>";
				lista += "<td><span style=\"font-size: 10px;color: #6E6E6E;font-style: italic;\">"
						+ proProveedor.getProNombre() + "</span></td>";
				lista += "</tr>";
			}
			max++;
		}
		lista += "</table>";
		return lista;
	}
	
	public ActionForward cargarListaClientes(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		FacturaManualForm manualForm = (FacturaManualForm) form;
		List<FacCliCliente> listaClientes = null;
		//List listaAsociados = null;
		FacCliClienteDAO cliClienteDAO = new FacCliClienteDAO(getSessionHibernate(request));
		
		//CtaAscAsociadoDAO asociadoDAO = new CtaAscAsociadoDAO();
		FacCliCliente cliente = new FacCliCliente();
		//CtaAscAsociado asociado = new CtaAscAsociado();
		cliente.setCliCodigo(manualForm.getCodCli());
		cliente.setCliNombre(manualForm.getNombreCli());
		/*asociado.setAscCodigo(manualForm.getCodCli());
		int opcion = 0; //si es uno quiere decir que probo con el nombre solamente y no encontro nada
		if(manualForm.getNombreCli() != null && !manualForm.getNombreCli().trim().equals("")){
			if(manualForm.getNombreCli().trim().indexOf(",") == -1){
				if(manualForm.getNombreCli().trim().indexOf(" ") == -1){
					asociado.getSecPerPersona().setPerPrimerNombre(encabezadoForm.getNombreCli().trim());
					opcion = 1;
				}else{
					StringTokenizer tokenizer = new StringTokenizer(encabezadoForm.getNombreCli().trim());
					asociado.getSecPerPersona().setPerPrimerNombre(tokenizer.nextToken().trim());
					asociado.getSecPerPersona().setPerPrimerApellido(tokenizer.nextToken().trim());
				}
			}else{
				if(encabezadoForm.getNombreCli().trim().startsWith(",")){
					asociado.getSecPerPersona().setPerPrimerApellido("");
					asociado.getSecPerPersona().setPerPrimerNombre(encabezadoForm.getNombreCli().substring(1).trim());
				}else{
					StringTokenizer tokenizer = new StringTokenizer(encabezadoForm.getNombreCli().trim(),",");
					asociado.getSecPerPersona().setPerPrimerApellido(tokenizer.nextToken().trim());
					asociado.getSecPerPersona().setPerPrimerNombre(tokenizer.nextToken().trim());
				}
			}
		}else{
			asociado.getSecPerPersona().setPerPrimerNombre(encabezadoForm.getNombreCli().trim());
		}
		*/
		SecPerPersona persona = new SecPerPersona();
		persona.setPerPrimerNombre(manualForm.getNombreCli().trim());
		
		try {
			listaClientes = cliClienteDAO.findByCriteria(cliente,10,0);
			//listaAsociados = asociadoDAO.findByNameUser(asociado,10);
			Boolean nulo = false;
			if(listaClientes.size() < 1){ //&& listaAsociados.size() < 1){
				/*if(opcion == 1){
					asociado.getSecPerPersona().setPerPrimerApellido(encabezadoForm.getNombreCli().trim());
					asociado.getSecPerPersona().setPerPrimerNombre(null);
					listaAsociados = asociadoDAO.findByNameUser(asociado,10);
					if(listaAsociados.size()<1){
						nulo = true;
					}
				}else{*/
					nulo = true;
				//}
			}
			String listaResponse = construirListaClientes(listaClientes,
					null, nulo);
			response.getWriter().write(listaResponse);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (RuntimeException e) {
			log.error("Error runtime", e);
		} catch (IOException e) {
			log.error(e);
		}
		return null;
	}
	
	public ActionForward cargarListaContribuyentes(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		FacturaManualForm manualForm = (FacturaManualForm) form;
		List<FacCliCliente> listaClientes = null;
		FacCliClienteDAO cliClienteDAO = new FacCliClienteDAO(getSessionHibernate(request));
		
		FacCliCliente cliente = new FacCliCliente();
		cliente.setCliCodigo(manualForm.getCodCli());
		cliente.setCliNombre(manualForm.getNombreCli().trim());
		
		try {
			listaClientes = cliClienteDAO.findByCriteriaAndContribuyente(cliente);
			Boolean nulo = false;
			if(listaClientes.size() < 1 ){
				nulo = true;
			}
			String listaResponse = construirListaClientes(listaClientes,
					null, nulo);
			response.getWriter().write(listaResponse);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (RuntimeException e) {
			log.error("Error runtime", e);
		} catch (IOException e) {
			log.error(e);
		}
		return null;
	}

	private String construirListaClientes(List<FacCliCliente> listaClientes,
			List<CtaAscAsociado> listaAsociados, Boolean nulo) {
		String lista = "<table id=\"resultadoCli\">";
		if(nulo == true){
			lista+= "<td><span style=\"font-size: 10px;color: red;font-style: italic;\">"
			+ "No se encontro ningun cliente en el sistema para esta b&uacute;squeda</span></td>";
		}else{
			int max1 = 0;
			int max2 = 0;
			int x = 5;
			if(listaAsociados == null){
				x = 10;
			}
			for (Iterator iterator = listaClientes.iterator(); iterator.hasNext();) {
				FacCliCliente cliente = (FacCliCliente) iterator.next();
				if(max1<x){
					lista += "<tr>";
					lista += "<td><input onclick=\"JavaScript:saveSeleccionC(this.value);\" type=\"radio\" name=\"_miseleccion\" value=\""
							+ cliente.getCliCodigo()
							+ ";"
							+ cliente.getCliNombre()
							+";"
							+ cliente.getCliCodigo()
							+";"
							+ cliente.getCliNumRegistro()
							+";"
							+ cliente.getCliContribuyente()
							+";"
							+ "C"
							+ "\"/></td>";
					lista += "<td><span style=\"font-size: 10px;color: #6E6E6E;font-style: italic;\">"
							+ cliente.getCliNombre() + "</span></td>";
					lista += "</tr>";
				}
				max1++;
			}
			/*if(listaAsociados != null){
				for (Iterator iterator = listaAsociados.iterator(); iterator.hasNext();) {
					CtaAscAsociado asociado = (CtaAscAsociado)iterator.next();
					CtaCasCuentaAsociadoDAO cuentaAsociadoDAO = new CtaCasCuentaAsociadoDAO();
					
					//Obtener disponible
					CtaPrePrestamoDAO prestamoDAO = new CtaPrePrestamoDAO();
					Double creditoUsado = prestamoDAO.sumCreditoUtilizado(asociado.getAscId(),"F");
					if(creditoUsado == null){
						creditoUsado = 0.0;
					}
					CtrParParametrosDAO parametrosDAO = new CtrParParametrosDAO();
					CtrParParametros creditoOrden = parametrosDAO.findById("CREDITO_FACT");
					Double disponible = creditoOrden.getParValorNumber() - creditoUsado;
					
					CtrEstEstadoDAO estadoDAO = new CtrEstEstadoDAO();
					if(max2<5){
						lista += "<tr>";
						lista += "<td><input onclick=\"JavaScript:saveSeleccionC(this.value);\" type=\"radio\" name=\"_miseleccion\" value=\""
								+ asociado.getAscCodigo()
								+ ";"
								+ asociado.getSecPerPersona().getPerPrimerNombre()
								+ " "
								+ asociado.getSecPerPersona().getPerPrimerApellido()
								+ ";"
								+ asociado.getAscId()
								+";"
								+" "
								+";"
								+" "
								+";"
								+ "A"
								+ "\"/></td>";
						if(asociado.getEstId()==21){
							lista += "<td><span style=\"font-size: 10px;color: #CC3333;font-style: italic;\">"
								+ "Restringido - " 
								+ asociado.getSecPerPersona().getPerPrimerNombre()
								+ " "
								+ asociado.getSecPerPersona().getPerSegundoNombre()
								+ " "
								+ asociado.getSecPerPersona().getPerPrimerApellido()
								+ " "
								+ asociado.getSecPerPersona().getPerSegundoApellido()
								+ "</span></td>";
							lista += "</tr>";
						}else{
							lista += "<td><span style=\"font-size: 10px;color: #6E6E6E;font-style: italic;\">"
									+ asociado.getSecPerPersona().getPerPrimerNombre()
									+ " "
									+ asociado.getSecPerPersona().getPerSegundoNombre()
									+ " "
									+ asociado.getSecPerPersona().getPerPrimerApellido()
									+ " "
									+ asociado.getSecPerPersona().getPerSegundoApellido()
									+ " - "
									+ estadoDAO.findById(asociado.getEstId()).getEstNombre()
									+ " - Credito disponible: </span><span style=\"font-size: 10px;color: #02BB68;font-style: italic;\">"
									+ Format.formatDinero(disponible)
									+ "</td>";
							lista += "</tr>";
						}
					}
					max2++;
				}
			}*/
		}
		lista += "</table>";
		return lista;
	}
	
	public ActionForward imprimir(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		FacturaManualForm facturaManualForm = (FacturaManualForm) form;// TODO Auto-generated method stub
		CtrRfcRepositorioFacturasDAO repositorioDAO = new CtrRfcRepositorioFacturasDAO(getSessionHibernate(request));
		SecIseInicioSesionDAO sesionDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
		SecIseInicioSesion sesion = sesionDAO.findById(facturaManualForm.getUsuarioConectado().getNombreUsuario());
		CtrRfcRepositorioFacturas repositorio = null;
		if(validarDocumento(facturaManualForm, request, response)){
			return lista(mapping, facturaManualForm, request, response);
		}
		int error = 1;
		if(repositorioDAO.findSerie(facturaManualForm.getTf(), sesion.getSecPerPersona().getSecSucSucursal().getSucId()).size() < 1){
			error = -1;
			mensajes("error.facturaManual.repositorioNotFound", facturaManualForm, request, response);
		}else{
			repositorio = (CtrRfcRepositorioFacturas) repositorioDAO.findSerie(facturaManualForm.getTf(), sesion.getSecPerPersona().getSecSucSucursal().getSucId()).get(0);
			facturaManualForm.setFenSerieFactura(repositorio.getCtrCfcControlFacturacion().getCfcSerie());
			facturaManualForm.setFenNumeroFactura(repositorio.getRfcCorrActual().toString());
			//request.setAttribute("repo", 1);
		}
		
		FacFusFacturaUsoDAO fusoDao = new FacFusFacturaUsoDAO(getSessionHibernate(request));
		//6 es salida manual
		FacFusFacturaUso fuso = fusoDao.findById(6);
		facturaManualForm.setFusId(fuso.getFusId());
		facturaManualForm.setFusNombre(fuso.getFusNombre());
		
		FacFenFacturaEncabezado fen = new FacFenFacturaEncabezado();
		fen.setAudFechaCreacion(new Date());
		fen.setAudFechaModificacion(new Date());
		fen.setAudUsuarioCreacion(sesion.getIseNombreUsuario());
		fen.setAudUsuarioModificacion(sesion.getIseNombreUsuario());
		fen.setConRimRetencionImpuesto(null);
		fen.setCtaAscAsociado(null);
		CtrEstEstadoDAO estadoDAO = new CtrEstEstadoDAO(getSessionHibernate(request));
		CtrEstEstado estado = estadoDAO.findById(1);
		fen.setCtrEstEstado(estado);
		FacCliClienteDAO clienteDAO = new FacCliClienteDAO(getSessionHibernate(request));
		FacCliCliente cliente = clienteDAO.findById(facturaManualForm.getCodigo());
		fen.setFacCliCliente(cliente);
		fen.setFacFusFacturaUso(fuso);
		fen.setFenCancelada(facturaManualForm.getTipoPagoId());
		fen.setFenDescripcion(facturaManualForm.getDescripcion());
		SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
		try {
			fen.setFenFechaFactura(sdf.parse(facturaManualForm.getFenFechaFactura()));
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		FacFenFacturaEncabezadoDAO encabezadoDAO = new FacFenFacturaEncabezadoDAO(getSessionHibernate(request));
		fen.setFenId(encabezadoDAO.nextId());
		fen.setFenIvaRetenido(0.0);
		fen.setFenNumeroFactura(repositorio.getRfcCorrActual().toString());
		fen.setFenSerieFactura(repositorio.getCtrCfcControlFacturacion().getCfcSerie());
		fen.setFenTipoFactura(facturaManualForm.getTf());
		fen.setFenTipoPago(facturaManualForm.getTipoPagoId());
		fen.setFenTotalVenta(facturaManualForm.getMonto());
		fen.setFenTotalVentasExentas(fen.getFenTotalVenta());
		fen.setInvBodBodegas(null);
		fen.setInvProProveedor(null);
		fen.setSecSucSucursal(sesion.getSecPerPersona().getSecSucSucursal());
		encabezadoDAO.save(fen);
		Transaction tx = encabezadoDAO.getSession().beginTransaction();
		
		//Aumentamos en uno el correlativo del repositorio utilizado
		repositorio.setRfcCorrActual(repositorio.getRfcCorrActual() + 1);
		repositorioDAO.merge(repositorio);

		tx.commit();
		encabezadoDAO.getSession().flush();
		encabezadoDAO.getSession().clear();
		
		facturaManualForm.setFenId(fen.getFenId());
		facturaManualForm.setFactura(1);
		//Debe reagresar a la lista de facturas de este tipo, hay que crearlo así
		return view(mapping, facturaManualForm, request, response);
	}
	
	public ActionForward guardar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		FacturaManualForm facturaManualForm = (FacturaManualForm) form;// TODO Auto-generated method stub
		CtrRfcRepositorioFacturasDAO repositorioDAO = new CtrRfcRepositorioFacturasDAO(getSessionHibernate(request));
		SecIseInicioSesionDAO sesionDAO = new SecIseInicioSesionDAO(getSessionHibernate(request));
		SecIseInicioSesion sesion = sesionDAO.findById(facturaManualForm.getUsuarioConectado().getNombreUsuario());
		if(validarDocumento(facturaManualForm, request, response)){
			return lista(mapping, facturaManualForm, request, response);
		}
		FacFusFacturaUsoDAO fusoDao = new FacFusFacturaUsoDAO(getSessionHibernate(request));
		//9 es entrada manual
		FacFusFacturaUso fuso = fusoDao.findById(9);
		facturaManualForm.setFusId(fuso.getFusId());
		facturaManualForm.setFusNombre(fuso.getFusNombre());
		
		FacFenFacturaEncabezado fen = new FacFenFacturaEncabezado();
		fen.setAudFechaCreacion(new Date());
		fen.setAudFechaModificacion(new Date());
		fen.setAudUsuarioCreacion(sesion.getIseNombreUsuario());
		fen.setAudUsuarioModificacion(sesion.getIseNombreUsuario());
		fen.setConRimRetencionImpuesto(null);
		fen.setCtaAscAsociado(null);
		CtrEstEstadoDAO estadoDAO = new CtrEstEstadoDAO(getSessionHibernate(request));
		//estado 1 es impresa, aunque la compra no se imprime, 
		//este es el estado que indica su ingreso oficialmente
		CtrEstEstado estado = estadoDAO.findById(1);
		fen.setCtrEstEstado(estado);
		fen.setFacCliCliente(null);
		fen.setFacFusFacturaUso(fuso);
		fen.setFenCancelada(facturaManualForm.getTipoPagoId());
		fen.setFenDescripcion(facturaManualForm.getDescripcion());
		SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
		try {
			fen.setFenFechaFactura(sdf.parse(facturaManualForm.getFenFechaFactura()));
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		FacFenFacturaEncabezadoDAO encabezadoDAO = new FacFenFacturaEncabezadoDAO(getSessionHibernate(request));
		fen.setFenId(encabezadoDAO.nextId());
		fen.setFenIvaRetenido(0.0);
		fen.setFenNumeroFactura(facturaManualForm.getFenNumeroFactura());
		fen.setFenSerieFactura(facturaManualForm.getFenSerieFactura());
		fen.setFenTipoFactura("CR");
		fen.setFenTipoPago(facturaManualForm.getTipoPagoId());
		fen.setFenTotalVenta(facturaManualForm.getMonto());
		fen.setFenTotalVentasExentas(fen.getFenTotalVenta());
		fen.setInvBodBodegas(null);
		InvProProveedorDAO proveedorDAO = new InvProProveedorDAO(getSessionHibernate(request));
		InvProProveedor proveedor = proveedorDAO.findById(Integer.valueOf(facturaManualForm.getCodigo()));
		fen.setInvProProveedor(proveedor);
		fen.setSecSucSucursal(sesion.getSecPerPersona().getSecSucSucursal());
		encabezadoDAO.save(fen);
		Transaction tx = encabezadoDAO.getSession().beginTransaction();
		
		tx.commit();
		encabezadoDAO.getSession().flush();
		encabezadoDAO.getSession().clear();
		
		//Debe reagresar a la lista de facturas de este tipo, hay que crearlo así
		return lista(mapping, facturaManualForm, request, response);
	}

	private boolean validarDocumento(FacturaManualForm manualForm, 
			HttpServletRequest request, HttpServletResponse response) {
		ActionErrors errors = new ActionErrors();
		boolean b = false;
		if(manualForm.getDescripcion()==null || manualForm.getDescripcion().trim().equals("")){
			mensajes2("error.facturaManual.noDescripcion", manualForm, request, response, errors);
			b = true;
		}
		if(manualForm.getMonto() <= 0.0){
			mensajes2("error.facturaManual.montoNegativo", manualForm, request, response, errors);
			b = true;
		}
		if(manualForm.getFenFechaFactura()== null || manualForm.getFenFechaFactura().trim().equals("")){
			mensajes2("error.facturaManual.fechaNula", manualForm, request, response, errors);
			b = true;
		}
		if(manualForm.getCodigo() == null || manualForm.getCodigo().trim().equals("")){
			mensajes2("error.facturaManual.noCodigo", manualForm, request, response, errors);
			b = true;
		}
		if(manualForm.getAck().equals("c")){
			if(manualForm.getFenSerieFactura() == null || manualForm.getFenSerieFactura().trim().equals("")){
				mensajes2("error.facturaManual.noSerie", manualForm, request, response, errors);
				b = true;
			}
			if(manualForm.getFenNumeroFactura() == null || manualForm.getFenNumeroFactura().trim().equals("")){
				mensajes2("error.facturaManual.noCorrelativo", manualForm, request, response, errors);
				b = true;
			}
		}
		return b;
	}
	
	public ActionForward ventas(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		FacturaManualForm manualForm = (FacturaManualForm)form;

		FacFenFacturaEncabezadoDAO encabezadoDAO = new FacFenFacturaEncabezadoDAO(getSessionHibernate(request));
		//fusId 6 es para facturas de venta
		List lst = encabezadoDAO.findByFusId(6);
		
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);//, ExportType.PDF);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
        	//---- exporta la tabla
            export(tableFacade,request);
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
		request.setAttribute("form", manualForm);
		request.setAttribute(Constantes.ACCION_KEY, "/facturaManual");
		return mapping.findForward("ventas");
		 
	}
	
	public ActionForward compras(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		FacturaManualForm manualForm = (FacturaManualForm)form;

		FacFenFacturaEncabezadoDAO encabezadoDAO = new FacFenFacturaEncabezadoDAO(getSessionHibernate(request));
		//fusId 9 es para facturas de compra
		List lst = encabezadoDAO.findByFusId(9);
		
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);//, ExportType.PDF);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if (limit.isExported()) {
        	//---- exporta la tabla
            export2(tableFacade,request);
            return null; 
        } else {
        	//---- genera el html de la tabla para ser mostrada
            String html = html2(tableFacade, request);
            request.setAttribute(Constantes.LISTA_KEY, html);
        }
        //----- Variables de configuracion
		request.setAttribute("form", manualForm);
		request.setAttribute(Constantes.ACCION_KEY, "/facturaManual");
		return mapping.findForward("compras");
		 
	}
	
	//---- Funcion que genera el html de la tabla del jmesa
	private String html(final TableFacade tableFacade, final HttpServletRequest request) {
		tableFacade.setColumnProperties("fenSerieFactura","fenNumeroFactura",
				"fenFechaFactura","fenTotalVenta","facCliCliente.cliCodigo");
		Table table = tableFacade.getTable();
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.facturaManual.captionV");
		
		Row row = table.getRow();
		
		Column nombreColumna = row.getColumn("fenSerieFactura");
		nombreColumna.setTitleKey("tbl.facturaManual.fenSerieFactura");
		
		nombreColumna = row.getColumn("fenNumeroFactura");
		nombreColumna.setTitleKey("tbl.facturaManual.fenNumeroFactura");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				FacFenFacturaEncabezado encabezado = (FacFenFacturaEncabezado)item;
				HtmlBuilder html = new HtmlBuilder();
				String link = tableFacade.getWebContext().getContextPath();
				link += "/facturacion/facturaManual.do?fenId="+encabezado.getFenId().toString()+"&accion=view";
				html.a().href().quote().append(link).quote().close();
				html.append(value);
				html.aEnd();
				return html.toString();
			}
		});
		
		nombreColumna = row.getColumn("fenFechaFactura");
		nombreColumna.setTitleKey("tbl.facturaManual.fenFechaFactura");
		nombreColumna.getCellRenderer().setCellEditor(new DateCellEditor("dd-MMM-yyyy"));
		
		nombreColumna = row.getColumn("fenTotalVenta");
		nombreColumna.setTitleKey("tbl.facturaManual.fenTotalVenta");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				FacFenFacturaEncabezado encabezado = (FacFenFacturaEncabezado)item;
				String total = Format.formatDinero(encabezado.getFenTotalVenta());
				return total;
			}
		});
		
		nombreColumna = row.getColumn("facCliCliente.cliCodigo");
		nombreColumna.setTitleKey("tbl.facturaManual.cliCodigo");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){
			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				FacFenFacturaEncabezado encabezado = (FacFenFacturaEncabezado)item;
				FacCliClienteDAO clienteDAO = new FacCliClienteDAO(getSessionHibernate(request));
				FacCliCliente cliente = clienteDAO.findById(encabezado.getFacCliCliente().getCliCodigo());
				return cliente.getCliCodigo() + " - " + cliente.getCliNombre();
			}
		});
		
		return tableFacade.render();
	}
	
	//---- Funcion que genera los exports, el formato que tendran
	 private void export(final TableFacade tableFacade,final HttpServletRequest request) {
	 	tableFacade.setColumnProperties("fenSerieFactura","fenNumeroFactura",
				"fenFechaFactura","fenTotalVenta","facCliCliente.cliCodigo");
		Table table = tableFacade.getTable();
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.facturaManual.captionV");
		
		Row row = table.getRow();
		
		Column nombreColumna = row.getColumn("fenSerieFactura");
		nombreColumna.setTitleKey("tbl.facturaManual.fenSerieFactura");
		
		nombreColumna = row.getColumn("fenNumeroFactura");
		nombreColumna.setTitleKey("tbl.facturaManual.fenNumeroFactura");
		
		nombreColumna = row.getColumn("fenFechaFactura");
		nombreColumna.setTitleKey("tbl.facturaManual.fenFechaFactura");
		nombreColumna.getCellRenderer().setCellEditor(new DateCellEditor("dd-MMM-yyyy"));
		
		nombreColumna = row.getColumn("fenTotalVenta");
		nombreColumna.setTitleKey("tbl.facturaManual.fenTotalVenta");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				FacFenFacturaEncabezado encabezado = (FacFenFacturaEncabezado)item;
				String total = Format.formatDinero(encabezado.getFenTotalVenta());
				return total;
			}
		});
		
		nombreColumna = row.getColumn("facCliCliente.cliCodigo");
		nombreColumna.setTitleKey("tbl.facturaManual.cliCodigo");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){
			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				FacFenFacturaEncabezado encabezado = (FacFenFacturaEncabezado)item;
				FacCliClienteDAO clienteDAO = new FacCliClienteDAO(getSessionHibernate(request));
				FacCliCliente cliente = clienteDAO.findById(encabezado.getFacCliCliente().getCliCodigo());
				return cliente.getCliCodigo() + " - " + cliente.getCliNombre();
			}
		});
		tableFacade.render();
	}
	 
	//---- Funcion que genera el html de la tabla del jmesa
	private String html2(final TableFacade tableFacade, final HttpServletRequest request) {
		tableFacade.setColumnProperties("fenSerieFactura","fenNumeroFactura",
				"fenFechaFactura","fenTotalVenta","invProProveedor.proId");
		Table table = tableFacade.getTable();
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.facturaManual.captionC");
		
		Row row = table.getRow();
		
		Column nombreColumna = row.getColumn("fenSerieFactura");
		nombreColumna.setTitleKey("tbl.facturaManual.fenSerieFactura");
		
		nombreColumna = row.getColumn("fenNumeroFactura");
		nombreColumna.setTitleKey("tbl.facturaManual.fenNumeroFactura");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				FacFenFacturaEncabezado encabezado = (FacFenFacturaEncabezado)item;
				HtmlBuilder html = new HtmlBuilder();
				String link = tableFacade.getWebContext().getContextPath();
				link += "/facturacion/facturaManual.do?fenId="+encabezado.getFenId().toString()+"&accion=view";
				html.a().href().quote().append(link).quote().close();
				html.append(value);
				html.aEnd();
				return html.toString();
			}
		});
		
		nombreColumna = row.getColumn("fenFechaFactura");
		nombreColumna.setTitleKey("tbl.facturaManual.fenFechaFactura");
		nombreColumna.getCellRenderer().setCellEditor(new DateCellEditor("dd-MMM-yyyy"));
		
		nombreColumna = row.getColumn("fenTotalVenta");
		nombreColumna.setTitleKey("tbl.facturaManual.fenTotalVenta");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				FacFenFacturaEncabezado encabezado = (FacFenFacturaEncabezado)item;
				String total = Format.formatDinero(encabezado.getFenTotalVenta());
				return total;
			}
		});
		
		nombreColumna = row.getColumn("invProProveedor.proId");
		nombreColumna.setTitleKey("tbl.facturaManual.proId");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){
			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				FacFenFacturaEncabezado encabezado = (FacFenFacturaEncabezado)item;
				InvProProveedorDAO proveedorDAO = new InvProProveedorDAO(getSessionHibernate(request));
				InvProProveedor proveedor = proveedorDAO.findById(encabezado.getInvProProveedor().getProId());
				return proveedor.getProCodigo() + " - " + proveedor.getProNombre(); 
			}
		});
		
		return tableFacade.render();
	}
		
	//---- Funcion que genera los exports, el formato que tendran
	 private void export2(final TableFacade tableFacade,final HttpServletRequest request) {
	 	tableFacade.setColumnProperties("fenSerieFactura","fenNumeroFactura",
				"fenFechaFactura","fenTotalVenta","cliCodigo");
		Table table = tableFacade.getTable();
		//---- Titulo de la tabla
		table.setCaptionKey("tbl.facturaManual.captionC");
		
		Row row = table.getRow();
		
		Column nombreColumna = row.getColumn("fenSerieFactura");
		nombreColumna.setTitleKey("tbl.facturaManual.fenSerieFactura");
		
		nombreColumna = row.getColumn("fenNumeroFactura");
		nombreColumna.setTitleKey("tbl.facturaManual.fenNumeroFactura");
		
		nombreColumna = row.getColumn("fenFechaFactura");
		nombreColumna.setTitleKey("tbl.facturaManual.fenFechaFactura");
		nombreColumna.getCellRenderer().setCellEditor(new DateCellEditor("dd-MMM-yyyy"));
		
		nombreColumna = row.getColumn("fenTotalVenta");
		nombreColumna.setTitleKey("tbl.facturaManual.fenTotalVenta");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){

			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				FacFenFacturaEncabezado encabezado = (FacFenFacturaEncabezado)item;
				String total = Format.formatDinero(encabezado.getFenTotalVenta());
				return total;
			}
		});
		
		nombreColumna = row.getColumn("invProProveedor.proId");
		nombreColumna.setTitleKey("tbl.facturaManual.proId");
		nombreColumna.getCellRenderer().setCellEditor(new CellEditor(){
			public Object getValue(Object item, String property, int rowcount) {
				Object value = new BasicCellEditor().getValue(item, property, rowcount);
				FacFenFacturaEncabezado encabezado = (FacFenFacturaEncabezado)item;
				InvProProveedorDAO proveedorDAO = new InvProProveedorDAO(getSessionHibernate(request));
				InvProProveedor proveedor = proveedorDAO.findById(encabezado.getInvProProveedor().getProId());
				return proveedor.getProCodigo() + " - " + proveedor.getProNombre(); 
			}
		});
		tableFacade.render();
	}

	 public ActionForward buscar(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		FacturaManualForm manualForm = (FacturaManualForm)form;

		FacFenFacturaEncabezadoDAO encabezadoDAO = new FacFenFacturaEncabezadoDAO(getSessionHibernate(request));
		List lst = null;
		if(manualForm.getAck().equals("v")){
			//fusId 6 es para facturas de venta
			lst = encabezadoDAO.findByForm(6,manualForm);
		}else{
			//fusId 5 es para facturas de compra
			lst = encabezadoDAO.findByForm(5,manualForm);
		}
		
		TableFacade tableFacade = new TableFacadeImpl(TABLA_ID, request);
		tableFacade.setItems(lst);
		//---- Genera los tipos de formas con que se podran exportar los datos
		tableFacade.setExportTypes(response, ExportType.CSV, ExportType.JEXCEL);//, ExportType.PDF);
		tableFacade.setStateAttr("restore");
		Limit limit = tableFacade.getLimit();
		if(manualForm.getAck().equals("c")){
			if (limit.isExported()) {
	        	//---- exporta la tabla
	            export2(tableFacade,request);
	            return null; 
	        } else {
	        	//---- genera el html de la tabla para ser mostrada
	            String html = html2(tableFacade, request);
	            request.setAttribute(Constantes.LISTA_KEY, html);
	        }
		}else{
			if (limit.isExported()) {
	        	//---- exporta la tabla
	            export(tableFacade,request);
	            return null; 
	        } else {
	        	//---- genera el html de la tabla para ser mostrada
	            String html = html(tableFacade, request);
	            request.setAttribute(Constantes.LISTA_KEY, html);
	        }
		}
        //----- Variables de configuracion
		request.setAttribute("form", manualForm);
		request.setAttribute(Constantes.ACCION_KEY, "/facturaManual");
		return mapping.findForward("compras");
		 
	} 
	
	 public ActionForward view(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {
		FacturaManualForm facturaManualForm = (FacturaManualForm) form;// TODO Auto-generated method stub
		int error = 1;
		
		if(facturaManualForm.getFactura() == 1){
			request.setAttribute("factura", 1);
			facturaManualForm.setFactura(-1);
		}
		
		FacFenFacturaEncabezadoDAO encabezadoDAO = new FacFenFacturaEncabezadoDAO(getSessionHibernate(request));
		FacFenFacturaEncabezado encabezado = encabezadoDAO.findById(facturaManualForm.getFenId());
		
		FacFusFacturaUsoDAO fusoDao = new FacFusFacturaUsoDAO(getSessionHibernate(request));
		FacFusFacturaUso fuso = fusoDao.findById(encabezado.getFacFusFacturaUso().getFusId());
		if(fuso.getFusId().equals(9)){//9 entrada manual
			InvProProveedorDAO proveedorDAO = new InvProProveedorDAO(getSessionHibernate(request));
			InvProProveedor proveedor = proveedorDAO.findById(encabezado.getInvProProveedor().getProId());
			facturaManualForm.setAck("c");
			facturaManualForm.setCodCli(proveedor.getProCodigo());
			facturaManualForm.setNombreCli(proveedor.getProNombre());
			facturaManualForm.setNumeroContribuyente(proveedor.getProNit());
			facturaManualForm.setRegistroContribuyente(proveedor.getProRegistro());
		}else{
			FacCliClienteDAO clienteDAO = new FacCliClienteDAO(getSessionHibernate(request));
			FacCliCliente cliente = clienteDAO.findById(encabezado.getFacCliCliente().getCliCodigo());
			facturaManualForm.setAck("v");
			facturaManualForm.setCodCli(cliente.getCliCodigo());
			facturaManualForm.setNombreCli(cliente.getCliNombre());
			facturaManualForm.setNumeroContribuyente(cliente.getCliContribuyente());
			facturaManualForm.setRegistroContribuyente(cliente.getCliNumRegistro());
		}
		facturaManualForm.setDescripcion(encabezado.getFenDescripcion());
		facturaManualForm.setFenFechaFactura(encabezado.getFenFechaFactura());
		facturaManualForm.setFenNumeroFactura(encabezado.getFenNumeroFactura());
		facturaManualForm.setFenSerieFactura(encabezado.getFenSerieFactura());
		facturaManualForm.setFusNombre(fuso.getFusNombre());
		facturaManualForm.setMonto(encabezado.getFenTotalVenta());
		facturaManualForm.setTf(encabezado.getFenTipoFactura());
		facturaManualForm.setTipoPagoId(encabezado.getFenTipoPago());
		
		request.setAttribute("form", facturaManualForm);
		request.setAttribute("view", facturaManualForm.getAck());
		request.setAttribute("tf", facturaManualForm.getTf());
		request.setAttribute(Constantes.ACCION_KEY, "/facturaManual");
		return mapping.findForward("lista");
	}
	 
	 public ActionForward cancelar(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {
		FacturaManualForm facturaManualForm = (FacturaManualForm) form;// TODO Auto-generated method stub
		if(facturaManualForm.getAck().equals("v")){
			return ventas(mapping, facturaManualForm, request, response);
		}else{
			return compras(mapping, facturaManualForm, request, response);
		}
	}
	 
	 public ActionForward imprimeFactura(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {
			FacturaManualForm facturaForm = (FacturaManualForm)form;
			//imprimirReporte
			ActionForward forward = null;
			try{
				Date fechaActual = new Date();
				response.setHeader("Cache-Control","private");
				response.setHeader("Pragma", "Cache");
				String pathReporte = "";//ruta reporte
				String nombreReporte = "";
				ExportReport exportar = null;
				ReportFile reporte = new ReportFile();
				ServletContext servletContext = getServlet().getServletContext();
				
				nombreReporte = "factura";
				pathReporte = servletContext
				.getRealPath("/reportesOtros/facturacion/factura/facturaManual.jasper");
				reporte.addParameter("fenId",facturaForm.getFenId());
				reporte.setPathJasper(pathReporte);
				exportar = new ExportReport(reporte);//reporte a exportar
				
				//Conexion jdbc normal
				String jdbcDriver = "com.mysql.jdbc.Driver";
				Class.forName(jdbcDriver);
				String url = HibernateSessionFactory.getConfiguration().getProperty("connection.url");
				String user = HibernateSessionFactory.getConfiguration().getProperty("connection.username");
				String pass = HibernateSessionFactory.getConfiguration().getProperty("connection.password");

				Connection con = DriverManager.getConnection(url, user, pass);

				byte[] repCompilado = exportar.exportReportPDF(con);
				
				response.setContentType("application/pdf");
				response.setContentLength(repCompilado.length);
				response.setHeader("content-Disposition", "attachment;filename="+nombreReporte+"-"+fechaActual.getTime()+".pdf");
				//response.setHeader("content-Disposition", "attachment;filename="+nombreReporte+"-"+rForm.getFechaReporte()+".pdf");
				ServletOutputStream outputStream = response.getOutputStream();
				outputStream.write(repCompilado, 0, repCompilado.length);
				outputStream.flush();
				outputStream.close();
				
			}catch(Exception e){
				e.printStackTrace();
				log.error("Se produjo un error al tratar de generar el reporte...", e);
				System.out.println("Se produjo un error al tratar de generar el reporte...\n");
			}
			return null;
		}
	 
	@Override
	protected Map getKeyMethodMap() {
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("cmd.facturaManual.lista", "lista");
		map.put("cmd.facturaManual.guardar", "guardar");
		map.put("cmd.encabezado.cancelar", "cancelar");
		map.put("cmd.encabezado.imprimir", "imprimir");
		map.put("cmd.facturaManual.cargarListaProv", "cargarListaProv");
		map.put("cmd.facturaManual.cargarListaClientes", "cargarListaClientes");
		map.put("cmd.facturaManual.cargarListaContribuyentes", "cargarListaContribuyentes");
		map.put("cmd.facturaManual.buscar", "buscar");
		map.put("cmd.facturaManual.ventas", "ventas");
		map.put("cmd.facturaManual.compras", "compras");
		map.put("cmd.facturaManual.view","view");
		map.put("cmd.facturaManual.imprimeFactura", "imprimeFactura");
		return map;
	}
}